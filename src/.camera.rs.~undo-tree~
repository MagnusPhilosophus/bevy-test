(undo-tree-save-format-version . 1)
"42631f1bb0eff0282411a76649a4f07e8b2c2f56"
[nil nil nil nil (25817 7956 982066 71000) 0 nil]
([nil nil ((nil rear-nonsticky nil 1 . 2) (#("
" 0 1 (fontified nil)) . -89) (1 . 90) (t 25817 7668 182711 931000)) nil (25817 7956 982064 799000) 0 nil])
([nil nil ((#("
" 0 1 (rear-nonsticky t fontified t)) . 1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1)) nil (25817 7956 982063 206000) 0 nil])
([nil nil ((nil rear-nonsticky nil 88 . 89) (#("
" 0 1 (fontified nil)) . -628) (88 . 629) 38) nil (25817 7956 982060 601000) 0 nil])
([nil nil ((88 . 89) 38) nil (25817 7956 982059 419000) 0 nil])
([nil nil ((nil rear-nonsticky nil 629 . 630) (#("
" 0 1 (fontified nil)) . -3065) (629 . 3066)) nil (25817 7956 982058 336000) 0 nil])
([nil nil ((#("	" 0 1 (fontified nil)) . -3170) (3170 . 3171) (#("	" 0 1 (fontified nil)) . 3170) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (3166 . 3170) (3167 . 3168) (3165 . 3167) (3163 . 3165) (3142 . 3163) (3138 . 3142) (#("i" 0 1 (face font-lock-function-name-face fontified t)) . -3138) (undo-tree-id209 . -1) (undo-tree-id210 . 1) (3137 . 3139) (3133 . 3137) (3128 . 3133) (3126 . 3128) (3111 . 3126) (#("F" 0 1 (face font-lock-type-face fontified t)) . -3111) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) 3112 (3111 . 3112) (#("C" 0 1 (face font-lock-type-face fontified t)) . -3111) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (#("a" 0 1 (face font-lock-type-face fontified t)) . -3112) (undo-tree-id233 . -1) (undo-tree-id234 . 1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) 3113 (3104 . 3113) (#("i" 0 1 (face font-lock-type-face fontified t)) . -3104) (undo-tree-id240 . -1) (3099 . 3105) (3095 . 3099) (#("i" 0 1 (fontified t)) . -3095) (undo-tree-id241 . -1) (3093 . 3096) (3090 . 3093) (#("i" 0 1 (face font-lock-type-face fontified t)) . -3090) (undo-tree-id242 . -1) (3086 . 3091) (3077 . 3086) (#("Fly" 0 3 (face font-lock-type-face fontified t)) . -3077) (undo-tree-id243 . -3) (undo-tree-id244 . -2) (undo-tree-id245 . -3) (undo-tree-id246 . -3) (undo-tree-id247 . -3) (undo-tree-id248 . -3) 3080 (3076 . 3080) (#("c" 0 1 (fontified t)) . -3076) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) 3077 (3076 . 3077) (#(" " 0 1 (fontified t)) . -3076) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) 3077 (3066 . 3077) (#("i" 0 1 (fontified t)) . -3066) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (#("m" 0 1 (fontified t)) . -3067) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (#("p" 0 1 (fontified t)) . -3068) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (#("l" 0 1 (face font-lock-keyword-face fontified t)) . -3069) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) 3070 (3066 . 3070) (#("i" 0 1 (fontified t)) . -3066) (undo-tree-id313 . -1) (3066 . 3067) (3065 . 3066) 3065) nil (25817 7956 982050 71000) 0 nil])
([nil nil ((3188 . 3189) (3177 . 3188) (#("add_s" 0 5 (fontified t)) . -3177) (undo-tree-id189 . -5) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -2) (undo-tree-id193 . -2) (undo-tree-id194 . -3) (undo-tree-id195 . -3) (undo-tree-id196 . -4) (undo-tree-id197 . -4) (undo-tree-id198 . -4) (undo-tree-id199 . -4) (undo-tree-id200 . -5) (undo-tree-id201 . -5) (undo-tree-id202 . -5) (undo-tree-id203 . -5) (undo-tree-id204 . -5) 3182 (3181 . 3182) (3177 . 3181) (3171 . 3177) (3167 . 3171) (3165 . 3167) 3133) nil (25817 7956 981961 665000) 0 nil])
([nil nil ((3171 . 3172) (#("	    " 0 5 (fontified nil)) . 3171) (undo-tree-id170 . 5) (undo-tree-id171 . -5) (undo-tree-id172 . -5) (undo-tree-id173 . -5) (undo-tree-id174 . -5) (undo-tree-id175 . -5) (undo-tree-id176 . -5) (undo-tree-id177 . -5) (undo-tree-id178 . -5) (undo-tree-id179 . -5) (undo-tree-id180 . -5) (undo-tree-id181 . -5) (undo-tree-id182 . -5) (undo-tree-id183 . -5) (undo-tree-id184 . -5) (undo-tree-id185 . -5) (undo-tree-id186 . -5) (#("
" 0 1 (fontified t)) . -3171) (undo-tree-id187 . 1) (undo-tree-id188 . -1) 3170) nil (25817 7956 981951 165000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 3171) (undo-tree-id168 . -1) (undo-tree-id169 . -1)) nil (25817 7956 981941 46000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t)) . -3192) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (#("r" 0 1 (fontified t)) . -3193) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) 3194 (3192 . 3194) (#("c" 0 1 (fontified t)) . -3192) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) 3193 (#("a" 0 1 (fontified t)) . -3193) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) 3194 (3183 . 3194)) nil (25817 7956 981936 899000) 0 nil])
([nil nil ((3223 . 3235) (3212 . 3223) (#("add" 0 3 (fontified t)) . -3212) (undo-tree-id86 . -3) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -2) (undo-tree-id90 . -2) (undo-tree-id91 . -3) (undo-tree-id92 . -3) (undo-tree-id93 . -3) (undo-tree-id94 . -3) (undo-tree-id95 . -3) (undo-tree-id96 . -3) (undo-tree-id97 . -3) 3215 (3213 . 3215) (3211 . 3213) (3205 . 3211) (#(";" 0 1 (fontified t)) . -3205) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) 3206 (3204 . 3206) (3192 . 3204) (#("setu" 0 4 (fontified t)) . -3192) (undo-tree-id102 . -4) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -2) (undo-tree-id106 . -2) (undo-tree-id107 . -3) (undo-tree-id108 . -3) (undo-tree-id109 . -4) (undo-tree-id110 . -4) (undo-tree-id111 . -4) (undo-tree-id112 . -4) (undo-tree-id113 . -4) 3196 (3192 . 3196) (#("S" 0 1 (face font-lock-type-face fontified t)) . -3192) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -3193) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -3194) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (#("u" 0 1 (face font-lock-type-face fontified t)) . -3195) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (#("p" 0 1 (face font-lock-type-face fontified t)) . -3196) (undo-tree-id134 . -1) (undo-tree-id135 . -1) 3197 (3192 . 3197)) nil (25817 7956 981807 426000) 0 nil])
([nil nil ((3192 . 3193)) nil (25817 7956 980600 883000) 0 nil])
([nil nil ((3207 . 3226) (#("initial" 0 7 (fontified t)) . -3207) (undo-tree-id67 . -7) (undo-tree-id68 . -2) (undo-tree-id69 . -2) (undo-tree-id70 . -2) (undo-tree-id71 . -2) (undo-tree-id72 . -4) (undo-tree-id73 . -4) (undo-tree-id74 . -4) (undo-tree-id75 . -6) (undo-tree-id76 . -6) (undo-tree-id77 . -7) (undo-tree-id78 . -7) (undo-tree-id79 . -7) (undo-tree-id80 . -7) (undo-tree-id81 . -7) 3214 (3211 . 3214) (#("i" 0 1 (fontified t)) . -3211) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (3209 . 3212) (#("i" 0 1 (fontified t)) . -3209) (undo-tree-id84 . -1) (3207 . 3210) (#("i" 0 1 (fontified t)) . -3207) (undo-tree-id85 . -1) (3205 . 3208)) nil (25817 7956 980597 907000) 0 nil])
([nil nil ((#("fn grab_cursor(mut window: Query<&mut Window, With<PrimaryWindow>>, keys: Res<Input<KeyCode>>) {
    let mut window = window.get_single_mut().expect(\"Failed to find window\");
    if keys.just_pressed(KeyCode::Tab) {
        toggle_grab_cursor(&mut window);
    }
}

" 0 2 (face font-lock-keyword-face fontified t) 2 3 (fontified t) 3 14 (face font-lock-function-name-face fontified t) 14 15 (fontified t) 15 18 (face font-lock-keyword-face fontified t) 18 19 (fontified t) 19 25 (face font-lock-variable-name-face fontified t) 25 27 (fontified t) 27 32 (face font-lock-type-face fontified t) 32 33 (fontified t) 33 34 (face rust-ampersand-face fontified t) 34 37 (face font-lock-keyword-face fontified t) 37 38 (fontified t) 38 40 (face font-lock-type-face fontified t) 40 44 (face font-lock-type-face fontified t) 44 46 (fontified t) 46 50 (face font-lock-type-face fontified t) 50 51 (fontified t) 51 64 (face font-lock-type-face fontified t) 64 68 (fontified t) 68 72 (face font-lock-variable-name-face fontified t) 72 74 (fontified t) 74 77 (face font-lock-type-face fontified t) 77 78 (fontified t) 78 83 (face font-lock-type-face fontified t) 83 84 (fontified t) 84 91 (face font-lock-type-face fontified t) 91 97 (fontified t) 97 101 (fontified t) 101 104 (face font-lock-keyword-face fontified t) 104 105 (fontified t) 105 108 (face font-lock-keyword-face fontified t) 108 109 (fontified t) 109 115 (face font-lock-variable-name-face fontified t) 115 128 (fontified t) 128 149 (fontified t) 149 172 (face font-lock-string-face fontified t) 172 175 (fontified t) 175 179 (fontified t) 179 181 (face font-lock-keyword-face fontified t) 181 200 (fontified t) 200 207 (face font-lock-type-face fontified t) 207 209 (fontified t) 209 212 (face font-lock-type-face fontified t) 212 243 (fontified t) 243 244 (face rust-ampersand-face fontified t) 244 247 (face font-lock-keyword-face fontified t) 247 265 (fontified t) 265 266 (fontified t)) . 2800) (undo-tree-id0 . -265) (undo-tree-id1 . -265) (undo-tree-id2 . -265) (undo-tree-id3 . -265) (undo-tree-id4 . -265) (undo-tree-id5 . -266) (undo-tree-id6 . -266) (undo-tree-id7 . -266) (undo-tree-id8 . -266) (undo-tree-id9 . -266) (undo-tree-id10 . -266) (undo-tree-id11 . -266) (undo-tree-id12 . -266) (undo-tree-id13 . -266) (undo-tree-id14 . -266) (undo-tree-id15 . -266) (undo-tree-id16 . -266) (undo-tree-id17 . -266) (undo-tree-id18 . -266) (undo-tree-id19 . -266) (undo-tree-id20 . -266) (undo-tree-id21 . -266) (undo-tree-id22 . -266) (undo-tree-id23 . -266) (undo-tree-id24 . -266) (undo-tree-id25 . -265) (undo-tree-id26 . -265) (undo-tree-id27 . -263) (undo-tree-id28 . -263) (undo-tree-id29 . -261) (undo-tree-id30 . -261) (undo-tree-id31 . -255) (undo-tree-id32 . -255) (undo-tree-id33 . -214) (undo-tree-id34 . -214) (undo-tree-id35 . -163) (undo-tree-id36 . -163) (undo-tree-id37 . -66) (undo-tree-id38 . -66) (undo-tree-id39 . -66) (undo-tree-id40 . -66) (undo-tree-id41 . -163) (undo-tree-id42 . -163) (undo-tree-id43 . -66) (undo-tree-id44 . -66) (undo-tree-id45 . -66) (undo-tree-id46 . -265) (undo-tree-id47 . -266) (undo-tree-id48 . -66) (undo-tree-id49 . -265) (undo-tree-id50 . -66) (undo-tree-id51 . -66) (undo-tree-id52 . -163) (undo-tree-id53 . -163) (undo-tree-id54 . -215) (undo-tree-id55 . -215) (undo-tree-id56 . -256) (undo-tree-id57 . -256) (undo-tree-id58 . -262) (undo-tree-id59 . -262) (undo-tree-id60 . -264) (undo-tree-id61 . -264) (undo-tree-id62 . -265) (undo-tree-id63 . -265) (undo-tree-id64 . -265) (undo-tree-id65 . -265) (undo-tree-id66 . -266) 3065) nil (25817 7956 982207 667000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2603 . 2604) (#("
" 0 1 (fontified nil)) . -2869) (2603 . 2870)) nil (25817 7986 513275 331000) 0 nil] [nil nil ((nil rear-nonsticky nil 2681 . 2682) (#("
" 0 1 (fontified nil)) . -2947) (2681 . 2948) 2604) ((#("
fn grab_cursor(mut window: Query<&mut Window, With<PrimaryWindow>>, keys: Res<Input<KeyCode>>) {
    let mut window = window.get_single_mut().expect(\"Failed to find window\");
    if keys.just_pressed(KeyCode::Tab) {
        toggle_grab_cursor(&mut window);
    }
}

" 0 1 (rear-nonsticky nil fontified nil) 1 3 (face font-lock-keyword-face fontified nil) 3 4 (fontified nil) 4 15 (face font-lock-function-name-face fontified nil) 15 16 (fontified nil) 16 19 (face font-lock-keyword-face fontified nil) 19 20 (fontified nil) 20 26 (face font-lock-variable-name-face fontified nil) 26 28 (fontified nil) 28 33 (face font-lock-type-face fontified nil) 33 34 (fontified nil) 34 35 (face rust-ampersand-face fontified nil) 35 38 (face font-lock-keyword-face fontified nil) 38 39 (fontified nil) 39 41 (face font-lock-type-face fontified nil) 41 45 (face font-lock-type-face fontified nil) 45 47 (fontified nil) 47 51 (face font-lock-type-face fontified nil) 51 52 (fontified nil) 52 65 (face font-lock-type-face fontified nil) 65 69 (fontified nil) 69 73 (face font-lock-variable-name-face fontified nil) 73 75 (fontified nil) 75 78 (face font-lock-type-face fontified nil) 78 79 (fontified nil) 79 84 (face font-lock-type-face fontified nil) 84 85 (fontified nil) 85 92 (face font-lock-type-face fontified nil) 92 98 (fontified nil) 98 102 (fontified t) 102 105 (face font-lock-keyword-face fontified t) 105 106 (fontified t) 106 109 (face font-lock-keyword-face fontified t) 109 110 (fontified t) 110 116 (face font-lock-variable-name-face fontified t) 116 129 (fontified t) 129 150 (fontified t) 150 173 (face font-lock-string-face fontified t) 173 176 (fontified t) 176 180 (fontified t) 180 182 (face font-lock-keyword-face fontified t) 182 201 (fontified t) 201 208 (face font-lock-type-face fontified t) 208 210 (fontified t) 210 213 (face font-lock-type-face fontified t) 213 244 (fontified t) 244 245 (face rust-ampersand-face fontified t) 245 248 (face font-lock-keyword-face fontified t) 248 266 (fontified t) 266 267 (fontified nil)) . 2681) (undo-tree-id317 . -266) (undo-tree-id318 . -1) (undo-tree-id319 . -266) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (2947 . 2948) (nil rear-nonsticky t 2681 . 2682)) (25817 7956 980521 534000) 0 nil])
([nil nil ((3281 . 3292) (#("gra" 0 3 (fontified t)) . -3281) (undo-tree-id323 . -3) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -2) (undo-tree-id327 . -2) (undo-tree-id328 . -3) (undo-tree-id329 . -3) (undo-tree-id330 . -3) (undo-tree-id331 . -3) (undo-tree-id332 . -3) 3284 (3281 . 3284) (3279 . 3281) (3268 . 3279) (#("cam" 0 3 (fontified t)) . -3268) (undo-tree-id333 . -3) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -2) (undo-tree-id337 . -2) (undo-tree-id338 . -3) (undo-tree-id339 . -3) (undo-tree-id340 . -3) (undo-tree-id341 . -3) (undo-tree-id342 . -3) (undo-tree-id343 . -3) (undo-tree-id344 . -3) 3271 (3266 . 3271) (3255 . 3266) (#("camera" 0 6 (fontified t)) . -3255) (undo-tree-id345 . -6) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (undo-tree-id348 . -2) (undo-tree-id349 . -2) (undo-tree-id350 . -3) (undo-tree-id351 . -3) (undo-tree-id352 . -4) (undo-tree-id353 . -4) (undo-tree-id354 . -5) (undo-tree-id355 . -5) (undo-tree-id356 . -6) (undo-tree-id357 . -6) (undo-tree-id358 . -6) (undo-tree-id359 . -6) (undo-tree-id360 . -6) (undo-tree-id361 . -6) (undo-tree-id362 . -6) (undo-tree-id363 . -6) (undo-tree-id364 . -6) 3261 (3255 . 3261)) nil (25817 7986 513270 672000) 0 nil])
nil
([nil nil ((3300 . 3301) 2282) nil (25817 7986 513224 756000) 0 nil])
([nil nil ((#("	" 0 1 (fontified nil)) . -3306) (3306 . 3307) (#("	" 0 1 (fontified nil)) . 3306) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (3302 . 3306) (3303 . 3304) (3301 . 3303) (t 25817 7986 516049 977000) 3301) nil (25817 8015 869017 624000) 0 nil])
([nil nil ((#("
    }" 0 1 (fontified t) 1 5 (fontified t) 5 6 (fontified t)) . 3301) (undo-tree-id369 . -1) (undo-tree-id370 . -5) (undo-tree-id371 . -5) (undo-tree-id372 . -5) (undo-tree-id373 . -5) (undo-tree-id374 . -6) (undo-tree-id375 . -6) (undo-tree-id376 . -6) (undo-tree-id377 . -6) (undo-tree-id378 . -5) (undo-tree-id379 . -5) (undo-tree-id380 . -5) (undo-tree-id381 . -5) (undo-tree-id382 . -1) (undo-tree-id383 . -5) (undo-tree-id384 . -5) (undo-tree-id385 . 1) (undo-tree-id386 . -6) (undo-tree-id387 . -5) (undo-tree-id388 . -5) (undo-tree-id389 . -5) (undo-tree-id390 . -6) 3306) nil (25817 8015 869013 346000) 0 nil])
([nil nil ((3227 . 3228)) nil (25817 8015 869000 392000) 0 nil])
([nil nil ((3295 . 3296)) nil (25817 8015 868999 600000) 0 nil])
([nil nil ((#("    " 0 4 (fontified nil)) . -3303) (undo-tree-id365 . -4) (undo-tree-id366 . -4) (undo-tree-id367 . -4) (undo-tree-id368 . -4) (3307 . 3308) (3302 . 3307) 3301) nil (25817 8015 868997 977000) 0 nil])
([nil nil ((3166 . 3174) (#("	" 0 1 (fontified t)) . 3166) (3229 . 3237) (#("	" 0 1 (fontified t)) . 3229) 3303) nil (25817 8015 868982 839000) 0 nil])
([nil nil ((1 . 22) (1 . 2) (t 25817 8015 872717 79000)) nil (25817 8114 553868 290000) 0 nil])
([nil nil ((#("prelude::*;
use bevy::" 0 7 (face font-lock-constant-face fontified t) 7 11 (fontified t) 11 12 (fontified t) 12 15 (face font-lock-keyword-face fontified t) 15 16 (fontified t) 16 20 (face font-lock-constant-face fontified t) 20 22 (fontified t)) . 11) (undo-tree-id395 . 11) (undo-tree-id396 . -10) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (undo-tree-id399 . -2) (undo-tree-id400 . -2) (undo-tree-id401 . -3) (undo-tree-id402 . -3) (undo-tree-id403 . -4) (undo-tree-id404 . -4) (undo-tree-id405 . -5) (undo-tree-id406 . -5) (undo-tree-id407 . -6) (undo-tree-id408 . -6) (undo-tree-id409 . -7) (undo-tree-id410 . -7) (undo-tree-id411 . -7) (undo-tree-id412 . -7) (undo-tree-id413 . -10) (undo-tree-id414 . -10) (undo-tree-id415 . -10) (undo-tree-id416 . -10) (undo-tree-id417 . -10) (undo-tree-id418 . -10) (undo-tree-id419 . -10) (undo-tree-id420 . -10) (undo-tree-id421 . -10) (undo-tree-id422 . -10) (undo-tree-id423 . -10) (58 . 80) 21) nil (25817 8114 553863 511000) 0 nil])
([nil nil ((283 . 284) (#("4" 0 1 (fontified t)) . 283) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (t 25817 8114 559385 209000)) nil (25817 14370 90660 701000) 0 nil])
([nil nil ((288 . 289) (#("4" 0 1 (fontified t)) . 288) (undo-tree-id426 . -1) (undo-tree-id427 . -1)) nil (25817 14370 90657 705000) 0 nil])
([nil nil ((293 . 294) (#("4" 0 1 (fontified t)) . 293) (undo-tree-id424 . -1) (undo-tree-id425 . -1)) nil (25817 14370 90651 804000) 0 nil])
([nil nil ((#("Confined" 0 2 (face font-lock-type-face fontified t) 2 4 (face font-lock-type-face fontified t) 4 8 (face font-lock-type-face fontified t)) . 2461) (undo-tree-id442 . -1) (undo-tree-id443 . -7) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -8) (undo-tree-id452 . -8) (t 25817 14370 92811 204000)) nil (25817 15628 891380 962000) 0 nil])
([nil nil ((2461 . 2468)) nil (25817 15628 891373 528000) 0 nil])
([nil nil ((#("e" 0 1 (face font-lock-type-face fontified t)) . -2465) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (#("u" 0 1 (face font-lock-type-face fontified t)) . -2466) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (#("d" 0 1 (face font-lock-type-face fontified t)) . -2467) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) 2468) nil (25817 15628 891370 933000) 0 nil])
([nil nil ((2465 . 2467)) nil (25817 15628 891349 463000) 0 nil])
([nil nil ((315 . 316) (#("ZERO" 0 4 (fontified t face font-lock-type-face)) . 315) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -4) (undo-tree-id9 . -4) (undo-tree-id10 . -3) (t 25817 58140 167723 64000)) nil (25817 59742 240349 626000) 0 nil])
([nil nil ((apply -27 390 675 undo--wrap-and-run-primitive-undo 390 675 ((666 . 669) (643 . 646) (585 . 588) (571 . 574) (544 . 547) (506 . 509) (472 . 475) (435 . 438) (394 . 397) 646)) (t 25818 13059 869565 219000)) nil (25818 39907 177229 542000) 0 nil])
([nil nil ((#("	" 0 1 (fontified nil)) . -721) (721 . 722) (#("	" 0 1 (fontified nil)) . 721) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (717 . 721) (718 . 719) (716 . 718) (704 . 716) (#("i" 0 1 (fontified t face font-lock-type-face)) . -704) (undo-tree-id149 . -1) (699 . 705) (698 . 699) (#("i" 0 1 (fontified t face font-lock-type-face)) . -698) (undo-tree-id150 . -1) (693 . 699) (#("i" 0 1 (fontified t face font-lock-type-face)) . -693) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (678 . 694) (#("a" 0 1 (fontified t)) . -678) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (#("m" 0 1 (fontified t)) . -679) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (#("m" 0 1 (fontified t)) . -680) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (#("a" 0 1 (fontified t)) . -681) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (#("n" 0 1 (fontified t)) . -682) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (#("d" 0 1 (fontified t)) . -683) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (#("s" 0 1 (fontified t)) . -684) (undo-tree-id177 . -1) (undo-tree-id178 . -1) 685 (680 . 685) (677 . 680) (672 . 677) (t 25818 39907 176589 440000) 662) nil (25818 40073 880561 557000) 0 nil])
([nil nil ((722 . 723)) nil (25818 40073 880507 395000) 0 nil])
([nil nil ((723 . 724)) nil (25818 40073 880506 203000) 0 nil])
([nil nil ((#("    " 0 4 (fontified nil)) . -830) (undo-tree-id54 . -4) (undo-tree-id55 . -4) (undo-tree-id56 . -4) (undo-tree-id57 . -4) (834 . 835) (828 . 834) (826 . 828) (817 . 826) (#("Tran" 0 4 (fontified t face font-lock-type-face)) . -817) (undo-tree-id58 . -4) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -2) (undo-tree-id62 . -2) (undo-tree-id63 . -3) (undo-tree-id64 . -3) (undo-tree-id65 . -4) (undo-tree-id66 . -4) (undo-tree-id67 . -4) 821 (817 . 821) (815 . 817) (806 . 815) (#("trans" 0 5 (fontified t)) . -806) (undo-tree-id68 . -5) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -2) (undo-tree-id72 . -2) (undo-tree-id73 . -3) (undo-tree-id74 . -3) (undo-tree-id75 . -4) (undo-tree-id76 . -4) (undo-tree-id77 . -5) (undo-tree-id78 . -5) (undo-tree-id79 . -5) 811 (806 . 811) (804 . 806) (803 . 804) (#("	" 0 1 (fontified nil)) . -802) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (803 . 804) (800 . 803) (789 . 800) (783 . 789) (782 . 783) (#(";" 0 1 (fontified t)) . -782) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) 783 (776 . 783) (768 . 776) (#(":" 0 1 (fontified t)) . -768) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (#(" " 0 1 (fontified t)) . -769) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) 770 (767 . 770) (#("n" 0 1 (fontified t)) . -767) (undo-tree-id96 . -1) (undo-tree-id97 . -1) 768 (762 . 768) (#("a" 0 1 (fontified t)) . -762) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) 763 (761 . 763) (755 . 761) (753 . 755) (#("B" 0 1 (fontified t face font-lock-type-face)) . -753) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (#("u" 0 1 (fontified t face font-lock-type-face)) . -754) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (#("n" 0 1 (fontified t face font-lock-type-face)) . -755) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (#("d" 0 1 (fontified t face font-lock-type-face)) . -756) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (#("l" 0 1 (fontified t face font-lock-type-face)) . -757) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (#("e" 0 1 (fontified t face font-lock-type-face)) . -758) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) 759 (737 . 759) (#("Direc" 0 5 (fontified t face font-lock-type-face)) . -737) (undo-tree-id128 . -5) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -3) (undo-tree-id132 . -3) (undo-tree-id133 . -4) (undo-tree-id134 . -4) (undo-tree-id135 . -5) (undo-tree-id136 . -5) (undo-tree-id137 . -5) (undo-tree-id138 . -5) (undo-tree-id139 . -5) 742 (738 . 742) (#("i" 0 1 (fontified t face font-lock-type-face)) . -738) (undo-tree-id140 . -1) (737 . 739) (731 . 737) (#("i" 0 1 (fontified t)) . -731) (undo-tree-id141 . -1) (724 . 732) (#("i" 0 1 (fontified t)) . -724) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (719 . 725) (#("i" 0 1 (fontified t)) . -719) (undo-tree-id144 . -1) (718 . 720) (716 . 718) 679) nil (25818 40073 880496 695000) 0 nil])
([nil nil ((864 . 872) (863 . 864) (#("." 0 1 (fontified t)) . -863) (undo-tree-id28 . -1) (undo-tree-id29 . -1) 864 (850 . 864) (#("5" 0 1 (fontified t face font-lock-type-face)) . -850) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) 851 (850 . 851) (#("<" 0 1 (fontified t syntax-table (1))) . -850) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) 851 (845 . 851) (834 . 845) (#("tran" 0 4 (fontified t)) . -834) (undo-tree-id40 . -4) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -2) (undo-tree-id44 . -2) (undo-tree-id45 . -3) (undo-tree-id46 . -3) (undo-tree-id47 . -4) (undo-tree-id48 . -4) (undo-tree-id49 . -4) (undo-tree-id50 . -4) (undo-tree-id51 . -4) (undo-tree-id52 . -4) (undo-tree-id53 . -4) 838 (834 . 838) (828 . 834) 806) nil (25818 40073 879311 373000) 0 nil])
([nil nil ((928 . 939) (922 . 928) (911 . 922) (905 . 911) (#("i" 0 1 (fontified t)) . -905) (undo-tree-id26 . -1) (900 . 906) (884 . 900) (#("i" 0 1 (fontified t)) . -884) (undo-tree-id27 . -1) (879 . 885) (873 . 879) (872 . 873)) nil (25818 40073 879291 545000) 0 nil])
([nil nil ((717 . 725) (#("	" 0 1 (fontified t)) . 717) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (756 . 757) (#("	" 0 1 (fontified t)) . 756) (761 . 768) (784 . 786) (#("	" 0 1 (fontified t)) . 784) (789 . 795) (801 . 809) (#("	" 0 1 (fontified t)) . 801) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (805 . 813) (#("	" 0 1 (fontified t)) . 805) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (829 . 835) (#("	" 0 1 (fontified t)) . 829) (834 . 836) (874 . 881) (#("	" 0 1 (fontified t)) . 874) (879 . 880) (923 . 931) (#("	" 0 1 (fontified t)) . 923) (940 . 948) (#("	" 0 1 (fontified t)) . 940) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (942 . 943) 938) nil (25818 40092 84558 680000) 0 nil])
([nil nil ((nil rear-nonsticky nil 135 . 136) (nil fontified nil 111 . 136) (111 . 136) (t 25818 40073 883258 287000)) nil (25818 40096 204407 901000) 0 nil] [nil nil ((nil rear-nonsticky nil 107 . 108) (nil fontified nil 83 . 108) (83 . 108) 82 (t 25818 40073 883258 287000)) ((#("use std::f32::consts::PI;" 0 3 (fontified nil face font-lock-type-face) 3 4 (fontified nil) 4 7 (fontified nil face font-lock-constant-face) 7 9 (fontified nil) 9 12 (fontified nil face font-lock-type-face) 12 14 (fontified nil) 14 20 (fontified nil face font-lock-constant-face) 20 22 (fontified nil) 22 24 (fontified nil face font-lock-type-face) 24 25 (fontified nil rear-nonsticky nil)) . 83) (undo-tree-id179 . -24) (undo-tree-id180 . -24) (undo-tree-id181 . -24) (nil rear-nonsticky t 107 . 108)) (25818 40092 84314 943000) 0 nil])
([nil nil ((136 . 137) 135) nil (25818 40096 204403 453000) 0 nil])
nil
([nil nil ((1034 . 1045) (1032 . 1034) (t 25818 40096 206591 914000) 1031) nil (25818 40106 508283 666000) 0 nil])
([nil nil ((1033 . 1041) (#("	" 0 1 (fontified t)) . 1033) (undo-tree-id182 . -1) (undo-tree-id183 . -1) 1044) nil (25818 40106 508279 387000) 0 nil])
([nil nil ((nil rear-nonsticky nil 419 . 420) (#("
" 0 1 (fontified nil)) . -611) (415 . 612) 414 (t 25818 40106 506592 63000)) nil (25818 44428 780261 687000) 0 nil])
([nil nil ((apply -21 220 458 undo--wrap-and-run-primitive-undo 220 458 ((430 . 433) (408 . 411) (394 . 397) (367 . 370) (276 . 279) (248 . 251) (224 . 227) 220))) nil (25818 44428 780260 485000) 0 nil])
([nil nil ((526 . 528)) nil (25818 44428 780259 843000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . 528) (undo-tree-id194 . 1) (undo-tree-id195 . -1) (undo-tree-id196 . -1)) nil (25818 44428 780258 972000) 0 nil])
([nil nil ((532 . 534)) nil (25818 44428 780256 748000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . 534) (undo-tree-id191 . 1) (undo-tree-id192 . -1) (undo-tree-id193 . -1)) nil (25818 44428 780255 846000) 0 nil])
([nil nil ((538 . 540)) nil (25818 44428 780253 231000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . 540) (undo-tree-id188 . 1) (undo-tree-id189 . -1) (undo-tree-id190 . -1)) nil (25818 44428 780251 919000) 0 nil])
([nil nil ((561 . 580) (#("X" 0 1 (fontified t face font-lock-type-face)) . -561) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) 562) nil (25818 44428 780247 881000) 0 nil])
([nil nil ((543 . 560) 579) nil (25818 44428 780233 955000) 0 nil])
([nil nil ((528 . 529) (t 25818 44428 783320 669000)) nil (25818 44439 633056 660000) 0 nil])
([nil nil ((535 . 536)) nil (25818 44439 633055 47000) 0 nil])
([nil nil ((542 . 543)) nil (25818 44439 633050 388000) 0 nil])
([nil nil ((#("-" 0 1 (fontified t)) . 533) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (t 25818 44439 633320 819000)) nil (25818 44447 552145 100000) 0 nil])
([nil nil ((538 . 539) (#(" " 0 1 (fontified t)) . -538) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (#("a" 0 1 (fontified t)) . -539) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (#("a" 0 1 (fontified t)) . -540) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (#("a" 0 1 (fontified t)) . -541) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (#("a" 0 1 (fontified t)) . -542) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (#("a" 0 1 (fontified t)) . -543) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (#("a" 0 1 (fontified t)) . -544) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (#("a" 0 1 (fontified t)) . -545) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (#("a" 0 1 (fontified t)) . -546) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (#("a" 0 1 (fontified t)) . -547) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (#("a" 0 1 (fontified t)) . -548) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (#("a" 0 1 (fontified t)) . -549) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (#("a" 0 1 (fontified t)) . -550) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (#("a" 0 1 (fontified t)) . -551) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (#("a" 0 1 (fontified t)) . -552) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) 553 (539 . 553) (t 25818 44447 553320 931000)) nil (25818 44526 204570 630000) 0 nil])
([nil nil ((527 . 528) (#("10" 0 2 (fontified t)) . 527) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -2) (undo-tree-id209 . -2)) nil (25818 44526 204397 155000) 0 nil])
([nil nil ((532 . 533) (#("10" 0 2 (fontified t)) . 532) (undo-tree-id202 . -1) (undo-tree-id203 . -2) (undo-tree-id204 . -2)) nil (25818 44526 204392 777000) 0 nil])
([nil nil ((538 . 539) (#("10" 0 2 (fontified t)) . 538) (undo-tree-id199 . -1) (undo-tree-id200 . -2) (undo-tree-id201 . -2)) nil (25818 44526 204386 735000) 0 nil])
([nil nil ((#("    // commands.spawn((
    //     Camera3dBundle {
    //         transform: Transform::from_xyz(0.0, 0.0, 0.0).looking_at(Vec3::X, Vec3::Y),
    //         ..default()
    //     },
    //     FlyCamera,
    // ));
" 0 4 (fontified t) 4 7 (fontified t face font-lock-comment-delimiter-face) 7 24 (fontified t face font-lock-comment-face) 24 28 (fontified t) 28 31 (fontified t face font-lock-comment-delimiter-face) 31 35 (fontified t face font-lock-comment-delimiter-face) 35 49 (fontified t face font-lock-comment-face) 49 52 (fontified t face font-lock-comment-face) 52 56 (fontified t) 56 59 (fontified t face font-lock-comment-delimiter-face) 59 67 (fontified t face font-lock-comment-delimiter-face) 67 76 (fontified t face font-lock-comment-face) 76 78 (fontified t face font-lock-comment-face) 78 87 (fontified t face font-lock-comment-face) 87 124 (fontified t face font-lock-comment-face) 124 128 (fontified t face font-lock-comment-face) 128 130 (fontified t face font-lock-comment-face) 130 131 (fontified t face font-lock-comment-face) 131 133 (fontified t face font-lock-comment-face) 133 137 (fontified t face font-lock-comment-face) 137 139 (fontified t face font-lock-comment-face) 139 140 (fontified t face font-lock-comment-face) 140 143 (fontified t face font-lock-comment-face) 143 147 (fontified t) 147 150 (fontified t face font-lock-comment-delimiter-face) 150 158 (fontified t face font-lock-comment-delimiter-face) 158 170 (fontified t face font-lock-comment-face) 170 174 (fontified t) 174 177 (fontified t face font-lock-comment-delimiter-face) 177 181 (fontified t face font-lock-comment-delimiter-face) 181 184 (fontified t face font-lock-comment-face) 184 188 (fontified t) 188 191 (fontified t face font-lock-comment-delimiter-face) 191 195 (fontified t face font-lock-comment-delimiter-face) 195 204 (fontified t face font-lock-comment-face) 204 206 (fontified t face font-lock-comment-face) 206 210 (fontified t) 210 213 (fontified t face font-lock-comment-delimiter-face) 213 216 (fontified t face font-lock-comment-face) 216 217 (fontified t face font-lock-comment-face)) . 220) (undo-tree-id361 . -215) (undo-tree-id362 . -215) (undo-tree-id363 . -9) (undo-tree-id364 . -216) (undo-tree-id365 . -9) (undo-tree-id366 . -215) (undo-tree-id367 . -215) (undo-tree-id368 . -217) (undo-tree-id369 . -9) (undo-tree-id370 . -215) (undo-tree-id371 . -215) (undo-tree-id372 . -215) (undo-tree-id373 . -193) (undo-tree-id374 . -193) (undo-tree-id375 . -179) (undo-tree-id376 . -179) (undo-tree-id377 . -152) (undo-tree-id378 . -152) (undo-tree-id379 . -61) (undo-tree-id380 . -61) (undo-tree-id381 . -33) (undo-tree-id382 . -33) (undo-tree-id383 . -9) (undo-tree-id384 . -9) (undo-tree-id385 . -9) (undo-tree-id386 . -217) 229 (t 25818 44526 209988 672000)) nil (25818 44547 490788 829000) 0 nil])
([nil nil ((#("    " 0 4 (fontified nil)) . -243) (undo-tree-id84 . -4) (undo-tree-id85 . -4) (undo-tree-id86 . -4) (undo-tree-id87 . -4) (247 . 248) (242 . 247) (240 . 242) (238 . 240) (229 . 238) (#("Fly" 0 3 (face font-lock-type-face fontified t)) . -229) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -2) (undo-tree-id91 . -2) (undo-tree-id92 . -3) (undo-tree-id93 . -3) (undo-tree-id94 . -3) (undo-tree-id95 . -3) 232 (225 . 232) (#("i" 0 1 (face font-lock-type-face fontified t)) . -225) (undo-tree-id96 . -1) (222 . 226) (213 . 222) (#("Trans" 0 5 (face font-lock-type-face fontified t)) . -213) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -2) (undo-tree-id100 . -2) (undo-tree-id101 . -3) (undo-tree-id102 . -3) (undo-tree-id103 . -4) (undo-tree-id104 . -4) (undo-tree-id105 . -5) (undo-tree-id106 . -5) (undo-tree-id107 . -5) (undo-tree-id108 . -5) 218 (212 . 218) (#("T" 0 1 (face font-lock-type-face fontified t)) . -212) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -213) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (#("a" 0 1 (face font-lock-type-face fontified t)) . -214) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -215) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (#("s" 0 1 (face font-lock-type-face fontified t)) . -216) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) 217 (213 . 217) (#("R" 0 1 (face font-lock-type-face fontified t)) . -213) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (#("a" 0 1 (face font-lock-type-face fontified t)) . -214) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -215) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (#("s" 0 1 (face font-lock-type-face fontified t)) . -216) (undo-tree-id179 . -1) (undo-tree-id180 . -1) 217 (212 . 217) (206 . 212) (#("P" 0 1 (face font-lock-type-face fontified t)) . -206) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) 207 (201 . 207) (#("i" 0 1 (fontified t)) . -201) (undo-tree-id187 . -1) (200 . 202) (#("o" 0 1 (fontified t)) . -200) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (#("t" 0 1 (fontified t)) . -201) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (#("n" 0 1 (fontified t)) . -202) (undo-tree-id194 . -1) (undo-tree-id195 . -1) 203 (199 . 203) (#("i" 0 1 (fontified t)) . -199) (undo-tree-id196 . -1) (196 . 200) (#("m" 0 1 (fontified t)) . -196) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (#("u" 0 1 (fontified t)) . -197) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (#("t" 0 1 (face font-lock-keyword-face fontified t)) . -198) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (#(" " 0 1 (fontified t)) . -199) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (#("Q" 0 1 (face font-lock-type-face fontified t)) . -200) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) 201 (196 . 201) (#(" " 0 1 (fontified t)) . -196) (undo-tree-id261 . -1) (undo-tree-id262 . -1) 197 (195 . 197) (#(" " 0 1 (fontified t)) . -195) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (#("(" 0 1 (fontified t)) . -196) (undo-tree-id265 . -1) (undo-tree-id266 . -1) 197 (178 . 197) (177 . 178) (176 . 177) (t 25819 13571 274805 369000) 159) nil (25819 19158 928973 783000) 0 nil])
([nil nil ((319 . 320) (318 . 319) (310 . 318) (#("pos" 0 3 (fontified t)) . -310) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -2) (undo-tree-id15 . -2) (undo-tree-id16 . -3) (undo-tree-id17 . -3) (undo-tree-id18 . -3) (undo-tree-id19 . -3) (undo-tree-id20 . -3) (undo-tree-id21 . -3) 313 (300 . 313) (#("i" 0 1 (face font-lock-string-face fontified t)) . -300) (undo-tree-id22 . -1) (300 . 301) (#("o" 0 1 (face font-lock-string-face fontified t)) . -300) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (#("n" 0 1 (face font-lock-string-face fontified t)) . -301) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (#(":" 0 1 (face font-lock-string-face fontified t)) . -302) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (#(" " 0 1 (face font-lock-string-face fontified t)) . -303) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) 304 (298 . 304) (#("i" 0 1 (face font-lock-string-face fontified t)) . -298) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (295 . 299) (292 . 295) (#("(" 0 1 (fontified t)) . -292) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) 293 (287 . 293) (#("i" 0 1 (fontified t)) . -287) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (285 . 288) (280 . 285) (273 . 280) (#("g" 0 1 (fontified t)) . -273) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) 274 (272 . 274) (#("i" 0 1 (fontified t)) . -272) (undo-tree-id57 . -1) (267 . 273) (#("i" 0 1 (fontified t)) . -267) (undo-tree-id58 . -1) (undo-tree-id59 . -1) 268 (265 . 268) (#("i" 0 1 (fontified t)) . -265) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (256 . 266) (#("i" 0 1 (face font-lock-variable-name-face fontified t)) . -256) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (255 . 257) (#("t" 0 1 (face font-lock-variable-name-face fontified t)) . -255) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (#("o" 0 1 (face font-lock-variable-name-face fontified t)) . -256) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (#("n" 0 1 (face font-lock-variable-name-face fontified t)) . -257) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) 258 (254 . 258) (#("i" 0 1 (face font-lock-variable-name-face fontified t)) . -254) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (247 . 255) (242 . 247) 178) nil (25819 19158 926521 85000) 0 nil])
([nil nil ((327 . 330) (#("i" 0 1 (fontified t)) . -327) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (318 . 328)) nil (25819 19158 926470 598000) 0 nil])
([nil nil ((306 . 308)) nil (25819 19158 926467 892000) 0 nil])
([nil nil ((3936 . 3941)) nil (25819 19158 926467 203000) 0 nil])
([nil nil ((3938 . 3952) (#("get" 0 3 (fontified t)) . -3938) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -2) (undo-tree-id3 . -2) (undo-tree-id4 . -3) (undo-tree-id5 . -3) (undo-tree-id6 . -3) (undo-tree-id7 . -3) (undo-tree-id8 . -3) (undo-tree-id9 . -3) 3941) nil (25819 19158 926465 221000) 0 nil])
([nil nil ((241 . 242) (3890 . 3907) (3897 . 3903) (3898 . 3908) (3953 . 3967) 3952) nil (25819 19158 926438 761000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -3986) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (#("n" 0 1 (fontified t)) . -3987) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (#("n" 0 1 (fontified t)) . -3988) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (#("n" 0 1 (fontified t)) . -3989) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (#("n" 0 1 (fontified t)) . -3990) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (#("n" 0 1 (fontified t)) . -3991) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (#("n" 0 1 (fontified t)) . -3992) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (#("n" 0 1 (fontified t)) . -3993) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (#("n" 0 1 (fontified t)) . -3994) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (#("n" 0 1 (fontified t)) . -3995) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (#("n" 0 1 (fontified t)) . -3996) (undo-tree-id419 . -1) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (#("n" 0 1 (fontified t)) . -3997) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (#("n" 0 1 (fontified t)) . -3998) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (#("n" 0 1 (fontified t)) . -3999) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (#("n" 0 1 (fontified t)) . -4000) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (#("n" 0 1 (fontified t)) . -4001) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (#("n" 0 1 (fontified t)) . -4002) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (#("n" 0 1 (fontified t)) . -4003) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) 4004 (3986 . 4004) (t 25819 19158 931498 468000)) nil (25819 19192 126988 250000) 0 nil])
([nil nil ((#(", get_camera_pos" 0 2 (fontified t) 2 16 (fontified t)) . 3970) (undo-tree-id481 . -2) (undo-tree-id482 . -2) (undo-tree-id483 . -2) (undo-tree-id484 . -2) (undo-tree-id485 . -2) (undo-tree-id486 . -2) (undo-tree-id487 . -2) (undo-tree-id488 . -2) (undo-tree-id489 . -16) (undo-tree-id490 . -16) (undo-tree-id491 . -16) (undo-tree-id492 . -16) (undo-tree-id493 . -16) (undo-tree-id494 . -16) (undo-tree-id495 . -16) (undo-tree-id496 . -16) (undo-tree-id497 . -16) (undo-tree-id498 . -16) (undo-tree-id499 . -16) (undo-tree-id500 . -16) (undo-tree-id501 . -16) (undo-tree-id502 . -16) (undo-tree-id503 . -16) (undo-tree-id504 . -16) (undo-tree-id505 . -16) (undo-tree-id506 . -16) (undo-tree-id507 . -16) (undo-tree-id508 . -16) (undo-tree-id509 . -16) (undo-tree-id510 . -16) (undo-tree-id511 . -16) (undo-tree-id512 . -16) (undo-tree-id513 . -16) (undo-tree-id514 . -16) (undo-tree-id515 . -16) (undo-tree-id516 . -16) (undo-tree-id517 . -16) (undo-tree-id518 . -16) (undo-tree-id519 . -16) (undo-tree-id520 . -16) (undo-tree-id521 . -16) (undo-tree-id522 . -16) (undo-tree-id523 . -16) (undo-tree-id524 . -16) (undo-tree-id525 . -16) (undo-tree-id526 . -16) (undo-tree-id527 . -16) (undo-tree-id528 . -16) (undo-tree-id529 . -16) (undo-tree-id530 . -16) (undo-tree-id531 . -16) (undo-tree-id532 . -16) (undo-tree-id533 . -16) (undo-tree-id534 . -16) (undo-tree-id535 . -16) (undo-tree-id536 . -16) (undo-tree-id537 . -16) (undo-tree-id538 . -16) (undo-tree-id539 . -16) (undo-tree-id540 . -16) (undo-tree-id541 . -16) (undo-tree-id542 . -16) (undo-tree-id543 . -16) (undo-tree-id544 . -16) (undo-tree-id545 . -16) (undo-tree-id546 . -16) (undo-tree-id547 . -16) (undo-tree-id548 . -16) (undo-tree-id549 . -16) (undo-tree-id550 . -16) (undo-tree-id551 . -16) (undo-tree-id552 . -16) (undo-tree-id553 . -16) (undo-tree-id554 . -16) (undo-tree-id555 . -16) (undo-tree-id556 . -16) (undo-tree-id557 . -16) (undo-tree-id558 . -16) (undo-tree-id559 . -16) (undo-tree-id560 . -16) (undo-tree-id561 . -16) (undo-tree-id562 . -16) (undo-tree-id563 . -16) (undo-tree-id564 . -16) (undo-tree-id565 . -16) (undo-tree-id566 . -16) (undo-tree-id567 . -16) (undo-tree-id568 . -16) (undo-tree-id569 . -16) (undo-tree-id570 . -16) (undo-tree-id571 . -16) (undo-tree-id572 . -16) (undo-tree-id573 . -16) (undo-tree-id574 . -16) (undo-tree-id575 . -16) (undo-tree-id576 . -16) (undo-tree-id577 . -16) (undo-tree-id578 . -15) (undo-tree-id579 . -15) (undo-tree-id580 . -15) (undo-tree-id581 . -15) (undo-tree-id582 . -15) (undo-tree-id583 . -15) (undo-tree-id584 . -15) (undo-tree-id585 . -15) (undo-tree-id586 . -15) (undo-tree-id587 . -15) (undo-tree-id588 . -15) (undo-tree-id589 . -16) (undo-tree-id590 . -16)) nil (25819 19199 485250 197000) 0 nil] [nil nil ((#(", get_camera_pos)" 0 2 (fontified t) 2 16 (fontified t) 16 17 (fontified t)) . 3970) (undo-tree-id267 . 1) (undo-tree-id268 . -2) (undo-tree-id269 . -2) (undo-tree-id270 . -2) (undo-tree-id271 . -2) (undo-tree-id272 . -2) (undo-tree-id273 . -2) (undo-tree-id274 . -2) (undo-tree-id275 . -2) (undo-tree-id276 . -16) (undo-tree-id277 . -16) (undo-tree-id278 . -16) (undo-tree-id279 . -16) (undo-tree-id280 . -16) (undo-tree-id281 . -16) (undo-tree-id282 . -16) (undo-tree-id283 . -16) (undo-tree-id284 . -16) (undo-tree-id285 . -16) (undo-tree-id286 . -16) (undo-tree-id287 . -16) (undo-tree-id288 . -16) (undo-tree-id289 . -16) (undo-tree-id290 . -16) (undo-tree-id291 . -16) (undo-tree-id292 . -16) (undo-tree-id293 . -16) (undo-tree-id294 . -16) (undo-tree-id295 . -16) (undo-tree-id296 . -16) (undo-tree-id297 . -16) (undo-tree-id298 . -16) (undo-tree-id299 . -16) (undo-tree-id300 . -16) (undo-tree-id301 . -16) (undo-tree-id302 . -16) (undo-tree-id303 . -16) (undo-tree-id304 . -16) (undo-tree-id305 . -16) (undo-tree-id306 . -16) (undo-tree-id307 . -16) (undo-tree-id308 . -16) (undo-tree-id309 . -16) (undo-tree-id310 . -16) (undo-tree-id311 . -16) (undo-tree-id312 . -16) (undo-tree-id313 . -16) (undo-tree-id314 . -16) (undo-tree-id315 . -16) (undo-tree-id316 . -16) (undo-tree-id317 . -16) (undo-tree-id318 . -16) (undo-tree-id319 . -16) (undo-tree-id320 . -16) (undo-tree-id321 . -16) (undo-tree-id322 . -16) (undo-tree-id323 . -16) (undo-tree-id324 . -16) (undo-tree-id325 . -16) (undo-tree-id326 . -16) (undo-tree-id327 . -16) (undo-tree-id328 . -16) (undo-tree-id329 . -16) (undo-tree-id330 . -16) (undo-tree-id331 . -16) (undo-tree-id332 . -16) (undo-tree-id333 . -16) (undo-tree-id334 . -16) (undo-tree-id335 . -16) (undo-tree-id336 . -16) (undo-tree-id337 . -16) (undo-tree-id338 . -16) (undo-tree-id339 . -16) (undo-tree-id340 . -16) (undo-tree-id341 . -16) (undo-tree-id342 . -16) (undo-tree-id343 . -16) (undo-tree-id344 . -16) (undo-tree-id345 . -16) (undo-tree-id346 . -16) (undo-tree-id347 . -16) (undo-tree-id348 . -16) (undo-tree-id349 . -16) (undo-tree-id350 . -16) (undo-tree-id351 . -16) (undo-tree-id352 . -16) (undo-tree-id353 . -16) (undo-tree-id354 . -16) (undo-tree-id355 . -16) (undo-tree-id356 . -16) (undo-tree-id357 . -16) (undo-tree-id358 . -16) (undo-tree-id359 . -16) (undo-tree-id360 . -16) (undo-tree-id361 . -16) (undo-tree-id362 . -16) (undo-tree-id363 . -16) (undo-tree-id364 . -16) (undo-tree-id365 . -15) (undo-tree-id366 . -15) (undo-tree-id367 . -15) (undo-tree-id368 . -15) (undo-tree-id369 . -15) (undo-tree-id370 . -15) (undo-tree-id371 . -15) (undo-tree-id372 . -15) (undo-tree-id373 . -15) (undo-tree-id374 . -15) (undo-tree-id375 . -16) (undo-tree-id376 . -17) (undo-tree-id377 . -16)) ((3970 . 3987)) (25819 19192 126638 147000) 0 nil])
([nil nil ((#("fn get_camera_pos(position: Query<&Transform, With<FlyCamera>>) {
    let position = position.single();
    println!(\"position: {:?}\", position.translation);
}

" 0 2 (face font-lock-keyword-face fontified t) 2 3 (fontified t) 3 17 (face font-lock-function-name-face fontified t) 17 18 (fontified t) 18 26 (face font-lock-variable-name-face fontified t) 26 28 (fontified t) 28 33 (face font-lock-type-face fontified t) 33 34 (fontified t) 34 35 (face rust-ampersand-face fontified t) 35 44 (face font-lock-type-face fontified t) 44 46 (fontified t) 46 50 (face font-lock-type-face fontified t) 50 51 (fontified t) 51 60 (face font-lock-type-face fontified t) 60 63 (fontified t) 63 64 (fontified t) 64 65 (fontified t) 65 66 (fontified t) 66 70 (fontified t) 70 73 (face font-lock-keyword-face fontified t) 73 74 (fontified t) 74 82 (face font-lock-variable-name-face fontified t) 82 104 (fontified t) 104 108 (fontified t) 108 116 (face rust-builtin-formatting-macro fontified t) 116 117 (fontified t) 117 128 (face font-lock-string-face fontified t) 128 132 (face rust-string-interpolation fontified t) 132 133 (face font-lock-string-face fontified t) 133 135 (fontified t) 135 157 (fontified t) 157 158 (fontified t) 158 159 (fontified t) 159 160 (fontified t) 160 161 (fontified t)) . 178) (undo-tree-id451 . -160) (undo-tree-id452 . -102) (undo-tree-id453 . -160) (undo-tree-id454 . -102) (undo-tree-id455 . -35) (undo-tree-id456 . -35) (undo-tree-id457 . -101) (undo-tree-id458 . -101) (undo-tree-id459 . -139) (undo-tree-id460 . -139) (undo-tree-id461 . -101) (undo-tree-id462 . -101) (undo-tree-id463 . -35) (undo-tree-id464 . -35) (undo-tree-id465 . -35) (undo-tree-id466 . -160) (undo-tree-id467 . -35) (undo-tree-id468 . -35) (undo-tree-id469 . -101) (undo-tree-id470 . -101) (undo-tree-id471 . -139) (undo-tree-id472 . -139) (undo-tree-id473 . -159) (undo-tree-id474 . -159) (undo-tree-id475 . -160) (undo-tree-id476 . -160) (undo-tree-id477 . -160) (undo-tree-id478 . -160) (undo-tree-id479 . -160) (undo-tree-id480 . -161) 338) nil (25819 19199 485113 502000) 0 nil])
nil
([nil nil (("
                " . 3730) ("
      " . 3754) ("         " . 3762) (",
            " . 3810) 178) nil (25819 19199 485081 450000) 0 nil])
([nil nil ((159 . 163) (t 25819 19199 488165 335000)) nil (25819 19816 322662 115000) 0 nil])
([nil nil ((#("    // commands.spawn(PointLightBundle {
    //     point_light: PointLight {
    //         intensity: 1500.0,
    //         shadows_enabled: true,
    //         ..default()
    //     },
    //     transform: Transform::from_xyz(4.0, 8.0, 4.0),
    //     ..default()
    // });
" 0 4 (fontified t) 4 7 (face font-lock-comment-delimiter-face fontified t) 7 41 (face font-lock-comment-face fontified t) 41 45 (fontified t) 45 52 (face font-lock-comment-delimiter-face fontified t) 52 78 (face font-lock-comment-face fontified t) 78 82 (fontified t) 82 93 (face font-lock-comment-delimiter-face fontified t) 93 112 (face font-lock-comment-face fontified t) 112 116 (fontified t) 116 127 (face font-lock-comment-delimiter-face fontified t) 127 150 (face font-lock-comment-face fontified t) 150 154 (fontified t) 154 165 (face font-lock-comment-delimiter-face fontified t) 165 177 (face font-lock-comment-face fontified t) 177 181 (fontified t) 181 188 (face font-lock-comment-delimiter-face fontified t) 188 191 (face font-lock-comment-face fontified t) 191 195 (fontified t) 195 202 (face font-lock-comment-delimiter-face fontified t) 202 249 (face font-lock-comment-face fontified t) 249 253 (fontified t) 253 260 (face font-lock-comment-delimiter-face fontified t) 260 272 (face font-lock-comment-face fontified t) 272 276 (fontified t) 276 279 (face font-lock-comment-delimiter-face fontified t) 279 283 (face font-lock-comment-face fontified t)) . 457) (undo-tree-id0 . -272) (undo-tree-id1 . -272) (undo-tree-id2 . -272) (undo-tree-id3 . -272) (undo-tree-id4 . -282) 729 (t 25819 37725 327443 906000)) nil (25819 38052 170434 864000) 0 nil])
([nil nil ((314 . 315) (#("5" 0 1 (fontified t)) . 314) (undo-tree-id5 . -1) (t 25820 33918 465217 901000)) nil (25820 36041 429147 997000) 0 nil])
([nil nil ((319 . 320) (#("5" 0 1 (fontified t)) . 319) (undo-tree-id4 . -1)) nil (25820 36041 429146 362000) 0 nil])
([nil nil ((325 . 326) (#("5" 0 1 (fontified t)) . 325) (undo-tree-id3 . -1)) nil (25820 36041 429144 809000) 0 nil])
([nil nil ((#("-" 0 1 (fontified t)) . 373) (undo-tree-id1 . -1) (undo-tree-id2 . -1)) nil (25820 36041 429142 783000) 0 nil])
([nil nil ((373 . 374) (#("2" 0 1 (fontified t)) . 373) (undo-tree-id0 . -1)) nil (25820 36440 13017 68000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . -1807) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) 1808 (1804 . 1808) (#("i" 0 1 (fontified t)) . -1804) (undo-tree-id27 . -1) (1799 . 1805) (t 25820 36041 428561 366000) 1798) nil (25820 36460 980584 477000) 0 nil] [nil nil ((nil rear-nonsticky nil 1847 . 1848) (nil fontified nil 1799 . 1848) (1799 . 1848) 1798 (t 25820 36041 428561 366000)) ((#("window.cursor.grab_mode = CursorGrabMode::Locked;" 0 26 (fontified nil) 26 40 (fontified nil face font-lock-type-face) 40 42 (fontified nil) 42 48 (fontified nil face font-lock-type-face) 48 49 (fontified nil rear-nonsticky nil)) . 1799) (undo-tree-id11 . -48) (undo-tree-id12 . -48) (undo-tree-id13 . -48) (nil rear-nonsticky t 1847 . 1848)) (25820 36440 12743 995000) 0 nil] [nil nil ((#("window.cursor.grab_mode = CursorGrabMode::Locked;" 0 26 (fontified t) 26 40 (fontified t face font-lock-type-face) 40 42 (fontified t) 42 48 (fontified t face font-lock-type-face) 48 49 (fontified t)) . 2588) (undo-tree-id6 . -48) (undo-tree-id7 . -5) (undo-tree-id8 . -5) (undo-tree-id9 . -49) (undo-tree-id10 . -49) (t 25820 36041 428561 366000)) ((2588 . 2637)) (25820 36426 549823 355000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1855 . 1856) (nil fontified nil 1807 . 1856) (1807 . 1856) 1806) nil (25820 36460 980578 546000) 0 nil])
nil
nil
([nil nil ((1855 . 1857) (#(";" 0 1 (fontified t rear-nonsticky t)) . -1855) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) 1856) nil (25820 36460 980576 955000) 0 nil])
([nil nil ((1831 . 1832)) nil (25820 36460 980572 735000) 0 nil])
([nil nil ((1831 . 1832) (#("=" 0 1 (fontified t)) . 1831) (undo-tree-id16 . -1)) nil (25820 36460 980571 773000) 0 nil])
([nil nil ((1865 . 1868) (#(" " 0 1 (fontified t)) . -1865) (undo-tree-id14 . -1) (undo-tree-id15 . -1) 1866 (1858 . 1866)) nil (25820 36460 980568 470000) 0 nil])
([nil nil ((1858 . 1864) (1859 . 1861) (1866 . 1870) 1867) nil (25820 36460 980556 28000) 0 nil])
([nil nil ((#("    if window.cursor.grab_mode != CursorGrabMode::Locked {
        return;
    }
" 0 4 (fontified t) 4 6 (fontified t face font-lock-keyword-face) 6 7 (fontified t) 7 31 (fontified t) 31 32 (fontified t) 32 34 (fontified t) 34 48 (fontified t face font-lock-type-face) 48 50 (fontified t) 50 56 (fontified t face font-lock-type-face) 56 58 (fontified t) 58 64 (fontified t) 64 65 (fontified t) 65 67 (fontified t) 67 73 (fontified t face font-lock-keyword-face) 73 74 (fontified t) 74 78 (fontified t) 78 80 (fontified t) 80 81 (fontified t)) . 1800) (undo-tree-id28 . -75) (undo-tree-id29 . -80) (undo-tree-id30 . -7) (undo-tree-id31 . -7) (undo-tree-id32 . -7) (undo-tree-id33 . -7) (undo-tree-id34 . 1) (undo-tree-id35 . -7) (undo-tree-id36 . -56) (undo-tree-id37 . -56) (undo-tree-id38 . -79) (undo-tree-id39 . -79) (undo-tree-id40 . -79) (undo-tree-id41 . -79) (undo-tree-id42 . -79) (undo-tree-id43 . -79) (undo-tree-id44 . -79) (undo-tree-id45 . -79) (undo-tree-id46 . -79) (undo-tree-id47 . -79) (undo-tree-id48 . -79) (undo-tree-id49 . -79) (undo-tree-id50 . -79) (undo-tree-id51 . -79) (undo-tree-id52 . -79) (undo-tree-id53 . -79) (undo-tree-id54 . -79) (undo-tree-id55 . -81) (undo-tree-id56 . -81) (undo-tree-id57 . -75) (undo-tree-id58 . -75) (undo-tree-id59 . -59) (undo-tree-id60 . -59) (undo-tree-id61 . -75) (undo-tree-id62 . -59) (undo-tree-id63 . -59) (undo-tree-id64 . -75) (undo-tree-id65 . -75) (undo-tree-id66 . -79) (undo-tree-id67 . -75) (undo-tree-id68 . -75) (undo-tree-id69 . -75) (undo-tree-id70 . -81) 1875 (t 25820 36460 981896 708000)) nil (25820 36478 410444 451000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1875 . 1876) (#("
" 0 1 (fontified nil)) . -1952) (1871 . 1953) 1800) nil (25820 36478 410406 9000) 0 nil])
([nil nil ((1102 . 1122) (1097 . 1102) (t 25820 52343 771864 900000) 1063) nil (25822 34986 939918 409000) 0 nil])
([nil nil ((1552 . 1558) (#("=" 0 1 (fontified t)) . -1552) (undo-tree-id16 . -1) (undo-tree-id17 . -1) 1553 (1552 . 1553) (1533 . 1552) (1526 . 1533) (#("Key" 0 3 (fontified t face font-lock-type-face)) . -1526) (undo-tree-id18 . -3) (undo-tree-id19 . -2) (undo-tree-id20 . -3) (undo-tree-id21 . -3) 1529 (1526 . 1529) (1520 . 1526) 1489) nil (25822 34986 939916 376000) 0 nil])
([nil nil ((1682 . 1684) (#("d" 0 1 (fontified t)) . -1682) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) 1683 (1679 . 1683) (#("2" 0 1 (fontified t)) . -1679) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) 1680 (#("." 0 1 (fontified t)) . -1680) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (#("0" 0 1 (fontified t)) . -1681) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) 1682) nil (25822 34986 939909 753000) 0 nil])
([nil nil ((1521 . 1529) (#("	" 0 1 (fontified t)) . 1521) 1683) nil (25822 34986 939881 721000) 0 nil])
([nil nil ((1549 . 1553) (t 25822 34986 940570 234000)) nil (25822 34996 375086 789000) 0 nil])
([nil nil ((#("*" 0 1 (fontified t)) . 1563) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (t 25822 34996 377237 69000)) nil (25822 35005 729968 563000) 0 nil])
([nil nil ((1567 . 1569)) nil (25822 35005 729956 351000) 0 nil])
([nil nil ((1565 . 1577) (#("1" 0 1 (fontified t)) . -1565) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (#("0" 0 1 (fontified t)) . -1566) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (#("." 0 1 (fontified t)) . -1567) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (#("0" 0 1 (fontified t)) . -1568) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) 1569 (t 25822 35005 733903 920000)) nil (25826 9298 138371 184000) 0 nil])
([nil nil ((3556 . 3557) (#("/" 0 1 (face font-lock-comment-delimiter-face fontified t)) . -3556) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (#("*" 0 1 (face font-lock-comment-face fontified t)) . -3557) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) 3558 (3555 . 3558) (t 25826 9321 115570 899000)) nil (25826 9492 229744 435000) 0 nil] [nil nil ((apply -24 224 524 undo--wrap-and-run-primitive-undo 224 524 ((473 . 476) (451 . 454) (437 . 440) (410 . 413) (343 . 346) (280 . 283) (252 . 255) (228 . 231) 456))) ((apply 24 224 500 undo--wrap-and-run-primitive-undo 224 500 ((#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 228) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 252) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 280) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 343) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 410) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 437) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 451) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 473) 469))) (25826 9292 665868 867000) 0 nil])
([nil nil ((3569 . 3571)) nil (25826 9492 229721 71000) 0 nil])
nil
([nil nil ((#("*" 0 1 (face font-lock-comment-face fontified t)) . 3569) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (t 25826 9492 232240 799000)) nil (25826 9535 502654 985000) 0 nil])
([nil nil ((#("/" 0 1 (face font-lock-comment-face fontified t)) . 3569) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1)) nil (25826 9535 502653 292000) 0 nil])
([nil nil ((3571 . 3572) (#("\\" 0 1 (face font-lock-comment-face fontified t)) . -3571) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) 3572 (3570 . 3572)) nil (25826 9535 502647 581000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 3572) (undo-tree-id10 . 1) 3571) nil (25826 9535 502642 632000) 0 nil])
([nil nil ((3628 . 3630) (t 25826 9535 508908 299000)) nil (25826 9554 786614 527000) 0 nil])
([nil nil ((3655 . 3657)) nil (25826 9554 786613 365000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 3657) (undo-tree-id27 . 1) 3656) nil (25826 9554 786610 850000) 0 nil])
([nil nil ((#("    commands.spawn(DirectionalLightBundle {
        directional_light: DirectionalLight {
            shadows_enabled: true,
            ..default()
        },
        transform: Transform {
            translation: Vec3::new(0.0, 20.0, 0.0),
            rotation: Quat::from_rotation_x(-PI / 4.0),
            ..default()
        },
        ..default()
    });
" 0 19 (fontified t) 19 41 (face font-lock-type-face fontified t) 41 52 (fontified t) 52 69 (face font-lock-variable-name-face fontified t) 69 71 (fontified t) 71 87 (face font-lock-type-face fontified t) 87 90 (fontified t) 90 102 (fontified t) 102 117 (face font-lock-variable-name-face fontified t) 117 119 (fontified t) 119 123 (face font-lock-keyword-face fontified t) 123 125 (fontified t) 125 168 (fontified t) 168 177 (face font-lock-variable-name-face fontified t) 177 179 (fontified t) 179 188 (face font-lock-type-face fontified t) 188 191 (fontified t) 191 203 (fontified t) 203 214 (face font-lock-variable-name-face fontified t) 214 216 (fontified t) 216 220 (face font-lock-type-face fontified t) 220 243 (fontified t) 243 255 (fontified t) 255 263 (face font-lock-variable-name-face fontified t) 263 265 (fontified t) 265 269 (face font-lock-type-face fontified t) 269 288 (fontified t) 288 290 (face font-lock-type-face fontified t) 290 323 (fontified t) 323 334 (fontified t) 334 354 (fontified t) 354 362 (fontified t)) . 456) (undo-tree-id28 . -243) (undo-tree-id29 . -361) (undo-tree-id30 . -18) (undo-tree-id31 . -361) (undo-tree-id32 . -361) (undo-tree-id33 . -18) (undo-tree-id34 . -18) (undo-tree-id35 . -361) 817 (t 25826 9554 788908 664000)) nil (25826 9646 999697 237000) 0 nil])
([nil nil ((#("use std::f32::consts::PI;
" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 7 (face font-lock-constant-face fontified t) 7 9 (fontified t) 9 12 (face font-lock-type-face fontified t) 12 14 (fontified t) 14 20 (face font-lock-constant-face fontified t) 20 22 (fontified t) 22 24 (face font-lock-type-face fontified t) 24 26 (fontified t)) . 111) (undo-tree-id36 . -19) (undo-tree-id37 . -25) (undo-tree-id38 . -19) (undo-tree-id39 . -19) 130 (t 25826 9647 2243 712000)) nil (25826 9721 493286 615000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . 10) (t 25826 9721 495578 481000)) nil (25826 9961 130753 467000) 0 nil])
([nil nil ((10 . 11)) nil (25826 9961 130750 592000) 0 nil])
([nil nil ((1 . 2) 36 (t 25826 9961 132249 681000)) nil (25826 10079 656145 504000) 0 nil])
([nil nil ((nil rear-nonsticky nil 20 . 21) (nil fontified nil 1 . 21) (1 . 21)) nil (25826 10098 227559 969000) 0 nil])
([nil nil ((#("/" 0 1 (face font-lock-comment-delimiter-face fontified t)) . 3188) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (t 25826 10079 655585 229000)) nil (25826 10357 372265 237000) 0 nil] [nil nil ((#("#![allow(dead_code)]
" 0 19 (face font-lock-preprocessor-face fontified t) 19 20 (face font-lock-preprocessor-face rear-nonsticky t fontified t) 20 21 (fontified t)) . 1) (undo-tree-id40 . -20) (undo-tree-id41 . 1) (undo-tree-id42 . -19) (undo-tree-id43 . -19) (undo-tree-id44 . -19) (undo-tree-id45 . -19) (undo-tree-id46 . -19) (undo-tree-id47 . -19) (undo-tree-id48 . -19) (undo-tree-id49 . -19) (undo-tree-id50 . -19) (undo-tree-id51 . -19) (undo-tree-id52 . -19) (undo-tree-id53 . -19) (undo-tree-id54 . -19) (undo-tree-id55 . -19) (undo-tree-id56 . -19) (undo-tree-id57 . -19) (undo-tree-id58 . -19) (undo-tree-id59 . -19) (undo-tree-id60 . -19) (undo-tree-id61 . -21) (undo-tree-id62 . -21) (undo-tree-id63 . -21) (t 25826 10079 655585 229000)) ((1 . 22)) (25826 10098 227305 451000) 0 nil])
([nil nil ((#("*" 0 1 (fontified t)) . 3188) (undo-tree-id87 . -1) (undo-tree-id88 . -1)) nil (25826 10357 372263 884000) 0 nil])
nil
([nil nil ((#("*" 0 1 (fontified t)) . 3201) (undo-tree-id85 . -1) (undo-tree-id86 . -1)) nil (25826 10357 372262 712000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . 3201) (undo-tree-id83 . -1) (undo-tree-id84 . -1)) nil (25826 10357 372261 550000) 0 nil])
([nil nil ((3201 . 3202)) nil (25826 10357 372260 418000) 0 nil])
([nil nil ((#("/" 0 1 (face font-lock-comment-delimiter-face fontified t)) . 3258) (undo-tree-id81 . -1) (undo-tree-id82 . -1)) nil (25826 10357 372259 977000) 0 nil])
([nil nil ((#("*" 0 1 (fontified t)) . 3258) (undo-tree-id79 . -1) (undo-tree-id80 . -1)) nil (25826 10357 372258 735000) 0 nil])
([nil nil ((#("*" 0 1 (fontified t)) . 3283) (undo-tree-id77 . -1) (undo-tree-id78 . -1)) nil (25826 10357 372257 593000) 0 nil])
([nil nil ((3283 . 3284) (#("/" 0 1 (fontified t)) . 3283) (undo-tree-id76 . -1)) nil (25826 10357 372256 420000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3306 . 3307) (#("
" 0 1 (fontified nil)) . -3443) (3298 . 3444) 3283) nil (25826 10357 372255 368000) 0 nil])
([nil nil ((apply -6 3154 3375 undo--wrap-and-run-primitive-undo 3154 3375 ((3235 . 3238) (3162 . 3165) 3299))) nil (25826 10357 372254 727000) 0 nil])
([nil nil ((#("(setup_camera, " 0 1 (fontified t) 1 13 (fontified t) 13 15 (fontified t)) . 3338) (undo-tree-id74 . -14) (undo-tree-id75 . -15)) nil (25826 10357 372254 286000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t)) . 3357) (undo-tree-id72 . -1) (undo-tree-id73 . -1)) nil (25826 10357 372252 984000) 0 nil])
([nil nil ((#("(camera_move, camera_look, " 0 1 (fontified t) 1 26 (fontified t) 26 27 (fontified t)) . 3392) (undo-tree-id66 . -26) (undo-tree-id67 . -19) (undo-tree-id68 . -19) (undo-tree-id69 . -18) (undo-tree-id70 . -18) (undo-tree-id71 . -27)) nil (25826 10357 372250 590000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t)) . 3403) (undo-tree-id64 . -1) (undo-tree-id65 . -1)) nil (25826 10357 372245 59000) 0 nil])
([nil nil ((1 . 9) (#("#![allow" 0 8 (face font-lock-preprocessor-face fontified t)) . 1) (t 25826 10357 375590 431000)) nil (25826 14404 851310 855000) 0 nil])
([nil nil ((apply -6 3305 3418 undo--wrap-and-run-primitive-undo 3305 3418 ((3370 . 3373) (3313 . 3316) 3406))) nil (25826 14404 851308 741000) 0 nil])
([nil nil ((apply 6 3154 3299 undo--wrap-and-run-primitive-undo 3154 3299 ((#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -3232) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -3162) 3305))) nil (25826 14404 851305 505000) 0 nil])
([nil nil ((4 . 5) (#("u" 0 1 (face font-lock-preprocessor-face fontified t)) . 4) (undo-tree-id0 . -1) (4 . 5) (#("A" 0 1 (face font-lock-preprocessor-face fontified t)) . 4) (undo-tree-id1 . -1) (t 25826 14404 855666 386000)) nil (25826 14489 351404 729000) 0 nil])
([nil nil ((#("#![allow(dead_code)]
" 0 3 (face font-lock-preprocessor-face fontified t) 3 4 (face font-lock-preprocessor-face fontified t) 4 20 (face font-lock-preprocessor-face fontified t) 20 21 (fontified t)) . 1) (undo-tree-id2 . -3) (undo-tree-id3 . -20) (undo-tree-id4 . -3) (undo-tree-id5 . -3) (undo-tree-id6 . -3) (undo-tree-id7 . -3) (undo-tree-id8 . -3) (undo-tree-id9 . -3) (undo-tree-id10 . -3) (undo-tree-id11 . -3) (undo-tree-id12 . -3) (undo-tree-id13 . -3) (undo-tree-id14 . -3) (undo-tree-id15 . -19) (undo-tree-id16 . -19) (undo-tree-id17 . -19) (undo-tree-id18 . -19) (undo-tree-id19 . -19) (undo-tree-id20 . -19) (undo-tree-id21 . -19) (undo-tree-id22 . -19) (undo-tree-id23 . -19) (undo-tree-id24 . -19) (undo-tree-id25 . -19) (undo-tree-id26 . -19) (undo-tree-id27 . -19) (undo-tree-id28 . -19) (undo-tree-id29 . -21) 20 (t 25826 14489 355667 995000)) nil (25826 14973 930932 131000) 0 nil])
([nil nil ((apply 6 3278 3379 undo--wrap-and-run-primitive-undo 3278 3379 ((#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -3340) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -3286) 3385))) nil (25826 15077 700750 261000) 0 nil])
([nil nil ((apply -6 3133 3338 undo--wrap-and-run-primitive-undo 3133 3338 ((3214 . 3217) (3141 . 3144) 3278))) nil (25826 15077 700747 456000) 0 nil])
([nil nil ((1 . 22) 20 (t 25826 15077 705679 77000)) nil (25826 15100 995114 52000) 0 nil])
([nil nil ((apply -6 3305 3418 undo--wrap-and-run-primitive-undo 3305 3418 ((3370 . 3373) (3313 . 3316) 3406))) nil (25826 15211 687185 857000) 0 nil])
([nil nil ((apply 6 3154 3299 undo--wrap-and-run-primitive-undo 3154 3299 ((#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -3232) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -3162) 3305))) nil (25826 15211 687185 316000) 0 nil])
([nil nil ((3187 . 3189) (#("^" 0 1 (fontified t)) . -3187) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) 3188 (3187 . 3188) (#("#" 0 1 (fontified t)) . -3187) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) 3188 (3187 . 3188)) nil (25826 15211 687184 14000) 0 nil])
([nil nil ((3205 . 3206) (#("^" 0 1 (face font-lock-comment-face fontified t)) . -3205) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) 3206 (3204 . 3206)) nil (25826 15211 687179 74000) 0 nil])
([nil nil ((3225 . 3227)) nil (25826 15211 687175 558000) 0 nil])
([nil nil ((3228 . 3230)) nil (25826 15211 687174 626000) 0 nil])
([nil nil ((3178 . 3191) (3186 . 3191) (3187 . 3194) (3206 . 3207) (3225 . 3227) (#(")" 0 1 (fontified t)) . 3230) (undo-tree-id30 . 1) (3232 . 3234) (3236 . 3240) 3229) nil (25826 15474 639438 230000) 0 nil])
([nil nil ((3310 . 3312) (#("*" 0 1 (fontified t)) . -3310) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (#("/" 0 1 (fontified t)) . -3311) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) 3312 (3310 . 3312) (#("/" 0 1 (fontified t)) . -3310) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) 3311 (3310 . 3311) (t 25826 15476 735686 738000)) nil (25826 15522 912087 17000) 0 nil] [nil nil ((#("    let mut transform = transform
        .get_single_mut()
        .expect(\"Only one camera with FlyCamera\");
" 0 4 (fontified t) 4 7 (face font-lock-keyword-face fontified t) 7 8 (fontified t) 8 11 (face font-lock-keyword-face fontified t) 11 12 (fontified t) 12 21 (face font-lock-variable-name-face fontified t) 21 76 (fontified t) 76 108 (face font-lock-string-face fontified t) 108 111 (fontified t)) . 1671) (undo-tree-id65 . -92) (undo-tree-id66 . -32) (undo-tree-id67 . -92) (undo-tree-id68 . -110) (undo-tree-id69 . -111) (undo-tree-id70 . -111) (undo-tree-id71 . -109) (undo-tree-id72 . -109) (undo-tree-id73 . -58) (undo-tree-id74 . -58) (undo-tree-id75 . -32) (undo-tree-id76 . -32) (undo-tree-id77 . -32) (undo-tree-id78 . -32) (undo-tree-id79 . -58) (undo-tree-id80 . -58) (undo-tree-id81 . -109) (undo-tree-id82 . -109) (undo-tree-id83 . -111) (undo-tree-id84 . -111) (undo-tree-id85 . -111) (undo-tree-id86 . -111) (undo-tree-id87 . -109) (undo-tree-id88 . -109) (undo-tree-id89 . -58) (undo-tree-id90 . -58) (undo-tree-id91 . -32) (undo-tree-id92 . -32) (undo-tree-id93 . -32) (undo-tree-id94 . -32) (undo-tree-id95 . -32) (undo-tree-id96 . -32) (undo-tree-id97 . -59) (undo-tree-id98 . -59) (undo-tree-id99 . -92) (undo-tree-id100 . -92) (undo-tree-id101 . -111) (undo-tree-id102 . -111) (undo-tree-id103 . -60) (undo-tree-id104 . -92) (undo-tree-id105 . -92) (undo-tree-id106 . -92) (undo-tree-id107 . -92) (undo-tree-id108 . -111) 1763 (t 25826 15211 692348 328000)) ((1671 . 1782) (t 25826 15471 259019 960000)) (25826 15469 181 924000) 0 nil])
([nil nil ((3325 . 3327)) nil (25826 15522 912072 320000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1521 . 1522) (#("
" 0 1 (fontified nil)) . -1628) (1517 . 1629) 1514) ((#("
    let mut transform = transform
        .get_single_mut()
        .expect(\"Only one camera with FlyCamera\");
" 0 1 (fontified t) 1 4 (fontified nil) 4 5 (fontified nil rear-nonsticky nil) 5 8 (face font-lock-keyword-face fontified nil) 8 9 (fontified nil) 9 12 (face font-lock-keyword-face fontified nil) 12 13 (fontified nil) 13 22 (face font-lock-variable-name-face fontified nil) 22 35 (fontified nil) 35 61 (fontified t) 61 77 (fontified nil) 77 109 (face font-lock-string-face fontified nil) 109 111 (fontified nil) 111 112 (fontified nil)) . 1517) (undo-tree-id144 . -111) (undo-tree-id145 . -111) (undo-tree-id146 . -111) (undo-tree-id147 . -65) (undo-tree-id148 . -61) (undo-tree-id149 . -65) (1628 . 1629) (nil rear-nonsticky t 1521 . 1522)) (25826 15468 553133 89000) 0 nil])
([nil nil ((3310 . 3311) 3326) nil (25826 15522 912069 354000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1629) (undo-tree-id61 . -4) (undo-tree-id62 . -4) (undo-tree-id63 . -4) (undo-tree-id64 . -4) 1633 (1628 . 1633) 1582) ((#("
    " 0 1 (fontified t) 1 5 (fontified nil)) . 1628) (undo-tree-id142 . -5) (undo-tree-id143 . -5) (1629 . 1633)) (25826 15468 336956 947000) 0 nil])
([nil nil ((478 . 485) (t 25826 15522 919020 976000)) nil (25826 15740 80209 696000) 0 nil])
([nil nil ((1802 . 1804) (#("i" 0 1 (fontified t)) . -1802) (undo-tree-id46 . -1) (1801 . 1803) (1792 . 1801) (#("trans" 0 5 (face font-lock-variable-name-face fontified t)) . -1792) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -2) (undo-tree-id50 . -2) (undo-tree-id51 . -3) (undo-tree-id52 . -3) (undo-tree-id53 . -4) (undo-tree-id54 . -4) (undo-tree-id55 . -5) (undo-tree-id56 . -5) (undo-tree-id57 . -5) (undo-tree-id58 . -5) (undo-tree-id59 . -5) (undo-tree-id60 . -5) 1797 (1788 . 1797) (1783 . 1788) 1783) ((#("
    " 0 1 (fontified t) 1 5 (fontified nil)) . 1783) (undo-tree-id109 . -5) (undo-tree-id110 . -5) (undo-tree-id111 . -5) (undo-tree-id112 . -5) (undo-tree-id113 . -5) (undo-tree-id114 . -5) (undo-tree-id115 . -5) (undo-tree-id116 . -5) (undo-tree-id117 . -5) (undo-tree-id118 . -5) (undo-tree-id119 . -5) (undo-tree-id120 . -5) (undo-tree-id121 . -1) (undo-tree-id122 . -5) (undo-tree-id123 . -5) (undo-tree-id124 . -5) (undo-tree-id125 . -5) (#("for trans" 0 3 (face font-lock-keyword-face fontified nil) 3 4 (fontified nil) 4 9 (face font-lock-variable-name-face fontified nil)) . 1788) (undo-tree-id126 . -5) (undo-tree-id127 . -5) (undo-tree-id128 . -6) (undo-tree-id129 . -6) (undo-tree-id130 . -7) (undo-tree-id131 . -7) (undo-tree-id132 . -8) (undo-tree-id133 . -8) (undo-tree-id134 . -9) (undo-tree-id135 . -9) (undo-tree-id136 . -9) (undo-tree-id137 . -9) (undo-tree-id138 . -4) (undo-tree-id139 . -9) (undo-tree-id140 . -4) (undo-tree-id141 . -4) (1792 . 1797) (#("transform" 0 9 (face font-lock-variable-name-face fontified nil)) . 1792) (#(" i" 0 1 (fontified nil) 1 2 (fontified nil)) . 1801) (1802 . 1803) (#("in" 0 2 (face font-lock-keyword-face fontified t)) . 1802)) (25826 15467 382115 455000) 0 nil])
([nil nil ((494 . 495)) nil (25826 15740 80209 245000) 0 nil])
([nil nil ((1792 . 1796)) ((#("mut " 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t)) . 1792)) (25826 15467 209727 917000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -704) (undo-tree-id181 . -4) (undo-tree-id182 . -4) (undo-tree-id183 . -4) (undo-tree-id184 . -4) 708 (703 . 708) 677) nil (25826 15740 80208 554000) 0 nil])
([nil nil ((1366 . 1367) (#("transform" 0 9 (face font-lock-variable-name-face fontified t)) . 1366) (undo-tree-id43 . -8) (undo-tree-id44 . -9) (undo-tree-id45 . -9)) ((1366 . 1375) (#("c" 0 1 (face font-lock-variable-name-face fontified t)) . 1366)) (25826 15467 209597 101000) 0 nil])
([nil nil ((731 . 735) (722 . 731) (#("trans" 0 5 (fontified t)) . -722) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -2) (undo-tree-id169 . -2) (undo-tree-id170 . -3) (undo-tree-id171 . -3) (undo-tree-id172 . -4) (undo-tree-id173 . -4) (undo-tree-id174 . -5) (undo-tree-id175 . -5) (undo-tree-id176 . -5) (undo-tree-id177 . -5) (undo-tree-id178 . -5) (undo-tree-id179 . -5) 727 (715 . 727) (708 . 715) (#("i" 0 1 (fontified t)) . -708) (undo-tree-id180 . -1) (704 . 709)) nil (25826 15740 80205 47000) 0 nil])
nil
([nil nil ((nil rear-nonsticky nil 769 . 770) (nil fontified nil 735 . 770) (735 . 770) 734) nil (25826 15740 80198 195000) 0 nil])
([nil nil ((744 . 745) (#("        " 0 8 (fontified nil)) . 744) (#("
" 0 1 (fontified t)) . -744) (undo-tree-id165 . -1) 728) nil (25826 15740 80197 42000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 744) (undo-tree-id163 . -1) (undo-tree-id164 . -1)) nil (25826 15740 80194 688000) 0 nil])
([nil nil ((761 . 762)) nil (25826 15740 80186 953000) 0 nil])
([nil nil ((apply -9 593 772 undo--wrap-and-run-primitive-undo 593 772 ((663 . 666) (634 . 637) (597 . 600) 704))) nil (25826 15740 80184 58000) 0 nil])
([nil nil ((770 . 771) (#(";" 0 1 (fontified t)) . -770) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) 771 (t 25826 15740 85691 940000)) nil (25826 15754 622955 120000) 0 nil])
([nil nil ((#("	" 0 1 (fontified nil)) . -1419) (1419 . 1420) (#("	" 0 1 (fontified nil)) . 1419) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (1415 . 1419) (1416 . 1417) (1414 . 1416) 1382) nil (25826 15754 622950 892000) 0 nil])
([nil nil ((770 . 771) (772 . 775) (776 . 777) (807 . 810) (811 . 812) (832 . 835) (836 . 837) (868 . 871) (876 . 877) (888 . 891) (900 . 901) (951 . 954) (963 . 964) (1010 . 1013) (1022 . 1023) (1067 . 1069) (1079 . 1081) (1124 . 1126) (1136 . 1138) (1175 . 1177) (1187 . 1189) (1230 . 1232) (1242 . 1244) (1288 . 1289) (1300 . 1303) (1309 . 1310) (1317 . 1320) (1319 . 1320) (1323 . 1326) (1325 . 1329) 1419) nil (25826 15754 622938 549000) 0 nil])
([nil nil ((#("s" 0 1 (face font-lock-variable-name-face fontified t)) . 494) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (t 25826 15754 625692 215000)) nil (25826 15767 671862 964000) 0 nil])
([nil nil ((#("c" 0 1 (face font-lock-variable-name-face fontified t)) . 478) (undo-tree-id205 . -1) (undo-tree-id206 . -1)) nil (25826 15767 671861 771000) 0 nil])
([nil nil ((#("a" 0 1 (face font-lock-variable-name-face fontified t)) . 478) (undo-tree-id203 . -1) (undo-tree-id204 . -1)) nil (25826 15767 671860 609000) 0 nil])
([nil nil ((#("m" 0 1 (face font-lock-variable-name-face fontified t)) . 478) (undo-tree-id201 . -1) (undo-tree-id202 . -1)) nil (25826 15767 671858 856000) 0 nil])
([nil nil ((#("e" 0 1 (face font-lock-variable-name-face fontified t)) . 478) (undo-tree-id199 . -1) (undo-tree-id200 . -1)) nil (25826 15767 671857 423000) 0 nil])
([nil nil ((#("r" 0 1 (face font-lock-variable-name-face fontified t)) . 478) (undo-tree-id197 . -1) (undo-tree-id198 . -1)) nil (25826 15767 671855 820000) 0 nil])
([nil nil ((#("a" 0 1 (face font-lock-variable-name-face fontified t)) . 478) (undo-tree-id195 . -1) (undo-tree-id196 . -1)) nil (25826 15767 671853 606000) 0 nil])
([nil nil ((#("_" 0 1 (face font-lock-variable-name-face fontified t)) . 478) (undo-tree-id193 . -1) (undo-tree-id194 . -1)) nil (25826 15767 671850 290000) 0 nil])
([nil nil ((#("    // let mut transform = transform
    //     .get_single_mut()
    //     .expect(\"Only one camera with FlyCamera\");
" 0 4 (fontified t) 4 7 (face font-lock-comment-delimiter-face fontified t) 7 10 (face font-lock-comment-face fontified t) 10 11 (face font-lock-comment-face fontified t) 11 14 (face font-lock-comment-face fontified t) 14 15 (face font-lock-comment-face fontified t) 15 24 (face font-lock-comment-face fontified t) 24 37 (face font-lock-comment-face fontified t) 37 41 (fontified t) 41 44 (face font-lock-comment-delimiter-face fontified t) 44 48 (face font-lock-comment-delimiter-face fontified t) 48 66 (face font-lock-comment-face fontified t) 66 70 (fontified t) 70 73 (face font-lock-comment-delimiter-face fontified t) 73 77 (face font-lock-comment-delimiter-face fontified t) 77 85 (face font-lock-comment-face fontified t) 85 117 (face font-lock-comment-face fontified t) 117 119 (face font-lock-comment-face fontified t) 119 120 (face font-lock-comment-face fontified t)) . 585) (undo-tree-id209 . -74) (undo-tree-id210 . -8) (undo-tree-id211 . -74) (undo-tree-id212 . -119) (undo-tree-id213 . -64) (undo-tree-id214 . -8) (undo-tree-id215 . -8) (undo-tree-id216 . -8) (undo-tree-id217 . -8) (undo-tree-id218 . -45) (undo-tree-id219 . -45) (undo-tree-id220 . -66) (undo-tree-id221 . -74) (undo-tree-id222 . -74) (undo-tree-id223 . -74) (undo-tree-id224 . -74) (undo-tree-id225 . -120) 659 (t 25826 15767 675692 459000)) nil (25826 15822 689289 873000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1801 . 1802) (#("
" 0 1 (fontified nil)) . -1857) (1797 . 1858)) nil (25826 16003 101186 932000) 0 nil] [nil nil ((nil rear-nonsticky nil 532 . 533) (#("
" 0 1 (fontified nil)) . -587) (528 . 588) 478) ((#("
    mut transform: Query<&mut Transform, With<FlyCamera>>,
" 0 1 (fontified t) 1 4 (fontified nil) 4 5 (rear-nonsticky nil fontified nil) 5 8 (face font-lock-keyword-face fontified nil) 8 9 (fontified nil) 9 18 (face font-lock-variable-name-face fontified nil) 18 20 (fontified nil) 20 25 (face font-lock-type-face fontified nil) 25 26 (fontified nil) 26 27 (face rust-ampersand-face fontified nil) 27 30 (face font-lock-keyword-face fontified nil) 30 31 (fontified nil) 31 40 (face font-lock-type-face fontified nil) 40 42 (fontified nil) 42 46 (face font-lock-type-face fontified nil) 46 47 (fontified nil) 47 56 (face font-lock-type-face fontified nil) 56 59 (fontified nil) 59 60 (fontified nil)) . 528) (undo-tree-id226 . -59) (undo-tree-id227 . -1) (undo-tree-id228 . -59) (undo-tree-id229 . -1) (undo-tree-id230 . -5) (undo-tree-id231 . -5) (587 . 588) (nil rear-nonsticky t 532 . 533)) (25826 15822 689133 750000) 0 nil])
([nil nil ((#("    let mut transform = transform
        .get_single_mut()
        .expect(\"Only one camera with FlyCamera\");

" 0 4 (fontified t) 4 7 (face font-lock-keyword-face fontified t) 7 8 (fontified t) 8 11 (face font-lock-keyword-face fontified t) 11 12 (fontified t) 12 21 (face font-lock-variable-name-face fontified t) 21 76 (fontified t) 76 108 (face font-lock-string-face fontified t) 108 111 (fontified t) 111 112 (fontified t)) . 1686) (undo-tree-id236 . -111) (undo-tree-id237 . -4) (undo-tree-id238 . -111) (undo-tree-id239 . -111) (undo-tree-id240 . -8) (undo-tree-id241 . -8) (undo-tree-id242 . -42) (undo-tree-id243 . -42) (undo-tree-id244 . -68) (undo-tree-id245 . -68) (undo-tree-id246 . -111) (undo-tree-id247 . -111) (undo-tree-id248 . -111) (undo-tree-id249 . -111) (undo-tree-id250 . -111) (undo-tree-id251 . -111) (undo-tree-id252 . -64) (undo-tree-id253 . -64) (undo-tree-id254 . -38) (undo-tree-id255 . -38) (undo-tree-id256 . -4) (undo-tree-id257 . -4) (undo-tree-id258 . -4) (undo-tree-id259 . -4) (undo-tree-id260 . -38) (undo-tree-id261 . -38) (undo-tree-id262 . -64) (undo-tree-id263 . -64) (undo-tree-id264 . -111) (undo-tree-id265 . -111) (undo-tree-id266 . -111) (undo-tree-id267 . -111) (undo-tree-id268 . -111) (undo-tree-id269 . -112) 1797) nil (25826 16003 101185 369000) 0 nil])
nil
([nil nil ((#("	" 0 1 (fontified nil)) . -2241) (2241 . 2242) (#("	" 0 1 (fontified nil)) . 2241) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (2237 . 2241) (2238 . 2239) (2236 . 2238) 2231) nil (25826 16003 101170 200000) 0 nil])
([nil nil ((1750 . 1754) (1785 . 1786) (1793 . 1796) (1867 . 1868) (1875 . 1878) (1931 . 1933) (1939 . 1941) (2002 . 2004) (2010 . 2012) (2071 . 2074) (2079 . 2080) (2113 . 2116) (2121 . 2122) (2142 . 2146) (2231 . 2235) 2241) nil (25826 16003 101157 887000) 0 nil])
([nil nil ((#("/" 0 1 (face font-lock-comment-delimiter-face fontified t)) . 3316) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (t 25826 16003 109030 366000)) nil (25826 16022 397807 194000) 0 nil])
([nil nil ((#("*" 0 1 (fontified t)) . 3316) (undo-tree-id277 . -1) (undo-tree-id278 . -1)) nil (25826 16022 397805 861000) 0 nil])
([nil nil ((#("*" 0 1 (fontified t)) . 3329) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1)) nil (25826 16022 397804 118000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . 3329) (undo-tree-id272 . -1) (undo-tree-id273 . -1)) nil (25826 16022 397801 654000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 3315) (undo-tree-id270 . -1) (undo-tree-id271 . -1) 3329) nil (25826 16022 397798 528000) 0 nil])
([nil nil ((#("F" 0 1 (face font-lock-type-face fontified t)) . 165) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (t 25826 16022 402364 70000)) nil (25826 17499 828067 63000) 0 nil])
([nil nil ((#("l" 0 1 (face font-lock-type-face fontified t)) . 165) (undo-tree-id518 . -1) (undo-tree-id519 . -1)) nil (25826 17499 828065 881000) 0 nil])
([nil nil ((#("y" 0 1 (face font-lock-type-face fontified t)) . 165) (undo-tree-id516 . -1) (undo-tree-id517 . -1)) nil (25826 17499 828064 789000) 0 nil])
([nil nil ((171 . 175)) nil (25826 17499 828063 807000) 0 nil])
([nil nil ((#("T" 0 1 (face font-lock-type-face fontified t)) . 171) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (undo-tree-id515 . -1)) nil (25826 17499 828063 276000) 0 nil])
([nil nil ((#("y" 0 1 (face font-lock-type-face fontified t)) . 171) (undo-tree-id510 . -1) (undo-tree-id511 . -1)) nil (25826 17499 828061 573000) 0 nil])
([nil nil ((#("p" 0 1 (face font-lock-type-face fontified t)) . 171) (undo-tree-id504 . -1) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (undo-tree-id509 . -1)) nil (25826 17499 828060 331000) 0 nil])
([nil nil ((#("e" 0 1 (face font-lock-type-face fontified t)) . 171) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (undo-tree-id503 . -1)) nil (25826 17499 828057 806000) 0 nil])
([nil nil ((175 . 179) (#("i" 0 1 (face font-lock-type-face fontified t)) . -175) (undo-tree-id499 . -1) (171 . 176)) nil (25826 17499 828055 772000) 0 nil])
([nil nil ((#("    " 0 4 (fontified nil)) . -171) (undo-tree-id491 . -4) (undo-tree-id492 . -4) (undo-tree-id493 . -4) (undo-tree-id494 . -4) (175 . 176) (170 . 175) (163 . 170) (158 . 163) (154 . 158) (149 . 154) (138 . 149) (#("c" 0 1 (face font-lock-type-face fontified t)) . -138) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (undo-tree-id498 . -1) 139 (133 . 139) (132 . 133) (131 . 132) 105) nil (25826 17499 828054 229000) 0 nil])
([nil nil ((#("    " 0 4 (fontified nil)) . -222) (undo-tree-id483 . -4) (undo-tree-id484 . -4) (undo-tree-id485 . -4) (undo-tree-id486 . -4) (226 . 227) (221 . 226) (220 . 221) (#(";" 0 1 (fontified t)) . -220) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (undo-tree-id490 . -1) 221) nil (25826 17499 828049 590000) 0 nil])
([nil nil ((263 . 268) (#("i" 0 1 (fontified t)) . -263) (undo-tree-id392 . -1) (261 . 264) (#("i" 0 1 (fontified t)) . -261) (undo-tree-id393 . -1) (259 . 262) (#("i" 0 1 (fontified t)) . -259) (undo-tree-id394 . -1) (256 . 260) (255 . 256) (250 . 255) (248 . 250) (227 . 248) (226 . 227) (#("t" 0 1 (fontified t)) . -226) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (#("y" 0 1 (fontified t)) . -227) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (undo-tree-id420 . -1) (#("p" 0 1 (fontified t)) . -228) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (#("e" 0 1 (face font-lock-keyword-face fontified t)) . -229) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (#(":" 0 1 (fontified t)) . -230) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (#(" " 0 1 (fontified t)) . -231) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (undo-tree-id446 . -1) 232 (226 . 232) (#("C" 0 1 (face font-lock-type-face fontified t)) . -226) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (#("a" 0 1 (face font-lock-type-face fontified t)) . -227) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (#("m" 0 1 (face font-lock-type-face fontified t)) . -228) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (#("p" 0 1 (face font-lock-type-face fontified t)) . -229) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (undo-tree-id482 . -1) 230 (226 . 230) (221 . 226) 195) nil (25826 17499 828042 397000) 0 nil])
([nil nil ((272 . 277) (268 . 272)) nil (25826 17499 828004 927000) 0 nil])
([nil nil ((255 . 266) (250 . 255) 225) nil (25826 17499 828004 295000) 0 nil])
([nil nil ((#("    
" 0 4 (fontified t) 4 5 (fontified t)) . 289) (undo-tree-id359 . -4) (undo-tree-id360 . 1) (undo-tree-id361 . -5) (undo-tree-id362 . -5) (undo-tree-id363 . -5) (undo-tree-id364 . -5) (undo-tree-id365 . -5) (undo-tree-id366 . -5) (undo-tree-id367 . -5) (undo-tree-id368 . -5) (undo-tree-id369 . -5) (undo-tree-id370 . -5) (undo-tree-id371 . -5) (undo-tree-id372 . -5) (undo-tree-id373 . -4) (undo-tree-id374 . -4) (undo-tree-id375 . -3) (undo-tree-id376 . -3) (undo-tree-id377 . -3) (undo-tree-id378 . -3) (undo-tree-id379 . -5) (undo-tree-id380 . -5) (undo-tree-id381 . -5) (undo-tree-id382 . -5) (undo-tree-id383 . -3) (undo-tree-id384 . -3) (undo-tree-id385 . -3) (undo-tree-id386 . -3) (undo-tree-id387 . -3) (undo-tree-id388 . -3) (undo-tree-id389 . -3) (undo-tree-id390 . -3) (undo-tree-id391 . -5) 292) nil (25826 17499 828002 462000) 0 nil])
([nil nil ((611 . 620) (600 . 611) (#("sensi" 0 5 (fontified t)) . -600) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -2) (undo-tree-id306 . -2) (undo-tree-id307 . -3) (undo-tree-id308 . -3) (undo-tree-id309 . -4) (undo-tree-id310 . -4) (undo-tree-id311 . -4) (undo-tree-id312 . -5) (undo-tree-id313 . -5) (undo-tree-id314 . -5) (undo-tree-id315 . -5) (undo-tree-id316 . -5) (undo-tree-id317 . -5) 605 (604 . 605) (#("i" 0 1 (fontified t)) . -604) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (588 . 605) (581 . 588) (571 . 581) (#("Cam" 0 3 (face font-lock-type-face fontified t)) . -571) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -2) (undo-tree-id323 . -2) (undo-tree-id324 . -3) (undo-tree-id325 . -3) (undo-tree-id326 . -3) (undo-tree-id327 . -3) (undo-tree-id328 . -3) (undo-tree-id329 . -3) (undo-tree-id330 . -3) (undo-tree-id331 . -3) (undo-tree-id332 . -3) (undo-tree-id333 . -3) 574 (569 . 574) (558 . 569) (#("cam" 0 3 (fontified t)) . -558) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -2) (undo-tree-id337 . -2) (undo-tree-id338 . -3) (undo-tree-id339 . -3) (undo-tree-id340 . -3) (undo-tree-id341 . -3) (undo-tree-id342 . -3) (undo-tree-id343 . -3) (undo-tree-id344 . -3) (undo-tree-id345 . -3) (undo-tree-id346 . -3) (undo-tree-id347 . -3) (undo-tree-id348 . -3) (undo-tree-id349 . -3) 561 (557 . 561) (#("{" 0 1 (fontified t)) . -557) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) 558 (547 . 558) (#("FlyCamera" 0 9 (face font-lock-type-face fontified t)) . 547) (undo-tree-id354 . -8) (undo-tree-id355 . -8) (undo-tree-id356 . -8) (undo-tree-id357 . -9) (undo-tree-id358 . -9)) nil (25826 17501 255514 548000) 0 nil])
([nil nil ((701 . 705) (695 . 701) (#("FlyCamera" 0 9 (face font-lock-type-face fontified t)) . 695) (undo-tree-id532 . -8) (undo-tree-id533 . -9) (undo-tree-id534 . -9)) nil (25826 17518 76405 716000) 0 nil] [nil nil ((695 . 705) (#("FlyCamera" 0 9 (face font-lock-type-face fontified t)) . 695) (undo-tree-id300 . -8) (undo-tree-id301 . -9) (undo-tree-id302 . -9)) ((695 . 704) (#("CameraType" 0 10 (face font-lock-type-face fontified t)) . 695) (undo-tree-id522 . 10) (undo-tree-id523 . -10) (undo-tree-id524 . -10)) (25826 17501 108603 50000) 0 nil])
([nil nil ((1599 . 1609) (#("FlyCamera" 0 9 (face font-lock-type-face fontified t)) . 1599) (undo-tree-id525 . -8) (undo-tree-id526 . -9) (undo-tree-id527 . -9) (undo-tree-id528 . -9) (undo-tree-id529 . -9) (undo-tree-id530 . -9) (undo-tree-id531 . -9)) nil (25826 17518 76402 179000) 0 nil])
([nil nil ((#(">" 0 1 (fontified t)) . 705) (undo-tree-id297 . 1) (undo-tree-id298 . -1) (undo-tree-id299 . -1)) ((705 . 706)) (25826 17500 961478 792000) 0 nil])
([nil nil ((148 . 149) (220 . 221) (557 . 558) (558 . 571) (587 . 596) (588 . 591) (599 . 609) (600 . 602) (619 . 629) 3266) nil (25826 17518 76389 656000) 0 nil])
([nil nil ((#("W" 0 1 (face font-lock-type-face fontified t)) . 690) (undo-tree-id295 . -1) (undo-tree-id296 . -1)) ((690 . 691)) (25826 17500 814433 722000) 0 nil])
([nil nil ((559 . 563) (#("i" 0 1 (face font-lock-type-face fontified t)) . -559) (undo-tree-id541 . -1) (undo-tree-id542 . -1) (555 . 560) (#("Type" 0 4 (face font-lock-type-face fontified t)) . 555) (undo-tree-id543 . -3) (undo-tree-id544 . -4) (undo-tree-id545 . -4) (t 25826 17518 82392 607000)) nil (25826 17604 550173 15000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . 690) (undo-tree-id293 . -1) (undo-tree-id294 . -1)) ((690 . 691)) (25826 17500 621542 26000) 0 nil])
([nil nil ((755 . 763) (#("Type" 0 4 (face font-lock-type-face fontified t)) . 755) (undo-tree-id538 . -3) (undo-tree-id539 . -4) (undo-tree-id540 . -4)) nil (25826 17604 550164 68000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . 690) (undo-tree-id291 . -1) (undo-tree-id292 . -1)) ((690 . 691)) (25826 17500 358459 639000) 0 nil])
([nil nil ((1663 . 1671) (#("Type" 0 4 (face font-lock-type-face fontified t)) . 1663) (undo-tree-id535 . -3) (undo-tree-id536 . -4) (undo-tree-id537 . -4)) nil (25826 17604 550158 177000) 0 nil])
([nil nil ((#("h" 0 1 (fontified t)) . 690) (undo-tree-id289 . -1) (undo-tree-id290 . -1)) ((690 . 691)) (25826 17500 73440 780000) 0 nil])
([nil nil ((#("/" 0 1 (face font-lock-comment-delimiter-face fontified t)) . 3460) (undo-tree-id588 . -1) (undo-tree-id589 . -1) (t 25826 17604 555727 629000)) nil (25826 17680 283084 761000) 0 nil])
([nil nil ((#("<" 0 1 (fontified t)) . 690) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1)) ((690 . 691)) (25826 17499 828144 268000) 0 nil])
([nil nil ((#("*" 0 1 (fontified t)) . 3460) (undo-tree-id586 . -1) (undo-tree-id587 . -1)) nil (25826 17680 283083 278000) 0 nil])
([nil nil ((690 . 691)) ((#("&" 0 1 (face rust-ampersand-face fontified t)) . 690)) (25826 17499 827344 367000) 0 nil])
([nil nil ((#("*" 0 1 (fontified t)) . 3475) (undo-tree-id584 . -1) (undo-tree-id585 . -1)) nil (25826 17680 283082 46000) 0 nil])
nil
([nil nil ((#("/" 0 1 (fontified t)) . 3475) (undo-tree-id582 . -1) (undo-tree-id583 . -1)) nil (25826 17680 283080 654000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 3475) (undo-tree-id580 . -1) (undo-tree-id581 . -1)) nil (25826 17680 283079 571000) 0 nil])
([nil nil ((#("/" 0 1 (face font-lock-comment-delimiter-face fontified t)) . 3496) (undo-tree-id578 . -1) (undo-tree-id579 . -1)) nil (25826 17680 283078 399000) 0 nil])
([nil nil ((#("*" 0 1 (fontified t)) . 3496) (undo-tree-id576 . -1) (undo-tree-id577 . -1)) nil (25826 17680 283076 866000) 0 nil])
([nil nil ((#("*" 0 1 (fontified t)) . 3497) (undo-tree-id570 . -1) (undo-tree-id571 . -1) (undo-tree-id572 . -1) (undo-tree-id573 . -1) (undo-tree-id574 . -1) (undo-tree-id575 . -1)) nil (25826 17680 283075 384000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . 3497) (undo-tree-id568 . -1) (undo-tree-id569 . -1)) nil (25826 17680 283072 488000) 0 nil])
([nil nil ((3447 . 3448) (#("            " 0 4 (fontified nil) 4 5 (fontified nil) 5 12 (fontified nil)) . 3447) (undo-tree-id565 . -12) (undo-tree-id566 . -12) (#("
" 0 1 (fontified t)) . -3447) (undo-tree-id567 . -1) 3446) nil (25826 17680 283071 45000) 0 nil])
([nil nil ((#("            " 0 12 (fontified nil)) . 3426) (#("
" 0 1 (fontified t)) . -3426) (undo-tree-id563 . -1) (undo-tree-id564 . -1) 3422) nil (25826 17680 283068 561000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . 3469) (undo-tree-id561 . -1) (undo-tree-id562 . -1)) nil (25826 17680 283067 78000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 3469) (undo-tree-id551 . -1) (undo-tree-id552 . -1) (undo-tree-id553 . -1) (undo-tree-id554 . -1) (undo-tree-id555 . -1) (undo-tree-id556 . -1) (undo-tree-id557 . -1) (undo-tree-id558 . -1) (undo-tree-id559 . -1) (undo-tree-id560 . -1)) nil (25826 17680 283065 245000) 0 nil])
([nil nil ((#("        " 0 2 (fontified nil) 2 3 (fontified nil) 3 6 (fontified nil) 6 8 (fontified nil)) . 3470) (undo-tree-id546 . -8) (undo-tree-id547 . -8) (undo-tree-id548 . -8) (undo-tree-id549 . -8) (#("
" 0 1 (fontified t)) . -3470) (undo-tree-id550 . -1) 3469) nil (25826 17680 283058 772000) 0 nil])
([nil nil ((3480 . 3484) 3470) nil (25826 17680 283047 341000) 0 nil])
([nil nil ((#("        // app.add_systems(Startup, initial_grab_cursor)
        //     .add_systems(Update, grab_cursor);
" 0 8 (fontified t) 8 11 (face font-lock-comment-delimiter-face fontified t) 11 27 (face font-lock-comment-face fontified t) 27 30 (face font-lock-comment-face fontified t) 30 34 (face font-lock-comment-face fontified t) 34 57 (face font-lock-comment-face fontified t) 57 59 (fontified t) 59 65 (fontified t) 65 68 (face font-lock-comment-delimiter-face fontified t) 68 72 (face font-lock-comment-delimiter-face fontified t) 72 85 (face font-lock-comment-face fontified t) 85 91 (face font-lock-comment-face fontified t) 91 98 (face font-lock-comment-face fontified t) 98 107 (face font-lock-comment-face fontified t)) . 3547) (undo-tree-id712 . -106) (undo-tree-id713 . -55) (undo-tree-id714 . -106) (undo-tree-id715 . -106) (undo-tree-id716 . -55) (undo-tree-id717 . -55) (undo-tree-id718 . -55) (undo-tree-id719 . -55) (undo-tree-id720 . -57) (undo-tree-id721 . -106) (undo-tree-id722 . -106) (undo-tree-id723 . -106) (undo-tree-id724 . -106) (undo-tree-id725 . -107) 3653 (t 25826 17680 289062 453000)) nil (25826 17821 188980 69000) 0 nil])
([nil nil ((#("W" 0 1 (face font-lock-type-face fontified t)) . 744) (undo-tree-id710 . -1) (undo-tree-id711 . -1)) nil (25826 17821 188974 548000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . 744) (undo-tree-id708 . -1) (undo-tree-id709 . -1)) nil (25826 17821 188973 517000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . 744) (undo-tree-id706 . -1) (undo-tree-id707 . -1)) nil (25826 17821 188972 414000) 0 nil])
([nil nil ((#("h" 0 1 (fontified t)) . 744) (undo-tree-id704 . -1) (undo-tree-id705 . -1)) nil (25826 17821 188971 222000) 0 nil])
([nil nil ((#("<" 0 1 (fontified t)) . 744) (undo-tree-id702 . -1) (undo-tree-id703 . -1)) nil (25826 17821 188970 150000) 0 nil])
([nil nil ((744 . 745)) nil (25826 17821 188969 178000) 0 nil])
([nil nil ((#(">" 0 1 (fontified t)) . 759) (undo-tree-id700 . -1) (undo-tree-id701 . -1)) nil (25826 17821 188968 728000) 0 nil])
([nil nil ((938 . 943)) nil (25826 17821 188967 706000) 0 nil])
([nil nil ((941 . 942)) nil (25826 17821 188967 365000) 0 nil])
([nil nil ((947 . 948) (#("2" 0 1 (fontified t)) . 947) (undo-tree-id699 . -1)) nil (25826 17821 188966 824000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . 1422) (undo-tree-id697 . -1) (undo-tree-id698 . -1)) nil (25826 17821 188966 93000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . 1422) (undo-tree-id695 . -1) (undo-tree-id696 . -1)) nil (25826 17821 188964 580000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . 1422) (undo-tree-id693 . -1) (undo-tree-id694 . -1)) nil (25826 17821 188963 558000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . 1422) (undo-tree-id691 . -1) (undo-tree-id692 . -1)) nil (25826 17821 188962 406000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . 1422) (undo-tree-id689 . -1) (undo-tree-id690 . -1)) nil (25826 17821 188960 893000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 1422) (undo-tree-id687 . -1) (undo-tree-id688 . -1)) nil (25826 17821 188959 520000) 0 nil])
([nil nil ((#("=" 0 1 (fontified t)) . 1422) (undo-tree-id685 . -1) (undo-tree-id686 . -1)) nil (25826 17821 188958 438000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 1422) (undo-tree-id683 . -1) (undo-tree-id684 . -1)) nil (25826 17821 188957 46000) 0 nil])
([nil nil ((1427 . 1435)) nil (25826 17821 188956 14000) 0 nil])
([nil nil ((#("*" 0 1 (fontified t)) . 1436) (undo-tree-id681 . -1) (undo-tree-id682 . -1)) nil (25826 17821 188955 563000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 1436) (undo-tree-id679 . -1) (undo-tree-id680 . -1)) nil (25826 17821 188954 451000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t)) . -1436) (undo-tree-id667 . -1) (undo-tree-id668 . -1) (#("a" 0 1 (fontified t)) . -1437) (undo-tree-id669 . -1) (undo-tree-id670 . -1) (#("m" 0 1 (fontified t)) . -1438) (undo-tree-id671 . -1) (undo-tree-id672 . -1) (#("e" 0 1 (fontified t)) . -1439) (undo-tree-id673 . -1) (undo-tree-id674 . -1) (#("r" 0 1 (fontified t)) . -1440) (undo-tree-id675 . -1) (undo-tree-id676 . -1) (#("a" 0 1 (fontified t)) . -1441) (undo-tree-id677 . -1) (undo-tree-id678 . -1) 1442 (1436 . 1442)) nil (25826 17821 188952 317000) 0 nil])
([nil nil ((851 . 855) (#("i" 0 1 (fontified t)) . -851) (undo-tree-id666 . -1) (849 . 852) (845 . 849)) nil (25826 17821 188945 975000) 0 nil])
([nil nil ((1457 . 1467) (#("i" 0 1 (fontified t)) . -1457) (undo-tree-id664 . -1) (undo-tree-id665 . -1) (1450 . 1458)) nil (25826 17821 188944 733000) 0 nil])
([nil nil ((1610 . 1618)) nil (25826 17821 188943 380000) 0 nil])
([nil nil ((1618 . 1624)) nil (25826 17821 188943 59000) 0 nil])
([nil nil ((1609 . 1614) (#("i" 0 1 (fontified t)) . -1609) (undo-tree-id663 . -1) (1605 . 1610)) nil (25826 17821 188942 488000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 1450) (undo-tree-id661 . -1) (undo-tree-id662 . -1)) nil (25826 17821 188941 587000) 0 nil])
([nil nil ((#("*" 0 1 (fontified t)) . 1450) (undo-tree-id659 . -1) (undo-tree-id660 . -1)) nil (25826 17821 188940 545000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 1450) (undo-tree-id657 . -1) (undo-tree-id658 . -1)) nil (25826 17821 188939 463000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . 1450) (undo-tree-id653 . -1) (undo-tree-id654 . -1) (undo-tree-id655 . -1) (undo-tree-id656 . -1)) nil (25826 17821 188938 190000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . 1450) (undo-tree-id649 . -1) (undo-tree-id650 . -1) (undo-tree-id651 . -1) (undo-tree-id652 . -1)) nil (25826 17821 188936 357000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . 1450) (undo-tree-id645 . -1) (undo-tree-id646 . -1) (undo-tree-id647 . -1) (undo-tree-id648 . -1)) nil (25826 17821 188933 111000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . 1450) (undo-tree-id640 . -1) (undo-tree-id641 . -1) (undo-tree-id642 . -1) (undo-tree-id643 . -1) (undo-tree-id644 . -1)) nil (25826 17821 188931 37000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . 1450) (undo-tree-id638 . -1) (undo-tree-id639 . -1)) nil (25826 17821 188928 372000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . 1450) (undo-tree-id634 . -1) (undo-tree-id635 . -1) (undo-tree-id636 . -1) (undo-tree-id637 . -1)) nil (25826 17821 188927 89000) 0 nil])
([nil nil ((#("g" 0 1 (fontified t)) . 1450) (undo-tree-id630 . -1) (undo-tree-id631 . -1) (undo-tree-id632 . -1) (undo-tree-id633 . -1)) nil (25826 17821 188925 66000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . 1450) (undo-tree-id624 . -1) (undo-tree-id625 . -1) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (undo-tree-id628 . -1) (undo-tree-id629 . -1)) nil (25826 17821 188923 92000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . 1450) (undo-tree-id620 . -1) (undo-tree-id621 . -1) (undo-tree-id622 . -1) (undo-tree-id623 . -1)) nil (25826 17821 188920 317000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . 1450) (undo-tree-id616 . -1) (undo-tree-id617 . -1) (undo-tree-id618 . -1) (undo-tree-id619 . -1)) nil (25826 17821 188917 842000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . 1450) (undo-tree-id612 . -1) (undo-tree-id613 . -1) (undo-tree-id614 . -1) (undo-tree-id615 . -1)) nil (25826 17821 188915 808000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . 1450) (undo-tree-id608 . -1) (undo-tree-id609 . -1) (undo-tree-id610 . -1) (undo-tree-id611 . -1)) nil (25826 17821 188913 825000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . 1450) (undo-tree-id598 . -1) (undo-tree-id599 . -1) (undo-tree-id600 . -1) (undo-tree-id601 . -1) (undo-tree-id602 . -1) (undo-tree-id603 . -1) (undo-tree-id604 . -1) (undo-tree-id605 . -1) (undo-tree-id606 . -1) (undo-tree-id607 . -1)) nil (25826 17821 188911 240000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . 1450) (undo-tree-id590 . -1) (undo-tree-id591 . -1) (undo-tree-id592 . -1) (undo-tree-id593 . -1) (undo-tree-id594 . -1) (undo-tree-id595 . -1) (undo-tree-id596 . -1) (undo-tree-id597 . -1)) nil (25826 17821 188904 788000) 0 nil])
([nil nil ((1533 . 1545) 1450) nil (25826 17821 188891 974000) 0 nil])
([nil nil ((917 . 921) (909 . 917) (#("sett" 0 4 (fontified t)) . -909) (undo-tree-id774 . -1) (undo-tree-id775 . -1) (undo-tree-id776 . -2) (undo-tree-id777 . -2) (undo-tree-id778 . -3) (undo-tree-id779 . -3) (undo-tree-id780 . -4) (undo-tree-id781 . -4) (undo-tree-id782 . -4) (undo-tree-id783 . -4) 913 (907 . 913) (898 . 907) (#("tran" 0 4 (fontified t)) . -898) (undo-tree-id784 . -1) (undo-tree-id785 . -1) (undo-tree-id786 . -2) (undo-tree-id787 . -2) (undo-tree-id788 . -3) (undo-tree-id789 . -3) (undo-tree-id790 . -4) (undo-tree-id791 . -4) (undo-tree-id792 . -4) (undo-tree-id793 . -4) 902 (889 . 902) (887 . 889) (t 25826 17821 192398 541000) 846) nil (25826 17884 552085 368000) 0 nil])
([nil nil ((#("transform.get_single_mut() {" 0 9 (fontified t) 9 25 (fontified t) 25 26 (fontified t rear-nonsticky t) 26 27 (fontified t) 27 28 (fontified t)) . 859) (undo-tree-id771 . -27) (undo-tree-id772 . -28) (undo-tree-id773 . -28)) nil (25826 17884 552076 401000) 0 nil])
([nil nil ((nil rear-nonsticky nil 920 . 921) (nil fontified nil 893 . 921) (893 . 921) 892) nil (25826 17884 552074 888000) 0 nil])
([nil nil ((#("g" 0 1 (fontified t)) . 903) (undo-tree-id769 . -1) (undo-tree-id770 . -1)) nil (25826 17884 552074 187000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . 903) (undo-tree-id767 . -1) (undo-tree-id768 . -1)) nil (25826 17884 552073 44000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . 903) (undo-tree-id765 . -1) (undo-tree-id766 . -1)) nil (25826 17884 552071 942000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . 903) (undo-tree-id763 . -1) (undo-tree-id764 . -1)) nil (25826 17884 552070 810000) 0 nil])
([nil nil ((#(" {" 0 1 (fontified t) 1 2 (rear-nonsticky t fontified t)) . 915) (undo-tree-id760 . -1) (undo-tree-id761 . -2) (undo-tree-id762 . -2)) nil (25826 17884 552069 518000) 0 nil])
([nil nil ((915 . 916)) nil (25826 17884 552067 724000) 0 nil])
([nil nil ((#("    if let Ok(mut transform, settings) = 
" 0 4 (fontified t) 4 6 (face font-lock-keyword-face fontified t) 6 7 (fontified t) 7 10 (face font-lock-keyword-face fontified t) 10 11 (fontified t) 11 13 (face font-lock-type-face fontified t) 13 14 (fontified t) 14 17 (face font-lock-keyword-face fontified t) 17 18 (fontified t) 18 41 (fontified t) 41 42 (fontified t)) . 818) (undo-tree-id742 . -41) (undo-tree-id743 . -28) (undo-tree-id744 . -28) (undo-tree-id745 . -28) (undo-tree-id746 . -28) (undo-tree-id747 . -39) (undo-tree-id748 . -39) (undo-tree-id749 . -40) (undo-tree-id750 . -40) (undo-tree-id751 . -40) (undo-tree-id752 . -40) (undo-tree-id753 . -40) (undo-tree-id754 . -40) (undo-tree-id755 . -40) (undo-tree-id756 . -40) (undo-tree-id757 . -40) (undo-tree-id758 . -40) (undo-tree-id759 . -42) 858) nil (25826 17884 552066 622000) 0 nil])
([nil nil ((#("    }
" 0 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t)) . 1617) (undo-tree-id728 . -5) (undo-tree-id729 . -4) (undo-tree-id730 . -4) (undo-tree-id731 . -6) (undo-tree-id732 . -6) (undo-tree-id733 . -6) (undo-tree-id734 . -6) (undo-tree-id735 . -4) (undo-tree-id736 . -4) (undo-tree-id737 . -4) (undo-tree-id738 . -4) (undo-tree-id739 . -4) (undo-tree-id740 . -4) (undo-tree-id741 . -6) 1621) nil (25826 17884 552058 56000) 0 nil])
([nil nil ((818 . 822) (#("	" 0 1 (fontified t)) . 818) (undo-tree-id726 . -1) (undo-tree-id727 . -1) (#("    " 0 3 (fontified t) 3 4 (fontified t)) . 875) (#("    " 0 3 (fontified t) 3 4 (fontified t)) . 918) (#(" " 0 1 (fontified t)) . 949) (#("   " 0 2 (fontified t) 2 3 (fontified t)) . 954) (#(" " 0 1 (fontified t)) . 989) (#("   " 0 2 (fontified t) 2 3 (fontified t)) . 998) (#("  " 0 2 (fontified t)) . 1013) (#("  " 0 1 (fontified t) 1 2 (fontified t)) . 1027) (#("  " 0 2 (fontified t)) . 1080) (#("  " 0 1 (fontified t) 1 2 (fontified t)) . 1094) (#("  " 0 2 (fontified t)) . 1143) (#("  " 0 1 (fontified t) 1 2 (fontified t)) . 1157) (#("  " 0 2 (fontified t)) . 1204) (#("  " 0 2 (fontified t)) . 1218) (#("   " 0 2 (fontified t) 2 3 (fontified t)) . 1265) (#(" " 0 1 (fontified t)) . 1280) (#("   " 0 2 (fontified t) 2 3 (fontified t)) . 1320) (#(" " 0 1 (fontified t)) . 1335) (#("   " 0 2 (fontified t) 2 3 (fontified t)) . 1379) (#(" " 0 1 (fontified t)) . 1394) (#("   " 0 1 (fontified t) 1 3 (fontified t)) . 1439) (#(" " 0 1 (fontified t)) . 1454) (#("    " 0 1 (fontified t) 1 4 (fontified t)) . 1464) (#("    " 0 1 (fontified t) 1 4 (fontified t)) . 1478) (#("    " 0 4 (fontified t)) . 1492) (#("    " 0 4 (fontified t)) . 1521) 1617) nil (25826 17884 552045 954000) 0 nil])
([nil nil ((711 . 716) (#("transform" 0 9 (face font-lock-variable-name-face fontified t)) . 711) (undo-tree-id797 . -8) (undo-tree-id798 . -1) (undo-tree-id799 . -1) (undo-tree-id800 . -9) (undo-tree-id801 . -9) (t 25826 17884 559066 459000)) nil (25826 17900 764198 434000) 0 nil])
([nil nil ((850 . 855) (#("transform" 0 9 (fontified t)) . 850) (undo-tree-id794 . -8) (undo-tree-id795 . -9) (undo-tree-id796 . -9)) nil (25826 17900 764193 395000) 0 nil])
([nil nil ((724 . 725) (t 25826 17900 769066 775000)) nil (25826 17917 425852 962000) 0 nil])
([nil nil ((756 . 757)) nil (25826 17917 425849 776000) 0 nil])
([nil nil ((628 . 629) (t 25826 17917 432400 439000)) nil (25826 17937 644912 44000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . -628) (undo-tree-id846 . -1) (undo-tree-id847 . -1) (undo-tree-id848 . -1) (undo-tree-id849 . -1) (undo-tree-id850 . -1) (undo-tree-id851 . -1) (undo-tree-id852 . -1) (undo-tree-id853 . -1) (undo-tree-id854 . -1) (undo-tree-id855 . -1) (undo-tree-id856 . -1) (undo-tree-id857 . -1) (undo-tree-id858 . -1) (undo-tree-id859 . -1) (undo-tree-id860 . -1) (undo-tree-id861 . -1) (undo-tree-id862 . -1) (undo-tree-id863 . -1) (#("u" 0 1 (fontified t)) . -629) (undo-tree-id864 . -1) (undo-tree-id865 . -1) (undo-tree-id866 . -1) 630 (629 . 630) (t 25826 17937 649067 491000)) nil (25826 18018 845382 690000) 0 nil])
([nil nil ((932 . 935) (#("i" 0 1 (face font-lock-variable-name-face fontified t)) . -932) (undo-tree-id832 . -1) (932 . 933) (#("y" 0 1 (face font-lock-variable-name-face fontified t)) . -932) (undo-tree-id833 . -1) (undo-tree-id834 . -1) (undo-tree-id835 . -1) (undo-tree-id836 . -1) 933 (929 . 933) (#("i" 0 1 (face font-lock-variable-name-face fontified t)) . -929) (undo-tree-id837 . -1) (927 . 930) (925 . 927) (#("boost" 0 5 (face font-lock-variable-name-face fontified t)) . 925) (undo-tree-id838 . -4) (undo-tree-id839 . -1) (undo-tree-id840 . -1) (undo-tree-id841 . -1) (undo-tree-id842 . -1) (undo-tree-id843 . -1) (undo-tree-id844 . -5) (undo-tree-id845 . -5)) nil (25826 18018 845373 392000) 0 nil])
([nil nil ((1390 . 1393) (#("y" 0 1 (fontified nil)) . -1390) (undo-tree-id828 . -1) 1391 (1383 . 1391) (#("boost" 0 5 (fontified t)) . 1383) (undo-tree-id829 . -4) (undo-tree-id830 . -5) (undo-tree-id831 . -5)) nil (25826 18018 845366 870000) 0 nil])
([nil nil ((1560 . 1563) (#("y" 0 1 (fontified nil)) . -1560) (undo-tree-id824 . -1) 1561 (1553 . 1561) (#("boost" 0 5 (fontified t)) . 1553) (undo-tree-id825 . -4) (undo-tree-id826 . -5) (undo-tree-id827 . -5)) nil (25826 18018 845363 404000) 0 nil])
([nil nil ((1609 . 1610)) nil (25826 18018 845546 66000) 0 nil])
([nil nil ((1592 . 1597) (#("transform" 0 9 (face font-lock-variable-name-face fontified t)) . 1592) (undo-tree-id1043 . -8) (undo-tree-id1044 . -9) (undo-tree-id1045 . -9)) nil (25826 18078 78043 993000) 0 nil] [nil nil ((1588 . 1589) (1584 . 1588) (1584 . 1585) (#("    mut transform: Query<(&mut Transform, With<CameraSettings>>,
" 0 4 (fontified t) 4 7 (face font-lock-keyword-face fontified t) 7 8 (fontified t) 8 17 (face font-lock-variable-name-face fontified t) 17 19 (fontified t) 19 24 (face font-lock-type-face fontified t) 24 26 (fontified t) 26 27 (face rust-ampersand-face fontified t) 27 30 (face font-lock-keyword-face fontified t) 30 31 (fontified t) 31 40 (face font-lock-type-face fontified t) 40 42 (fontified t) 42 46 (face font-lock-type-face fontified t) 46 47 (fontified t) 47 61 (face font-lock-type-face fontified t) 61 62 (fontified t) 62 63 (syntax-table (1) fontified t) 63 65 (fontified t)) . 1584) (undo-tree-id802 . -64) (undo-tree-id803 . 39) (undo-tree-id804 . -52) (undo-tree-id805 . -52) (undo-tree-id806 . -63) (undo-tree-id807 . -63) (undo-tree-id808 . -63) (undo-tree-id809 . -63) (undo-tree-id810 . -25) (undo-tree-id811 . -25) (undo-tree-id812 . -26) (undo-tree-id813 . -26) (undo-tree-id814 . -25) (undo-tree-id815 . -25) (undo-tree-id816 . -25) (undo-tree-id817 . -25) (undo-tree-id818 . -8) (undo-tree-id819 . -8) (undo-tree-id820 . -8) (undo-tree-id821 . -8) (undo-tree-id822 . -65) (undo-tree-id823 . -65) 1592) ((1584 . 1649) (#("
" 0 1 (fontified nil)) . 1584) (undo-tree-id867 . 1) (#("    " 0 4 (fontified nil)) . 1584) (undo-tree-id868 . -4) (undo-tree-id869 . -4) (#("w" 0 1 (fontified t)) . 1588)) (25826 18018 845357 412000) 0 nil])
([nil nil ((#("W" 0 1 (face font-lock-type-face fontified t)) . 1622) (undo-tree-id1041 . -1) (undo-tree-id1042 . -1)) nil (25826 18078 78042 440000) 0 nil])
nil
([nil nil ((#("i" 0 1 (fontified t)) . 1622) (undo-tree-id1039 . -1) (undo-tree-id1040 . -1)) nil (25826 18078 78041 237000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . 1622) (undo-tree-id1037 . -1) (undo-tree-id1038 . -1)) nil (25826 18078 78040 115000) 0 nil])
([nil nil ((#("h" 0 1 (fontified t)) . 1622) (undo-tree-id1035 . -1) (undo-tree-id1036 . -1)) nil (25826 18078 78038 663000) 0 nil])
([nil nil ((1622 . 1623) (#(";" 0 1 (fontified t)) . 1622) (undo-tree-id1033 . -1) (1622 . 1623) (#("<" 0 1 (fontified t)) . 1622) (undo-tree-id1034 . -1)) nil (25826 18078 78036 869000) 0 nil])
([nil nil ((1637 . 1638) (#(">" 0 1 (syntax-table (1) fontified t)) . 1637) (undo-tree-id1032 . -1)) nil (25826 18078 78035 376000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -1895) (undo-tree-id1028 . -4) (undo-tree-id1029 . -4) (undo-tree-id1030 . -4) (undo-tree-id1031 . -4) 1899 (1894 . 1899) 1893) nil (25826 18078 78034 415000) 0 nil])
([nil nil ((1956 . 1957) (#("	" 0 1 (fontified t)) . -1956) (undo-tree-id1024 . -1) (undo-tree-id1025 . -1) (undo-tree-id1026 . -1) (undo-tree-id1027 . -1) 1957 (1955 . 1957) 1900) nil (25826 18078 78032 120000) 0 nil])
([nil nil ((#(" 
" 0 1 (fontified t) 1 2 (fontified t)) . 1956) (undo-tree-id1021 . -1) (undo-tree-id1022 . 1) (undo-tree-id1023 . -2)) nil (25826 18078 78029 776000) 0 nil])
([nil nil ((2005 . 2008) (1995 . 2005) (#("single" 0 6 (fontified t)) . -1995) (undo-tree-id956 . -1) (undo-tree-id957 . -1) (undo-tree-id958 . -3) (undo-tree-id959 . -3) (undo-tree-id960 . -4) (undo-tree-id961 . -4) (undo-tree-id962 . -5) (undo-tree-id963 . -5) (undo-tree-id964 . -6) (undo-tree-id965 . -6) (undo-tree-id966 . -6) (undo-tree-id967 . -6) (undo-tree-id968 . -6) (undo-tree-id969 . -6) (undo-tree-id970 . -6) (undo-tree-id971 . -6) 2001 (1996 . 2001) (#("i" 0 1 (fontified t)) . -1996) (undo-tree-id972 . -1) (1994 . 1997) (1989 . 1994) (#("quer" 0 4 (fontified t)) . -1989) (undo-tree-id973 . -1) (undo-tree-id974 . -1) (undo-tree-id975 . -2) (undo-tree-id976 . -2) (undo-tree-id977 . -3) (undo-tree-id978 . -3) (undo-tree-id979 . -4) (undo-tree-id980 . -4) (undo-tree-id981 . -4) (undo-tree-id982 . -4) 1993 (1989 . 1993) (#("t" 0 1 (fontified t)) . -1989) (undo-tree-id983 . -1) (undo-tree-id984 . -1) (undo-tree-id985 . -1) (undo-tree-id986 . -1) (undo-tree-id987 . -1) (undo-tree-id988 . -1) (undo-tree-id989 . -1) (undo-tree-id990 . -1) (undo-tree-id991 . -1) (undo-tree-id992 . -1) (undo-tree-id993 . -1) (undo-tree-id994 . -1) (#("r" 0 1 (fontified t)) . -1990) (undo-tree-id995 . -1) (undo-tree-id996 . -1) (undo-tree-id997 . -1) (undo-tree-id998 . -1) (undo-tree-id999 . -1) (undo-tree-id1000 . -1) (undo-tree-id1001 . -1) (undo-tree-id1002 . -1) (#("a" 0 1 (fontified t)) . -1991) (undo-tree-id1003 . -1) (undo-tree-id1004 . -1) (undo-tree-id1005 . -1) (undo-tree-id1006 . -1) 1992 (1981 . 1992) (#("i" 0 1 (fontified t)) . -1981) (undo-tree-id1007 . -1) (undo-tree-id1008 . -1) (1975 . 1982) (1966 . 1975) (#("tran" 0 4 (fontified t)) . -1966) (undo-tree-id1009 . -1) (undo-tree-id1010 . -1) (undo-tree-id1011 . -2) (undo-tree-id1012 . -2) (undo-tree-id1013 . -3) (undo-tree-id1014 . -3) (undo-tree-id1015 . -4) (undo-tree-id1016 . -4) (undo-tree-id1017 . -4) (undo-tree-id1018 . -4) (undo-tree-id1019 . -4) (undo-tree-id1020 . -4) 1970 (1963 . 1970) (1957 . 1963) (1955 . 1957) 1896) nil (25826 18078 78025 698000) 0 nil])
([nil nil ((#("    if let Ok(mut transform) = transform.get_single_mut() {
" 0 3 (fontified t) 3 4 (fontified t rear-nonsticky t) 4 6 (face font-lock-keyword-face fontified t) 6 7 (fontified t) 7 10 (face font-lock-keyword-face fontified t) 10 11 (fontified t) 11 13 (face font-lock-type-face fontified t) 13 14 (fontified t) 14 17 (face font-lock-keyword-face fontified t) 17 18 (fontified t) 18 31 (fontified t) 31 40 (fontified t) 40 56 (fontified t) 56 57 (fontified t rear-nonsticky t) 57 58 (fontified t) 58 59 (fontified t) 59 60 (fontified t)) . 1896) (undo-tree-id948 . -59) (undo-tree-id949 . -58) (undo-tree-id950 . -58) (undo-tree-id951 . -58) (undo-tree-id952 . -58) (undo-tree-id953 . -58) (undo-tree-id954 . -58) (undo-tree-id955 . -60) 1954) nil (25826 18078 77999 679000) 0 nil])
([nil nil ((#("    }
" 0 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t)) . 2476) (undo-tree-id934 . -5) (undo-tree-id935 . -4) (undo-tree-id936 . -4) (undo-tree-id937 . -6) (undo-tree-id938 . -6) (undo-tree-id939 . -6) (undo-tree-id940 . -6) (undo-tree-id941 . -4) (undo-tree-id942 . -4) (undo-tree-id943 . -4) (undo-tree-id944 . -4) (undo-tree-id945 . -4) (undo-tree-id946 . -4) (undo-tree-id947 . -6) 2480) nil (25826 18078 77995 842000) 0 nil])
([nil nil ((2177 . 2188) (#("sensiti" 0 7 (fontified t)) . -2177) (undo-tree-id886 . -1) (undo-tree-id887 . -1) (undo-tree-id888 . -2) (undo-tree-id889 . -2) (undo-tree-id890 . -3) (undo-tree-id891 . -3) (undo-tree-id892 . -4) (undo-tree-id893 . -4) (undo-tree-id894 . -4) (undo-tree-id895 . -6) (undo-tree-id896 . -6) (undo-tree-id897 . -6) (undo-tree-id898 . -7) (undo-tree-id899 . -7) (undo-tree-id900 . -7) (undo-tree-id901 . -7) (undo-tree-id902 . -7) (undo-tree-id903 . -7) 2184 (2183 . 2184) (#("i" 0 1 (fontified t)) . -2183) (undo-tree-id904 . -1) (undo-tree-id905 . -1) (2181 . 2184) (#("i" 0 1 (fontified t)) . -2181) (undo-tree-id906 . -1) (undo-tree-id907 . -1) (2172 . 2182) (#("i" 0 1 (fontified t)) . -2172) (undo-tree-id908 . -1) (undo-tree-id909 . -1) (2168 . 2173) (#("0" 0 1 (fontified t)) . -2168) (undo-tree-id910 . -1) (undo-tree-id911 . -1) (undo-tree-id912 . -1) (undo-tree-id913 . -1) (#("." 0 1 (fontified t)) . -2169) (undo-tree-id914 . -1) (undo-tree-id915 . -1) (undo-tree-id916 . -1) (undo-tree-id917 . -1) (#("0" 0 1 (fontified t)) . -2170) (undo-tree-id918 . -1) (undo-tree-id919 . -1) (undo-tree-id920 . -1) (undo-tree-id921 . -1) (#("0" 0 1 (fontified t)) . -2171) (undo-tree-id922 . -1) (undo-tree-id923 . -1) (undo-tree-id924 . -1) (undo-tree-id925 . -1) (#("0" 0 1 (fontified t)) . -2172) (undo-tree-id926 . -1) (undo-tree-id927 . -1) (undo-tree-id928 . -1) (undo-tree-id929 . -1) (#("1" 0 1 (fontified t)) . -2173) (undo-tree-id930 . -1) (undo-tree-id931 . -1) (undo-tree-id932 . -1) (undo-tree-id933 . -1) 2174) nil (25826 18078 78254 548000) 0 nil])
([nil nil ((2264 . 2275) (#("sensiti" 0 7 (fontified nil)) . 2264) (2255 . 2271) (#("0" 0 1 (fontified nil)) . -2255) (undo-tree-id1050 . 1) (undo-tree-id1051 . -1) (undo-tree-id1052 . -1) (undo-tree-id1053 . -1) (undo-tree-id1054 . -1) (#("." 0 1 (fontified nil)) . -2256) (undo-tree-id1055 . -1) (undo-tree-id1056 . -1) (#("0" 0 1 (fontified nil)) . -2257) (undo-tree-id1057 . -1) (undo-tree-id1058 . -1) (#("0" 0 1 (fontified nil)) . -2258) (undo-tree-id1059 . -1) (undo-tree-id1060 . -1) (#("0" 0 1 (fontified nil)) . -2259) (undo-tree-id1061 . -1) (undo-tree-id1062 . -1) (#("1" 0 1 (fontified t)) . -2260) (undo-tree-id1063 . -1) (undo-tree-id1064 . -1) 2261) nil (25826 18081 747776 311000) 0 nil] [nil nil ((2258 . 2269) (#("sensiti" 0 7 (fontified nil)) . 2258) (2249 . 2265) (#("w" 0 1 (fontified nil)) . -2249) (undo-tree-id870 . -1) (undo-tree-id871 . -1) (undo-tree-id872 . -1) (undo-tree-id873 . -1) (#(" " 0 1 (fontified nil)) . -2250) (undo-tree-id874 . -1) (undo-tree-id875 . -1) (undo-tree-id876 . -1) (undo-tree-id877 . -1) (#("-" 0 1 (fontified nil)) . -2251) (undo-tree-id878 . -1) (undo-tree-id879 . -1) (#("=" 0 1 (fontified nil)) . -2252) (undo-tree-id880 . -1) (undo-tree-id881 . -1) (#(" " 0 1 (fontified nil)) . -2253) (undo-tree-id882 . -1) (undo-tree-id883 . -1) (#("(" 0 1 (fontified t)) . -2254) (undo-tree-id884 . -1) (undo-tree-id885 . -1) 2255) ((2249 . 2255) (#("settings.sensiti" 0 9 (fontified nil) 9 16 (fontified nil)) . 2249) (undo-tree-id1046 . -9) (undo-tree-id1047 . -9) (2258 . 2265) (#("sensitivity" 0 11 (fontified t)) . 2258) (undo-tree-id1048 . -10) (undo-tree-id1049 . -10)) (25826 18078 77962 429000) 0 nil])
([nil nil ((1896 . 1900) (#("	" 0 1 (fontified t)) . 1896) (#(" " 0 1 (fontified t)) . 1949) (#("   " 0 3 (fontified t)) . 1954) (#("  " 0 1 (fontified t) 1 2 (fontified t)) . 1992) (#("  " 0 2 (fontified t)) . 2002) (#("   " 0 1 (fontified t) 1 3 (fontified t)) . 2078) (#(" " 0 1 (fontified t)) . 2089) (#("    " 0 2 (fontified t) 2 4 (fontified t)) . 2146) (#("    " 0 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t)) . 2243) (#(" " 0 1 (fontified t)) . 2322) (#("   " 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . 2331) (#("  " 0 2 (fontified t)) . 2368) (#("  " 0 1 (fontified t) 1 2 (fontified t)) . 2378) (#("   " 0 3 (fontified t)) . 2401) (#(" " 0 1 (fontified t)) . 2416) (#("    " 0 4 (fontified t)) . 2494) 2274) nil (25826 18107 39670 534000) 0 nil])
nil
([nil nil ((662 . 663)) nil (25826 18111 236518 819000) 0 nil] [nil nil ((662 . 664) (t 25826 18081 749070 282000)) ((#("00" 0 2 (fontified t)) . 662) (undo-tree-id1065 . -1) (undo-tree-id1066 . -1) (undo-tree-id1067 . -1) (undo-tree-id1068 . -1) (undo-tree-id1069 . -1) (undo-tree-id1070 . -1) (undo-tree-id1071 . -1) (undo-tree-id1072 . -1) (undo-tree-id1073 . -1) (undo-tree-id1074 . -1) (undo-tree-id1075 . -1) (undo-tree-id1076 . -1) (undo-tree-id1077 . -1) (undo-tree-id1078 . -1) (undo-tree-id1079 . -1) (undo-tree-id1080 . -1) (undo-tree-id1081 . -1) (t 25826 18099 519070 611000)) (25826 18099 514313 987000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . 662) (undo-tree-id1082 . -1) (undo-tree-id1083 . -1) (t 25826 18111 242404 167000)) nil (25826 18131 657952 750000) 0 nil])
nil
([nil nil ((nil rear-nonsticky nil 1567 . 1568) (#("
" 0 1 (fontified nil)) . -1923) (1567 . 1924) (t 25826 18131 662404 541000)) nil (25826 18356 565242 257000) 0 nil])
([nil nil ((nil rear-nonsticky nil 759 . 760) (#("
" 0 1 (fontified nil face font-lock-comment-face)) . -854) (759 . 855) 703) nil (25826 18356 565315 475000) 0 nil])
([nil nil ((apply 3 760 852 undo--wrap-and-run-primitive-undo 760 852 ((#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -760) 855))) nil (25826 18408 582775 919000) 0 nil] [nil nil ((760 . 764)) ((#("    " 0 4 (fontified t)) . 760)) (25826 18356 565237 218000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t)) . 790) (undo-tree-id1164 . -1) (undo-tree-id1165 . -1)) nil (25826 18408 582775 248000) 0 nil])
nil
([nil nil ((#(", Without<PlayerCamera" 0 2 (fontified t) 2 3 (face font-lock-type-face fontified t) 3 4 (face font-lock-type-face fontified t) 4 9 (face font-lock-type-face fontified t) 9 10 (fontified t) 10 22 (face font-lock-type-face fontified t)) . 824) (undo-tree-id1162 . -21) (undo-tree-id1163 . -22)) nil (25826 18408 582773 725000) 0 nil])
([nil nil ((#(">)" 0 1 (fontified t) 1 2 (fontified t)) . 824) (undo-tree-id1160 . -1) (undo-tree-id1161 . -2)) nil (25826 18408 582772 152000) 0 nil])
([nil nil ((1546 . 1553) (1536 . 1546) (#("Cam" 0 3 (face font-lock-type-face fontified t)) . -1536) (undo-tree-id1119 . -1) (undo-tree-id1120 . -1) (undo-tree-id1121 . -2) (undo-tree-id1122 . -2) (undo-tree-id1123 . -3) (undo-tree-id1124 . -3) (undo-tree-id1125 . -3) (undo-tree-id1126 . -3) (undo-tree-id1127 . -3) (undo-tree-id1128 . -3) (undo-tree-id1129 . -3) (undo-tree-id1130 . -3) (undo-tree-id1131 . -3) (undo-tree-id1132 . -3) 1539 (1533 . 1539) (1522 . 1533) (#("ca" 0 2 (fontified t)) . -1522) (undo-tree-id1133 . -1) (undo-tree-id1134 . -1) (undo-tree-id1135 . -2) (undo-tree-id1136 . -2) (undo-tree-id1137 . -2) (undo-tree-id1138 . -2) (undo-tree-id1139 . -2) (undo-tree-id1140 . -2) (undo-tree-id1141 . -2) (undo-tree-id1142 . -2) (undo-tree-id1143 . -2) (undo-tree-id1144 . -2) (undo-tree-id1145 . -2) (undo-tree-id1146 . -2) 1524 (1521 . 1524) (1513 . 1521) (#("sett" 0 4 (fontified t)) . -1513) (undo-tree-id1147 . -1) (undo-tree-id1148 . -1) (undo-tree-id1149 . -2) (undo-tree-id1150 . -2) (undo-tree-id1151 . -3) (undo-tree-id1152 . -3) (undo-tree-id1153 . -4) (undo-tree-id1154 . -4) (undo-tree-id1155 . -4) (undo-tree-id1156 . -4) (undo-tree-id1157 . -4) (undo-tree-id1158 . -4) 1517 (1510 . 1517) (#("i" 0 1 (fontified t)) . -1510) (undo-tree-id1159 . -1) (1505 . 1511) 1504) nil (25826 18408 582769 27000) 0 nil])
([nil nil ((#("	" 0 1 (fontified nil)) . -1684) (1684 . 1685) (#("	" 0 1 (fontified nil)) . 1684) (undo-tree-id1115 . -1) (undo-tree-id1116 . -1) (undo-tree-id1117 . -1) (undo-tree-id1118 . -1) (1680 . 1684) (1681 . 1682) (1679 . 1681) 1629) nil (25826 18408 582655 283000) 0 nil])
([nil nil ((#("        " 0 7 (fontified nil) 7 8 (fontified nil)) . -1585) (undo-tree-id1101 . -4) (undo-tree-id1102 . -4) (undo-tree-id1103 . -4) (undo-tree-id1104 . -4) (undo-tree-id1105 . -4) (undo-tree-id1106 . -4) (undo-tree-id1107 . -4) (undo-tree-id1108 . -4) (1580 . 1585) (#("    " 0 4 (fontified nil)) . -1555) (undo-tree-id1109 . -4) (undo-tree-id1110 . -4) (undo-tree-id1111 . -4) (undo-tree-id1112 . -4) (undo-tree-id1113 . -4) (undo-tree-id1114 . -4) (1554 . 1555) 1587) nil (25826 18408 582651 215000) 0 nil])
([nil nil ((1554 . 1562) (#("	" 0 1 (fontified t)) . 1554) (undo-tree-id1084 . -1) (undo-tree-id1085 . -1) (undo-tree-id1086 . -1) (undo-tree-id1087 . -1) (undo-tree-id1088 . -1) (undo-tree-id1089 . -1) (undo-tree-id1090 . -1) (undo-tree-id1091 . -1) (undo-tree-id1092 . -1) (undo-tree-id1093 . -1) (undo-tree-id1094 . -1) (undo-tree-id1095 . -1) (undo-tree-id1096 . -1) (undo-tree-id1097 . -1) (undo-tree-id1098 . -1) (undo-tree-id1099 . -1) (undo-tree-id1100 . -1) (1580 . 1588) (#("	" 0 1 (fontified t)) . 1580) 1555) nil (25826 18408 582641 417000) 0 nil])
([nil nil ((nil rear-nonsticky nil 686 . 687) (#("
" 0 1 (fontified nil)) . -717) (686 . 718) (t 25826 18408 589076 543000)) nil (25826 18437 739132 176000) 0 nil])
([nil nil ((1566 . 1567) (t 25826 18437 745743 761000)) nil (25826 18448 881086 124000) 0 nil])
([nil nil ((146 . 153) (#("i" 0 1 (face font-lock-type-face fontified t)) . -146) (undo-tree-id1166 . -1) (138 . 147) (#("i" 0 1 (fontified t)) . -138) (undo-tree-id1167 . -1) (undo-tree-id1168 . -1) (133 . 139) (#("!" 0 1 (fontified t)) . -133) (undo-tree-id1169 . -1) (undo-tree-id1170 . -1) (undo-tree-id1171 . -1) (undo-tree-id1172 . -1) 134 (133 . 134) (132 . 133) (t 25826 18448 885743 977000) 132) nil (25826 18472 635317 371000) 0 nil])
([nil nil ((842 . 843) (t 25826 18472 639077 783000)) nil (25826 18509 573208 664000) 0 nil])
([nil nil ((902 . 903) (901 . 902) (887 . 901) (#("Camera" 0 6 (face font-lock-type-face fontified t)) . -887) (undo-tree-id1173 . -1) (undo-tree-id1174 . -1) (undo-tree-id1175 . -2) (undo-tree-id1176 . -2) (undo-tree-id1177 . -3) (undo-tree-id1178 . -3) (undo-tree-id1179 . -4) (undo-tree-id1180 . -4) (undo-tree-id1181 . -5) (undo-tree-id1182 . -5) (undo-tree-id1183 . -6) (undo-tree-id1184 . -6) (undo-tree-id1185 . -6) (undo-tree-id1186 . -6) (undo-tree-id1187 . -6) (undo-tree-id1188 . -6) (undo-tree-id1189 . -6) (undo-tree-id1190 . -6) 893 (880 . 893) (#("i" 0 1 (face font-lock-type-face fontified t)) . -880) (undo-tree-id1191 . -1) (877 . 881)) nil (25826 18509 573204 727000) 0 nil])
([nil nil ((#("	" 0 1 (fontified nil)) . -1785) (1785 . 1786) (#("	" 0 1 (fontified nil)) . 1785) (undo-tree-id1196 . -1) (undo-tree-id1197 . -1) (undo-tree-id1198 . -1) (undo-tree-id1199 . -1) (1781 . 1785) (1782 . 1783) (1780 . 1782) (1773 . 1780) (t 25826 18509 579078 482000)) nil (25826 18640 955187 63000) 0 nil])
([nil nil ((#("	" 0 1 (fontified t)) . -1781) (undo-tree-id1192 . -1) (undo-tree-id1193 . -1) (undo-tree-id1194 . -1) (undo-tree-id1195 . -1) 1782 (1780 . 1782) 1772) nil (25826 18640 955182 83000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1790 . 1791) (#("
" 0 1 (fontified nil face font-lock-comment-face)) . -2794) (1790 . 2795)) nil (25826 18640 955171 43000) 0 nil])
([nil nil ((763 . 770)) nil (25826 18640 955169 870000) 0 nil])
([nil nil ((1005 . 1012)) nil (25826 18640 955320 203000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1795 . 1796) (#("
" 0 1 (fontified nil face font-lock-comment-face)) . -1856) (1795 . 1857)) nil (25826 18726 708044 566000) 0 nil] [nil nil ((nil rear-nonsticky nil 1837 . 1838) (nil fontified nil 1795 . 1838) (1795 . 1838)) ((#("
//     let (transform, mut controller) = q" 0 1 (fontified nil) 1 8 (face font-lock-comment-delimiter-face fontified nil) 8 42 (face font-lock-comment-face fontified nil) 42 43 (face font-lock-comment-face rear-nonsticky nil fontified nil)) . 1795) (undo-tree-id1200 . -42) (undo-tree-id1201 . -1) (undo-tree-id1202 . -42) (undo-tree-id1203 . -42) (nil fontified t 1795 . 1796) (nil rear-nonsticky t 1837 . 1838)) (25826 18640 955165 462000) 0 nil])
([nil nil ((apply 3 1796 1854 undo--wrap-and-run-primitive-undo 1796 1854 ((#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -1796) 1857))) nil (25826 18726 708043 284000) 0 nil])
nil
([nil nil ((#("    " 0 4 (fontified nil)) . -1797) (1796 . 1797)) nil (25826 18726 708041 640000) 0 nil])
([nil nil ((#("
" 0 1 (rear-nonsticky t fontified t)) . 1795) (undo-tree-id1204 . -1) (undo-tree-id1205 . -1) (undo-tree-id1206 . -1) (undo-tree-id1207 . -1) (undo-tree-id1208 . -1) (undo-tree-id1209 . -1) (undo-tree-id1210 . -1) (undo-tree-id1211 . -1) (undo-tree-id1212 . -1) (undo-tree-id1213 . -1) (undo-tree-id1214 . -1) (undo-tree-id1215 . -1) (undo-tree-id1216 . -1) (undo-tree-id1217 . -1) (undo-tree-id1218 . -1) (undo-tree-id1219 . -1)) nil (25826 18726 708185 440000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1849 . 1850) (#("
" 0 1 (fontified nil face font-lock-comment-face)) . -1940) (1849 . 1941) 1795) nil (25826 18812 659592 728000) 0 nil] [nil nil ((nil rear-nonsticky nil 1794 . 1795) (#("
" 0 1 (fontified nil face font-lock-comment-face)) . -1885) (1794 . 1886) 1782) ((#("
//     controller.translation = Some(velocity.normalize_or_zero() * time.delta_seconds());
" 0 1 (rear-nonsticky nil fontified nil) 1 4 (face font-lock-comment-delimiter-face fontified nil) 4 8 (face font-lock-comment-delimiter-face fontified nil) 8 23 (face font-lock-comment-face fontified nil) 23 33 (face font-lock-comment-face fontified nil) 33 37 (face font-lock-comment-face fontified nil) 37 66 (face font-lock-comment-face fontified nil) 66 91 (face font-lock-comment-face fontified nil) 91 92 (fontified nil face font-lock-comment-face)) . 1794) (undo-tree-id1220 . -91) (undo-tree-id1221 . -1) (undo-tree-id1222 . -91) (undo-tree-id1223 . -1) (undo-tree-id1224 . -1) (undo-tree-id1225 . -1) (1885 . 1886) (nil rear-nonsticky t 1794 . 1795)) (25826 18726 708019 759000) 0 nil])
([nil nil ((#("/" 0 1 (face font-lock-comment-delimiter-face fontified t)) . 1850) (undo-tree-id1263 . -1) (undo-tree-id1264 . -1)) nil (25826 18812 659591 476000) 0 nil])
nil
([nil nil ((#("/" 0 1 (fontified t)) . 1850) (undo-tree-id1261 . -1) (undo-tree-id1262 . -1)) nil (25826 18812 659589 532000) 0 nil])
([nil nil ((#("     " 0 1 (fontified nil) 1 5 (fontified nil)) . -1851) (1850 . 1851)) nil (25826 18812 659588 169000) 0 nil])
([nil nil ((837 . 838)) nil (25826 18812 659587 618000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t)) . 850) (undo-tree-id1259 . -1) (undo-tree-id1260 . -1)) nil (25826 18812 659587 47000) 0 nil])
([nil nil ((#("W" 0 1 (face font-lock-type-face fontified t)) . 850) (undo-tree-id1257 . -1) (undo-tree-id1258 . -1)) nil (25826 18812 659585 775000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . 850) (undo-tree-id1255 . -1) (undo-tree-id1256 . -1)) nil (25826 18812 659584 112000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . 850) (undo-tree-id1253 . -1) (undo-tree-id1254 . -1)) nil (25826 18812 659582 429000) 0 nil])
([nil nil ((#("h" 0 1 (fontified t)) . 850) (undo-tree-id1251 . -1) (undo-tree-id1252 . -1)) nil (25826 18812 659580 345000) 0 nil])
([nil nil ((#("<" 0 1 (fontified t)) . 850) (undo-tree-id1249 . -1) (undo-tree-id1250 . -1)) nil (25826 18812 659578 281000) 0 nil])
([nil nil ((850 . 855)) nil (25826 18812 659576 217000) 0 nil])
([nil nil ((883 . 884)) nil (25826 18812 659575 556000) 0 nil])
([nil nil ((#(">" 0 1 (fontified t)) . 884) (undo-tree-id1246 . 1) (undo-tree-id1247 . -1) (undo-tree-id1248 . -1)) nil (25826 18812 659573 983000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t)) . 909) (undo-tree-id1244 . -1) (undo-tree-id1245 . -1)) nil (25826 18812 659570 987000) 0 nil])
([nil nil ((1794 . 1802) (#("	" 0 1 (fontified t)) . 1794) (undo-tree-id1226 . -1) (undo-tree-id1227 . -1) (undo-tree-id1228 . -1) (undo-tree-id1229 . -1) (undo-tree-id1230 . -1) (undo-tree-id1231 . -1) (undo-tree-id1232 . -1) (undo-tree-id1233 . -1) (undo-tree-id1234 . -1) (undo-tree-id1235 . -1) (1849 . 1857) (#("	" 0 1 (fontified t)) . 1849) (undo-tree-id1236 . -1) (undo-tree-id1237 . -1) (undo-tree-id1238 . -1) (undo-tree-id1239 . -1) (undo-tree-id1240 . -1) (undo-tree-id1241 . -1) (undo-tree-id1242 . -1) (undo-tree-id1243 . -1) 2302) nil (25826 18812 659566 809000) 0 nil])
([nil nil ((829 . 835) (t 25826 18812 665751 112000)) nil (25826 18833 281611 929000) 0 nil])
([nil nil ((1842 . 1849)) nil (25826 18833 281608 573000) 0 nil])
([nil nil ((1978 . 1994) (#("speed" 0 5 (fontified t)) . -1978) (undo-tree-id1265 . -1) (undo-tree-id1266 . -1) (undo-tree-id1267 . -2) (undo-tree-id1268 . -2) (undo-tree-id1269 . -3) (undo-tree-id1270 . -3) (undo-tree-id1271 . -4) (undo-tree-id1272 . -4) (undo-tree-id1273 . -5) (undo-tree-id1274 . -5) (undo-tree-id1275 . -5) (undo-tree-id1276 . -5) (undo-tree-id1277 . -5) (undo-tree-id1278 . -5) (undo-tree-id1279 . -5) (undo-tree-id1280 . -5) 1983 (1969 . 1983) (1961 . 1969) (#("sett" 0 4 (fontified t)) . -1961) (undo-tree-id1281 . -1) (undo-tree-id1282 . -1) (undo-tree-id1283 . -2) (undo-tree-id1284 . -2) (undo-tree-id1285 . -3) (undo-tree-id1286 . -3) (undo-tree-id1287 . -4) (undo-tree-id1288 . -4) (undo-tree-id1289 . -4) (undo-tree-id1290 . -4) (undo-tree-id1291 . -4) (undo-tree-id1292 . -4) 1965 (1958 . 1965) (t 25826 18833 285751 507000)) nil (25826 18863 196053 47000) 0 nil])
([nil nil ((1907 . 1920) (1994 . 2004) 1993) nil (25826 18863 196028 481000) 0 nil])
([nil nil ((823 . 827) (t 25826 18863 202418 772000)) nil (25826 18901 641039 476000) 0 nil])
([nil nil ((847 . 856) (895 . 898) (896 . 901) (919 . 925) 826) nil (25826 18901 641035 178000) 0 nil])
([nil nil ((624 . 630) (#("Fly" 0 3 (face font-lock-type-face fontified t)) . 624) (undo-tree-id1293 . -2) (undo-tree-id1294 . -3) (undo-tree-id1295 . -3) (t 25826 18901 645752 872000)) nil (25826 18939 441212 69000) 0 nil])
([nil nil ((1939 . 1942) (#("i" 0 1 (fontified t)) . -1939) (undo-tree-id1302 . -1) (undo-tree-id1303 . -1) (1935 . 1940) (1930 . 1935) (1921 . 1930) (#("tran" 0 4 (fontified t)) . -1921) (undo-tree-id1304 . -1) (undo-tree-id1305 . -1) (undo-tree-id1306 . -2) (undo-tree-id1307 . -2) (undo-tree-id1308 . -3) (undo-tree-id1309 . -3) (undo-tree-id1310 . -4) (undo-tree-id1311 . -4) (undo-tree-id1312 . -4) (undo-tree-id1313 . -4) (undo-tree-id1314 . -4) (undo-tree-id1315 . -4) 1925 (1918 . 1925) (1907 . 1918) (#("trans" 0 5 (fontified t)) . -1907) (undo-tree-id1316 . -1) (undo-tree-id1317 . -1) (undo-tree-id1318 . -2) (undo-tree-id1319 . -2) (undo-tree-id1320 . -3) (undo-tree-id1321 . -3) (undo-tree-id1322 . -4) (undo-tree-id1323 . -4) (undo-tree-id1324 . -5) (undo-tree-id1325 . -5) (undo-tree-id1326 . -5) (undo-tree-id1327 . -5) (undo-tree-id1328 . -5) (undo-tree-id1329 . -5) (undo-tree-id1330 . -5) (undo-tree-id1331 . -5) 1912 (1900 . 1912) (1898 . 1900) (t 25826 18939 445753 582000) 1872) nil (25826 19074 447747 330000) 0 nil])
([nil nil ((1017 . 1024) (#("C" 0 1 (face font-lock-type-face fontified t)) . -1017) (undo-tree-id1298 . -1) (undo-tree-id1299 . -1) (undo-tree-id1300 . -1) (undo-tree-id1301 . -1) 1018 (1017 . 1018)) nil (25826 19074 447732 513000) 0 nil])
([nil nil ((1850 . 1857)) nil (25826 19074 447728 295000) 0 nil])
([nil nil ((1935 . 1942)) nil (25826 19074 447727 764000) 0 nil])
([nil nil ((1963 . 1964)) nil (25826 19074 447726 892000) 0 nil])
([nil nil ((1913 . 1921) (#("	" 0 1 (fontified t)) . 1913) (undo-tree-id1296 . -1) (undo-tree-id1297 . -1) 1963) nil (25826 19074 447724 317000) 0 nil])
([nil nil ((1927 . 1928) (#("." 0 1 (fontified t)) . 1927) (undo-tree-id1332 . -1) (undo-tree-id1333 . -1) (undo-tree-id1334 . -1) (undo-tree-id1335 . -1) (undo-tree-id1336 . -1) (undo-tree-id1337 . -1) (undo-tree-id1338 . -1) (undo-tree-id1339 . -1) (undo-tree-id1340 . -1) (undo-tree-id1341 . -1) (undo-tree-id1342 . -1) (undo-tree-id1343 . -1) (undo-tree-id1344 . -1) (undo-tree-id1345 . -1) (undo-tree-id1346 . -1) (undo-tree-id1347 . -1) (t 25826 19074 455756 137000)) nil (25826 19079 769324 612000) 0 nil])
([nil nil ((1946 . 1949) (#("i" 0 1 (fontified t)) . -1946) (undo-tree-id1348 . -1) (undo-tree-id1349 . -1) (1937 . 1947) (1921 . 1937) (#("camera_trans" 0 6 (fontified t) 6 12 (fontified t)) . -1921) (undo-tree-id1350 . -7) (undo-tree-id1351 . -7) (undo-tree-id1352 . -6) (undo-tree-id1353 . -6) (undo-tree-id1354 . -6) (undo-tree-id1355 . -6) (undo-tree-id1356 . -6) (undo-tree-id1357 . -6) (undo-tree-id1358 . -6) (undo-tree-id1359 . -6) (undo-tree-id1360 . -6) (undo-tree-id1361 . -6) (undo-tree-id1362 . -6) (undo-tree-id1363 . -6) (undo-tree-id1364 . -6) (undo-tree-id1365 . -6) (undo-tree-id1366 . -6) (undo-tree-id1367 . -6) (undo-tree-id1368 . -6) (undo-tree-id1369 . -6) (undo-tree-id1370 . -6) (undo-tree-id1371 . -6) (undo-tree-id1372 . -6) (undo-tree-id1373 . -6) (undo-tree-id1374 . -6) (undo-tree-id1375 . -6) (undo-tree-id1376 . -7) (undo-tree-id1377 . -7) (undo-tree-id1378 . -7) (undo-tree-id1379 . -7) (undo-tree-id1380 . -7) (undo-tree-id1381 . -8) (undo-tree-id1382 . -8) (undo-tree-id1383 . -9) (undo-tree-id1384 . -9) (undo-tree-id1385 . -10) (undo-tree-id1386 . -10) (undo-tree-id1387 . -11) (undo-tree-id1388 . -11) (undo-tree-id1389 . -12) (undo-tree-id1390 . -7) (undo-tree-id1391 . -12) (undo-tree-id1392 . -12) (undo-tree-id1393 . -12) 1933 (1928 . 1933) (#("translation" 0 11 (fontified t)) . 1928) (undo-tree-id1394 . -10) (undo-tree-id1395 . -11) (undo-tree-id1396 . -11) (t 25826 19079 775756 235000)) nil (25826 19087 892194 598000) 0 nil])
([nil nil ((1243 . 1250) (t 25826 19087 895756 389000)) nil (25826 19105 388902 632000) 0 nil])
([nil nil ((1249 . 1250) (#("-" 0 1 (fontified t)) . 1249) (undo-tree-id1397 . -1)) nil (25826 19105 388901 79000) 0 nil])
([nil nil ((1309 . 1316)) nil (25826 19105 388893 665000) 0 nil])
([nil nil ((1375 . 1382)) nil (25826 19105 388892 363000) 0 nil])
([nil nil ((1439 . 1446)) nil (25826 19105 388889 607000) 0 nil])
([nil nil ((1730 . 1733) (1726 . 1730) (t 25826 19105 395756 731000)) nil (25826 19117 577339 278000) 0 nil])
([nil nil ((2037 . 2043) (2036 . 2037) (2015 . 2036) (t 25826 19117 582423 616000)) nil (25826 19196 694926 688000) 0 nil])
([nil nil ((624 . 627) (#("Player" 0 6 (face font-lock-type-face fontified t)) . 624) (undo-tree-id1398 . -5) (undo-tree-id1399 . -6) (undo-tree-id1400 . -6) (undo-tree-id1401 . -6) (undo-tree-id1402 . -6) (undo-tree-id1403 . -6) (undo-tree-id1404 . -6) (undo-tree-id1405 . -6) (undo-tree-id1406 . -6) (undo-tree-id1407 . -6) (undo-tree-id1408 . -6) (t 25826 19196 699091 775000)) nil (25826 19258 962799 930000) 0 nil])
([nil nil ((624 . 630) (#("Fly" 0 3 (face font-lock-type-face fontified t)) . 624) (undo-tree-id1409 . -2) (undo-tree-id1410 . -2) (undo-tree-id1411 . -2) (undo-tree-id1412 . -2) (undo-tree-id1413 . -2) (undo-tree-id1414 . -2) (undo-tree-id1415 . -2) (undo-tree-id1416 . -2) (undo-tree-id1417 . -3) (undo-tree-id1418 . -3) (t 25826 19258 969092 921000)) nil (25826 19325 270384 252000) 0 nil])
([nil nil ((nil rear-nonsticky nil 131 . 132) (#("
" 0 1 (fontified nil)) . -174) (131 . 175) 100 (t 25826 19325 275760 828000)) nil (25826 19400 796916 456000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1914 . 1915) (#("
" 0 1 (fontified nil face font-lock-comment-face)) . -2153) (1914 . 2154) 1902) nil (25826 19400 796915 394000) 0 nil])
([nil nil ((apply 15 1915 2139 undo--wrap-and-run-primitive-undo 1915 2139 ((#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -2086) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -2044) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -2038) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -2000) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -1915) 2154))) nil (25826 19400 796914 312000) 0 nil])
([nil nil ((#("	    " 0 1 (fontified nil) 1 5 (fontified nil)) . -2143) (undo-tree-id1419 . -5) (undo-tree-id1420 . -5) (undo-tree-id1421 . -5) (undo-tree-id1422 . -5) (2143 . 2144) (#("	" 0 1 (fontified nil)) . 2143) (2139 . 2143) (2144 . 2145) (2138 . 2144) 2086) nil (25826 19400 796912 588000) 0 nil])
([nil nil ((1919 . 1923) (2000 . 2002) (2008 . 2010) (2038 . 2042) (2052 . 2056) (2086 . 2088) (2094 . 2096) (2139 . 2143) 2143) nil (25826 19400 796899 113000) 0 nil])
([nil nil ((161 . 163) (#("i" 0 1 (face font-lock-constant-face fontified t)) . -161) (undo-tree-id1423 . -1) (156 . 162) (155 . 156) (t 25826 19400 802428 908000) 140) nil (25826 19430 490747 140000) 0 nil])
([nil nil ((#("#![allow(dead_code)]
" 0 8 (fontified t face font-lock-preprocessor-face) 8 20 (face font-lock-preprocessor-face fontified t) 20 21 (fontified t)) . 1) (undo-tree-id1455 . -20) (undo-tree-id1456 . -4) (undo-tree-id1457 . -4) (undo-tree-id1458 . -4) (undo-tree-id1459 . -4) (undo-tree-id1460 . -4) (undo-tree-id1461 . -21) 5) nil (25826 19513 598334 987000) 0 nil] [nil nil ((160 . 167) (t 25826 19413 529095 827000)) ((#("crate::" 0 5 (face font-lock-keyword-face fontified t) 5 7 (fontified t)) . 160) (undo-tree-id1424 . 2) (undo-tree-id1425 . -7) (undo-tree-id1426 . -7) (undo-tree-id1427 . -5) (undo-tree-id1428 . -5) (undo-tree-id1429 . -5) (undo-tree-id1430 . -5) (undo-tree-id1431 . -5) (undo-tree-id1432 . -5) (undo-tree-id1433 . -5) (undo-tree-id1434 . -5) (undo-tree-id1435 . -4) (undo-tree-id1436 . -4) (undo-tree-id1437 . -4) (undo-tree-id1438 . -5) (undo-tree-id1439 . -4) (undo-tree-id1440 . -4) (undo-tree-id1441 . -4) (t 25826 19425 622429 385000)) (25826 19425 617438 735000) 0 nil])
([nil nil ((#("use bevy_rapier3d::prelude::*;
" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 17 (face font-lock-constant-face fontified t) 17 19 (fontified t) 19 26 (face font-lock-constant-face fontified t) 26 30 (fontified t) 30 31 (fontified t)) . 741) (undo-tree-id1442 . -30) (undo-tree-id1443 . -30) (undo-tree-id1444 . -4) (undo-tree-id1445 . -4) (undo-tree-id1446 . -4) (undo-tree-id1447 . -4) (undo-tree-id1448 . -4) (undo-tree-id1449 . -4) (undo-tree-id1450 . -4) (undo-tree-id1451 . -4) (undo-tree-id1452 . -4) (undo-tree-id1453 . -4) (undo-tree-id1454 . -31) 745) nil (25826 19513 597891 625000) 0 nil])
nil
([nil nil ((nil rear-nonsticky nil 110 . 111) (#("
" 0 1 (fontified nil)) . -141) (110 . 142) 64) nil (25826 19513 597873 562000) 0 nil])
([nil nil ((#("mod ui;
" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 6 (face font-lock-constant-face fontified t) 6 7 (fontified t) 7 8 (fontified t)) . 166) (undo-tree-id1462 . -7) (undo-tree-id1463 . 4) (undo-tree-id1464 . -8) (t 25826 19513 602431 76000)) nil (25826 19529 903828 462000) 0 nil])
([nil nil ((170 . 177) (t 25826 19529 909098 60000)) nil (25826 19535 270461 55000) 0 nil])
([nil nil ((5 . 31) (#(";
use crate::ui::MazeTimer" 0 1 (fontified t) 1 2 (fontified t) 2 5 (face font-lock-keyword-face fontified t) 5 6 (fontified t) 6 11 (face font-lock-keyword-face fontified t) 11 13 (fontified t) 13 15 (face font-lock-constant-face fontified t) 15 17 (fontified t) 17 26 (face font-lock-type-face fontified t)) . 164) (undo-tree-id1465 . -2) (undo-tree-id1466 . -2) (undo-tree-id1467 . 24) (undo-tree-id1468 . -2) (undo-tree-id1469 . -2) (undo-tree-id1470 . -2) (undo-tree-id1471 . -2) (undo-tree-id1472 . -2) (undo-tree-id1473 . -2) (undo-tree-id1474 . -2) (undo-tree-id1475 . -2) (undo-tree-id1476 . -6) (undo-tree-id1477 . -6) (undo-tree-id1478 . -7) (undo-tree-id1479 . -2) (undo-tree-id1480 . -13) (undo-tree-id1481 . -2) (undo-tree-id1482 . -13) (undo-tree-id1483 . -13) (undo-tree-id1484 . -13) (undo-tree-id1485 . -13) (undo-tree-id1486 . -13) (undo-tree-id1487 . -13) (undo-tree-id1488 . -13) 177) nil (25826 19535 270457 529000) 0 nil])
([nil nil ((nil rear-nonsticky nil 976 . 977) (#("
" 0 1 (fontified nil face font-lock-comment-face)) . -1018) (976 . 1019) 975 (t 25826 19535 272431 490000)) nil (25826 19576 378977 540000) 0 nil])
([nil nil ((#("/" 0 1 (face font-lock-comment-delimiter-face fontified t)) . 977) (undo-tree-id1493 . -1) (undo-tree-id1494 . -1)) nil (25826 19576 378976 518000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . 977) (undo-tree-id1491 . -1) (undo-tree-id1492 . -1)) nil (25826 19576 378974 203000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 977) (undo-tree-id1489 . -1) (undo-tree-id1490 . -1)) nil (25826 19576 378969 84000) 0 nil])
([nil nil ((#("keys.any_pressed([KeyCode::Up, KeyCode::Down, KeyCode::Left, KeyCode::Right])" 0 8 (fontified t) 8 9 (fontified t) 9 18 (fontified t) 18 25 (face font-lock-type-face fontified t) 25 27 (fontified t) 27 29 (face font-lock-type-face fontified t) 29 31 (fontified t) 31 38 (face font-lock-type-face fontified t) 38 40 (fontified t) 40 44 (face font-lock-type-face fontified t) 44 45 (fontified t) 45 46 (fontified t) 46 53 (face font-lock-type-face fontified t) 53 55 (fontified t) 55 59 (face font-lock-type-face fontified t) 59 61 (fontified t) 61 68 (face font-lock-type-face fontified t) 68 70 (fontified t) 70 75 (face font-lock-type-face fontified t) 75 77 (fontified t)) . 1951) (undo-tree-id1591 . -76) (undo-tree-id1592 . -77) (undo-tree-id1593 . -77) (t 25826 19576 382432 291000)) nil (25826 20168 569850 129000) 0 nil])
([nil nil ((1950 . 1951) (#("             " 0 1 (fontified nil) 1 3 (fontified nil) 3 11 (fontified nil) 11 13 (fontified nil)) . 1950) (undo-tree-id1578 . -1) (undo-tree-id1579 . -1) (undo-tree-id1580 . -1) (undo-tree-id1581 . -1) (undo-tree-id1582 . -1) (undo-tree-id1583 . -1) (undo-tree-id1584 . -1) (undo-tree-id1585 . -1) (#("
" 0 1 (fontified t)) . -1951) (undo-tree-id1586 . -1) (undo-tree-id1587 . -1) (undo-tree-id1588 . -1) (undo-tree-id1589 . -1) (undo-tree-id1590 . -1) 1950) nil (25826 20168 569847 675000) 0 nil])
([nil nil ((#("&" 0 1 (fontified t)) . 1951) (undo-tree-id1576 . -1) (undo-tree-id1577 . -1)) nil (25826 20168 569325 285000) 0 nil])
([nil nil ((#("&" 0 1 (fontified t)) . 1951) (undo-tree-id1574 . -1) (undo-tree-id1575 . -1)) nil (25826 20168 569323 471000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 1951) (undo-tree-id1572 . -1) (undo-tree-id1573 . -1)) nil (25826 20168 569321 718000) 0 nil])
([nil nil ((1315 . 1321) (#("%" 0 1 (fontified t)) . -1315) (undo-tree-id1564 . -1) (undo-tree-id1565 . -1) (#("%" 0 1 (fontified t)) . -1316) (undo-tree-id1566 . -1) (undo-tree-id1567 . -1) 1317 (1311 . 1317) (#("v" 0 1 (fontified t)) . -1311) (undo-tree-id1568 . -1) (undo-tree-id1569 . -1) (undo-tree-id1570 . -1) (undo-tree-id1571 . -1) 1312 (1311 . 1312)) nil (25826 20168 569319 754000) 0 nil])
([nil nil ((1403 . 1405) (1386 . 1403) (#("norm" 0 4 (fontified t)) . -1386) (undo-tree-id1502 . -1) (undo-tree-id1503 . -1) (undo-tree-id1504 . -2) (undo-tree-id1505 . -2) (undo-tree-id1506 . -3) (undo-tree-id1507 . -3) (undo-tree-id1508 . -4) (undo-tree-id1509 . -4) (undo-tree-id1510 . -4) (undo-tree-id1511 . -4) 1390 (1380 . 1390) (1373 . 1380) (#("for" 0 3 (face font-lock-keyword-face fontified t)) . -1373) (undo-tree-id1512 . -1) (undo-tree-id1513 . -1) (undo-tree-id1514 . -2) (undo-tree-id1515 . -2) (undo-tree-id1516 . -3) (undo-tree-id1517 . -3) (undo-tree-id1518 . -3) (undo-tree-id1519 . -3) (undo-tree-id1520 . -3) (undo-tree-id1521 . -3) (undo-tree-id1522 . -3) (undo-tree-id1523 . -3) (undo-tree-id1524 . -3) (undo-tree-id1525 . -3) 1376 (1373 . 1376) (1372 . 1373) (1356 . 1372) (#("cam" 0 3 (fontified t)) . -1356) (undo-tree-id1526 . -1) (undo-tree-id1527 . -1) (undo-tree-id1528 . -2) (undo-tree-id1529 . -2) (undo-tree-id1530 . -3) (undo-tree-id1531 . -3) (undo-tree-id1532 . -3) (undo-tree-id1533 . -3) (undo-tree-id1534 . -3) (undo-tree-id1535 . -3) (undo-tree-id1536 . -3) (undo-tree-id1537 . -3) (undo-tree-id1538 . -3) (undo-tree-id1539 . -3) (undo-tree-id1540 . -3) (undo-tree-id1541 . -3) (undo-tree-id1542 . -3) (undo-tree-id1543 . -3) 1359 (1348 . 1359) (#("X" 0 1 (face font-lock-type-face fontified t)) . -1348) (undo-tree-id1544 . -1) (undo-tree-id1545 . -1) (undo-tree-id1546 . -1) (undo-tree-id1547 . -1) 1349 (1347 . 1349) (1346 . 1347) (#(")" 0 1 (fontified t)) . -1346) (undo-tree-id1548 . -1) (undo-tree-id1549 . -1) (undo-tree-id1550 . -1) (undo-tree-id1551 . -1) (undo-tree-id1552 . -1) (undo-tree-id1553 . -1) (undo-tree-id1554 . -1) (undo-tree-id1555 . -1) (#("," 0 1 (fontified t)) . -1347) (undo-tree-id1556 . -1) (undo-tree-id1557 . -1) (undo-tree-id1558 . -1) (undo-tree-id1559 . -1) (#(" " 0 1 (fontified t)) . -1348) (undo-tree-id1560 . -1) (undo-tree-id1561 . -1) (undo-tree-id1562 . -1) (undo-tree-id1563 . -1) 1349 (1347 . 1349)) nil (25826 20168 569312 180000) 0 nil])
([nil nil ((1299 . 1317) (1321 . 1342) (1350 . 1363) (1351 . 1358) (1355 . 1365) (1356 . 1366) (1384 . 1402) (1385 . 1402) (1405 . 1419) (#("," 0 1 (fontified t)) . 1405) (undo-tree-id1495 . 1) (#("
       " 0 1 (fontified t) 1 5 (fontified t) 5 8 (fontified t)) . 2045) (undo-tree-id1496 . -1) (undo-tree-id1497 . -1) (undo-tree-id1498 . -1) (undo-tree-id1499 . -1) (undo-tree-id1500 . -1) (undo-tree-id1501 . -1) 1404) nil (25826 20168 569280 571000) 0 nil])
([nil nil ((1569 . 1570) (#("-" 0 1 (fontified t)) . 1569) (undo-tree-id1599 . -1) (t 25826 20168 575777 225000)) nil (25826 20232 971908 193000) 0 nil])
([nil nil ((#("camera_transform.forward()," 0 27 (fontified t)) . 1572) (undo-tree-id1596 . -26) (undo-tree-id1597 . -27) (undo-tree-id1598 . -27)) nil (25826 20232 971906 139000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1762 . 1763) (nil fontified nil 1572 . 1763) (1572 . 1763) 1571) nil (25826 20232 971903 33000) 0 nil])
([nil nil ((1762 . 1763)) nil (25826 20232 971901 771000) 0 nil])
([nil nil ((1560 . 1578) (1762 . 1776) (#("," 0 1 (fontified t)) . 1762) (undo-tree-id1594 . -1) (undo-tree-id1595 . -1)) nil (25826 20232 971899 326000) 0 nil])
([nil nil ((1638 . 1642) (#("forward" 0 7 (fontified t)) . 1638) (undo-tree-id1608 . -6) (undo-tree-id1609 . -7) (undo-tree-id1610 . -7) (t 25826 20232 979111 779000)) nil (25826 20256 472502 210000) 0 nil])
([nil nil ((1710 . 1714) (#("forward" 0 7 (fontified t)) . 1710) (undo-tree-id1603 . -6) (undo-tree-id1604 . -3) (undo-tree-id1605 . -3) (undo-tree-id1606 . -7) (undo-tree-id1607 . -7)) nil (25826 20256 472499 524000) 0 nil])
([nil nil ((#("
                    " 0 1 (fontified t) 1 21 (fontified t)) . 1600) (#("
                 " 0 1 (fontified t) 1 18 (fontified t)) . 1647) (#("  " 0 2 (fontified t)) . 1666) (#("
                " 0 1 (fontified t) 1 17 (fontified t)) . 1672) (undo-tree-id1600 . -1) (#("   " 0 3 (fontified t)) . 1690) (1718 . 1719) (#("," 0 1 (fontified t)) . 1718) (#("     " 0 5 (fontified t)) . 1720) (#("       )
" 0 9 (fontified t)) . 1729) (undo-tree-id1601 . -7) (undo-tree-id1602 . -7) 1713) nil (25826 20256 472493 684000) 0 nil])
([nil nil ((#("transform" 0 9 (fontified nil)) . 2445) (2454 . 2455) (#("transform" 0 9 (fontified t)) . 2422) (2431 . 2432) (#("transform" 0 2 (fontified t) 2 9 (fontified t)) . 2359) (2368 . 2369) (#("transform" 0 9 (fontified t)) . 2055) (2064 . 2065) (#("transform" 0 9 (fontified t)) . 1776) (1785 . 1786) (#("transform" 0 9 (fontified t)) . 1720) (1729 . 1730) (#("transform" 0 9 (fontified nil)) . 1607) (1616 . 1617) (#("transform" 0 9 (fontified t)) . 1583) (1592 . 1593) (#("transform" 0 9 (fontified t)) . 1426) (1435 . 1436) (nil fontified t 1359 . 1360) (#("transform" 0 9 (fontified t)) . 1359) (1368 . 1369) (nil fontified t 1092 . 1093) (t 25826 20256 479112 223000) (#("transform" 0 9 (fontified t)) . 1092) (t 25826 20256 479112 223000) (1101 . 1102) (t 25826 20256 479112 223000)) nil (25826 20478 347431 609000) 0 nil])
([nil nil ((nil fontified t 2385 . 2386) (#("camera" 0 4 (fontified t) 4 6 (fontified t)) . 2385) (2391 . 2394) (#("camera" 0 6 (fontified t)) . 2021) (2027 . 2030) (#("camera" 0 6 (fontified t)) . 1983) (1989 . 1992) (#("camera" 0 6 (fontified t)) . 1748) (1754 . 1757) (#("camera" 0 6 (fontified t)) . 1695) (1701 . 1704) (#("camera" 0 6 (fontified t)) . 1561) (1567 . 1570) (#("camera" 0 6 (fontified t)) . 1407) (1413 . 1416) (nil fontified t 1343 . 1346) (#("camera" 0 6 (fontified t)) . 1343) (1349 . 1352) (#("camera" 0 6 (fontified t)) . 1079) (1085 . 1088) (950 . 953) ("cam" . 950) (#("Camera" 0 6 (face font-lock-type-face fontified t)) . 950) (956 . 959) (#("camera" 0 6 (face font-lock-variable-name-face fontified t)) . 795) (801 . 804)) nil (25826 20478 347428 443000) 0 nil])
([nil nil ((953 . 956)) nil (25826 20478 347425 999000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . 1104) (undo-tree-id1649 . -1) (undo-tree-id1650 . -1)) nil (25826 20478 347425 348000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . 1104) (undo-tree-id1647 . -1) (undo-tree-id1648 . -1)) nil (25826 20478 347423 765000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . 1104) (undo-tree-id1645 . -1) (undo-tree-id1646 . -1)) nil (25826 20478 347421 500000) 0 nil])
([nil nil ((#("
                    " 0 1 (fontified t) 1 21 (fontified t)) . 1322) (undo-tree-id1611 . -9) (undo-tree-id1612 . -9) (undo-tree-id1613 . -9) (undo-tree-id1614 . -9) (#("
        " 0 1 (fontified t) 1 9 (fontified t)) . 1361) (undo-tree-id1615 . -9) (undo-tree-id1616 . -9) (undo-tree-id1617 . -9) (undo-tree-id1618 . -9) (#("           " 0 3 (fontified t) 3 4 (fontified t) 4 11 (fontified t)) . 1371) (#("
                 " 0 1 (fontified t) 1 10 (fontified t) 10 11 (fontified t) 11 18 (fontified t)) . 1386) (undo-tree-id1619 . -9) (undo-tree-id1620 . -9) (undo-tree-id1621 . -9) (undo-tree-id1622 . -9) (#("  " 0 2 (fontified t)) . 1405) (#(",
                " 0 2 (fontified t) 2 18 (fontified t)) . 1424) (undo-tree-id1623 . -18) (undo-tree-id1624 . -18) (undo-tree-id1625 . -18) (undo-tree-id1626 . -18) (undo-tree-id1627 . -18) (undo-tree-id1628 . -18) (undo-tree-id1629 . -1) (undo-tree-id1630 . -1) (undo-tree-id1631 . -10) (undo-tree-id1632 . -10) (undo-tree-id1633 . -10) (undo-tree-id1634 . -10) (#("
                " 0 1 (fontified t) 1 17 (fontified t)) . 1443) (undo-tree-id1635 . -9) (undo-tree-id1636 . -9) (undo-tree-id1637 . -9) (undo-tree-id1638 . -9) (#("
                    " 0 1 (fontified t) 1 5 (fontified t) 5 21 (fontified t)) . 1600) (undo-tree-id1639 . -5) (undo-tree-id1640 . -5) (undo-tree-id1641 . -9) (undo-tree-id1642 . -9) (undo-tree-id1643 . -9) (undo-tree-id1644 . -9) 1104) nil (25826 20478 347416 531000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . 1489) (undo-tree-id1655 . -1) (undo-tree-id1656 . -1) (t 25826 20478 349116 433000)) nil (25826 20488 231512 729000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . 1489) (undo-tree-id1653 . -1) (undo-tree-id1654 . -1)) nil (25826 20488 231510 434000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . 1489) (undo-tree-id1651 . -1) (undo-tree-id1652 . -1)) nil (25826 20488 231506 677000) 0 nil])
([nil nil ((1866 . 1869) (t 25826 20488 235783 292000)) nil (25826 20495 919541 376000) 0 nil])
([nil nil ((1300 . 1302) (t 25826 20495 925783 437000)) nil (25826 20786 459708 343000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -1408) (undo-tree-id1659 . -1) (undo-tree-id1660 . -1) (undo-tree-id1661 . -1) (undo-tree-id1662 . -1) 1409 (1406 . 1409) (#("%" 0 1 (fontified t)) . -1406) (undo-tree-id1663 . -1) (undo-tree-id1664 . -1) (#(":" 0 1 (fontified t)) . -1407) (undo-tree-id1665 . -1) (undo-tree-id1666 . -1) 1408 (1394 . 1408) (#("i" 0 1 (fontified t)) . -1394) (undo-tree-id1667 . -1) (undo-tree-id1668 . -1) (1391 . 1395) (#("r" 0 1 (fontified t)) . -1391) (undo-tree-id1669 . -1) (undo-tree-id1670 . -1) (undo-tree-id1671 . -1) (undo-tree-id1672 . -1) 1392 (1389 . 1392) (1386 . 1389) 1301) nil (25826 20786 459706 480000) 0 nil])
([nil nil ((1387 . 1403) (#("		" 0 2 (fontified t)) . 1387) (undo-tree-id1657 . -2) (undo-tree-id1658 . -2) 1407) nil (25826 20786 459696 471000) 0 nil])
([nil nil ((#("                velocity += Vec3::X
" 0 16 (fontified t) 16 28 (fontified t) 28 32 (face font-lock-type-face fontified t) 32 34 (fontified t) 34 35 (face font-lock-type-face fontified t) 35 36 (fontified t)) . 1387) (undo-tree-id1677 . -35) (undo-tree-id1678 . 1) (undo-tree-id1679 . -18) (undo-tree-id1680 . -18) (undo-tree-id1681 . -21) (undo-tree-id1682 . -35) (undo-tree-id1683 . -35) (undo-tree-id1684 . -34) (undo-tree-id1685 . -34) (undo-tree-id1686 . -34) (undo-tree-id1687 . -34) (undo-tree-id1688 . -34) (undo-tree-id1689 . -34) (undo-tree-id1690 . -34) (undo-tree-id1691 . -34) (undo-tree-id1692 . -34) (undo-tree-id1693 . -34) (undo-tree-id1694 . -34) (undo-tree-id1695 . -34) (undo-tree-id1696 . -34) (undo-tree-id1697 . -34) (undo-tree-id1698 . -34) (undo-tree-id1699 . -34) (undo-tree-id1700 . -34) (undo-tree-id1701 . -34) (undo-tree-id1702 . -34) (undo-tree-id1703 . -34) (undo-tree-id1704 . -34) (undo-tree-id1705 . -36) 1421 (t 25826 20786 465789 7000)) nil (25826 20827 654301 112000) 0 nil])
([nil nil ((apply 2 1284 1385 undo--wrap-and-run-primitive-undo 1284 1385 ((#("//" 0 2 (face font-lock-comment-delimiter-face fontified t)) . -1300) 1387))) nil (25826 20827 654287 777000) 0 nil])
([nil nil ((1625 . 1626) (#("-" 0 1 (fontified t)) . 1625) (undo-tree-id1676 . -1)) nil (25826 20827 654286 645000) 0 nil])
([nil current ((1634 . 1638) (#("right" 0 5 (fontified t)) . 1634) (undo-tree-id1673 . -4) (undo-tree-id1674 . -5) (undo-tree-id1675 . -5)) nil (25826 20827 654283 98000) 0 nil])
nil
