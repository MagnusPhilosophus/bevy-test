(undo-tree-save-format-version . 1)
"c1f49777f63e434422b5368798c612594c9c613a"
[nil nil nil nil (25817 7956 982066 71000) 0 nil]
([nil nil ((nil rear-nonsticky nil 1 . 2) (#("
" 0 1 (fontified nil)) . -89) (1 . 90) (t 25817 7668 182711 931000)) nil (25817 7956 982064 799000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t rear-nonsticky t)) . 1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1)) nil (25817 7956 982063 206000) 0 nil])
([nil nil ((nil rear-nonsticky nil 88 . 89) (#("
" 0 1 (fontified nil)) . -628) (88 . 629) 38) nil (25817 7956 982060 601000) 0 nil])
([nil nil ((88 . 89) 38) nil (25817 7956 982059 419000) 0 nil])
([nil nil ((nil rear-nonsticky nil 629 . 630) (#("
" 0 1 (fontified nil)) . -3065) (629 . 3066)) nil (25817 7956 982058 336000) 0 nil])
([nil nil ((#("	" 0 1 (fontified nil)) . -3170) (3170 . 3171) (#("	" 0 1 (fontified nil)) . 3170) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (3166 . 3170) (3167 . 3168) (3165 . 3167) (3163 . 3165) (3142 . 3163) (3138 . 3142) (#("i" 0 1 (fontified t face font-lock-function-name-face)) . -3138) (undo-tree-id209 . -1) (undo-tree-id210 . 1) (3137 . 3139) (3133 . 3137) (3128 . 3133) (3126 . 3128) (3111 . 3126) (#("F" 0 1 (fontified t face font-lock-type-face)) . -3111) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) 3112 (3111 . 3112) (#("C" 0 1 (fontified t face font-lock-type-face)) . -3111) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (#("a" 0 1 (fontified t face font-lock-type-face)) . -3112) (undo-tree-id233 . -1) (undo-tree-id234 . 1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) 3113 (3104 . 3113) (#("i" 0 1 (fontified t face font-lock-type-face)) . -3104) (undo-tree-id240 . -1) (3099 . 3105) (3095 . 3099) (#("i" 0 1 (fontified t)) . -3095) (undo-tree-id241 . -1) (3093 . 3096) (3090 . 3093) (#("i" 0 1 (fontified t face font-lock-type-face)) . -3090) (undo-tree-id242 . -1) (3086 . 3091) (3077 . 3086) (#("Fly" 0 3 (fontified t face font-lock-type-face)) . -3077) (undo-tree-id243 . -3) (undo-tree-id244 . -2) (undo-tree-id245 . -3) (undo-tree-id246 . -3) (undo-tree-id247 . -3) (undo-tree-id248 . -3) 3080 (3076 . 3080) (#("c" 0 1 (fontified t)) . -3076) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) 3077 (3076 . 3077) (#(" " 0 1 (fontified t)) . -3076) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) 3077 (3066 . 3077) (#("i" 0 1 (fontified t)) . -3066) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (#("m" 0 1 (fontified t)) . -3067) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (#("p" 0 1 (fontified t)) . -3068) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (#("l" 0 1 (fontified t face font-lock-keyword-face)) . -3069) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) 3070 (3066 . 3070) (#("i" 0 1 (fontified t)) . -3066) (undo-tree-id313 . -1) (3066 . 3067) (3065 . 3066) 3065) nil (25817 7956 982050 71000) 0 nil])
([nil nil ((3188 . 3189) (3177 . 3188) (#("add_s" 0 5 (fontified t)) . -3177) (undo-tree-id189 . -5) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -2) (undo-tree-id193 . -2) (undo-tree-id194 . -3) (undo-tree-id195 . -3) (undo-tree-id196 . -4) (undo-tree-id197 . -4) (undo-tree-id198 . -4) (undo-tree-id199 . -4) (undo-tree-id200 . -5) (undo-tree-id201 . -5) (undo-tree-id202 . -5) (undo-tree-id203 . -5) (undo-tree-id204 . -5) 3182 (3181 . 3182) (3177 . 3181) (3171 . 3177) (3167 . 3171) (3165 . 3167) 3133) nil (25817 7956 981961 665000) 0 nil])
([nil nil ((3171 . 3172) (#("	    " 0 5 (fontified nil)) . 3171) (undo-tree-id170 . 5) (undo-tree-id171 . -5) (undo-tree-id172 . -5) (undo-tree-id173 . -5) (undo-tree-id174 . -5) (undo-tree-id175 . -5) (undo-tree-id176 . -5) (undo-tree-id177 . -5) (undo-tree-id178 . -5) (undo-tree-id179 . -5) (undo-tree-id180 . -5) (undo-tree-id181 . -5) (undo-tree-id182 . -5) (undo-tree-id183 . -5) (undo-tree-id184 . -5) (undo-tree-id185 . -5) (undo-tree-id186 . -5) (#("
" 0 1 (fontified t)) . -3171) (undo-tree-id187 . 1) (undo-tree-id188 . -1) 3170) nil (25817 7956 981951 165000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 3171) (undo-tree-id168 . -1) (undo-tree-id169 . -1)) nil (25817 7956 981941 46000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t)) . -3192) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (#("r" 0 1 (fontified t)) . -3193) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) 3194 (3192 . 3194) (#("c" 0 1 (fontified t)) . -3192) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) 3193 (#("a" 0 1 (fontified t)) . -3193) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) 3194 (3183 . 3194)) nil (25817 7956 981936 899000) 0 nil])
([nil nil ((3223 . 3235) (3212 . 3223) (#("add" 0 3 (fontified t)) . -3212) (undo-tree-id86 . -3) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -2) (undo-tree-id90 . -2) (undo-tree-id91 . -3) (undo-tree-id92 . -3) (undo-tree-id93 . -3) (undo-tree-id94 . -3) (undo-tree-id95 . -3) (undo-tree-id96 . -3) (undo-tree-id97 . -3) 3215 (3213 . 3215) (3211 . 3213) (3205 . 3211) (#(";" 0 1 (fontified t)) . -3205) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) 3206 (3204 . 3206) (3192 . 3204) (#("setu" 0 4 (fontified t)) . -3192) (undo-tree-id102 . -4) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -2) (undo-tree-id106 . -2) (undo-tree-id107 . -3) (undo-tree-id108 . -3) (undo-tree-id109 . -4) (undo-tree-id110 . -4) (undo-tree-id111 . -4) (undo-tree-id112 . -4) (undo-tree-id113 . -4) 3196 (3192 . 3196) (#("S" 0 1 (fontified t face font-lock-type-face)) . -3192) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (#("e" 0 1 (fontified t face font-lock-type-face)) . -3193) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (#("t" 0 1 (fontified t face font-lock-type-face)) . -3194) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (#("u" 0 1 (fontified t face font-lock-type-face)) . -3195) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (#("p" 0 1 (fontified t face font-lock-type-face)) . -3196) (undo-tree-id134 . -1) (undo-tree-id135 . -1) 3197 (3192 . 3197)) nil (25817 7956 981807 426000) 0 nil])
([nil nil ((3192 . 3193)) nil (25817 7956 980600 883000) 0 nil])
([nil nil ((3207 . 3226) (#("initial" 0 7 (fontified t)) . -3207) (undo-tree-id67 . -7) (undo-tree-id68 . -2) (undo-tree-id69 . -2) (undo-tree-id70 . -2) (undo-tree-id71 . -2) (undo-tree-id72 . -4) (undo-tree-id73 . -4) (undo-tree-id74 . -4) (undo-tree-id75 . -6) (undo-tree-id76 . -6) (undo-tree-id77 . -7) (undo-tree-id78 . -7) (undo-tree-id79 . -7) (undo-tree-id80 . -7) (undo-tree-id81 . -7) 3214 (3211 . 3214) (#("i" 0 1 (fontified t)) . -3211) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (3209 . 3212) (#("i" 0 1 (fontified t)) . -3209) (undo-tree-id84 . -1) (3207 . 3210) (#("i" 0 1 (fontified t)) . -3207) (undo-tree-id85 . -1) (3205 . 3208)) nil (25817 7956 980597 907000) 0 nil])
([nil nil ((#("fn grab_cursor(mut window: Query<&mut Window, With<PrimaryWindow>>, keys: Res<Input<KeyCode>>) {
    let mut window = window.get_single_mut().expect(\"Failed to find window\");
    if keys.just_pressed(KeyCode::Tab) {
        toggle_grab_cursor(&mut window);
    }
}

" 0 2 (fontified t face font-lock-keyword-face) 2 3 (fontified t) 3 14 (fontified t face font-lock-function-name-face) 14 15 (fontified t) 15 18 (fontified t face font-lock-keyword-face) 18 19 (fontified t) 19 25 (fontified t face font-lock-variable-name-face) 25 27 (fontified t) 27 32 (fontified t face font-lock-type-face) 32 33 (fontified t) 33 34 (fontified t face rust-ampersand-face) 34 37 (fontified t face font-lock-keyword-face) 37 38 (fontified t) 38 40 (fontified t face font-lock-type-face) 40 44 (fontified t face font-lock-type-face) 44 46 (fontified t) 46 50 (fontified t face font-lock-type-face) 50 51 (fontified t) 51 64 (fontified t face font-lock-type-face) 64 68 (fontified t) 68 72 (fontified t face font-lock-variable-name-face) 72 74 (fontified t) 74 77 (fontified t face font-lock-type-face) 77 78 (fontified t) 78 83 (fontified t face font-lock-type-face) 83 84 (fontified t) 84 91 (fontified t face font-lock-type-face) 91 97 (fontified t) 97 101 (fontified t) 101 104 (fontified t face font-lock-keyword-face) 104 105 (fontified t) 105 108 (fontified t face font-lock-keyword-face) 108 109 (fontified t) 109 115 (fontified t face font-lock-variable-name-face) 115 128 (fontified t) 128 149 (fontified t) 149 172 (fontified t face font-lock-string-face) 172 175 (fontified t) 175 179 (fontified t) 179 181 (fontified t face font-lock-keyword-face) 181 200 (fontified t) 200 207 (fontified t face font-lock-type-face) 207 209 (fontified t) 209 212 (fontified t face font-lock-type-face) 212 243 (fontified t) 243 244 (fontified t face rust-ampersand-face) 244 247 (fontified t face font-lock-keyword-face) 247 265 (fontified t) 265 266 (fontified t)) . 2800) (undo-tree-id0 . -265) (undo-tree-id1 . -265) (undo-tree-id2 . -265) (undo-tree-id3 . -265) (undo-tree-id4 . -265) (undo-tree-id5 . -266) (undo-tree-id6 . -266) (undo-tree-id7 . -266) (undo-tree-id8 . -266) (undo-tree-id9 . -266) (undo-tree-id10 . -266) (undo-tree-id11 . -266) (undo-tree-id12 . -266) (undo-tree-id13 . -266) (undo-tree-id14 . -266) (undo-tree-id15 . -266) (undo-tree-id16 . -266) (undo-tree-id17 . -266) (undo-tree-id18 . -266) (undo-tree-id19 . -266) (undo-tree-id20 . -266) (undo-tree-id21 . -266) (undo-tree-id22 . -266) (undo-tree-id23 . -266) (undo-tree-id24 . -266) (undo-tree-id25 . -265) (undo-tree-id26 . -265) (undo-tree-id27 . -263) (undo-tree-id28 . -263) (undo-tree-id29 . -261) (undo-tree-id30 . -261) (undo-tree-id31 . -255) (undo-tree-id32 . -255) (undo-tree-id33 . -214) (undo-tree-id34 . -214) (undo-tree-id35 . -163) (undo-tree-id36 . -163) (undo-tree-id37 . -66) (undo-tree-id38 . -66) (undo-tree-id39 . -66) (undo-tree-id40 . -66) (undo-tree-id41 . -163) (undo-tree-id42 . -163) (undo-tree-id43 . -66) (undo-tree-id44 . -66) (undo-tree-id45 . -66) (undo-tree-id46 . -265) (undo-tree-id47 . -266) (undo-tree-id48 . -66) (undo-tree-id49 . -265) (undo-tree-id50 . -66) (undo-tree-id51 . -66) (undo-tree-id52 . -163) (undo-tree-id53 . -163) (undo-tree-id54 . -215) (undo-tree-id55 . -215) (undo-tree-id56 . -256) (undo-tree-id57 . -256) (undo-tree-id58 . -262) (undo-tree-id59 . -262) (undo-tree-id60 . -264) (undo-tree-id61 . -264) (undo-tree-id62 . -265) (undo-tree-id63 . -265) (undo-tree-id64 . -265) (undo-tree-id65 . -265) (undo-tree-id66 . -266) 3065) nil (25817 7956 982207 667000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2603 . 2604) (#("
" 0 1 (fontified nil)) . -2869) (2603 . 2870)) nil (25817 7986 513275 331000) 0 nil] [nil nil ((nil rear-nonsticky nil 2681 . 2682) (#("
" 0 1 (fontified nil)) . -2947) (2681 . 2948) 2604) ((#("
fn grab_cursor(mut window: Query<&mut Window, With<PrimaryWindow>>, keys: Res<Input<KeyCode>>) {
    let mut window = window.get_single_mut().expect(\"Failed to find window\");
    if keys.just_pressed(KeyCode::Tab) {
        toggle_grab_cursor(&mut window);
    }
}

" 0 1 (fontified nil rear-nonsticky nil) 1 3 (fontified nil face font-lock-keyword-face) 3 4 (fontified nil) 4 15 (fontified nil face font-lock-function-name-face) 15 16 (fontified nil) 16 19 (fontified nil face font-lock-keyword-face) 19 20 (fontified nil) 20 26 (fontified nil face font-lock-variable-name-face) 26 28 (fontified nil) 28 33 (fontified nil face font-lock-type-face) 33 34 (fontified nil) 34 35 (fontified nil face rust-ampersand-face) 35 38 (fontified nil face font-lock-keyword-face) 38 39 (fontified nil) 39 41 (fontified nil face font-lock-type-face) 41 45 (fontified nil face font-lock-type-face) 45 47 (fontified nil) 47 51 (fontified nil face font-lock-type-face) 51 52 (fontified nil) 52 65 (fontified nil face font-lock-type-face) 65 69 (fontified nil) 69 73 (fontified nil face font-lock-variable-name-face) 73 75 (fontified nil) 75 78 (fontified nil face font-lock-type-face) 78 79 (fontified nil) 79 84 (fontified nil face font-lock-type-face) 84 85 (fontified nil) 85 92 (fontified nil face font-lock-type-face) 92 98 (fontified nil) 98 102 (fontified t) 102 105 (fontified t face font-lock-keyword-face) 105 106 (fontified t) 106 109 (fontified t face font-lock-keyword-face) 109 110 (fontified t) 110 116 (fontified t face font-lock-variable-name-face) 116 129 (fontified t) 129 150 (fontified t) 150 173 (fontified t face font-lock-string-face) 173 176 (fontified t) 176 180 (fontified t) 180 182 (fontified t face font-lock-keyword-face) 182 201 (fontified t) 201 208 (fontified t face font-lock-type-face) 208 210 (fontified t) 210 213 (fontified t face font-lock-type-face) 213 244 (fontified t) 244 245 (fontified t face rust-ampersand-face) 245 248 (fontified t face font-lock-keyword-face) 248 266 (fontified t) 266 267 (fontified nil)) . 2681) (undo-tree-id317 . -266) (undo-tree-id318 . -1) (undo-tree-id319 . -266) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (2947 . 2948) (nil rear-nonsticky t 2681 . 2682)) (25817 7956 980521 534000) 0 nil])
([nil nil ((3281 . 3292) (#("gra" 0 3 (fontified t)) . -3281) (undo-tree-id323 . -3) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -2) (undo-tree-id327 . -2) (undo-tree-id328 . -3) (undo-tree-id329 . -3) (undo-tree-id330 . -3) (undo-tree-id331 . -3) (undo-tree-id332 . -3) 3284 (3281 . 3284) (3279 . 3281) (3268 . 3279) (#("cam" 0 3 (fontified t)) . -3268) (undo-tree-id333 . -3) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -2) (undo-tree-id337 . -2) (undo-tree-id338 . -3) (undo-tree-id339 . -3) (undo-tree-id340 . -3) (undo-tree-id341 . -3) (undo-tree-id342 . -3) (undo-tree-id343 . -3) (undo-tree-id344 . -3) 3271 (3266 . 3271) (3255 . 3266) (#("camera" 0 6 (fontified t)) . -3255) (undo-tree-id345 . -6) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (undo-tree-id348 . -2) (undo-tree-id349 . -2) (undo-tree-id350 . -3) (undo-tree-id351 . -3) (undo-tree-id352 . -4) (undo-tree-id353 . -4) (undo-tree-id354 . -5) (undo-tree-id355 . -5) (undo-tree-id356 . -6) (undo-tree-id357 . -6) (undo-tree-id358 . -6) (undo-tree-id359 . -6) (undo-tree-id360 . -6) (undo-tree-id361 . -6) (undo-tree-id362 . -6) (undo-tree-id363 . -6) (undo-tree-id364 . -6) 3261 (3255 . 3261)) nil (25817 7986 513270 672000) 0 nil])
nil
([nil nil ((3300 . 3301) 2282) nil (25817 7986 513224 756000) 0 nil])
([nil nil ((#("	" 0 1 (fontified nil)) . -3306) (3306 . 3307) (#("	" 0 1 (fontified nil)) . 3306) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (3302 . 3306) (3303 . 3304) (3301 . 3303) (t 25817 7986 516049 977000) 3301) nil (25817 8015 869017 624000) 0 nil])
([nil nil ((#("
    }" 0 1 (fontified t) 1 5 (fontified t) 5 6 (fontified t)) . 3301) (undo-tree-id369 . -1) (undo-tree-id370 . -5) (undo-tree-id371 . -5) (undo-tree-id372 . -5) (undo-tree-id373 . -5) (undo-tree-id374 . -6) (undo-tree-id375 . -6) (undo-tree-id376 . -6) (undo-tree-id377 . -6) (undo-tree-id378 . -5) (undo-tree-id379 . -5) (undo-tree-id380 . -5) (undo-tree-id381 . -5) (undo-tree-id382 . -1) (undo-tree-id383 . -5) (undo-tree-id384 . -5) (undo-tree-id385 . 1) (undo-tree-id386 . -6) (undo-tree-id387 . -5) (undo-tree-id388 . -5) (undo-tree-id389 . -5) (undo-tree-id390 . -6) 3306) nil (25817 8015 869013 346000) 0 nil])
([nil nil ((3227 . 3228)) nil (25817 8015 869000 392000) 0 nil])
([nil nil ((3295 . 3296)) nil (25817 8015 868999 600000) 0 nil])
([nil nil ((#("    " 0 4 (fontified nil)) . -3303) (undo-tree-id365 . -4) (undo-tree-id366 . -4) (undo-tree-id367 . -4) (undo-tree-id368 . -4) (3307 . 3308) (3302 . 3307) 3301) nil (25817 8015 868997 977000) 0 nil])
([nil nil ((3166 . 3174) (#("	" 0 1 (fontified t)) . 3166) (3229 . 3237) (#("	" 0 1 (fontified t)) . 3229) 3303) nil (25817 8015 868982 839000) 0 nil])
([nil nil ((1 . 22) (1 . 2) (t 25817 8015 872717 79000)) nil (25817 8114 553868 290000) 0 nil])
([nil nil ((#("prelude::*;
use bevy::" 0 7 (fontified t face font-lock-constant-face) 7 11 (fontified t) 11 12 (fontified t) 12 15 (fontified t face font-lock-keyword-face) 15 16 (fontified t) 16 20 (fontified t face font-lock-constant-face) 20 22 (fontified t)) . 11) (undo-tree-id395 . 11) (undo-tree-id396 . -10) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (undo-tree-id399 . -2) (undo-tree-id400 . -2) (undo-tree-id401 . -3) (undo-tree-id402 . -3) (undo-tree-id403 . -4) (undo-tree-id404 . -4) (undo-tree-id405 . -5) (undo-tree-id406 . -5) (undo-tree-id407 . -6) (undo-tree-id408 . -6) (undo-tree-id409 . -7) (undo-tree-id410 . -7) (undo-tree-id411 . -7) (undo-tree-id412 . -7) (undo-tree-id413 . -10) (undo-tree-id414 . -10) (undo-tree-id415 . -10) (undo-tree-id416 . -10) (undo-tree-id417 . -10) (undo-tree-id418 . -10) (undo-tree-id419 . -10) (undo-tree-id420 . -10) (undo-tree-id421 . -10) (undo-tree-id422 . -10) (undo-tree-id423 . -10) (58 . 80) 21) nil (25817 8114 553863 511000) 0 nil])
([nil nil ((283 . 284) (#("4" 0 1 (fontified t)) . 283) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (t 25817 8114 559385 209000)) nil (25817 14370 90660 701000) 0 nil])
([nil nil ((288 . 289) (#("4" 0 1 (fontified t)) . 288) (undo-tree-id426 . -1) (undo-tree-id427 . -1)) nil (25817 14370 90657 705000) 0 nil])
([nil nil ((293 . 294) (#("4" 0 1 (fontified t)) . 293) (undo-tree-id424 . -1) (undo-tree-id425 . -1)) nil (25817 14370 90651 804000) 0 nil])
([nil nil ((#("Confined" 0 2 (fontified t face font-lock-type-face) 2 4 (fontified t face font-lock-type-face) 4 8 (fontified t face font-lock-type-face)) . 2461) (undo-tree-id442 . -1) (undo-tree-id443 . -7) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -8) (undo-tree-id452 . -8) (t 25817 14370 92811 204000)) nil (25817 15628 891380 962000) 0 nil])
([nil nil ((2461 . 2468)) nil (25817 15628 891373 528000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t face font-lock-type-face)) . -2465) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (#("u" 0 1 (fontified t face font-lock-type-face)) . -2466) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (#("d" 0 1 (fontified t face font-lock-type-face)) . -2467) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) 2468) nil (25817 15628 891370 933000) 0 nil])
([nil nil ((2465 . 2467)) nil (25817 15628 891349 463000) 0 nil])
([nil nil ((315 . 316) (#("ZERO" 0 4 (face font-lock-type-face fontified t)) . 315) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -4) (undo-tree-id9 . -4) (undo-tree-id10 . -3) (t 25817 58140 167723 64000)) nil (25817 59742 240349 626000) 0 nil])
([nil nil ((apply -27 390 675 undo--wrap-and-run-primitive-undo 390 675 ((666 . 669) (643 . 646) (585 . 588) (571 . 574) (544 . 547) (506 . 509) (472 . 475) (435 . 438) (394 . 397) 646)) (t 25818 13059 869565 219000)) nil (25818 39907 177229 542000) 0 nil])
([nil nil ((#("	" 0 1 (fontified nil)) . -721) (721 . 722) (#("	" 0 1 (fontified nil)) . 721) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (717 . 721) (718 . 719) (716 . 718) (704 . 716) (#("i" 0 1 (face font-lock-type-face fontified t)) . -704) (undo-tree-id149 . -1) (699 . 705) (698 . 699) (#("i" 0 1 (face font-lock-type-face fontified t)) . -698) (undo-tree-id150 . -1) (693 . 699) (#("i" 0 1 (face font-lock-type-face fontified t)) . -693) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (678 . 694) (#("a" 0 1 (fontified t)) . -678) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (#("m" 0 1 (fontified t)) . -679) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (#("m" 0 1 (fontified t)) . -680) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (#("a" 0 1 (fontified t)) . -681) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (#("n" 0 1 (fontified t)) . -682) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (#("d" 0 1 (fontified t)) . -683) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (#("s" 0 1 (fontified t)) . -684) (undo-tree-id177 . -1) (undo-tree-id178 . -1) 685 (680 . 685) (677 . 680) (672 . 677) (t 25818 39907 176589 440000) 662) nil (25818 40073 880561 557000) 0 nil])
([nil nil ((722 . 723)) nil (25818 40073 880507 395000) 0 nil])
([nil nil ((723 . 724)) nil (25818 40073 880506 203000) 0 nil])
([nil nil ((#("    " 0 4 (fontified nil)) . -830) (undo-tree-id54 . -4) (undo-tree-id55 . -4) (undo-tree-id56 . -4) (undo-tree-id57 . -4) (834 . 835) (828 . 834) (826 . 828) (817 . 826) (#("Tran" 0 4 (face font-lock-type-face fontified t)) . -817) (undo-tree-id58 . -4) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -2) (undo-tree-id62 . -2) (undo-tree-id63 . -3) (undo-tree-id64 . -3) (undo-tree-id65 . -4) (undo-tree-id66 . -4) (undo-tree-id67 . -4) 821 (817 . 821) (815 . 817) (806 . 815) (#("trans" 0 5 (fontified t)) . -806) (undo-tree-id68 . -5) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -2) (undo-tree-id72 . -2) (undo-tree-id73 . -3) (undo-tree-id74 . -3) (undo-tree-id75 . -4) (undo-tree-id76 . -4) (undo-tree-id77 . -5) (undo-tree-id78 . -5) (undo-tree-id79 . -5) 811 (806 . 811) (804 . 806) (803 . 804) (#("	" 0 1 (fontified nil)) . -802) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (803 . 804) (800 . 803) (789 . 800) (783 . 789) (782 . 783) (#(";" 0 1 (fontified t)) . -782) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) 783 (776 . 783) (768 . 776) (#(":" 0 1 (fontified t)) . -768) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (#(" " 0 1 (fontified t)) . -769) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) 770 (767 . 770) (#("n" 0 1 (fontified t)) . -767) (undo-tree-id96 . -1) (undo-tree-id97 . -1) 768 (762 . 768) (#("a" 0 1 (fontified t)) . -762) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) 763 (761 . 763) (755 . 761) (753 . 755) (#("B" 0 1 (face font-lock-type-face fontified t)) . -753) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (#("u" 0 1 (face font-lock-type-face fontified t)) . -754) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -755) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (#("d" 0 1 (face font-lock-type-face fontified t)) . -756) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -757) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -758) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) 759 (737 . 759) (#("Direc" 0 5 (face font-lock-type-face fontified t)) . -737) (undo-tree-id128 . -5) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -3) (undo-tree-id132 . -3) (undo-tree-id133 . -4) (undo-tree-id134 . -4) (undo-tree-id135 . -5) (undo-tree-id136 . -5) (undo-tree-id137 . -5) (undo-tree-id138 . -5) (undo-tree-id139 . -5) 742 (738 . 742) (#("i" 0 1 (face font-lock-type-face fontified t)) . -738) (undo-tree-id140 . -1) (737 . 739) (731 . 737) (#("i" 0 1 (fontified t)) . -731) (undo-tree-id141 . -1) (724 . 732) (#("i" 0 1 (fontified t)) . -724) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (719 . 725) (#("i" 0 1 (fontified t)) . -719) (undo-tree-id144 . -1) (718 . 720) (716 . 718) 679) nil (25818 40073 880496 695000) 0 nil])
([nil nil ((864 . 872) (863 . 864) (#("." 0 1 (fontified t)) . -863) (undo-tree-id28 . -1) (undo-tree-id29 . -1) 864 (850 . 864) (#("5" 0 1 (face font-lock-type-face fontified t)) . -850) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) 851 (850 . 851) (#("<" 0 1 (syntax-table (1) fontified t)) . -850) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) 851 (845 . 851) (834 . 845) (#("tran" 0 4 (fontified t)) . -834) (undo-tree-id40 . -4) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -2) (undo-tree-id44 . -2) (undo-tree-id45 . -3) (undo-tree-id46 . -3) (undo-tree-id47 . -4) (undo-tree-id48 . -4) (undo-tree-id49 . -4) (undo-tree-id50 . -4) (undo-tree-id51 . -4) (undo-tree-id52 . -4) (undo-tree-id53 . -4) 838 (834 . 838) (828 . 834) 806) nil (25818 40073 879311 373000) 0 nil])
([nil nil ((928 . 939) (922 . 928) (911 . 922) (905 . 911) (#("i" 0 1 (fontified t)) . -905) (undo-tree-id26 . -1) (900 . 906) (884 . 900) (#("i" 0 1 (fontified t)) . -884) (undo-tree-id27 . -1) (879 . 885) (873 . 879) (872 . 873)) nil (25818 40073 879291 545000) 0 nil])
([nil nil ((717 . 725) (#("	" 0 1 (fontified t)) . 717) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (756 . 757) (#("	" 0 1 (fontified t)) . 756) (761 . 768) (784 . 786) (#("	" 0 1 (fontified t)) . 784) (789 . 795) (801 . 809) (#("	" 0 1 (fontified t)) . 801) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (805 . 813) (#("	" 0 1 (fontified t)) . 805) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (829 . 835) (#("	" 0 1 (fontified t)) . 829) (834 . 836) (874 . 881) (#("	" 0 1 (fontified t)) . 874) (879 . 880) (923 . 931) (#("	" 0 1 (fontified t)) . 923) (940 . 948) (#("	" 0 1 (fontified t)) . 940) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (942 . 943) 938) nil (25818 40092 84558 680000) 0 nil])
([nil nil ((nil rear-nonsticky nil 135 . 136) (nil fontified nil 111 . 136) (111 . 136) (t 25818 40073 883258 287000)) nil (25818 40096 204407 901000) 0 nil] [nil nil ((nil rear-nonsticky nil 107 . 108) (nil fontified nil 83 . 108) (83 . 108) 82 (t 25818 40073 883258 287000)) ((#("use std::f32::consts::PI;" 0 3 (face font-lock-type-face fontified nil) 3 4 (fontified nil) 4 7 (face font-lock-constant-face fontified nil) 7 9 (fontified nil) 9 12 (face font-lock-type-face fontified nil) 12 14 (fontified nil) 14 20 (face font-lock-constant-face fontified nil) 20 22 (fontified nil) 22 24 (face font-lock-type-face fontified nil) 24 25 (rear-nonsticky nil fontified nil)) . 83) (undo-tree-id179 . -24) (undo-tree-id180 . -24) (undo-tree-id181 . -24) (nil rear-nonsticky t 107 . 108)) (25818 40092 84314 943000) 0 nil])
([nil nil ((136 . 137) 135) nil (25818 40096 204403 453000) 0 nil])
nil
([nil nil ((1034 . 1045) (1032 . 1034) (t 25818 40096 206591 914000) 1031) nil (25818 40106 508283 666000) 0 nil])
([nil nil ((1033 . 1041) (#("	" 0 1 (fontified t)) . 1033) (undo-tree-id182 . -1) (undo-tree-id183 . -1) 1044) nil (25818 40106 508279 387000) 0 nil])
([nil nil ((nil rear-nonsticky nil 419 . 420) (#("
" 0 1 (fontified nil)) . -611) (415 . 612) 414 (t 25818 40106 506592 63000)) nil (25818 44428 780261 687000) 0 nil])
([nil nil ((apply -21 220 458 undo--wrap-and-run-primitive-undo 220 458 ((430 . 433) (408 . 411) (394 . 397) (367 . 370) (276 . 279) (248 . 251) (224 . 227) 220))) nil (25818 44428 780260 485000) 0 nil])
([nil nil ((526 . 528)) nil (25818 44428 780259 843000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . 528) (undo-tree-id194 . 1) (undo-tree-id195 . -1) (undo-tree-id196 . -1)) nil (25818 44428 780258 972000) 0 nil])
([nil nil ((532 . 534)) nil (25818 44428 780256 748000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . 534) (undo-tree-id191 . 1) (undo-tree-id192 . -1) (undo-tree-id193 . -1)) nil (25818 44428 780255 846000) 0 nil])
([nil nil ((538 . 540)) nil (25818 44428 780253 231000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . 540) (undo-tree-id188 . 1) (undo-tree-id189 . -1) (undo-tree-id190 . -1)) nil (25818 44428 780251 919000) 0 nil])
([nil nil ((561 . 580) (#("X" 0 1 (face font-lock-type-face fontified t)) . -561) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) 562) nil (25818 44428 780247 881000) 0 nil])
([nil nil ((543 . 560) 579) nil (25818 44428 780233 955000) 0 nil])
([nil nil ((528 . 529) (t 25818 44428 783320 669000)) nil (25818 44439 633056 660000) 0 nil])
([nil nil ((535 . 536)) nil (25818 44439 633055 47000) 0 nil])
([nil nil ((542 . 543)) nil (25818 44439 633050 388000) 0 nil])
([nil nil ((#("-" 0 1 (fontified t)) . 533) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (t 25818 44439 633320 819000)) nil (25818 44447 552145 100000) 0 nil])
([nil nil ((538 . 539) (#(" " 0 1 (fontified t)) . -538) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (#("a" 0 1 (fontified t)) . -539) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (#("a" 0 1 (fontified t)) . -540) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (#("a" 0 1 (fontified t)) . -541) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (#("a" 0 1 (fontified t)) . -542) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (#("a" 0 1 (fontified t)) . -543) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (#("a" 0 1 (fontified t)) . -544) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (#("a" 0 1 (fontified t)) . -545) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (#("a" 0 1 (fontified t)) . -546) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (#("a" 0 1 (fontified t)) . -547) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (#("a" 0 1 (fontified t)) . -548) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (#("a" 0 1 (fontified t)) . -549) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (#("a" 0 1 (fontified t)) . -550) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (#("a" 0 1 (fontified t)) . -551) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (#("a" 0 1 (fontified t)) . -552) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) 553 (539 . 553) (t 25818 44447 553320 931000)) nil (25818 44526 204570 630000) 0 nil])
([nil nil ((527 . 528) (#("10" 0 2 (fontified t)) . 527) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -2) (undo-tree-id209 . -2)) nil (25818 44526 204397 155000) 0 nil])
([nil nil ((532 . 533) (#("10" 0 2 (fontified t)) . 532) (undo-tree-id202 . -1) (undo-tree-id203 . -2) (undo-tree-id204 . -2)) nil (25818 44526 204392 777000) 0 nil])
([nil nil ((538 . 539) (#("10" 0 2 (fontified t)) . 538) (undo-tree-id199 . -1) (undo-tree-id200 . -2) (undo-tree-id201 . -2)) nil (25818 44526 204386 735000) 0 nil])
([nil nil ((#("    // commands.spawn((
    //     Camera3dBundle {
    //         transform: Transform::from_xyz(0.0, 0.0, 0.0).looking_at(Vec3::X, Vec3::Y),
    //         ..default()
    //     },
    //     FlyCamera,
    // ));
" 0 4 (fontified t) 4 7 (face font-lock-comment-delimiter-face fontified t) 7 24 (face font-lock-comment-face fontified t) 24 28 (fontified t) 28 31 (face font-lock-comment-delimiter-face fontified t) 31 35 (face font-lock-comment-delimiter-face fontified t) 35 49 (face font-lock-comment-face fontified t) 49 52 (face font-lock-comment-face fontified t) 52 56 (fontified t) 56 59 (face font-lock-comment-delimiter-face fontified t) 59 67 (face font-lock-comment-delimiter-face fontified t) 67 76 (face font-lock-comment-face fontified t) 76 78 (face font-lock-comment-face fontified t) 78 87 (face font-lock-comment-face fontified t) 87 124 (face font-lock-comment-face fontified t) 124 128 (face font-lock-comment-face fontified t) 128 130 (face font-lock-comment-face fontified t) 130 131 (face font-lock-comment-face fontified t) 131 133 (face font-lock-comment-face fontified t) 133 137 (face font-lock-comment-face fontified t) 137 139 (face font-lock-comment-face fontified t) 139 140 (face font-lock-comment-face fontified t) 140 143 (face font-lock-comment-face fontified t) 143 147 (fontified t) 147 150 (face font-lock-comment-delimiter-face fontified t) 150 158 (face font-lock-comment-delimiter-face fontified t) 158 170 (face font-lock-comment-face fontified t) 170 174 (fontified t) 174 177 (face font-lock-comment-delimiter-face fontified t) 177 181 (face font-lock-comment-delimiter-face fontified t) 181 184 (face font-lock-comment-face fontified t) 184 188 (fontified t) 188 191 (face font-lock-comment-delimiter-face fontified t) 191 195 (face font-lock-comment-delimiter-face fontified t) 195 204 (face font-lock-comment-face fontified t) 204 206 (face font-lock-comment-face fontified t) 206 210 (fontified t) 210 213 (face font-lock-comment-delimiter-face fontified t) 213 216 (face font-lock-comment-face fontified t) 216 217 (face font-lock-comment-face fontified t)) . 220) (undo-tree-id361 . -215) (undo-tree-id362 . -215) (undo-tree-id363 . -9) (undo-tree-id364 . -216) (undo-tree-id365 . -9) (undo-tree-id366 . -215) (undo-tree-id367 . -215) (undo-tree-id368 . -217) (undo-tree-id369 . -9) (undo-tree-id370 . -215) (undo-tree-id371 . -215) (undo-tree-id372 . -215) (undo-tree-id373 . -193) (undo-tree-id374 . -193) (undo-tree-id375 . -179) (undo-tree-id376 . -179) (undo-tree-id377 . -152) (undo-tree-id378 . -152) (undo-tree-id379 . -61) (undo-tree-id380 . -61) (undo-tree-id381 . -33) (undo-tree-id382 . -33) (undo-tree-id383 . -9) (undo-tree-id384 . -9) (undo-tree-id385 . -9) (undo-tree-id386 . -217) 229 (t 25818 44526 209988 672000)) nil (25818 44547 490788 829000) 0 nil])
([nil nil ((#("    " 0 4 (fontified nil)) . -243) (undo-tree-id84 . -4) (undo-tree-id85 . -4) (undo-tree-id86 . -4) (undo-tree-id87 . -4) (247 . 248) (242 . 247) (240 . 242) (238 . 240) (229 . 238) (#("Fly" 0 3 (fontified t face font-lock-type-face)) . -229) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -2) (undo-tree-id91 . -2) (undo-tree-id92 . -3) (undo-tree-id93 . -3) (undo-tree-id94 . -3) (undo-tree-id95 . -3) 232 (225 . 232) (#("i" 0 1 (fontified t face font-lock-type-face)) . -225) (undo-tree-id96 . -1) (222 . 226) (213 . 222) (#("Trans" 0 5 (fontified t face font-lock-type-face)) . -213) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -2) (undo-tree-id100 . -2) (undo-tree-id101 . -3) (undo-tree-id102 . -3) (undo-tree-id103 . -4) (undo-tree-id104 . -4) (undo-tree-id105 . -5) (undo-tree-id106 . -5) (undo-tree-id107 . -5) (undo-tree-id108 . -5) 218 (212 . 218) (#("T" 0 1 (fontified t face font-lock-type-face)) . -212) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (#("r" 0 1 (fontified t face font-lock-type-face)) . -213) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (#("a" 0 1 (fontified t face font-lock-type-face)) . -214) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (#("n" 0 1 (fontified t face font-lock-type-face)) . -215) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (#("s" 0 1 (fontified t face font-lock-type-face)) . -216) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) 217 (213 . 217) (#("R" 0 1 (fontified t face font-lock-type-face)) . -213) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (#("a" 0 1 (fontified t face font-lock-type-face)) . -214) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (#("n" 0 1 (fontified t face font-lock-type-face)) . -215) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (#("s" 0 1 (fontified t face font-lock-type-face)) . -216) (undo-tree-id179 . -1) (undo-tree-id180 . -1) 217 (212 . 217) (206 . 212) (#("P" 0 1 (fontified t face font-lock-type-face)) . -206) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) 207 (201 . 207) (#("i" 0 1 (fontified t)) . -201) (undo-tree-id187 . -1) (200 . 202) (#("o" 0 1 (fontified t)) . -200) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (#("t" 0 1 (fontified t)) . -201) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (#("n" 0 1 (fontified t)) . -202) (undo-tree-id194 . -1) (undo-tree-id195 . -1) 203 (199 . 203) (#("i" 0 1 (fontified t)) . -199) (undo-tree-id196 . -1) (196 . 200) (#("m" 0 1 (fontified t)) . -196) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (#("u" 0 1 (fontified t)) . -197) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (#("t" 0 1 (fontified t face font-lock-keyword-face)) . -198) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (#(" " 0 1 (fontified t)) . -199) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (#("Q" 0 1 (fontified t face font-lock-type-face)) . -200) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) 201 (196 . 201) (#(" " 0 1 (fontified t)) . -196) (undo-tree-id261 . -1) (undo-tree-id262 . -1) 197 (195 . 197) (#(" " 0 1 (fontified t)) . -195) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (#("(" 0 1 (fontified t)) . -196) (undo-tree-id265 . -1) (undo-tree-id266 . -1) 197 (178 . 197) (177 . 178) (176 . 177) (t 25819 13571 274805 369000) 159) nil (25819 19158 928973 783000) 0 nil])
([nil nil ((319 . 320) (318 . 319) (310 . 318) (#("pos" 0 3 (fontified t)) . -310) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -2) (undo-tree-id15 . -2) (undo-tree-id16 . -3) (undo-tree-id17 . -3) (undo-tree-id18 . -3) (undo-tree-id19 . -3) (undo-tree-id20 . -3) (undo-tree-id21 . -3) 313 (300 . 313) (#("i" 0 1 (fontified t face font-lock-string-face)) . -300) (undo-tree-id22 . -1) (300 . 301) (#("o" 0 1 (fontified t face font-lock-string-face)) . -300) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (#("n" 0 1 (fontified t face font-lock-string-face)) . -301) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (#(":" 0 1 (fontified t face font-lock-string-face)) . -302) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (#(" " 0 1 (fontified t face font-lock-string-face)) . -303) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) 304 (298 . 304) (#("i" 0 1 (fontified t face font-lock-string-face)) . -298) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (295 . 299) (292 . 295) (#("(" 0 1 (fontified t)) . -292) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) 293 (287 . 293) (#("i" 0 1 (fontified t)) . -287) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (285 . 288) (280 . 285) (273 . 280) (#("g" 0 1 (fontified t)) . -273) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) 274 (272 . 274) (#("i" 0 1 (fontified t)) . -272) (undo-tree-id57 . -1) (267 . 273) (#("i" 0 1 (fontified t)) . -267) (undo-tree-id58 . -1) (undo-tree-id59 . -1) 268 (265 . 268) (#("i" 0 1 (fontified t)) . -265) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (256 . 266) (#("i" 0 1 (fontified t face font-lock-variable-name-face)) . -256) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (255 . 257) (#("t" 0 1 (fontified t face font-lock-variable-name-face)) . -255) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (#("o" 0 1 (fontified t face font-lock-variable-name-face)) . -256) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (#("n" 0 1 (fontified t face font-lock-variable-name-face)) . -257) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) 258 (254 . 258) (#("i" 0 1 (fontified t face font-lock-variable-name-face)) . -254) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (247 . 255) (242 . 247) 178) nil (25819 19158 926521 85000) 0 nil])
([nil nil ((327 . 330) (#("i" 0 1 (fontified t)) . -327) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (318 . 328)) nil (25819 19158 926470 598000) 0 nil])
([nil nil ((306 . 308)) nil (25819 19158 926467 892000) 0 nil])
([nil nil ((3936 . 3941)) nil (25819 19158 926467 203000) 0 nil])
([nil nil ((3938 . 3952) (#("get" 0 3 (fontified t)) . -3938) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -2) (undo-tree-id3 . -2) (undo-tree-id4 . -3) (undo-tree-id5 . -3) (undo-tree-id6 . -3) (undo-tree-id7 . -3) (undo-tree-id8 . -3) (undo-tree-id9 . -3) 3941) nil (25819 19158 926465 221000) 0 nil])
([nil nil ((241 . 242) (3890 . 3907) (3897 . 3903) (3898 . 3908) (3953 . 3967) 3952) nil (25819 19158 926438 761000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -3986) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (#("n" 0 1 (fontified t)) . -3987) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (#("n" 0 1 (fontified t)) . -3988) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (#("n" 0 1 (fontified t)) . -3989) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (#("n" 0 1 (fontified t)) . -3990) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (#("n" 0 1 (fontified t)) . -3991) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (#("n" 0 1 (fontified t)) . -3992) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (#("n" 0 1 (fontified t)) . -3993) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (#("n" 0 1 (fontified t)) . -3994) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (#("n" 0 1 (fontified t)) . -3995) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (#("n" 0 1 (fontified t)) . -3996) (undo-tree-id419 . -1) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (#("n" 0 1 (fontified t)) . -3997) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (#("n" 0 1 (fontified t)) . -3998) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (#("n" 0 1 (fontified t)) . -3999) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (#("n" 0 1 (fontified t)) . -4000) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (#("n" 0 1 (fontified t)) . -4001) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (#("n" 0 1 (fontified t)) . -4002) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (#("n" 0 1 (fontified t)) . -4003) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) 4004 (3986 . 4004) (t 25819 19158 931498 468000)) nil (25819 19192 126988 250000) 0 nil])
([nil nil ((#(", get_camera_pos" 0 2 (fontified t) 2 16 (fontified t)) . 3970) (undo-tree-id481 . -2) (undo-tree-id482 . -2) (undo-tree-id483 . -2) (undo-tree-id484 . -2) (undo-tree-id485 . -2) (undo-tree-id486 . -2) (undo-tree-id487 . -2) (undo-tree-id488 . -2) (undo-tree-id489 . -16) (undo-tree-id490 . -16) (undo-tree-id491 . -16) (undo-tree-id492 . -16) (undo-tree-id493 . -16) (undo-tree-id494 . -16) (undo-tree-id495 . -16) (undo-tree-id496 . -16) (undo-tree-id497 . -16) (undo-tree-id498 . -16) (undo-tree-id499 . -16) (undo-tree-id500 . -16) (undo-tree-id501 . -16) (undo-tree-id502 . -16) (undo-tree-id503 . -16) (undo-tree-id504 . -16) (undo-tree-id505 . -16) (undo-tree-id506 . -16) (undo-tree-id507 . -16) (undo-tree-id508 . -16) (undo-tree-id509 . -16) (undo-tree-id510 . -16) (undo-tree-id511 . -16) (undo-tree-id512 . -16) (undo-tree-id513 . -16) (undo-tree-id514 . -16) (undo-tree-id515 . -16) (undo-tree-id516 . -16) (undo-tree-id517 . -16) (undo-tree-id518 . -16) (undo-tree-id519 . -16) (undo-tree-id520 . -16) (undo-tree-id521 . -16) (undo-tree-id522 . -16) (undo-tree-id523 . -16) (undo-tree-id524 . -16) (undo-tree-id525 . -16) (undo-tree-id526 . -16) (undo-tree-id527 . -16) (undo-tree-id528 . -16) (undo-tree-id529 . -16) (undo-tree-id530 . -16) (undo-tree-id531 . -16) (undo-tree-id532 . -16) (undo-tree-id533 . -16) (undo-tree-id534 . -16) (undo-tree-id535 . -16) (undo-tree-id536 . -16) (undo-tree-id537 . -16) (undo-tree-id538 . -16) (undo-tree-id539 . -16) (undo-tree-id540 . -16) (undo-tree-id541 . -16) (undo-tree-id542 . -16) (undo-tree-id543 . -16) (undo-tree-id544 . -16) (undo-tree-id545 . -16) (undo-tree-id546 . -16) (undo-tree-id547 . -16) (undo-tree-id548 . -16) (undo-tree-id549 . -16) (undo-tree-id550 . -16) (undo-tree-id551 . -16) (undo-tree-id552 . -16) (undo-tree-id553 . -16) (undo-tree-id554 . -16) (undo-tree-id555 . -16) (undo-tree-id556 . -16) (undo-tree-id557 . -16) (undo-tree-id558 . -16) (undo-tree-id559 . -16) (undo-tree-id560 . -16) (undo-tree-id561 . -16) (undo-tree-id562 . -16) (undo-tree-id563 . -16) (undo-tree-id564 . -16) (undo-tree-id565 . -16) (undo-tree-id566 . -16) (undo-tree-id567 . -16) (undo-tree-id568 . -16) (undo-tree-id569 . -16) (undo-tree-id570 . -16) (undo-tree-id571 . -16) (undo-tree-id572 . -16) (undo-tree-id573 . -16) (undo-tree-id574 . -16) (undo-tree-id575 . -16) (undo-tree-id576 . -16) (undo-tree-id577 . -16) (undo-tree-id578 . -15) (undo-tree-id579 . -15) (undo-tree-id580 . -15) (undo-tree-id581 . -15) (undo-tree-id582 . -15) (undo-tree-id583 . -15) (undo-tree-id584 . -15) (undo-tree-id585 . -15) (undo-tree-id586 . -15) (undo-tree-id587 . -15) (undo-tree-id588 . -15) (undo-tree-id589 . -16) (undo-tree-id590 . -16)) nil (25819 19199 485250 197000) 0 nil] [nil nil ((#(", get_camera_pos)" 0 2 (fontified t) 2 16 (fontified t) 16 17 (fontified t)) . 3970) (undo-tree-id267 . 1) (undo-tree-id268 . -2) (undo-tree-id269 . -2) (undo-tree-id270 . -2) (undo-tree-id271 . -2) (undo-tree-id272 . -2) (undo-tree-id273 . -2) (undo-tree-id274 . -2) (undo-tree-id275 . -2) (undo-tree-id276 . -16) (undo-tree-id277 . -16) (undo-tree-id278 . -16) (undo-tree-id279 . -16) (undo-tree-id280 . -16) (undo-tree-id281 . -16) (undo-tree-id282 . -16) (undo-tree-id283 . -16) (undo-tree-id284 . -16) (undo-tree-id285 . -16) (undo-tree-id286 . -16) (undo-tree-id287 . -16) (undo-tree-id288 . -16) (undo-tree-id289 . -16) (undo-tree-id290 . -16) (undo-tree-id291 . -16) (undo-tree-id292 . -16) (undo-tree-id293 . -16) (undo-tree-id294 . -16) (undo-tree-id295 . -16) (undo-tree-id296 . -16) (undo-tree-id297 . -16) (undo-tree-id298 . -16) (undo-tree-id299 . -16) (undo-tree-id300 . -16) (undo-tree-id301 . -16) (undo-tree-id302 . -16) (undo-tree-id303 . -16) (undo-tree-id304 . -16) (undo-tree-id305 . -16) (undo-tree-id306 . -16) (undo-tree-id307 . -16) (undo-tree-id308 . -16) (undo-tree-id309 . -16) (undo-tree-id310 . -16) (undo-tree-id311 . -16) (undo-tree-id312 . -16) (undo-tree-id313 . -16) (undo-tree-id314 . -16) (undo-tree-id315 . -16) (undo-tree-id316 . -16) (undo-tree-id317 . -16) (undo-tree-id318 . -16) (undo-tree-id319 . -16) (undo-tree-id320 . -16) (undo-tree-id321 . -16) (undo-tree-id322 . -16) (undo-tree-id323 . -16) (undo-tree-id324 . -16) (undo-tree-id325 . -16) (undo-tree-id326 . -16) (undo-tree-id327 . -16) (undo-tree-id328 . -16) (undo-tree-id329 . -16) (undo-tree-id330 . -16) (undo-tree-id331 . -16) (undo-tree-id332 . -16) (undo-tree-id333 . -16) (undo-tree-id334 . -16) (undo-tree-id335 . -16) (undo-tree-id336 . -16) (undo-tree-id337 . -16) (undo-tree-id338 . -16) (undo-tree-id339 . -16) (undo-tree-id340 . -16) (undo-tree-id341 . -16) (undo-tree-id342 . -16) (undo-tree-id343 . -16) (undo-tree-id344 . -16) (undo-tree-id345 . -16) (undo-tree-id346 . -16) (undo-tree-id347 . -16) (undo-tree-id348 . -16) (undo-tree-id349 . -16) (undo-tree-id350 . -16) (undo-tree-id351 . -16) (undo-tree-id352 . -16) (undo-tree-id353 . -16) (undo-tree-id354 . -16) (undo-tree-id355 . -16) (undo-tree-id356 . -16) (undo-tree-id357 . -16) (undo-tree-id358 . -16) (undo-tree-id359 . -16) (undo-tree-id360 . -16) (undo-tree-id361 . -16) (undo-tree-id362 . -16) (undo-tree-id363 . -16) (undo-tree-id364 . -16) (undo-tree-id365 . -15) (undo-tree-id366 . -15) (undo-tree-id367 . -15) (undo-tree-id368 . -15) (undo-tree-id369 . -15) (undo-tree-id370 . -15) (undo-tree-id371 . -15) (undo-tree-id372 . -15) (undo-tree-id373 . -15) (undo-tree-id374 . -15) (undo-tree-id375 . -16) (undo-tree-id376 . -17) (undo-tree-id377 . -16)) ((3970 . 3987)) (25819 19192 126638 147000) 0 nil])
([nil nil ((#("fn get_camera_pos(position: Query<&Transform, With<FlyCamera>>) {
    let position = position.single();
    println!(\"position: {:?}\", position.translation);
}

" 0 2 (fontified t face font-lock-keyword-face) 2 3 (fontified t) 3 17 (fontified t face font-lock-function-name-face) 17 18 (fontified t) 18 26 (fontified t face font-lock-variable-name-face) 26 28 (fontified t) 28 33 (fontified t face font-lock-type-face) 33 34 (fontified t) 34 35 (fontified t face rust-ampersand-face) 35 44 (fontified t face font-lock-type-face) 44 46 (fontified t) 46 50 (fontified t face font-lock-type-face) 50 51 (fontified t) 51 60 (fontified t face font-lock-type-face) 60 63 (fontified t) 63 64 (fontified t) 64 65 (fontified t) 65 66 (fontified t) 66 70 (fontified t) 70 73 (fontified t face font-lock-keyword-face) 73 74 (fontified t) 74 82 (fontified t face font-lock-variable-name-face) 82 104 (fontified t) 104 108 (fontified t) 108 116 (fontified t face rust-builtin-formatting-macro) 116 117 (fontified t) 117 128 (fontified t face font-lock-string-face) 128 132 (fontified t face rust-string-interpolation) 132 133 (fontified t face font-lock-string-face) 133 135 (fontified t) 135 157 (fontified t) 157 158 (fontified t) 158 159 (fontified t) 159 160 (fontified t) 160 161 (fontified t)) . 178) (undo-tree-id451 . -160) (undo-tree-id452 . -102) (undo-tree-id453 . -160) (undo-tree-id454 . -102) (undo-tree-id455 . -35) (undo-tree-id456 . -35) (undo-tree-id457 . -101) (undo-tree-id458 . -101) (undo-tree-id459 . -139) (undo-tree-id460 . -139) (undo-tree-id461 . -101) (undo-tree-id462 . -101) (undo-tree-id463 . -35) (undo-tree-id464 . -35) (undo-tree-id465 . -35) (undo-tree-id466 . -160) (undo-tree-id467 . -35) (undo-tree-id468 . -35) (undo-tree-id469 . -101) (undo-tree-id470 . -101) (undo-tree-id471 . -139) (undo-tree-id472 . -139) (undo-tree-id473 . -159) (undo-tree-id474 . -159) (undo-tree-id475 . -160) (undo-tree-id476 . -160) (undo-tree-id477 . -160) (undo-tree-id478 . -160) (undo-tree-id479 . -160) (undo-tree-id480 . -161) 338) nil (25819 19199 485113 502000) 0 nil])
nil
([nil nil (("
                " . 3730) ("
      " . 3754) ("         " . 3762) (",
            " . 3810) 178) nil (25819 19199 485081 450000) 0 nil])
([nil nil ((159 . 163) (t 25819 19199 488165 335000)) nil (25819 19816 322662 115000) 0 nil])
([nil current ((#("    // commands.spawn(PointLightBundle {
    //     point_light: PointLight {
    //         intensity: 1500.0,
    //         shadows_enabled: true,
    //         ..default()
    //     },
    //     transform: Transform::from_xyz(4.0, 8.0, 4.0),
    //     ..default()
    // });
" 0 4 (fontified t) 4 7 (fontified t face font-lock-comment-delimiter-face) 7 41 (fontified t face font-lock-comment-face) 41 45 (fontified t) 45 52 (fontified t face font-lock-comment-delimiter-face) 52 78 (fontified t face font-lock-comment-face) 78 82 (fontified t) 82 93 (fontified t face font-lock-comment-delimiter-face) 93 112 (fontified t face font-lock-comment-face) 112 116 (fontified t) 116 127 (fontified t face font-lock-comment-delimiter-face) 127 150 (fontified t face font-lock-comment-face) 150 154 (fontified t) 154 165 (fontified t face font-lock-comment-delimiter-face) 165 177 (fontified t face font-lock-comment-face) 177 181 (fontified t) 181 188 (fontified t face font-lock-comment-delimiter-face) 188 191 (fontified t face font-lock-comment-face) 191 195 (fontified t) 195 202 (fontified t face font-lock-comment-delimiter-face) 202 249 (fontified t face font-lock-comment-face) 249 253 (fontified t) 253 260 (fontified t face font-lock-comment-delimiter-face) 260 272 (fontified t face font-lock-comment-face) 272 276 (fontified t) 276 279 (fontified t face font-lock-comment-delimiter-face) 279 283 (fontified t face font-lock-comment-face)) . 457) (undo-tree-id0 . -272) (undo-tree-id1 . -272) (undo-tree-id2 . -272) (undo-tree-id3 . -272) (undo-tree-id4 . -282) 729 (t 25819 37725 327443 906000)) nil (25819 38052 170434 864000) 0 nil])
nil
