(undo-tree-save-format-version . 1)
"605e30bd7798d5a8cfaf6d51c1c3ba08977b72ea"
[nil nil nil nil (25817 7956 982066 71000) 0 nil]
([nil nil ((nil rear-nonsticky nil 1 . 2) (#("
" 0 1 (fontified nil)) . -89) (1 . 90) (t 25817 7668 182711 931000)) nil (25817 7956 982064 799000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t rear-nonsticky t)) . 1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1)) nil (25817 7956 982063 206000) 0 nil])
([nil nil ((nil rear-nonsticky nil 88 . 89) (#("
" 0 1 (fontified nil)) . -628) (88 . 629) 38) nil (25817 7956 982060 601000) 0 nil])
([nil nil ((88 . 89) 38) nil (25817 7956 982059 419000) 0 nil])
([nil nil ((nil rear-nonsticky nil 629 . 630) (#("
" 0 1 (fontified nil)) . -3065) (629 . 3066)) nil (25817 7956 982058 336000) 0 nil])
([nil nil ((#("	" 0 1 (fontified nil)) . -3170) (3170 . 3171) (#("	" 0 1 (fontified nil)) . 3170) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (3166 . 3170) (3167 . 3168) (3165 . 3167) (3163 . 3165) (3142 . 3163) (3138 . 3142) (#("i" 0 1 (fontified t face font-lock-function-name-face)) . -3138) (undo-tree-id209 . -1) (undo-tree-id210 . 1) (3137 . 3139) (3133 . 3137) (3128 . 3133) (3126 . 3128) (3111 . 3126) (#("F" 0 1 (fontified t face font-lock-type-face)) . -3111) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) 3112 (3111 . 3112) (#("C" 0 1 (fontified t face font-lock-type-face)) . -3111) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (#("a" 0 1 (fontified t face font-lock-type-face)) . -3112) (undo-tree-id233 . -1) (undo-tree-id234 . 1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) 3113 (3104 . 3113) (#("i" 0 1 (fontified t face font-lock-type-face)) . -3104) (undo-tree-id240 . -1) (3099 . 3105) (3095 . 3099) (#("i" 0 1 (fontified t)) . -3095) (undo-tree-id241 . -1) (3093 . 3096) (3090 . 3093) (#("i" 0 1 (fontified t face font-lock-type-face)) . -3090) (undo-tree-id242 . -1) (3086 . 3091) (3077 . 3086) (#("Fly" 0 3 (fontified t face font-lock-type-face)) . -3077) (undo-tree-id243 . -3) (undo-tree-id244 . -2) (undo-tree-id245 . -3) (undo-tree-id246 . -3) (undo-tree-id247 . -3) (undo-tree-id248 . -3) 3080 (3076 . 3080) (#("c" 0 1 (fontified t)) . -3076) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) 3077 (3076 . 3077) (#(" " 0 1 (fontified t)) . -3076) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) 3077 (3066 . 3077) (#("i" 0 1 (fontified t)) . -3066) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (#("m" 0 1 (fontified t)) . -3067) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (#("p" 0 1 (fontified t)) . -3068) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (#("l" 0 1 (fontified t face font-lock-keyword-face)) . -3069) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) 3070 (3066 . 3070) (#("i" 0 1 (fontified t)) . -3066) (undo-tree-id313 . -1) (3066 . 3067) (3065 . 3066) 3065) nil (25817 7956 982050 71000) 0 nil])
([nil nil ((3188 . 3189) (3177 . 3188) (#("add_s" 0 5 (fontified t)) . -3177) (undo-tree-id189 . -5) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -2) (undo-tree-id193 . -2) (undo-tree-id194 . -3) (undo-tree-id195 . -3) (undo-tree-id196 . -4) (undo-tree-id197 . -4) (undo-tree-id198 . -4) (undo-tree-id199 . -4) (undo-tree-id200 . -5) (undo-tree-id201 . -5) (undo-tree-id202 . -5) (undo-tree-id203 . -5) (undo-tree-id204 . -5) 3182 (3181 . 3182) (3177 . 3181) (3171 . 3177) (3167 . 3171) (3165 . 3167) 3133) nil (25817 7956 981961 665000) 0 nil])
([nil nil ((3171 . 3172) (#("	    " 0 5 (fontified nil)) . 3171) (undo-tree-id170 . 5) (undo-tree-id171 . -5) (undo-tree-id172 . -5) (undo-tree-id173 . -5) (undo-tree-id174 . -5) (undo-tree-id175 . -5) (undo-tree-id176 . -5) (undo-tree-id177 . -5) (undo-tree-id178 . -5) (undo-tree-id179 . -5) (undo-tree-id180 . -5) (undo-tree-id181 . -5) (undo-tree-id182 . -5) (undo-tree-id183 . -5) (undo-tree-id184 . -5) (undo-tree-id185 . -5) (undo-tree-id186 . -5) (#("
" 0 1 (fontified t)) . -3171) (undo-tree-id187 . 1) (undo-tree-id188 . -1) 3170) nil (25817 7956 981951 165000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 3171) (undo-tree-id168 . -1) (undo-tree-id169 . -1)) nil (25817 7956 981941 46000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t)) . -3192) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (#("r" 0 1 (fontified t)) . -3193) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) 3194 (3192 . 3194) (#("c" 0 1 (fontified t)) . -3192) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) 3193 (#("a" 0 1 (fontified t)) . -3193) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) 3194 (3183 . 3194)) nil (25817 7956 981936 899000) 0 nil])
([nil nil ((3223 . 3235) (3212 . 3223) (#("add" 0 3 (fontified t)) . -3212) (undo-tree-id86 . -3) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -2) (undo-tree-id90 . -2) (undo-tree-id91 . -3) (undo-tree-id92 . -3) (undo-tree-id93 . -3) (undo-tree-id94 . -3) (undo-tree-id95 . -3) (undo-tree-id96 . -3) (undo-tree-id97 . -3) 3215 (3213 . 3215) (3211 . 3213) (3205 . 3211) (#(";" 0 1 (fontified t)) . -3205) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) 3206 (3204 . 3206) (3192 . 3204) (#("setu" 0 4 (fontified t)) . -3192) (undo-tree-id102 . -4) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -2) (undo-tree-id106 . -2) (undo-tree-id107 . -3) (undo-tree-id108 . -3) (undo-tree-id109 . -4) (undo-tree-id110 . -4) (undo-tree-id111 . -4) (undo-tree-id112 . -4) (undo-tree-id113 . -4) 3196 (3192 . 3196) (#("S" 0 1 (fontified t face font-lock-type-face)) . -3192) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (#("e" 0 1 (fontified t face font-lock-type-face)) . -3193) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (#("t" 0 1 (fontified t face font-lock-type-face)) . -3194) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (#("u" 0 1 (fontified t face font-lock-type-face)) . -3195) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (#("p" 0 1 (fontified t face font-lock-type-face)) . -3196) (undo-tree-id134 . -1) (undo-tree-id135 . -1) 3197 (3192 . 3197)) nil (25817 7956 981807 426000) 0 nil])
([nil nil ((3192 . 3193)) nil (25817 7956 980600 883000) 0 nil])
([nil nil ((3207 . 3226) (#("initial" 0 7 (fontified t)) . -3207) (undo-tree-id67 . -7) (undo-tree-id68 . -2) (undo-tree-id69 . -2) (undo-tree-id70 . -2) (undo-tree-id71 . -2) (undo-tree-id72 . -4) (undo-tree-id73 . -4) (undo-tree-id74 . -4) (undo-tree-id75 . -6) (undo-tree-id76 . -6) (undo-tree-id77 . -7) (undo-tree-id78 . -7) (undo-tree-id79 . -7) (undo-tree-id80 . -7) (undo-tree-id81 . -7) 3214 (3211 . 3214) (#("i" 0 1 (fontified t)) . -3211) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (3209 . 3212) (#("i" 0 1 (fontified t)) . -3209) (undo-tree-id84 . -1) (3207 . 3210) (#("i" 0 1 (fontified t)) . -3207) (undo-tree-id85 . -1) (3205 . 3208)) nil (25817 7956 980597 907000) 0 nil])
([nil nil ((#("fn grab_cursor(mut window: Query<&mut Window, With<PrimaryWindow>>, keys: Res<Input<KeyCode>>) {
    let mut window = window.get_single_mut().expect(\"Failed to find window\");
    if keys.just_pressed(KeyCode::Tab) {
        toggle_grab_cursor(&mut window);
    }
}

" 0 2 (fontified t face font-lock-keyword-face) 2 3 (fontified t) 3 14 (fontified t face font-lock-function-name-face) 14 15 (fontified t) 15 18 (fontified t face font-lock-keyword-face) 18 19 (fontified t) 19 25 (fontified t face font-lock-variable-name-face) 25 27 (fontified t) 27 32 (fontified t face font-lock-type-face) 32 33 (fontified t) 33 34 (fontified t face rust-ampersand-face) 34 37 (fontified t face font-lock-keyword-face) 37 38 (fontified t) 38 40 (fontified t face font-lock-type-face) 40 44 (fontified t face font-lock-type-face) 44 46 (fontified t) 46 50 (fontified t face font-lock-type-face) 50 51 (fontified t) 51 64 (fontified t face font-lock-type-face) 64 68 (fontified t) 68 72 (fontified t face font-lock-variable-name-face) 72 74 (fontified t) 74 77 (fontified t face font-lock-type-face) 77 78 (fontified t) 78 83 (fontified t face font-lock-type-face) 83 84 (fontified t) 84 91 (fontified t face font-lock-type-face) 91 97 (fontified t) 97 101 (fontified t) 101 104 (fontified t face font-lock-keyword-face) 104 105 (fontified t) 105 108 (fontified t face font-lock-keyword-face) 108 109 (fontified t) 109 115 (fontified t face font-lock-variable-name-face) 115 128 (fontified t) 128 149 (fontified t) 149 172 (fontified t face font-lock-string-face) 172 175 (fontified t) 175 179 (fontified t) 179 181 (fontified t face font-lock-keyword-face) 181 200 (fontified t) 200 207 (fontified t face font-lock-type-face) 207 209 (fontified t) 209 212 (fontified t face font-lock-type-face) 212 243 (fontified t) 243 244 (fontified t face rust-ampersand-face) 244 247 (fontified t face font-lock-keyword-face) 247 265 (fontified t) 265 266 (fontified t)) . 2800) (undo-tree-id0 . -265) (undo-tree-id1 . -265) (undo-tree-id2 . -265) (undo-tree-id3 . -265) (undo-tree-id4 . -265) (undo-tree-id5 . -266) (undo-tree-id6 . -266) (undo-tree-id7 . -266) (undo-tree-id8 . -266) (undo-tree-id9 . -266) (undo-tree-id10 . -266) (undo-tree-id11 . -266) (undo-tree-id12 . -266) (undo-tree-id13 . -266) (undo-tree-id14 . -266) (undo-tree-id15 . -266) (undo-tree-id16 . -266) (undo-tree-id17 . -266) (undo-tree-id18 . -266) (undo-tree-id19 . -266) (undo-tree-id20 . -266) (undo-tree-id21 . -266) (undo-tree-id22 . -266) (undo-tree-id23 . -266) (undo-tree-id24 . -266) (undo-tree-id25 . -265) (undo-tree-id26 . -265) (undo-tree-id27 . -263) (undo-tree-id28 . -263) (undo-tree-id29 . -261) (undo-tree-id30 . -261) (undo-tree-id31 . -255) (undo-tree-id32 . -255) (undo-tree-id33 . -214) (undo-tree-id34 . -214) (undo-tree-id35 . -163) (undo-tree-id36 . -163) (undo-tree-id37 . -66) (undo-tree-id38 . -66) (undo-tree-id39 . -66) (undo-tree-id40 . -66) (undo-tree-id41 . -163) (undo-tree-id42 . -163) (undo-tree-id43 . -66) (undo-tree-id44 . -66) (undo-tree-id45 . -66) (undo-tree-id46 . -265) (undo-tree-id47 . -266) (undo-tree-id48 . -66) (undo-tree-id49 . -265) (undo-tree-id50 . -66) (undo-tree-id51 . -66) (undo-tree-id52 . -163) (undo-tree-id53 . -163) (undo-tree-id54 . -215) (undo-tree-id55 . -215) (undo-tree-id56 . -256) (undo-tree-id57 . -256) (undo-tree-id58 . -262) (undo-tree-id59 . -262) (undo-tree-id60 . -264) (undo-tree-id61 . -264) (undo-tree-id62 . -265) (undo-tree-id63 . -265) (undo-tree-id64 . -265) (undo-tree-id65 . -265) (undo-tree-id66 . -266) 3065) nil (25817 7956 982207 667000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2603 . 2604) (#("
" 0 1 (fontified nil)) . -2869) (2603 . 2870)) nil (25817 7986 513275 331000) 0 nil] [nil nil ((nil rear-nonsticky nil 2681 . 2682) (#("
" 0 1 (fontified nil)) . -2947) (2681 . 2948) 2604) ((#("
fn grab_cursor(mut window: Query<&mut Window, With<PrimaryWindow>>, keys: Res<Input<KeyCode>>) {
    let mut window = window.get_single_mut().expect(\"Failed to find window\");
    if keys.just_pressed(KeyCode::Tab) {
        toggle_grab_cursor(&mut window);
    }
}

" 0 1 (fontified nil rear-nonsticky nil) 1 3 (fontified nil face font-lock-keyword-face) 3 4 (fontified nil) 4 15 (fontified nil face font-lock-function-name-face) 15 16 (fontified nil) 16 19 (fontified nil face font-lock-keyword-face) 19 20 (fontified nil) 20 26 (fontified nil face font-lock-variable-name-face) 26 28 (fontified nil) 28 33 (fontified nil face font-lock-type-face) 33 34 (fontified nil) 34 35 (fontified nil face rust-ampersand-face) 35 38 (fontified nil face font-lock-keyword-face) 38 39 (fontified nil) 39 41 (fontified nil face font-lock-type-face) 41 45 (fontified nil face font-lock-type-face) 45 47 (fontified nil) 47 51 (fontified nil face font-lock-type-face) 51 52 (fontified nil) 52 65 (fontified nil face font-lock-type-face) 65 69 (fontified nil) 69 73 (fontified nil face font-lock-variable-name-face) 73 75 (fontified nil) 75 78 (fontified nil face font-lock-type-face) 78 79 (fontified nil) 79 84 (fontified nil face font-lock-type-face) 84 85 (fontified nil) 85 92 (fontified nil face font-lock-type-face) 92 98 (fontified nil) 98 102 (fontified t) 102 105 (fontified t face font-lock-keyword-face) 105 106 (fontified t) 106 109 (fontified t face font-lock-keyword-face) 109 110 (fontified t) 110 116 (fontified t face font-lock-variable-name-face) 116 129 (fontified t) 129 150 (fontified t) 150 173 (fontified t face font-lock-string-face) 173 176 (fontified t) 176 180 (fontified t) 180 182 (fontified t face font-lock-keyword-face) 182 201 (fontified t) 201 208 (fontified t face font-lock-type-face) 208 210 (fontified t) 210 213 (fontified t face font-lock-type-face) 213 244 (fontified t) 244 245 (fontified t face rust-ampersand-face) 245 248 (fontified t face font-lock-keyword-face) 248 266 (fontified t) 266 267 (fontified nil)) . 2681) (undo-tree-id317 . -266) (undo-tree-id318 . -1) (undo-tree-id319 . -266) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (2947 . 2948) (nil rear-nonsticky t 2681 . 2682)) (25817 7956 980521 534000) 0 nil])
([nil nil ((3281 . 3292) (#("gra" 0 3 (fontified t)) . -3281) (undo-tree-id323 . -3) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -2) (undo-tree-id327 . -2) (undo-tree-id328 . -3) (undo-tree-id329 . -3) (undo-tree-id330 . -3) (undo-tree-id331 . -3) (undo-tree-id332 . -3) 3284 (3281 . 3284) (3279 . 3281) (3268 . 3279) (#("cam" 0 3 (fontified t)) . -3268) (undo-tree-id333 . -3) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -2) (undo-tree-id337 . -2) (undo-tree-id338 . -3) (undo-tree-id339 . -3) (undo-tree-id340 . -3) (undo-tree-id341 . -3) (undo-tree-id342 . -3) (undo-tree-id343 . -3) (undo-tree-id344 . -3) 3271 (3266 . 3271) (3255 . 3266) (#("camera" 0 6 (fontified t)) . -3255) (undo-tree-id345 . -6) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (undo-tree-id348 . -2) (undo-tree-id349 . -2) (undo-tree-id350 . -3) (undo-tree-id351 . -3) (undo-tree-id352 . -4) (undo-tree-id353 . -4) (undo-tree-id354 . -5) (undo-tree-id355 . -5) (undo-tree-id356 . -6) (undo-tree-id357 . -6) (undo-tree-id358 . -6) (undo-tree-id359 . -6) (undo-tree-id360 . -6) (undo-tree-id361 . -6) (undo-tree-id362 . -6) (undo-tree-id363 . -6) (undo-tree-id364 . -6) 3261 (3255 . 3261)) nil (25817 7986 513270 672000) 0 nil])
nil
([nil nil ((3300 . 3301) 2282) nil (25817 7986 513224 756000) 0 nil])
([nil nil ((#("	" 0 1 (fontified nil)) . -3306) (3306 . 3307) (#("	" 0 1 (fontified nil)) . 3306) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (3302 . 3306) (3303 . 3304) (3301 . 3303) (t 25817 7986 516049 977000) 3301) nil (25817 8015 869017 624000) 0 nil])
([nil nil ((#("
    }" 0 1 (fontified t) 1 5 (fontified t) 5 6 (fontified t)) . 3301) (undo-tree-id369 . -1) (undo-tree-id370 . -5) (undo-tree-id371 . -5) (undo-tree-id372 . -5) (undo-tree-id373 . -5) (undo-tree-id374 . -6) (undo-tree-id375 . -6) (undo-tree-id376 . -6) (undo-tree-id377 . -6) (undo-tree-id378 . -5) (undo-tree-id379 . -5) (undo-tree-id380 . -5) (undo-tree-id381 . -5) (undo-tree-id382 . -1) (undo-tree-id383 . -5) (undo-tree-id384 . -5) (undo-tree-id385 . 1) (undo-tree-id386 . -6) (undo-tree-id387 . -5) (undo-tree-id388 . -5) (undo-tree-id389 . -5) (undo-tree-id390 . -6) 3306) nil (25817 8015 869013 346000) 0 nil])
([nil nil ((3227 . 3228)) nil (25817 8015 869000 392000) 0 nil])
([nil nil ((3295 . 3296)) nil (25817 8015 868999 600000) 0 nil])
([nil nil ((#("    " 0 4 (fontified nil)) . -3303) (undo-tree-id365 . -4) (undo-tree-id366 . -4) (undo-tree-id367 . -4) (undo-tree-id368 . -4) (3307 . 3308) (3302 . 3307) 3301) nil (25817 8015 868997 977000) 0 nil])
([nil nil ((3166 . 3174) (#("	" 0 1 (fontified t)) . 3166) (3229 . 3237) (#("	" 0 1 (fontified t)) . 3229) 3303) nil (25817 8015 868982 839000) 0 nil])
([nil nil ((1 . 22) (1 . 2) (t 25817 8015 872717 79000)) nil (25817 8114 553868 290000) 0 nil])
([nil nil ((#("prelude::*;
use bevy::" 0 7 (fontified t face font-lock-constant-face) 7 11 (fontified t) 11 12 (fontified t) 12 15 (fontified t face font-lock-keyword-face) 15 16 (fontified t) 16 20 (fontified t face font-lock-constant-face) 20 22 (fontified t)) . 11) (undo-tree-id395 . 11) (undo-tree-id396 . -10) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (undo-tree-id399 . -2) (undo-tree-id400 . -2) (undo-tree-id401 . -3) (undo-tree-id402 . -3) (undo-tree-id403 . -4) (undo-tree-id404 . -4) (undo-tree-id405 . -5) (undo-tree-id406 . -5) (undo-tree-id407 . -6) (undo-tree-id408 . -6) (undo-tree-id409 . -7) (undo-tree-id410 . -7) (undo-tree-id411 . -7) (undo-tree-id412 . -7) (undo-tree-id413 . -10) (undo-tree-id414 . -10) (undo-tree-id415 . -10) (undo-tree-id416 . -10) (undo-tree-id417 . -10) (undo-tree-id418 . -10) (undo-tree-id419 . -10) (undo-tree-id420 . -10) (undo-tree-id421 . -10) (undo-tree-id422 . -10) (undo-tree-id423 . -10) (58 . 80) 21) nil (25817 8114 553863 511000) 0 nil])
([nil nil ((283 . 284) (#("4" 0 1 (fontified t)) . 283) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (t 25817 8114 559385 209000)) nil (25817 14370 90660 701000) 0 nil])
([nil nil ((288 . 289) (#("4" 0 1 (fontified t)) . 288) (undo-tree-id426 . -1) (undo-tree-id427 . -1)) nil (25817 14370 90657 705000) 0 nil])
([nil nil ((293 . 294) (#("4" 0 1 (fontified t)) . 293) (undo-tree-id424 . -1) (undo-tree-id425 . -1)) nil (25817 14370 90651 804000) 0 nil])
([nil nil ((#("Confined" 0 2 (fontified t face font-lock-type-face) 2 4 (fontified t face font-lock-type-face) 4 8 (fontified t face font-lock-type-face)) . 2461) (undo-tree-id442 . -1) (undo-tree-id443 . -7) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -8) (undo-tree-id452 . -8) (t 25817 14370 92811 204000)) nil (25817 15628 891380 962000) 0 nil])
([nil nil ((2461 . 2468)) nil (25817 15628 891373 528000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t face font-lock-type-face)) . -2465) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (#("u" 0 1 (fontified t face font-lock-type-face)) . -2466) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (#("d" 0 1 (fontified t face font-lock-type-face)) . -2467) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) 2468) nil (25817 15628 891370 933000) 0 nil])
([nil nil ((2465 . 2467)) nil (25817 15628 891349 463000) 0 nil])
([nil current ((315 . 316) (#("ZERO" 0 4 (face font-lock-type-face fontified t)) . 315) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -4) (undo-tree-id9 . -4) (undo-tree-id10 . -3) (t 25817 58140 167723 64000)) nil (25817 59742 240349 626000) 0 nil])
nil
