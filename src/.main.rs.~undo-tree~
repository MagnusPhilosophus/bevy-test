(undo-tree-save-format-version . 1)
"628230fd1a6380e4316099b84baffaace1a4772c"
[nil nil nil nil (25827 50466 3602 59000) 0 nil]
([nil nil ((#("fn exit_on_escape(mut exit: EventWriter<AppExit>, keys: Res<Input<KeyCode>>) {
    if keys.just_pressed(KeyCode::Escape) {
        exit.send(AppExit);
    }
}

" 0 2 (face font-lock-keyword-face fontified t) 2 3 (fontified t) 3 17 (face font-lock-function-name-face fontified t) 17 18 (fontified t) 18 21 (face font-lock-keyword-face fontified t) 21 22 (fontified t) 22 26 (face font-lock-variable-name-face fontified t) 26 28 (fontified t) 28 39 (face font-lock-type-face fontified t) 39 40 (fontified t) 40 47 (face font-lock-type-face fontified t) 47 50 (fontified t) 50 54 (face font-lock-variable-name-face fontified t) 54 56 (fontified t) 56 59 (face font-lock-type-face fontified t) 59 60 (fontified t) 60 65 (face font-lock-type-face fontified t) 65 66 (fontified t) 66 73 (face font-lock-type-face fontified t) 73 83 (fontified t) 83 85 (face font-lock-keyword-face fontified t) 85 104 (fontified t) 104 111 (face font-lock-type-face fontified t) 111 113 (fontified t) 113 119 (face font-lock-type-face fontified t) 119 141 (fontified t) 141 148 (face font-lock-type-face fontified t) 148 160 (fontified t)) . 347) (undo-tree-id106 . -159) (undo-tree-id107 . -1) (undo-tree-id108 . -159) (undo-tree-id109 . -159) (undo-tree-id110 . -159) 506 (t 25826 19404 879095 654000)) nil (25827 50466 3599 684000) 0 nil])
([nil nil ((379 . 380) (368 . 379) (#("Utils" 0 5 (face font-lock-type-face fontified t)) . -368) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -2) (undo-tree-id91 . -2) (undo-tree-id92 . -2) (undo-tree-id93 . -4) (undo-tree-id94 . -4) (undo-tree-id95 . -5) (undo-tree-id96 . -5) (undo-tree-id97 . -5) (undo-tree-id98 . -5) (undo-tree-id99 . -5) (undo-tree-id100 . -5) 373 (370 . 373) (#("i" 0 1 (face font-lock-type-face fontified t)) . -370) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (363 . 371) (#("i" 0 1 (face font-lock-constant-face fontified t)) . -363) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (357 . 364) (356 . 357) (352 . 356) (#("i" 0 1 (face font-lock-constant-face fontified t)) . -352) (undo-tree-id105 . -1) (346 . 353) (345 . 346) 328) nil (25827 50466 3594 446000) 0 nil])
([nil nil ((4528 . 4529) (4517 . 4528) (#("Utils" 0 5 (face font-lock-type-face fontified t)) . -4517) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -2) (undo-tree-id3 . -2) (undo-tree-id4 . -2) (undo-tree-id5 . -4) (undo-tree-id6 . -4) (undo-tree-id7 . -5) (undo-tree-id8 . -5) (undo-tree-id9 . -5) (undo-tree-id10 . -5) 4522 (4519 . 4522) (#("i" 0 1 (face font-lock-type-face fontified t)) . -4519) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (4517 . 4520) (4516 . 4517) (#(" " 0 1 (fontified t)) . -4516) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (#("u" 0 1 (fontified t)) . -4517) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (#("t" 0 1 (fontified t)) . -4518) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (#("i" 0 1 (fontified t)) . -4519) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (#("l" 0 1 (fontified t)) . -4520) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (#("s" 0 1 (fontified t)) . -4521) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) 4522 (4519 . 4522) (#("i" 0 1 (fontified t)) . -4519) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (4517 . 4520) (4511 . 4517) 4487) nil (25827 50466 3500 90000) 0 nil])
([nil nil ((4512 . 4520) (#("	" 0 1 (fontified t)) . 4512) 4528) nil (25827 50466 3391 68000) 0 nil])
([nil nil ((#("exit_on_e" 0 9 (fontified t)) . 4622) (undo-tree-id113 . -8) (undo-tree-id114 . -9) (t 25827 50466 7864 682000)) nil (25827 50475 655920 915000) 0 nil])
([nil nil ((#("scape, " 0 7 (fontified t)) . 4622) (undo-tree-id111 . -6) (undo-tree-id112 . -7)) nil (25827 50475 655915 328000) 0 nil])
([nil nil ((#("use bevy::app::AppExit;
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 8 (fontified t face font-lock-constant-face) 8 10 (fontified t) 10 13 (fontified t face font-lock-constant-face) 13 15 (fontified t) 15 22 (fontified t face font-lock-type-face) 22 23 (fontified t) 23 24 (fontified t)) . 1) (undo-tree-id115 . -23) (undo-tree-id116 . -23) (undo-tree-id117 . -22) (undo-tree-id118 . -22) (undo-tree-id119 . -22) (undo-tree-id120 . -22) (undo-tree-id121 . -22) (undo-tree-id122 . -22) (undo-tree-id123 . -22) (undo-tree-id124 . -22) (undo-tree-id125 . -22) (undo-tree-id126 . -22) (undo-tree-id127 . -22) (undo-tree-id128 . -22) (undo-tree-id129 . -22) (undo-tree-id130 . -24) 23 (t 25827 50475 657811 728000)) nil (25827 50496 770406 220000) 0 nil])
([nil nil ((#("            WorldInspectorPlugin::new(),
" 0 12 (fontified t) 12 32 (face font-lock-type-face fontified t) 32 41 (fontified t)) . 4199) (undo-tree-id172 . -40) (t 25827 50498 104355 221000)) nil (25827 50562 442761 989000) 0 nil] [nil nil ((#("use bevy::diagnostic::FrameTimeDiagnosticsPlugin;
" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 8 (face font-lock-constant-face fontified t) 8 10 (fontified t) 10 20 (face font-lock-constant-face fontified t) 20 22 (fontified t) 22 48 (face font-lock-type-face fontified t) 48 50 (fontified t)) . 1) (undo-tree-id140 . -49) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -22) (undo-tree-id144 . -22) (undo-tree-id145 . -22) (undo-tree-id146 . -22) (undo-tree-id147 . -22) (undo-tree-id148 . -22) (undo-tree-id149 . -22) (undo-tree-id150 . -22) (undo-tree-id151 . -22) (undo-tree-id152 . -22) (undo-tree-id153 . -22) (undo-tree-id154 . -22) (undo-tree-id155 . -22) (undo-tree-id156 . -22) (undo-tree-id157 . -22) (undo-tree-id158 . -22) (undo-tree-id159 . -22) (undo-tree-id160 . -50) 23 (t 25827 50481 54448 781000)) ((1 . 51) (t 25827 50493 201048 794000)) (25827 50491 199009 927000) 0 nil])
([nil nil ((#("            FrameTimeDiagnosticsPlugin,
" 0 12 (fontified t) 12 38 (face font-lock-type-face fontified t) 38 40 (fontified t)) . 4360) (undo-tree-id170 . -39) (undo-tree-id171 . -27) 4387) nil (25827 50562 442859 697000) 0 nil])
([nil nil ((#("use bevy_inspector_egui::quick::WorldInspectorPlugin;
" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 23 (face font-lock-constant-face fontified t) 23 25 (fontified t) 25 30 (face font-lock-constant-face fontified t) 30 32 (fontified t) 32 52 (face font-lock-type-face fontified t) 52 54 (fontified t)) . 23) (undo-tree-id131 . -53) (undo-tree-id132 . -1) (undo-tree-id133 . -20) (undo-tree-id134 . -20) (undo-tree-id135 . -20) (undo-tree-id136 . -20) (undo-tree-id137 . -20) (undo-tree-id138 . -20) (undo-tree-id139 . -54) 43) ((23 . 77) (t 25827 50488 81076 890000)) (25827 50488 80946 77000) 0 nil])
([nil nil ((#("use bevy_inspector_egui::quick::WorldInspectorPlugin;
" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 23 (face font-lock-constant-face fontified t) 23 25 (fontified t) 25 30 (face font-lock-constant-face fontified t) 30 32 (fontified t) 32 52 (face font-lock-type-face fontified t) 52 54 (fontified t)) . 73) (undo-tree-id173 . -53) (undo-tree-id174 . -1) (undo-tree-id175 . -12) (undo-tree-id176 . -12) (undo-tree-id177 . -12) (undo-tree-id178 . -12) (undo-tree-id179 . -12) (undo-tree-id180 . -12) (undo-tree-id181 . -12) (undo-tree-id182 . -12) (undo-tree-id183 . -12) (undo-tree-id184 . -12) (undo-tree-id185 . -12) (undo-tree-id186 . -12) (undo-tree-id187 . -12) (undo-tree-id188 . -54) 85 (t 25827 50574 87271 602000)) nil (25827 50616 751425 497000) 0 nil] [nil nil ((#("            //RapierDebugRenderPlugin::default(),
" 0 12 (fontified t) 12 14 (face font-lock-comment-delimiter-face fontified t) 14 39 (face font-lock-comment-face fontified t) 39 50 (face font-lock-comment-face fontified t)) . 4310) (undo-tree-id161 . -50) (undo-tree-id162 . -49) (undo-tree-id163 . -20) (undo-tree-id164 . -20) (undo-tree-id165 . -20) (undo-tree-id166 . -20) (undo-tree-id167 . -20) (undo-tree-id168 . -20) (undo-tree-id169 . -50) 4330) ((4310 . 4360)) (25827 50562 442753 468000) 0 nil])
nil
([nil nil ((#("use bevy::diagnostic::FrameTimeDiagnosticsPlugin;
" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 8 (face font-lock-constant-face fontified t) 8 10 (fontified t) 10 20 (face font-lock-constant-face fontified t) 20 22 (fontified t) 22 48 (face font-lock-type-face fontified t) 48 50 (fontified t)) . 1) (undo-tree-id189 . -4) (undo-tree-id190 . -49) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -22) (undo-tree-id194 . -4) (undo-tree-id195 . -4) (undo-tree-id196 . -4) (undo-tree-id197 . -4) (undo-tree-id198 . -4) (undo-tree-id199 . -4) (undo-tree-id200 . -4) (undo-tree-id201 . -4) (undo-tree-id202 . -4) (undo-tree-id203 . -4) (undo-tree-id204 . -4) (undo-tree-id205 . -4) (undo-tree-id206 . -50) 5 (t 25827 50616 757037 454000)) nil (25827 50809 995719 701000) 0 nil])
nil
([nil nil ((#("
// fn update_player(
//     mut query: Query<(&Transform, &mut KinematicCharacterController)>,
//     mut maze_timer: ResMut<MazeTimer>,
//     keys: Res<Input<KeyCode>>,
//     time: Res<Time>,
// ) {
//     if keys.any_pressed([KeyCode::Up, KeyCode::Down, KeyCode::Left, KeyCode::Right])
//         && !maze_timer.player_started
//     {
//         maze_timer.player_started = true;
//         maze_timer.start_time = Some(Instant::now())
//     }
//     let (transform, mut controller) = query.single_mut();
//     let mut velocity = Vec3::ZERO;
//     for key in keys.get_pressed() {
//         match key {
//             KeyCode::Up => velocity += transform.forward(),
//             KeyCode::Down => velocity += transform.back(),
//             KeyCode::Left => velocity += transform.left(),
//             KeyCode::Right => velocity += transform.right(),
//             _ => (),
//         }
//     }
//     controller.translation = Some(velocity.normalize_or_zero() * time.delta_seconds());
// }
" 0 1 (fontified t) 1 4 (face font-lock-comment-delimiter-face fontified t) 4 22 (face font-lock-comment-face fontified t) 22 29 (face font-lock-comment-delimiter-face fontified t) 29 35 (face font-lock-comment-face fontified t) 35 45 (fontified t face font-lock-comment-face) 45 46 (fontified t face font-lock-comment-face syntax-table (1)) 46 73 (fontified t face font-lock-comment-face) 73 93 (fontified t face font-lock-comment-face) 93 94 (fontified t face font-lock-comment-face syntax-table (1)) 94 96 (fontified t face font-lock-comment-face) 96 103 (face font-lock-comment-delimiter-face fontified t) 103 125 (face font-lock-comment-face fontified t) 125 126 (face font-lock-comment-face fontified t syntax-table (1)) 126 135 (face font-lock-comment-face fontified t) 135 136 (face font-lock-comment-face fontified t syntax-table (1)) 136 138 (face font-lock-comment-face fontified t) 138 145 (face font-lock-comment-delimiter-face fontified t) 145 154 (face font-lock-comment-face fontified t) 154 155 (face font-lock-comment-face fontified t syntax-table (1)) 155 160 (face font-lock-comment-face fontified t) 160 161 (face font-lock-comment-face fontified t syntax-table (1)) 161 168 (face font-lock-comment-face fontified t) 168 169 (face font-lock-comment-face fontified t syntax-table (1)) 169 170 (face font-lock-comment-face fontified t syntax-table (1)) 170 172 (face font-lock-comment-face fontified t) 172 179 (face font-lock-comment-delimiter-face fontified t) 179 188 (face font-lock-comment-face fontified t) 188 189 (face font-lock-comment-face fontified t syntax-table (1)) 189 193 (face font-lock-comment-face fontified t) 193 194 (face font-lock-comment-face fontified t syntax-table (1)) 194 196 (face font-lock-comment-face fontified t) 196 199 (face font-lock-comment-delimiter-face fontified t) 199 203 (face font-lock-comment-face fontified t) 203 210 (face font-lock-comment-delimiter-face fontified t) 210 288 (face font-lock-comment-face fontified t) 288 291 (face font-lock-comment-face fontified t) 291 302 (face font-lock-comment-delimiter-face fontified t) 302 332 (face font-lock-comment-face fontified t) 332 339 (face font-lock-comment-delimiter-face fontified t) 339 341 (face font-lock-comment-face fontified t) 341 352 (face font-lock-comment-delimiter-face fontified t) 352 386 (face font-lock-comment-face fontified t) 386 397 (face font-lock-comment-delimiter-face fontified t) 397 442 (face font-lock-comment-face fontified t) 442 449 (face font-lock-comment-delimiter-face fontified t) 449 451 (face font-lock-comment-face fontified t) 451 458 (face font-lock-comment-delimiter-face fontified t) 458 512 (face font-lock-comment-face fontified t) 512 519 (face font-lock-comment-delimiter-face fontified t) 519 550 (face font-lock-comment-face fontified t) 550 557 (face font-lock-comment-delimiter-face fontified t) 557 589 (face font-lock-comment-face fontified t) 589 600 (face font-lock-comment-delimiter-face fontified t) 600 612 (face font-lock-comment-face fontified t) 612 627 (face font-lock-comment-delimiter-face fontified t) 627 640 (face font-lock-comment-face fontified t) 640 641 (face font-lock-comment-face syntax-table (1) fontified t) 641 675 (face font-lock-comment-face fontified t) 675 690 (face font-lock-comment-delimiter-face fontified t) 690 705 (face font-lock-comment-face fontified t) 705 706 (face font-lock-comment-face syntax-table (1) fontified t) 706 737 (face font-lock-comment-face fontified t) 737 752 (face font-lock-comment-delimiter-face fontified t) 752 767 (face font-lock-comment-face fontified t) 767 768 (face font-lock-comment-face syntax-table (1) fontified t) 768 799 (face font-lock-comment-face fontified t) 799 814 (face font-lock-comment-delimiter-face fontified t) 814 830 (face font-lock-comment-face fontified t) 830 831 (face font-lock-comment-face syntax-table (1) fontified t) 831 863 (face font-lock-comment-face fontified t) 863 878 (face font-lock-comment-delimiter-face fontified t) 878 881 (face font-lock-comment-face fontified t) 881 882 (face font-lock-comment-face syntax-table (1) fontified t) 882 887 (face font-lock-comment-face fontified t) 887 898 (face font-lock-comment-delimiter-face fontified t) 898 900 (face font-lock-comment-face fontified t) 900 907 (face font-lock-comment-delimiter-face fontified t) 907 909 (face font-lock-comment-face fontified t) 909 916 (face font-lock-comment-delimiter-face fontified t) 916 1000 (face font-lock-comment-face fontified t) 1000 1003 (face font-lock-comment-delimiter-face fontified t) 1003 1005 (face font-lock-comment-face fontified t)) . 3011) (undo-tree-id214 . -1003) (undo-tree-id215 . -1003) (undo-tree-id216 . -1004) (undo-tree-id217 . -5) (undo-tree-id218 . -5) (undo-tree-id219 . -26) (undo-tree-id220 . -26) (undo-tree-id221 . -100) (undo-tree-id222 . -100) (undo-tree-id223 . -142) (undo-tree-id224 . -142) (undo-tree-id225 . -176) (undo-tree-id226 . -176) (undo-tree-id227 . -200) (undo-tree-id228 . -200) (undo-tree-id229 . -207) (undo-tree-id230 . -207) (undo-tree-id231 . -295) (undo-tree-id232 . -295) (undo-tree-id233 . -336) (undo-tree-id234 . -336) (undo-tree-id235 . -345) (undo-tree-id236 . -345) (undo-tree-id237 . -390) (undo-tree-id238 . -390) (undo-tree-id239 . -446) (undo-tree-id240 . -446) (undo-tree-id241 . -455) (undo-tree-id242 . -455) (undo-tree-id243 . -516) (undo-tree-id244 . -516) (undo-tree-id245 . -554) (undo-tree-id246 . -554) (undo-tree-id247 . -593) (undo-tree-id248 . -593) (undo-tree-id249 . -616) (undo-tree-id250 . -616) (undo-tree-id251 . -679) (undo-tree-id252 . -679) (undo-tree-id253 . -741) (undo-tree-id254 . -741) (undo-tree-id255 . -803) (undo-tree-id256 . -803) (undo-tree-id257 . -867) (undo-tree-id258 . -867) (undo-tree-id259 . -891) (undo-tree-id260 . -891) (undo-tree-id261 . -904) (undo-tree-id262 . -904) (undo-tree-id263 . -913) (undo-tree-id264 . -913) (undo-tree-id265 . -1003) (undo-tree-id266 . -1003) (undo-tree-id267 . -1003) (undo-tree-id268 . -1003) (undo-tree-id269 . -912) (undo-tree-id270 . -912) (undo-tree-id271 . -903) (undo-tree-id272 . -903) (undo-tree-id273 . -890) (undo-tree-id274 . -890) (undo-tree-id275 . -866) (undo-tree-id276 . -866) (undo-tree-id277 . -802) (undo-tree-id278 . -802) (undo-tree-id279 . -740) (undo-tree-id280 . -740) (undo-tree-id281 . -678) (undo-tree-id282 . -678) (undo-tree-id283 . -615) (undo-tree-id284 . -615) (undo-tree-id285 . -592) (undo-tree-id286 . -592) (undo-tree-id287 . -553) (undo-tree-id288 . -553) (undo-tree-id289 . -515) (undo-tree-id290 . -515) (undo-tree-id291 . -454) (undo-tree-id292 . -454) (undo-tree-id293 . -445) (undo-tree-id294 . -445) (undo-tree-id295 . -389) (undo-tree-id296 . -389) (undo-tree-id297 . -344) (undo-tree-id298 . -344) (undo-tree-id299 . -335) (undo-tree-id300 . -335) (undo-tree-id301 . -294) (undo-tree-id302 . -294) (undo-tree-id303 . -206) (undo-tree-id304 . -206) (undo-tree-id305 . -199) (undo-tree-id306 . -199) (undo-tree-id307 . -175) (undo-tree-id308 . -175) (undo-tree-id309 . -141) (undo-tree-id310 . -141) (undo-tree-id311 . -99) (undo-tree-id312 . -99) (undo-tree-id313 . -25) (undo-tree-id314 . -25) (undo-tree-id315 . -4) (undo-tree-id316 . -4) (undo-tree-id317 . -1005) (t 25827 50631 186958 271000)) nil (25827 50832 15764 42000) 0 nil] [nil nil ((#("b" 0 1 (face font-lock-constant-face fontified t)) . 5) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (t 25827 50631 186958 271000)) ((5 . 6)) (25827 50809 995459 891000) 0 nil] [nil nil ((#("b" 0 1 (face font-lock-constant-face fontified t)) . 5) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (t 25827 50631 186958 271000)) ((5 . 6)) (25827 50808 540447 447000) 0 nil])
([nil nil ((#("2" 0 1 (face font-lock-constant-face fontified t)) . 131) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (t 25827 50832 15856 233000)) nil (25827 50886 211757 773000) 0 nil])
nil
nil
([nil nil ((#("2" 0 1 (face font-lock-constant-face fontified t)) . 141) (undo-tree-id318 . -1) (undo-tree-id319 . -1)) nil (25827 50886 211752 465000) 0 nil])
([nil nil ((3028 . 3034) (#("i" 0 1 (fontified t)) . -3028) (undo-tree-id330 . -1) (3018 . 3029) (#("g" 0 1 (fontified t)) . -3018) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (undo-tree-id334 . -1) 3019 (3010 . 3019) (3009 . 3010) (t 25827 50886 212225 500000) 3009) nil (25827 51141 993996 494000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3474 . 3475) (#("
" 0 1 (fontified nil)) . -3938) (3474 . 3939)) nil (25827 51141 993991 326000) 0 nil])
([nil nil ((3480 . 3484) (#("n" 0 1 (face font-lock-preprocessor-face fontified t)) . -3480) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (#("(" 0 1 (face font-lock-preprocessor-face fontified t)) . -3481) (undo-tree-id328 . -1) (undo-tree-id329 . -1) 3482 (3480 . 3482)) nil (25827 51141 993988 952000) 0 nil])
([nil nil ((3502 . 3503)) nil (25827 51141 993984 691000) 0 nil])
([nil nil ((#("/" 0 1 (face font-lock-comment-delimiter-face fontified t)) . 3236) (undo-tree-id324 . -1) (undo-tree-id325 . -1)) nil (25827 51141 993982 317000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . 3236) (undo-tree-id322 . -1) (undo-tree-id323 . -1)) nil (25827 51141 993977 986000) 0 nil])
([nil nil ((3941 . 3942) 3236) nil (25827 51141 993965 485000) 0 nil])
([nil nil ((2986 . 2988) (#(":" 0 1 (fontified t)) . -2986) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (#(":" 0 1 (fontified t)) . -2987) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (#("d" 0 1 (fontified t)) . -2988) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (#("e" 0 1 (fontified t)) . -2989) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (#("f" 0 1 (fontified t)) . -2990) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (#("a" 0 1 (fontified t)) . -2991) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (#("u" 0 1 (fontified t)) . -2992) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (#("l" 0 1 (fontified t)) . -2993) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (#("t" 0 1 (fontified t)) . -2994) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (#("(" 0 1 (fontified t)) . -2995) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (#(")" 0 1 (fontified t)) . -2996) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) 2997 (t 25827 51142 821 874000)) nil (25830 16158 751602 869000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3025 . 3026) (nil fontified nil 2988 . 3026) (2988 . 3026) 2987) nil (25830 16158 751574 676000) 0 nil])
([nil nil ((3027 . 3039) (#("," 0 1 (fontified t)) . -3027) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (#("." 0 1 (fontified t)) . -3028) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (#("." 0 1 (fontified t)) . -3029) (undo-tree-id4 . -1) (undo-tree-id5 . -1) 3030 (3026 . 3030) (#("," 0 1 (fontified t)) . -3026) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (#(" " 0 1 (fontified t)) . -3027) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) 3028 (3026 . 3028)) nil (25830 16573 100058 881000) 0 nil])
([nil nil ((2986 . 2987) (2987 . 2995) (2988 . 2992) (3026 . 3030) (3027 . 3035) (3038 . 3047)) ((#("
        " 0 1 (fontified nil) 1 9 (fontified t)) . 3038) (#("        " 0 8 (fontified nil)) . 3027) (#("
   " 0 1 (fontified nil) 1 4 (fontified t)) . 3026) (#("    " 0 4 (fontified nil)) . 2988) (#("
       " 0 1 (fontified nil) 1 8 (fontified t)) . 2987) (undo-tree-id145 . 8) (#(" " 0 1 (fontified t)) . 2986)) (25830 16574 203584 438000) 0 nil])
([nil nil ((3014 . 3016) (#("*" 0 1 (fontified nil)) . 3014) (3013 . 3015) (#(",0" 0 1 (fontified nil) 1 2 (fontified nil)) . 3013) (2988 . 3015)) ((#("
	    " 0 1 (fontified t) 1 2 (fontified nil) 2 6 (fontified nil)) . 2988) (undo-tree-id99 . -6) (undo-tree-id100 . -6) (undo-tree-id101 . -6) (undo-tree-id102 . -6) (undo-tree-id103 . -6) (undo-tree-id104 . -6) (undo-tree-id105 . -6) (undo-tree-id106 . -6) (undo-tree-id107 . -6) (undo-tree-id108 . -6) (undo-tree-id109 . -6) (undo-tree-id110 . -6) (undo-tree-id111 . -6) (undo-tree-id112 . -6) (undo-tree-id113 . -6) (undo-tree-id114 . -6) (undo-tree-id115 . -6) (undo-tree-id116 . -6) (undo-tree-id117 . -6) (undo-tree-id118 . -1) (undo-tree-id119 . -6) (#("custom_mass: 100900,0" 0 11 (face font-lock-variable-name-face fontified nil) 11 13 (fontified nil) 13 19 (fontified nil) 19 20 (fontified nil) 20 21 (fontified nil)) . 2994) (undo-tree-id120 . 7) (undo-tree-id121 . -14) (undo-tree-id122 . -14) (undo-tree-id123 . -14) (undo-tree-id124 . -14) (undo-tree-id125 . -14) (undo-tree-id126 . -14) (undo-tree-id127 . -14) (undo-tree-id128 . -14) (undo-tree-id129 . -14) (undo-tree-id130 . -14) (undo-tree-id131 . -14) (undo-tree-id132 . -14) (undo-tree-id133 . -14) (undo-tree-id134 . -14) (undo-tree-id135 . -14) (undo-tree-id136 . -14) (undo-tree-id137 . -14) (undo-tree-id138 . -14) (undo-tree-id139 . -21) (undo-tree-id140 . -19) (3013 . 3015) (#(".*" 0 1 (fontified nil) 1 2 (fontified nil)) . 3013) (undo-tree-id141 . -2) (undo-tree-id142 . -1) (3014 . 3015) (#("0," 0 2 (fontified t)) . 3014) (undo-tree-id143 . -1) (undo-tree-id144 . -1)) (25830 16574 835614 997000) 0 nil])
([nil nil ((2989 . 2997) (#("	" 0 1 (fontified t)) . 2989) 3014) nil (25830 16577 966117 89000) 0 nil] [nil nil ((2989 . 2997) (#("	" 0 1 (fontified t)) . 2989) 3015) ((2989 . 2990) (#("        " 0 8 (fontified t)) . 2989)) (25830 16572 57866 590000) 0 nil])
([nil nil ((3014 . 3019) (t 25830 16577 966639 704000)) nil (25830 16587 120154 646000) 0 nil])
([nil nil ((3014 . 3019) (t 25830 16343 149970 90000)) ((#("Some(" 0 4 (face font-lock-type-face fontified t) 4 5 (fontified t)) . 3014)) (25830 16571 633493 157000) 0 nil])
([nil nil ((3027 . 3028)) nil (25830 16587 120151 70000) 0 nil])
([nil nil ((3027 . 3028)) ((#(")" 0 1 (fontified t)) . 3027)) (25830 16570 470558 403000) 0 nil])
([nil nil ((3126 . 3127) (3125 . 3126) (t 25830 16587 123306 475000) 3124) nil (25830 16996 835020 710000) 0 nil])
([nil nil ((#("        RigidBody::KinematicPositionBased,
" 0 8 (fontified t) 8 17 (face font-lock-type-face fontified t) 17 19 (fontified t) 19 41 (face font-lock-type-face fontified t) 41 43 (fontified t)) . 2819) (undo-tree-id78 . -42) (t 25830 16355 79970 254000)) ((2819 . 2862)) (25830 16570 315 992000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4407 . 4408) (nil fontified nil 3127 . 4408) (3127 . 4408)) nil (25830 17360 932934 653000) 0 nil] [nil nil ((nil rear-nonsticky nil 4493 . 4494) (nil fontified nil 3127 . 4494) (3127 . 4494)) ((#("fn movement_system(
    keyboard_input: Res<Input<KeyCode>>,
    mut query: Query<(
        &mut Transform,
        &mut MovementDirection,
        &mut RigidBody,
        &Collider,
        &MoveShapeOptions,
        &QueryFilter<'_>,
        &mut impl FnMut(CharacterCollision),
    )>,
) {
    for (
        mut transform,
        mut movement_direction,
        mut rigid_body,
        shape,
        options,
        filter,
        mut events,
    ) in query.iter_mut()
    {
        let mut direction = Vec2::zero();
        if keyboard_input.pressed(KeyCode::Left) {
            direction.x -= 1.0;
        }
        if keyboard_input.pressed(KeyCode::Right) {
            direction.x += 1.0;
        }
        if keyboard_input.pressed(KeyCode::Up) {
            direction.y += 1.0;
        }
        if keyboard_input.pressed(KeyCode::Down) {
            direction.y -= 1.0;
        }

        movement_direction.0 = direction.normalize();
        rigid_body.apply_impulse(direction);

        // Call move_shape function
        move_shape(
            &mut transform,
            movement_direction.0,
            shape,
            transform.translation,
            Quat::default(), // Replace with the actual rotation
            1.0, // Replace with the actual mass
            options,
            filter,
            &mut events,
        );
    }
}
" 0 2 (face font-lock-keyword-face fontified nil) 2 3 (fontified nil) 3 18 (face font-lock-function-name-face fontified nil) 18 24 (fontified nil) 24 38 (face font-lock-variable-name-face fontified nil) 38 40 (fontified nil) 40 43 (face font-lock-type-face fontified nil) 43 44 (fontified nil) 44 49 (face font-lock-type-face fontified nil) 49 50 (fontified nil) 50 57 (face font-lock-type-face fontified nil) 57 65 (fontified nil) 65 68 (face font-lock-keyword-face fontified nil) 68 69 (fontified nil) 69 74 (face font-lock-variable-name-face fontified nil) 74 76 (fontified nil) 76 81 (face font-lock-type-face fontified nil) 81 92 (fontified nil) 92 93 (face rust-ampersand-face fontified nil) 93 96 (face font-lock-keyword-face fontified nil) 96 97 (fontified nil) 97 106 (face font-lock-type-face fontified nil) 106 116 (fontified nil) 116 117 (face rust-ampersand-face fontified nil) 117 120 (face font-lock-keyword-face fontified nil) 120 121 (fontified nil) 121 138 (face font-lock-type-face fontified nil) 138 148 (fontified nil) 148 149 (face rust-ampersand-face fontified nil) 149 152 (face font-lock-keyword-face fontified nil) 152 153 (fontified nil) 153 162 (face font-lock-type-face fontified nil) 162 172 (fontified nil) 172 173 (face rust-ampersand-face fontified nil) 173 181 (face font-lock-type-face fontified nil) 181 191 (fontified nil) 191 192 (face rust-ampersand-face fontified nil) 192 208 (face font-lock-type-face fontified nil) 208 218 (fontified nil) 218 219 (face rust-ampersand-face fontified nil) 219 230 (face font-lock-type-face fontified nil) 230 232 (fontified nil) 232 233 (face font-lock-variable-name-face fontified nil) 233 244 (fontified nil) 244 245 (face rust-ampersand-face fontified nil) 245 248 (face font-lock-keyword-face fontified nil) 248 249 (fontified nil) 249 253 (face font-lock-keyword-face fontified nil) 253 254 (fontified nil) 254 259 (face font-lock-type-face fontified nil) 259 260 (fontified nil) 260 278 (face font-lock-type-face fontified nil) 278 297 (fontified nil) 297 300 (face font-lock-keyword-face fontified nil) 300 311 (fontified nil) 311 314 (face font-lock-keyword-face fontified nil) 314 334 (fontified nil) 334 337 (face font-lock-keyword-face fontified nil) 337 366 (fontified nil) 366 369 (face font-lock-keyword-face fontified nil) 369 438 (fontified nil) 438 441 (face font-lock-keyword-face fontified nil) 441 456 (fontified nil) 456 458 (face font-lock-keyword-face fontified nil) 458 490 (fontified nil) 490 493 (face font-lock-keyword-face fontified nil) 493 494 (fontified nil) 494 497 (face font-lock-keyword-face fontified nil) 497 498 (fontified nil) 498 507 (face font-lock-variable-name-face fontified nil) 507 510 (fontified nil) 510 514 (face font-lock-type-face fontified nil) 514 532 (fontified nil) 532 534 (face font-lock-keyword-face fontified nil) 534 558 (fontified nil) 558 565 (face font-lock-type-face fontified nil) 565 567 (fontified nil) 567 571 (face font-lock-type-face fontified nil) 571 625 (fontified nil) 625 627 (face font-lock-keyword-face fontified nil) 627 651 (fontified nil) 651 658 (face font-lock-type-face fontified nil) 658 660 (fontified nil) 660 665 (face font-lock-type-face fontified nil) 665 719 (fontified nil) 719 721 (face font-lock-keyword-face fontified nil) 721 745 (fontified nil) 745 752 (face font-lock-type-face fontified nil) 752 754 (fontified nil) 754 756 (face font-lock-type-face fontified nil) 756 810 (fontified nil) 810 812 (face font-lock-keyword-face fontified nil) 812 836 (fontified nil) 836 843 (face font-lock-type-face fontified nil) 843 845 (fontified nil) 845 849 (face font-lock-type-face fontified nil) 849 1004 (fontified nil) 1004 1007 (face font-lock-comment-delimiter-face fontified nil) 1007 1032 (face font-lock-comment-face fontified nil) 1032 1064 (fontified nil) 1064 1065 (face rust-ampersand-face fontified nil) 1065 1068 (face font-lock-keyword-face fontified nil) 1068 1180 (fontified nil) 1180 1184 (face font-lock-type-face fontified nil) 1184 1197 (fontified nil) 1197 1200 (face font-lock-comment-delimiter-face fontified nil) 1200 1233 (face font-lock-comment-face fontified nil) 1233 1250 (fontified nil) 1250 1253 (face font-lock-comment-delimiter-face fontified nil) 1253 1282 (face font-lock-comment-face fontified nil) 1282 1335 (fontified nil) 1335 1336 (face rust-ampersand-face fontified nil) 1336 1339 (face font-lock-keyword-face fontified nil) 1339 1365 (fontified nil) 1365 1366 (fontified nil) 1366 1367 (rear-nonsticky nil fontified nil)) . 3127) (undo-tree-id160 . -904) (undo-tree-id161 . -1367) (undo-tree-id162 . -1367) (undo-tree-id163 . -760) (undo-tree-id164 . -1367) (undo-tree-id165 . -1367) (undo-tree-id166 . -904) (undo-tree-id167 . -1367) (undo-tree-id168 . -1367) (undo-tree-id169 . -1367) (nil fontified t 4466 . 4492) (nil fontified t 4463 . 4466) (nil fontified t 4462 . 4463) (nil fontified t 4409 . 4462) (nil fontified t 4380 . 4409) (nil fontified t 4377 . 4380) (nil fontified t 4360 . 4377) (nil fontified t 4327 . 4360) (nil fontified t 4324 . 4327) (nil fontified t 4311 . 4324) (nil fontified t 4307 . 4311) (nil fontified t 4195 . 4307) (nil fontified t 4192 . 4195) (nil fontified t 4191 . 4192) (nil fontified t 4159 . 4191) (nil fontified t 4134 . 4159) (nil fontified t 4131 . 4134) (nil fontified t 3976 . 4131) (nil fontified t 3972 . 3976) (nil fontified t 3970 . 3972) (nil fontified t 3963 . 3970) (nil fontified t 3939 . 3963) (nil fontified t 3937 . 3939) (nil fontified t 3883 . 3937) (nil fontified t 3881 . 3883) (nil fontified t 3879 . 3881) (nil fontified t 3872 . 3879) (nil fontified t 3848 . 3872) (nil fontified t 3846 . 3848) (nil fontified t 3792 . 3846) (nil fontified t 3787 . 3792) (nil fontified t 3785 . 3787) (nil fontified t 3778 . 3785) (nil fontified t 3754 . 3778) (nil fontified t 3752 . 3754) (nil fontified t 3698 . 3752) (nil fontified t 3694 . 3698) (nil fontified t 3692 . 3694) (nil fontified t 3685 . 3692) (nil fontified t 3661 . 3685) (nil fontified t 3659 . 3661) (nil fontified t 3641 . 3659) (nil fontified t 3637 . 3641) (nil fontified t 3634 . 3637) (nil fontified t 3625 . 3634) (nil fontified t 3624 . 3625) (nil fontified t 3621 . 3624) (nil fontified t 3620 . 3621) (nil fontified t 3617 . 3620) (nil fontified t 3585 . 3617) (nil fontified t 3583 . 3585) (nil fontified t 3568 . 3583) (nil fontified t 3565 . 3568) (nil fontified t 3496 . 3565) (nil fontified t 3493 . 3496) (nil fontified t 3464 . 3493) (nil fontified t 3461 . 3464) (nil fontified t 3441 . 3461) (nil fontified t 3438 . 3441) (nil fontified t 3427 . 3438) (nil fontified t 3424 . 3427) (nil fontified t 3405 . 3424) (nil fontified t 3387 . 3405) (nil fontified t 3386 . 3387) (nil fontified t 3381 . 3386) (nil fontified t 3380 . 3381) (nil fontified t 3376 . 3380) (nil fontified t 3375 . 3376) (nil fontified t 3372 . 3375) (nil fontified t 3371 . 3372) (nil fontified t 3360 . 3371) (nil fontified t 3359 . 3360) (nil fontified t 3357 . 3359) (nil fontified t 3346 . 3357) (nil fontified t 3345 . 3346) (nil fontified t 3335 . 3345) (nil fontified t 3319 . 3335) (nil fontified t 3318 . 3319) (nil fontified t 3308 . 3318) (nil fontified t 3300 . 3308) (nil fontified t 3299 . 3300) (nil fontified t 3289 . 3299) (nil fontified t 3280 . 3289) (nil fontified t 3279 . 3280) (nil fontified t 3276 . 3279) (nil fontified t 3275 . 3276) (nil fontified t 3265 . 3275) (nil fontified t 3248 . 3265) (nil fontified t 3247 . 3248) (nil fontified t 3244 . 3247) (nil fontified t 3243 . 3244) (nil fontified t 3233 . 3243) (nil fontified t 3224 . 3233) (nil fontified t 3223 . 3224) (nil fontified t 3220 . 3223) (nil fontified t 3219 . 3220) (nil fontified t 3208 . 3219) (nil fontified t 3203 . 3208) (nil fontified t 3201 . 3203) (nil fontified t 3196 . 3201) (nil fontified t 3195 . 3196) (nil fontified t 3192 . 3195) (nil fontified t 3184 . 3192) (nil fontified t 3177 . 3184) (nil fontified t 3176 . 3177) (nil fontified t 3171 . 3176) (nil fontified t 3170 . 3171) (nil fontified t 3167 . 3170) (nil fontified t 3165 . 3167) (nil fontified t 3151 . 3165) (nil fontified t 3145 . 3151) (nil fontified t 3130 . 3145) (nil fontified t 3129 . 3130) (nil fontified t 3127 . 3129) (nil rear-nonsticky t 4493 . 4494)) (25830 16996 113926 403000) 0 nil])
([nil nil ((2977 . 2981) (t 25830 16444 216638 46000)) ((#("0000" 0 4 (fontified t)) . 2977) (undo-tree-id80 . -3) (undo-tree-id81 . -3) (undo-tree-id82 . -3) (undo-tree-id83 . -3) (undo-tree-id84 . -3) (undo-tree-id85 . -3) (undo-tree-id86 . -3) (undo-tree-id87 . -3) (undo-tree-id88 . -3) (undo-tree-id89 . -3) (undo-tree-id90 . -3) (undo-tree-id91 . -3) (undo-tree-id92 . -3) (undo-tree-id93 . -3) (undo-tree-id94 . -3) (undo-tree-id95 . -3) (undo-tree-id96 . -3) (undo-tree-id97 . -3) (undo-tree-id98 . -3) (t 25830 16508 193305 541000)) (25830 16508 189749 167000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 4408) (undo-tree-id1593 . 1) (undo-tree-id1594 . -1) (undo-tree-id1595 . -1) (undo-tree-id1596 . -1) (undo-tree-id1597 . -1) (undo-tree-id1598 . -1) (undo-tree-id1599 . -1) (undo-tree-id1600 . -1) (undo-tree-id1601 . -1) (undo-tree-id1602 . -1) (undo-tree-id1603 . -1) (undo-tree-id1604 . -1) (undo-tree-id1605 . -1) (undo-tree-id1606 . -1)) nil (25830 17360 932933 711000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 4494) (undo-tree-id146 . 1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1)) ((4494 . 4495)) (25830 16996 113797 60000) 0 nil])
nil
([nil nil ((#("    for (
        mut transform,
        mut rigid_body,
        shape,
        options,
        filter,
        mut events,
    ) in query.iter_mut()
    {
        let mut direction = Vec2::zero();
        if keyboard_input.pressed(KeyCode::Left) {
            direction.x -= 1.0;
        }
        if keyboard_input.pressed(KeyCode::Right) {
            direction.x += 1.0;
        }
        if keyboard_input.pressed(KeyCode::Up) {
            direction.y += 1.0;
        }
        if keyboard_input.pressed(KeyCode::Down) {
            direction.y -= 1.0;
        }

        // Apply impulse to the rigid body
        rigid_body.apply_impulse(direction);

        // Call move_shape function
        move_shape(
            &mut transform,
            direction,
            shape,
            transform.translation,
            Quat::default(), // Replace with the actual rotation
            1.0, // Replace with the actual mass
            options,
            filter,
            &mut events,
        );
    }
" 0 4 (fontified t) 4 7 (face font-lock-keyword-face fontified t) 7 18 (fontified t) 18 21 (face font-lock-keyword-face fontified t) 21 41 (fontified t) 41 44 (face font-lock-keyword-face fontified t) 44 113 (fontified t) 113 116 (face font-lock-keyword-face fontified t) 116 131 (fontified t) 131 133 (face font-lock-keyword-face fontified t) 133 165 (fontified t) 165 168 (face font-lock-keyword-face fontified t) 168 169 (fontified t) 169 172 (face font-lock-keyword-face fontified t) 172 173 (fontified t) 173 182 (face font-lock-variable-name-face fontified t) 182 185 (fontified t) 185 189 (face font-lock-type-face fontified t) 189 207 (fontified t) 207 209 (face font-lock-keyword-face fontified t) 209 233 (fontified t) 233 240 (face font-lock-type-face fontified t) 240 242 (fontified t) 242 246 (face font-lock-type-face fontified t) 246 300 (fontified t) 300 302 (face font-lock-keyword-face fontified t) 302 326 (fontified t) 326 333 (face font-lock-type-face fontified t) 333 335 (fontified t) 335 340 (face font-lock-type-face fontified t) 340 394 (fontified t) 394 396 (face font-lock-keyword-face fontified t) 396 420 (fontified t) 420 427 (face font-lock-type-face fontified t) 427 429 (fontified t) 429 431 (face font-lock-type-face fontified t) 431 485 (fontified t) 485 487 (face font-lock-keyword-face fontified t) 487 511 (fontified t) 511 518 (face font-lock-type-face fontified t) 518 520 (fontified t) 520 524 (face font-lock-type-face fontified t) 524 579 (fontified t) 579 582 (face font-lock-comment-delimiter-face fontified t) 582 614 (face font-lock-comment-face fontified t) 614 668 (fontified t) 668 671 (face font-lock-comment-delimiter-face fontified t) 671 696 (face font-lock-comment-face fontified t) 696 728 (fontified t) 728 729 (face rust-ampersand-face fontified t) 729 732 (face font-lock-keyword-face fontified t) 732 833 (fontified t) 833 837 (face font-lock-type-face fontified t) 837 850 (fontified t) 850 853 (face font-lock-comment-delimiter-face fontified t) 853 886 (face font-lock-comment-face fontified t) 886 903 (fontified t) 903 906 (face font-lock-comment-delimiter-face fontified t) 906 935 (face font-lock-comment-face fontified t) 935 988 (fontified t) 988 989 (face rust-ampersand-face fontified t) 989 992 (face font-lock-keyword-face fontified t) 992 1018 (fontified t)) . 3388) (undo-tree-id1328 . -1012) (undo-tree-id1329 . -1017) (undo-tree-id1330 . -1012) (undo-tree-id1331 . -1018) (undo-tree-id1332 . -1018) (undo-tree-id1333 . -1012) (undo-tree-id1334 . -1012) (undo-tree-id1335 . -1001) (undo-tree-id1336 . -1001) (undo-tree-id1337 . -976) (undo-tree-id1338 . -976) (undo-tree-id1339 . -956) (undo-tree-id1340 . -956) (undo-tree-id1341 . -935) (undo-tree-id1342 . -935) (undo-tree-id1343 . -935) (undo-tree-id1344 . -935) (undo-tree-id1345 . -886) (undo-tree-id1346 . -886) (undo-tree-id1347 . -821) (undo-tree-id1348 . -821) (undo-tree-id1349 . -786) (undo-tree-id1350 . -786) (undo-tree-id1351 . -767) (undo-tree-id1352 . -767) (undo-tree-id1353 . -744) (undo-tree-id1354 . -744) (undo-tree-id1355 . -716) (undo-tree-id1356 . -716) (undo-tree-id1357 . -696) (undo-tree-id1358 . -696) (undo-tree-id1359 . -660) (undo-tree-id1360 . -660) (undo-tree-id1361 . -659) (undo-tree-id1362 . -659) (undo-tree-id1363 . -614) (undo-tree-id1364 . -614) (undo-tree-id1365 . -571) (undo-tree-id1366 . -571) (undo-tree-id1367 . -570) (undo-tree-id1368 . -570) (undo-tree-id1369 . -560) (undo-tree-id1370 . -560) (undo-tree-id1371 . -528) (undo-tree-id1372 . -528) (undo-tree-id1373 . -477) (undo-tree-id1374 . -477) (undo-tree-id1375 . -467) (undo-tree-id1376 . -467) (undo-tree-id1377 . -435) (undo-tree-id1378 . -435) (undo-tree-id1379 . -386) (undo-tree-id1380 . -386) (undo-tree-id1381 . -376) (undo-tree-id1382 . -376) (undo-tree-id1383 . -344) (undo-tree-id1384 . -344) (undo-tree-id1385 . -292) (undo-tree-id1386 . -292) (undo-tree-id1387 . -282) (undo-tree-id1388 . -282) (undo-tree-id1389 . -250) (undo-tree-id1390 . -250) (undo-tree-id1391 . -199) (undo-tree-id1392 . -199) (undo-tree-id1393 . -157) (undo-tree-id1394 . -157) (undo-tree-id1395 . -151) (undo-tree-id1396 . -151) (undo-tree-id1397 . -125) (undo-tree-id1398 . -125) (undo-tree-id1399 . -105) (undo-tree-id1400 . -105) (undo-tree-id1401 . -89) (undo-tree-id1402 . -89) (undo-tree-id1403 . -72) (undo-tree-id1404 . -72) (undo-tree-id1405 . -57) (undo-tree-id1406 . -57) (undo-tree-id1407 . -33) (undo-tree-id1408 . -33) (undo-tree-id1409 . -10) (undo-tree-id1410 . -10) (undo-tree-id1411 . -10) (undo-tree-id1412 . -10) (undo-tree-id1413 . -33) (undo-tree-id1414 . -33) (undo-tree-id1415 . -57) (undo-tree-id1416 . -57) (undo-tree-id1417 . -72) (undo-tree-id1418 . -72) (undo-tree-id1419 . -89) (undo-tree-id1420 . -89) (undo-tree-id1421 . -105) (undo-tree-id1422 . -105) (undo-tree-id1423 . -125) (undo-tree-id1424 . -125) (undo-tree-id1425 . -151) (undo-tree-id1426 . -151) (undo-tree-id1427 . -157) (undo-tree-id1428 . -157) (undo-tree-id1429 . -199) (undo-tree-id1430 . -199) (undo-tree-id1431 . -250) (undo-tree-id1432 . -250) (undo-tree-id1433 . -282) (undo-tree-id1434 . -282) (undo-tree-id1435 . -292) (undo-tree-id1436 . -292) (undo-tree-id1437 . -344) (undo-tree-id1438 . -344) (undo-tree-id1439 . -376) (undo-tree-id1440 . -376) (undo-tree-id1441 . -386) (undo-tree-id1442 . -386) (undo-tree-id1443 . -435) (undo-tree-id1444 . -435) (undo-tree-id1445 . -467) (undo-tree-id1446 . -467) (undo-tree-id1447 . -477) (undo-tree-id1448 . -477) (undo-tree-id1449 . -528) (undo-tree-id1450 . -528) (undo-tree-id1451 . -560) (undo-tree-id1452 . -560) (undo-tree-id1453 . -570) (undo-tree-id1454 . -570) (undo-tree-id1455 . -571) (undo-tree-id1456 . -571) (undo-tree-id1457 . -614) (undo-tree-id1458 . -614) (undo-tree-id1459 . -659) (undo-tree-id1460 . -659) (undo-tree-id1461 . -660) (undo-tree-id1462 . -660) (undo-tree-id1463 . -659) (undo-tree-id1464 . -659) (undo-tree-id1465 . -614) (undo-tree-id1466 . -614) (undo-tree-id1467 . -571) (undo-tree-id1468 . -571) (undo-tree-id1469 . -570) (undo-tree-id1470 . -570) (undo-tree-id1471 . -560) (undo-tree-id1472 . -560) (undo-tree-id1473 . -528) (undo-tree-id1474 . -528) (undo-tree-id1475 . -477) (undo-tree-id1476 . -477) (undo-tree-id1477 . -467) (undo-tree-id1478 . -467) (undo-tree-id1479 . -435) (undo-tree-id1480 . -435) (undo-tree-id1481 . -386) (undo-tree-id1482 . -386) (undo-tree-id1483 . -376) (undo-tree-id1484 . -376) (undo-tree-id1485 . -344) (undo-tree-id1486 . -344) (undo-tree-id1487 . -292) (undo-tree-id1488 . -292) (undo-tree-id1489 . -282) (undo-tree-id1490 . -282) (undo-tree-id1491 . -250) (undo-tree-id1492 . -250) (undo-tree-id1493 . -199) (undo-tree-id1494 . -199) (undo-tree-id1495 . -157) (undo-tree-id1496 . -157) (undo-tree-id1497 . -151) (undo-tree-id1498 . -151) (undo-tree-id1499 . -125) (undo-tree-id1500 . -125) (undo-tree-id1501 . -105) (undo-tree-id1502 . -105) (undo-tree-id1503 . -89) (undo-tree-id1504 . -89) (undo-tree-id1505 . -72) (undo-tree-id1506 . -72) (undo-tree-id1507 . -57) (undo-tree-id1508 . -57) (undo-tree-id1509 . -33) (undo-tree-id1510 . -33) (undo-tree-id1511 . -10) (undo-tree-id1512 . -10) (undo-tree-id1513 . -10) (undo-tree-id1514 . -10) (undo-tree-id1515 . -33) (undo-tree-id1516 . -33) (undo-tree-id1517 . -57) (undo-tree-id1518 . -57) (undo-tree-id1519 . -72) (undo-tree-id1520 . -72) (undo-tree-id1521 . -89) (undo-tree-id1522 . -89) (undo-tree-id1523 . -105) (undo-tree-id1524 . -105) (undo-tree-id1525 . -125) (undo-tree-id1526 . -125) (undo-tree-id1527 . -151) (undo-tree-id1528 . -151) (undo-tree-id1529 . -157) (undo-tree-id1530 . -157) (undo-tree-id1531 . -199) (undo-tree-id1532 . -199) (undo-tree-id1533 . -250) (undo-tree-id1534 . -250) (undo-tree-id1535 . -282) (undo-tree-id1536 . -282) (undo-tree-id1537 . -292) (undo-tree-id1538 . -292) (undo-tree-id1539 . -344) (undo-tree-id1540 . -344) (undo-tree-id1541 . -376) (undo-tree-id1542 . -376) (undo-tree-id1543 . -386) (undo-tree-id1544 . -386) (undo-tree-id1545 . -435) (undo-tree-id1546 . -435) (undo-tree-id1547 . -467) (undo-tree-id1548 . -467) (undo-tree-id1549 . -477) (undo-tree-id1550 . -477) (undo-tree-id1551 . -528) (undo-tree-id1552 . -528) (undo-tree-id1553 . -560) (undo-tree-id1554 . -560) (undo-tree-id1555 . -570) (undo-tree-id1556 . -570) (undo-tree-id1557 . -571) (undo-tree-id1558 . -571) (undo-tree-id1559 . -614) (undo-tree-id1560 . -614) (undo-tree-id1561 . -659) (undo-tree-id1562 . -659) (undo-tree-id1563 . -660) (undo-tree-id1564 . -660) (undo-tree-id1565 . -696) (undo-tree-id1566 . -696) (undo-tree-id1567 . -716) (undo-tree-id1568 . -716) (undo-tree-id1569 . -744) (undo-tree-id1570 . -744) (undo-tree-id1571 . -767) (undo-tree-id1572 . -767) (undo-tree-id1573 . -786) (undo-tree-id1574 . -786) (undo-tree-id1575 . -821) (undo-tree-id1576 . -821) (undo-tree-id1577 . -886) (undo-tree-id1578 . -886) (undo-tree-id1579 . -935) (undo-tree-id1580 . -935) (undo-tree-id1581 . -956) (undo-tree-id1582 . -956) (undo-tree-id1583 . -976) (undo-tree-id1584 . -976) (undo-tree-id1585 . -1001) (undo-tree-id1586 . -1001) (undo-tree-id1587 . -1012) (undo-tree-id1588 . -1012) (undo-tree-id1589 . -1012) (undo-tree-id1590 . -1012) (undo-tree-id1591 . -1012) (undo-tree-id1592 . -1018) 4400) nil (25830 17360 932922 530000) 0 nil])
nil
([nil nil ((#("    mut query: Query<(
        &mut Transform,
        &mut RigidBody,
        &Collider,
        &MoveShapeOptions,
        &QueryFilter<'_>,
        &mut impl FnMut(CharacterCollision),
" 0 4 (fontified t) 4 7 (face font-lock-keyword-face fontified t) 7 8 (fontified t) 8 13 (face font-lock-variable-name-face fontified t) 13 15 (fontified t) 15 20 (face font-lock-type-face fontified t) 20 31 (fontified t) 31 32 (face rust-ampersand-face fontified t) 32 35 (face font-lock-keyword-face fontified t) 35 36 (fontified t) 36 45 (face font-lock-type-face fontified t) 45 55 (fontified t) 55 56 (face rust-ampersand-face fontified t) 56 59 (face font-lock-keyword-face fontified t) 59 60 (fontified t) 60 69 (face font-lock-type-face fontified t) 69 79 (fontified t) 79 80 (face rust-ampersand-face fontified t) 80 88 (face font-lock-type-face fontified t) 88 98 (fontified t) 98 99 (face rust-ampersand-face fontified t) 99 115 (face font-lock-type-face fontified t) 115 125 (fontified t) 125 126 (face rust-ampersand-face fontified t) 126 137 (face font-lock-type-face fontified t) 137 139 (fontified t) 139 140 (face font-lock-variable-name-face fontified t) 140 151 (fontified t) 151 152 (face rust-ampersand-face fontified t) 152 155 (face font-lock-keyword-face fontified t) 155 156 (fontified t) 156 160 (face font-lock-keyword-face fontified t) 160 161 (fontified t) 161 166 (face font-lock-type-face fontified t) 166 167 (fontified t) 167 185 (face font-lock-type-face fontified t) 185 188 (fontified t)) . 3188) (undo-tree-id1263 . -143) (undo-tree-id1264 . -187) (undo-tree-id1265 . -143) (undo-tree-id1266 . -188) (undo-tree-id1267 . -188) (undo-tree-id1268 . -143) (undo-tree-id1269 . -143) (undo-tree-id1270 . -117) (undo-tree-id1271 . -117) (undo-tree-id1272 . -90) (undo-tree-id1273 . -90) (undo-tree-id1274 . -71) (undo-tree-id1275 . -71) (undo-tree-id1276 . -47) (undo-tree-id1277 . -47) (undo-tree-id1278 . -23) (undo-tree-id1279 . -23) (undo-tree-id1280 . -23) (undo-tree-id1281 . -23) (undo-tree-id1282 . -47) (undo-tree-id1283 . -47) (undo-tree-id1284 . -71) (undo-tree-id1285 . -71) (undo-tree-id1286 . -90) (undo-tree-id1287 . -90) (undo-tree-id1288 . -117) (undo-tree-id1289 . -117) (undo-tree-id1290 . -143) (undo-tree-id1291 . -143) (undo-tree-id1292 . -188) (undo-tree-id1293 . -188) (undo-tree-id1294 . -188) (undo-tree-id1295 . -188) (undo-tree-id1296 . -143) (undo-tree-id1297 . -143) (undo-tree-id1298 . -143) (undo-tree-id1299 . -143) (undo-tree-id1300 . -117) (undo-tree-id1301 . -117) (undo-tree-id1302 . -90) (undo-tree-id1303 . -90) (undo-tree-id1304 . -71) (undo-tree-id1305 . -71) (undo-tree-id1306 . -47) (undo-tree-id1307 . -47) (undo-tree-id1308 . -23) (undo-tree-id1309 . -23) (undo-tree-id1310 . -23) (undo-tree-id1311 . -23) (undo-tree-id1312 . -23) (undo-tree-id1313 . -23) (undo-tree-id1314 . -47) (undo-tree-id1315 . -47) (undo-tree-id1316 . -71) (undo-tree-id1317 . -71) (undo-tree-id1318 . -90) (undo-tree-id1319 . -90) (undo-tree-id1320 . -117) (undo-tree-id1321 . -117) (undo-tree-id1322 . -143) (undo-tree-id1323 . -143) (undo-tree-id1324 . -143) (undo-tree-id1325 . -143) (undo-tree-id1326 . -143) (undo-tree-id1327 . -188) 3331) nil (25830 17360 932832 291000) 0 nil])
([nil nil ((#("eyboard_input" 0 13 (face font-lock-variable-name-face fontified t)) . 3152) (undo-tree-id1261 . -12) (undo-tree-id1262 . -13)) nil (25830 17360 932810 380000) 0 nil])
([nil nil ((3152 . 3155)) nil (25830 17360 932808 477000) 0 nil])
([nil nil ((3237 . 3239) (3209 . 3237) (#("Kinema" 0 6 (face font-lock-type-face fontified t)) . -3209) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -3) (undo-tree-id274 . -3) (undo-tree-id275 . -3) (undo-tree-id276 . -3) (undo-tree-id277 . -4) (undo-tree-id278 . -4) (undo-tree-id279 . -5) (undo-tree-id280 . -5) (undo-tree-id281 . -6) (undo-tree-id282 . -6) (undo-tree-id283 . -6) (undo-tree-id284 . -6) (undo-tree-id285 . -6) (undo-tree-id286 . -6) 3215 (3210 . 3215) (#("i" 0 1 (face font-lock-type-face fontified t)) . -3210) (undo-tree-id287 . -1) (3210 . 3211) (#("u" 0 1 (face font-lock-type-face fontified t)) . -3210) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (#("t" 0 1 (face font-lock-type-face fontified t)) . -3211) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -3212) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (#("b" 0 1 (face font-lock-type-face fontified t)) . -3213) (undo-tree-id294 . -1) (undo-tree-id295 . -1) 3214 (3210 . 3214) (#("J" 0 1 (face font-lock-type-face fontified t)) . -3210) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) 3211 (3209 . 3211) (#("T" 0 1 (face font-lock-type-face fontified t)) . -3209) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -3210) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (#("a" 0 1 (face font-lock-type-face fontified t)) . -3211) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -3212) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (#("s" 0 1 (face font-lock-type-face fontified t)) . -3213) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (#("f" 0 1 (face font-lock-type-face fontified t)) . -3214) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -3215) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -3216) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (#("m" 0 1 (face font-lock-type-face fontified t)) . -3217) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (#("," 0 1 (fontified t)) . -3218) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (#(" " 0 1 (fontified t)) . -3219) (undo-tree-id526 . -1) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (undo-tree-id535 . -1) (undo-tree-id536 . -1) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (undo-tree-id539 . -1) (undo-tree-id540 . -1) (undo-tree-id541 . -1) (undo-tree-id542 . -1) (undo-tree-id543 . -1) (undo-tree-id544 . -1) 3220 (3218 . 3220) (3209 . 3218) (#("Trans" 0 5 (face font-lock-type-face fontified t)) . -3209) (undo-tree-id545 . -1) (undo-tree-id546 . -1) (undo-tree-id547 . -2) (undo-tree-id548 . -2) (undo-tree-id549 . -3) (undo-tree-id550 . -3) (undo-tree-id551 . -4) (undo-tree-id552 . -4) (undo-tree-id553 . -5) (undo-tree-id554 . -5) (undo-tree-id555 . -5) (undo-tree-id556 . -5) 3214 (3208 . 3214) (#("T" 0 1 (face font-lock-type-face fontified t)) . -3208) (undo-tree-id557 . -1) (undo-tree-id558 . -1) (undo-tree-id559 . -1) (undo-tree-id560 . -1) 3209 (3208 . 3209) (3202 . 3208) (#("i" 0 1 (face font-lock-type-face fontified t)) . -3202) (undo-tree-id561 . -1) (undo-tree-id562 . -1) (3198 . 3203) (#("c" 0 1 (fontified t)) . -3198) (undo-tree-id563 . -1) (undo-tree-id564 . -1) (undo-tree-id565 . -1) (undo-tree-id566 . -1) (undo-tree-id567 . -1) (undo-tree-id568 . -1) (undo-tree-id569 . -1) (undo-tree-id570 . -1) (undo-tree-id571 . -1) (undo-tree-id572 . -1) (#("o" 0 1 (fontified t)) . -3199) (undo-tree-id573 . -1) (undo-tree-id574 . -1) (undo-tree-id575 . -1) (undo-tree-id576 . -1) (undo-tree-id577 . -1) (undo-tree-id578 . -1) (undo-tree-id579 . -1) (undo-tree-id580 . -1) (#("l" 0 1 (fontified t)) . -3200) (undo-tree-id581 . -1) (undo-tree-id582 . -1) (undo-tree-id583 . -1) (undo-tree-id584 . -1) (undo-tree-id585 . -1) (undo-tree-id586 . -1) (#("l" 0 1 (fontified t)) . -3201) (undo-tree-id587 . -1) (undo-tree-id588 . -1) (undo-tree-id589 . -1) (undo-tree-id590 . -1) 3202 (3197 . 3202) (3182 . 3197) (#("s" 0 1 (fontified t)) . -3182) (undo-tree-id591 . -1) (undo-tree-id592 . -1) (undo-tree-id593 . -1) (undo-tree-id594 . -1) (undo-tree-id595 . -1) (undo-tree-id596 . -1) (undo-tree-id597 . -1) (undo-tree-id598 . -1) (undo-tree-id599 . -1) (undo-tree-id600 . -1) (undo-tree-id601 . -1) (undo-tree-id602 . -1) (undo-tree-id603 . -1) (undo-tree-id604 . -1) (undo-tree-id605 . -1) (undo-tree-id606 . -1) (undo-tree-id607 . -1) (undo-tree-id608 . -1) (undo-tree-id609 . -1) (undo-tree-id610 . -1) (undo-tree-id611 . -1) (undo-tree-id612 . -1) (undo-tree-id613 . -1) (undo-tree-id614 . -1) (undo-tree-id615 . -1) (undo-tree-id616 . -1) (undo-tree-id617 . -1) (undo-tree-id618 . -1) (undo-tree-id619 . -1) (undo-tree-id620 . -1) (undo-tree-id621 . -1) (undo-tree-id622 . -1) (undo-tree-id623 . -1) (undo-tree-id624 . -1) (undo-tree-id625 . -1) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (undo-tree-id628 . -1) (undo-tree-id629 . -1) (undo-tree-id630 . -1) (undo-tree-id631 . -1) (undo-tree-id632 . -1) (undo-tree-id633 . -1) (undo-tree-id634 . -1) (undo-tree-id635 . -1) (undo-tree-id636 . -1) (undo-tree-id637 . -1) (undo-tree-id638 . -1) (undo-tree-id639 . -1) (undo-tree-id640 . -1) (undo-tree-id641 . -1) (undo-tree-id642 . -1) (undo-tree-id643 . -1) (undo-tree-id644 . -1) (undo-tree-id645 . -1) 3183 (#("h" 0 1 (fontified t)) . -3183) (undo-tree-id646 . -1) (undo-tree-id647 . -1) (undo-tree-id648 . -1) (undo-tree-id649 . -1) (undo-tree-id650 . -1) (undo-tree-id651 . -1) (undo-tree-id652 . -1) (undo-tree-id653 . -1) (undo-tree-id654 . -1) (undo-tree-id655 . -1) (undo-tree-id656 . -1) (undo-tree-id657 . -1) (undo-tree-id658 . -1) (undo-tree-id659 . -1) (undo-tree-id660 . -1) (undo-tree-id661 . -1) (undo-tree-id662 . -1) (undo-tree-id663 . -1) (undo-tree-id664 . -1) (undo-tree-id665 . -1) (undo-tree-id666 . -1) (undo-tree-id667 . -1) (undo-tree-id668 . -1) (undo-tree-id669 . -1) (undo-tree-id670 . -1) (undo-tree-id671 . -1) (undo-tree-id672 . -1) (undo-tree-id673 . -1) (undo-tree-id674 . -1) (undo-tree-id675 . -1) (undo-tree-id676 . -1) (undo-tree-id677 . -1) (undo-tree-id678 . -1) (undo-tree-id679 . -1) (undo-tree-id680 . -1) (undo-tree-id681 . -1) (undo-tree-id682 . -1) (undo-tree-id683 . -1) (undo-tree-id684 . -1) (undo-tree-id685 . -1) (undo-tree-id686 . -1) (undo-tree-id687 . -1) (undo-tree-id688 . -1) (undo-tree-id689 . -1) (undo-tree-id690 . -1) (undo-tree-id691 . -1) (undo-tree-id692 . -1) (undo-tree-id693 . -1) (undo-tree-id694 . -1) (undo-tree-id695 . -1) (undo-tree-id696 . -1) (undo-tree-id697 . -1) (undo-tree-id698 . -1) (#("a" 0 1 (fontified t)) . -3184) (undo-tree-id699 . -1) (undo-tree-id700 . -1) (undo-tree-id701 . -1) (undo-tree-id702 . -1) (undo-tree-id703 . -1) (undo-tree-id704 . -1) (undo-tree-id705 . -1) (undo-tree-id706 . -1) (undo-tree-id707 . -1) (undo-tree-id708 . -1) (undo-tree-id709 . -1) (undo-tree-id710 . -1) (undo-tree-id711 . -1) (undo-tree-id712 . -1) (undo-tree-id713 . -1) (undo-tree-id714 . -1) (undo-tree-id715 . -1) (undo-tree-id716 . -1) (undo-tree-id717 . -1) (undo-tree-id718 . -1) (undo-tree-id719 . -1) (undo-tree-id720 . -1) (undo-tree-id721 . -1) (undo-tree-id722 . -1) (undo-tree-id723 . -1) (undo-tree-id724 . -1) (undo-tree-id725 . -1) (undo-tree-id726 . -1) (undo-tree-id727 . -1) (undo-tree-id728 . -1) (undo-tree-id729 . -1) (undo-tree-id730 . -1) (undo-tree-id731 . -1) (undo-tree-id732 . -1) (undo-tree-id733 . -1) (undo-tree-id734 . -1) (undo-tree-id735 . -1) (undo-tree-id736 . -1) (undo-tree-id737 . -1) (undo-tree-id738 . -1) (undo-tree-id739 . -1) (undo-tree-id740 . -1) (undo-tree-id741 . -1) (undo-tree-id742 . -1) (undo-tree-id743 . -1) (undo-tree-id744 . -1) (undo-tree-id745 . -1) (undo-tree-id746 . -1) (undo-tree-id747 . -1) (undo-tree-id748 . -1) (undo-tree-id749 . -1) (#("p" 0 1 (fontified t)) . -3185) (undo-tree-id750 . -1) (undo-tree-id751 . -1) (undo-tree-id752 . -1) (undo-tree-id753 . -1) (undo-tree-id754 . -1) (undo-tree-id755 . -1) (undo-tree-id756 . -1) (undo-tree-id757 . -1) (undo-tree-id758 . -1) (undo-tree-id759 . -1) (undo-tree-id760 . -1) (undo-tree-id761 . -1) (undo-tree-id762 . -1) (undo-tree-id763 . -1) (undo-tree-id764 . -1) (undo-tree-id765 . -1) (undo-tree-id766 . -1) (undo-tree-id767 . -1) (undo-tree-id768 . -1) (undo-tree-id769 . -1) (undo-tree-id770 . -1) (undo-tree-id771 . -1) (undo-tree-id772 . -1) (undo-tree-id773 . -1) (undo-tree-id774 . -1) (undo-tree-id775 . -1) (undo-tree-id776 . -1) (undo-tree-id777 . -1) (undo-tree-id778 . -1) (undo-tree-id779 . -1) (undo-tree-id780 . -1) (undo-tree-id781 . -1) (undo-tree-id782 . -1) (undo-tree-id783 . -1) (undo-tree-id784 . -1) (undo-tree-id785 . -1) (undo-tree-id786 . -1) (undo-tree-id787 . -1) (undo-tree-id788 . -1) (undo-tree-id789 . -1) (undo-tree-id790 . -1) (undo-tree-id791 . -1) (undo-tree-id792 . -1) (undo-tree-id793 . -1) (undo-tree-id794 . -1) (undo-tree-id795 . -1) (undo-tree-id796 . -1) (undo-tree-id797 . -1) (undo-tree-id798 . -1) (#("e" 0 1 (fontified t)) . -3186) (undo-tree-id799 . -1) (undo-tree-id800 . -1) (undo-tree-id801 . -1) (undo-tree-id802 . -1) (undo-tree-id803 . -1) (undo-tree-id804 . -1) (undo-tree-id805 . -1) (undo-tree-id806 . -1) (undo-tree-id807 . -1) (undo-tree-id808 . -1) (undo-tree-id809 . -1) (undo-tree-id810 . -1) (undo-tree-id811 . -1) (undo-tree-id812 . -1) (undo-tree-id813 . -1) (undo-tree-id814 . -1) (undo-tree-id815 . -1) (undo-tree-id816 . -1) (undo-tree-id817 . -1) (undo-tree-id818 . -1) (undo-tree-id819 . -1) (undo-tree-id820 . -1) (undo-tree-id821 . -1) (undo-tree-id822 . -1) (undo-tree-id823 . -1) (undo-tree-id824 . -1) (undo-tree-id825 . -1) (undo-tree-id826 . -1) (undo-tree-id827 . -1) (undo-tree-id828 . -1) (undo-tree-id829 . -1) (undo-tree-id830 . -1) (undo-tree-id831 . -1) (undo-tree-id832 . -1) (undo-tree-id833 . -1) (undo-tree-id834 . -1) (undo-tree-id835 . -1) (undo-tree-id836 . -1) (undo-tree-id837 . -1) (undo-tree-id838 . -1) (undo-tree-id839 . -1) (undo-tree-id840 . -1) (undo-tree-id841 . -1) (undo-tree-id842 . -1) (undo-tree-id843 . -1) (undo-tree-id844 . -1) (undo-tree-id845 . -1) (#(":" 0 1 (fontified t)) . -3187) (undo-tree-id846 . -1) (undo-tree-id847 . -1) (undo-tree-id848 . -1) (undo-tree-id849 . -1) (undo-tree-id850 . -1) (undo-tree-id851 . -1) (undo-tree-id852 . -1) (undo-tree-id853 . -1) (undo-tree-id854 . -1) (undo-tree-id855 . -1) (undo-tree-id856 . -1) (undo-tree-id857 . -1) (undo-tree-id858 . -1) (undo-tree-id859 . -1) (undo-tree-id860 . -1) (undo-tree-id861 . -1) (undo-tree-id862 . -1) (undo-tree-id863 . -1) (undo-tree-id864 . -1) (undo-tree-id865 . -1) (undo-tree-id866 . -1) (undo-tree-id867 . -1) (undo-tree-id868 . -1) (undo-tree-id869 . -1) (undo-tree-id870 . -1) (undo-tree-id871 . -1) (undo-tree-id872 . -1) (undo-tree-id873 . -1) (undo-tree-id874 . -1) (undo-tree-id875 . -1) (undo-tree-id876 . -1) (undo-tree-id877 . -1) (undo-tree-id878 . -1) (undo-tree-id879 . -1) (undo-tree-id880 . -1) (undo-tree-id881 . -1) (undo-tree-id882 . -1) (undo-tree-id883 . -1) (undo-tree-id884 . -1) (#(" " 0 1 (fontified t)) . -3188) (undo-tree-id885 . -1) (undo-tree-id886 . -1) (undo-tree-id887 . -1) (undo-tree-id888 . -1) (undo-tree-id889 . -1) (undo-tree-id890 . -1) (undo-tree-id891 . -1) (undo-tree-id892 . -1) (undo-tree-id893 . -1) (undo-tree-id894 . -1) (undo-tree-id895 . -1) (undo-tree-id896 . -1) (undo-tree-id897 . -1) (undo-tree-id898 . -1) (undo-tree-id899 . -1) (undo-tree-id900 . -1) (undo-tree-id901 . -1) (undo-tree-id902 . -1) (undo-tree-id903 . -1) (undo-tree-id904 . -1) (undo-tree-id905 . -1) (undo-tree-id906 . -1) (undo-tree-id907 . -1) (undo-tree-id908 . -1) (undo-tree-id909 . -1) (undo-tree-id910 . -1) (undo-tree-id911 . -1) (undo-tree-id912 . -1) (undo-tree-id913 . -1) (undo-tree-id914 . -1) (undo-tree-id915 . -1) (undo-tree-id916 . -1) (undo-tree-id917 . -1) (undo-tree-id918 . -1) (undo-tree-id919 . -1) (undo-tree-id920 . -1) (undo-tree-id921 . -1) (undo-tree-id922 . -1) (undo-tree-id923 . -1) (#("Q" 0 1 (face font-lock-type-face fontified t)) . -3189) (undo-tree-id924 . -1) (undo-tree-id925 . -1) (undo-tree-id926 . -1) (undo-tree-id927 . -1) (undo-tree-id928 . -1) (undo-tree-id929 . -1) (undo-tree-id930 . -1) (undo-tree-id931 . -1) (undo-tree-id932 . -1) (undo-tree-id933 . -1) (undo-tree-id934 . -1) (undo-tree-id935 . -1) (undo-tree-id936 . -1) (undo-tree-id937 . -1) (undo-tree-id938 . -1) (undo-tree-id939 . -1) (undo-tree-id940 . -1) (undo-tree-id941 . -1) (undo-tree-id942 . -1) (undo-tree-id943 . -1) (undo-tree-id944 . -1) (undo-tree-id945 . -1) (undo-tree-id946 . -1) (undo-tree-id947 . -1) (undo-tree-id948 . -1) (undo-tree-id949 . -1) (undo-tree-id950 . -1) (undo-tree-id951 . -1) (undo-tree-id952 . -1) (undo-tree-id953 . -1) (undo-tree-id954 . -1) (undo-tree-id955 . -1) (undo-tree-id956 . -1) (undo-tree-id957 . -1) (undo-tree-id958 . -1) (undo-tree-id959 . -1) (undo-tree-id960 . -1) (#("u" 0 1 (face font-lock-type-face fontified t)) . -3190) (undo-tree-id961 . -1) (undo-tree-id962 . -1) (undo-tree-id963 . -1) (undo-tree-id964 . -1) (undo-tree-id965 . -1) (undo-tree-id966 . -1) (undo-tree-id967 . -1) (undo-tree-id968 . -1) (undo-tree-id969 . -1) (undo-tree-id970 . -1) (undo-tree-id971 . -1) (undo-tree-id972 . -1) (undo-tree-id973 . -1) (undo-tree-id974 . -1) (undo-tree-id975 . -1) (undo-tree-id976 . -1) (undo-tree-id977 . -1) (undo-tree-id978 . -1) (undo-tree-id979 . -1) (undo-tree-id980 . -1) (undo-tree-id981 . -1) (undo-tree-id982 . -1) (undo-tree-id983 . -1) (undo-tree-id984 . -1) (undo-tree-id985 . -1) (undo-tree-id986 . -1) (undo-tree-id987 . -1) (undo-tree-id988 . -1) (undo-tree-id989 . -1) (undo-tree-id990 . -1) (undo-tree-id991 . -1) (undo-tree-id992 . -1) (undo-tree-id993 . -1) (undo-tree-id994 . -1) (undo-tree-id995 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -3191) (undo-tree-id996 . -1) (undo-tree-id997 . -1) (undo-tree-id998 . -1) (undo-tree-id999 . -1) (undo-tree-id1000 . -1) (undo-tree-id1001 . -1) (undo-tree-id1002 . -1) (undo-tree-id1003 . -1) (undo-tree-id1004 . -1) (undo-tree-id1005 . -1) (undo-tree-id1006 . -1) (undo-tree-id1007 . -1) (undo-tree-id1008 . -1) (undo-tree-id1009 . -1) (undo-tree-id1010 . -1) (undo-tree-id1011 . -1) (undo-tree-id1012 . -1) (undo-tree-id1013 . -1) (undo-tree-id1014 . -1) (undo-tree-id1015 . -1) (undo-tree-id1016 . -1) (undo-tree-id1017 . -1) (undo-tree-id1018 . -1) (undo-tree-id1019 . -1) (undo-tree-id1020 . -1) (undo-tree-id1021 . -1) (undo-tree-id1022 . -1) (undo-tree-id1023 . -1) (undo-tree-id1024 . -1) (undo-tree-id1025 . -1) (undo-tree-id1026 . -1) (undo-tree-id1027 . -1) (undo-tree-id1028 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -3192) (undo-tree-id1029 . -1) (undo-tree-id1030 . -1) (undo-tree-id1031 . -1) (undo-tree-id1032 . -1) (undo-tree-id1033 . -1) (undo-tree-id1034 . -1) (undo-tree-id1035 . -1) (undo-tree-id1036 . -1) (undo-tree-id1037 . -1) (undo-tree-id1038 . -1) (undo-tree-id1039 . -1) (undo-tree-id1040 . -1) (undo-tree-id1041 . -1) (undo-tree-id1042 . -1) (undo-tree-id1043 . -1) (undo-tree-id1044 . -1) (undo-tree-id1045 . -1) (undo-tree-id1046 . -1) (undo-tree-id1047 . -1) (undo-tree-id1048 . -1) (undo-tree-id1049 . -1) (undo-tree-id1050 . -1) (undo-tree-id1051 . -1) (undo-tree-id1052 . -1) (undo-tree-id1053 . -1) (undo-tree-id1054 . -1) (undo-tree-id1055 . -1) (undo-tree-id1056 . -1) (undo-tree-id1057 . -1) (undo-tree-id1058 . -1) (undo-tree-id1059 . -1) (#("y" 0 1 (face font-lock-type-face fontified t)) . -3193) (undo-tree-id1060 . -1) (undo-tree-id1061 . -1) (undo-tree-id1062 . -1) (undo-tree-id1063 . -1) (undo-tree-id1064 . -1) (undo-tree-id1065 . -1) (undo-tree-id1066 . -1) (undo-tree-id1067 . -1) (undo-tree-id1068 . -1) (undo-tree-id1069 . -1) (undo-tree-id1070 . -1) (undo-tree-id1071 . -1) (undo-tree-id1072 . -1) (undo-tree-id1073 . -1) (undo-tree-id1074 . -1) (undo-tree-id1075 . -1) (undo-tree-id1076 . -1) (undo-tree-id1077 . -1) (undo-tree-id1078 . -1) (undo-tree-id1079 . -1) (undo-tree-id1080 . -1) (undo-tree-id1081 . -1) (undo-tree-id1082 . -1) (undo-tree-id1083 . -1) (undo-tree-id1084 . -1) (undo-tree-id1085 . -1) (undo-tree-id1086 . -1) (undo-tree-id1087 . -1) (undo-tree-id1088 . -1) (#("<" 0 1 (fontified t)) . -3194) (undo-tree-id1089 . -1) (undo-tree-id1090 . -1) (undo-tree-id1091 . -1) (undo-tree-id1092 . -1) (undo-tree-id1093 . -1) (undo-tree-id1094 . -1) (undo-tree-id1095 . -1) (undo-tree-id1096 . -1) (undo-tree-id1097 . -1) (undo-tree-id1098 . -1) (undo-tree-id1099 . -1) (undo-tree-id1100 . -1) (undo-tree-id1101 . -1) (undo-tree-id1102 . -1) (undo-tree-id1103 . -1) (undo-tree-id1104 . -1) (undo-tree-id1105 . -1) (undo-tree-id1106 . -1) (undo-tree-id1107 . -1) (undo-tree-id1108 . -1) (undo-tree-id1109 . -1) (undo-tree-id1110 . -1) (undo-tree-id1111 . -1) (undo-tree-id1112 . -1) (undo-tree-id1113 . -1) (#("&" 0 1 (fontified t)) . -3195) (undo-tree-id1114 . -1) (undo-tree-id1115 . -1) (undo-tree-id1116 . -1) (undo-tree-id1117 . -1) (undo-tree-id1118 . -1) (undo-tree-id1119 . -1) (undo-tree-id1120 . -1) (undo-tree-id1121 . -1) (undo-tree-id1122 . -1) (undo-tree-id1123 . -1) (undo-tree-id1124 . -1) (undo-tree-id1125 . -1) (undo-tree-id1126 . -1) (undo-tree-id1127 . -1) (undo-tree-id1128 . -1) (undo-tree-id1129 . -1) (undo-tree-id1130 . -1) (undo-tree-id1131 . -1) (undo-tree-id1132 . -1) (undo-tree-id1133 . -1) (undo-tree-id1134 . -1) (undo-tree-id1135 . -1) (undo-tree-id1136 . -1) (#("C" 0 1 (face font-lock-type-face fontified t)) . -3196) (undo-tree-id1137 . -1) (undo-tree-id1138 . -1) (undo-tree-id1139 . -1) (undo-tree-id1140 . -1) (undo-tree-id1141 . -1) (undo-tree-id1142 . -1) (undo-tree-id1143 . -1) (undo-tree-id1144 . -1) (undo-tree-id1145 . -1) (undo-tree-id1146 . -1) (undo-tree-id1147 . -1) (undo-tree-id1148 . -1) (undo-tree-id1149 . -1) (undo-tree-id1150 . -1) (undo-tree-id1151 . -1) (undo-tree-id1152 . -1) (undo-tree-id1153 . -1) (undo-tree-id1154 . -1) (undo-tree-id1155 . -1) (undo-tree-id1156 . -1) (undo-tree-id1157 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -3197) (undo-tree-id1158 . -1) (undo-tree-id1159 . -1) (undo-tree-id1160 . -1) (undo-tree-id1161 . -1) (undo-tree-id1162 . -1) (undo-tree-id1163 . -1) (undo-tree-id1164 . -1) (undo-tree-id1165 . -1) (undo-tree-id1166 . -1) (undo-tree-id1167 . -1) (undo-tree-id1168 . -1) (undo-tree-id1169 . -1) (undo-tree-id1170 . -1) (undo-tree-id1171 . -1) (undo-tree-id1172 . -1) (undo-tree-id1173 . -1) (undo-tree-id1174 . -1) (undo-tree-id1175 . -1) (undo-tree-id1176 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -3198) (undo-tree-id1177 . -1) (undo-tree-id1178 . -1) (undo-tree-id1179 . -1) (undo-tree-id1180 . -1) (undo-tree-id1181 . -1) (undo-tree-id1182 . -1) (undo-tree-id1183 . -1) (undo-tree-id1184 . -1) (undo-tree-id1185 . -1) (undo-tree-id1186 . -1) (undo-tree-id1187 . -1) (undo-tree-id1188 . -1) (undo-tree-id1189 . -1) (undo-tree-id1190 . -1) (undo-tree-id1191 . -1) (undo-tree-id1192 . -1) (undo-tree-id1193 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -3199) (undo-tree-id1194 . -1) (undo-tree-id1195 . -1) (undo-tree-id1196 . -1) (undo-tree-id1197 . -1) (undo-tree-id1198 . -1) (undo-tree-id1199 . -1) (undo-tree-id1200 . -1) (undo-tree-id1201 . -1) (undo-tree-id1202 . -1) (undo-tree-id1203 . -1) (undo-tree-id1204 . -1) (undo-tree-id1205 . -1) (undo-tree-id1206 . -1) (undo-tree-id1207 . -1) (undo-tree-id1208 . -1) (#("i" 0 1 (face font-lock-type-face fontified t)) . -3200) (undo-tree-id1209 . -1) (undo-tree-id1210 . -1) (undo-tree-id1211 . -1) (undo-tree-id1212 . -1) (undo-tree-id1213 . -1) (undo-tree-id1214 . -1) (undo-tree-id1215 . -1) (undo-tree-id1216 . -1) (undo-tree-id1217 . -1) (undo-tree-id1218 . -1) (undo-tree-id1219 . -1) (undo-tree-id1220 . -1) (#("d" 0 1 (face font-lock-type-face fontified t)) . -3201) (undo-tree-id1221 . -1) (undo-tree-id1222 . -1) (undo-tree-id1223 . -1) (undo-tree-id1224 . -1) (undo-tree-id1225 . -1) (undo-tree-id1226 . -1) (undo-tree-id1227 . -1) (undo-tree-id1228 . -1) (undo-tree-id1229 . -1) (undo-tree-id1230 . -1) (undo-tree-id1231 . -1) (undo-tree-id1232 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -3202) (undo-tree-id1233 . -1) (undo-tree-id1234 . -1) (undo-tree-id1235 . -1) (undo-tree-id1236 . -1) (undo-tree-id1237 . -1) (undo-tree-id1238 . -1) (undo-tree-id1239 . -1) (undo-tree-id1240 . -1) (undo-tree-id1241 . -1) (undo-tree-id1242 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -3203) (undo-tree-id1243 . -1) (undo-tree-id1244 . -1) (undo-tree-id1245 . -1) (undo-tree-id1246 . -1) (undo-tree-id1247 . -1) (undo-tree-id1248 . -1) (undo-tree-id1249 . -1) (undo-tree-id1250 . -1) 3204 (3200 . 3204) (#("i" 0 1 (face font-lock-type-face fontified t)) . -3200) (undo-tree-id1251 . -1) (undo-tree-id1252 . -1) (3189 . 3201) (3187 . 3189) (#(":" 0 1 (fontified t)) . -3187) (undo-tree-id1253 . -1) (undo-tree-id1254 . -1) (undo-tree-id1255 . -1) (undo-tree-id1256 . -1) (#(" " 0 1 (fontified t)) . -3188) (undo-tree-id1257 . -1) (undo-tree-id1258 . -1) (undo-tree-id1259 . -1) (undo-tree-id1260 . -1) 3189 (3182 . 3189) (3177 . 3182) 3154) nil (25830 17360 932783 600000) 0 nil])
([nil nil ((#(")>," 0 1 (fontified t) 1 2 (fontified t syntax-table (1)) 2 3 (fontified t)) . 3244) (undo-tree-id258 . -2) (undo-tree-id259 . -2) (undo-tree-id260 . -2) (undo-tree-id261 . -3) (undo-tree-id262 . -3)) nil (25830 17360 932382 488000) 0 nil])
([nil nil ((#("    " 0 4 (fontified nil)) . 3239) (undo-tree-id170 . 4) (undo-tree-id171 . -4) (undo-tree-id172 . -4) (undo-tree-id173 . 4) (undo-tree-id174 . -4) (undo-tree-id175 . -4) (undo-tree-id176 . -3) (undo-tree-id177 . -3) (undo-tree-id178 . -3) (undo-tree-id179 . -3) (#("
" 0 1 (fontified t)) . -3239) (undo-tree-id180 . -1) (undo-tree-id181 . 1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) 3181) nil (25830 17360 932376 76000) 0 nil])
([nil nil ((3239 . 3240) 3242) nil (25830 17360 932039 404000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -3245) (undo-tree-id1617 . -4) (undo-tree-id1618 . -4) (undo-tree-id1619 . -4) (undo-tree-id1620 . -4) 3249 (3244 . 3249) (t 25830 17360 939982 543000) 3243) nil (25830 17415 510920 682000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3649 . 3650) (nil fontified nil 3245 . 3650) (3245 . 3650)) nil (25830 17415 510913 879000) 0 nil])
([nil nil ((3245 . 3249)) nil (25830 17415 510913 328000) 0 nil])
([nil nil ((#("        " 0 8 (fontified nil)) . -3576) (3572 . 3576) (#("            " 0 12 (fontified nil)) . -3552) (3551 . 3552) (#("        " 0 8 (fontified nil)) . -3508) (3504 . 3508) (#("        " 0 8 (fontified nil)) . -3502) (3498 . 3502) (#("            " 0 12 (fontified nil)) . -3478) (3477 . 3478) (#("        " 0 8 (fontified nil)) . -3436) (3432 . 3436) (#("        " 0 8 (fontified nil)) . -3430) (3426 . 3430) (#("            " 0 12 (fontified nil)) . -3406) (3405 . 3406) (#("        " 0 8 (fontified nil)) . -3361) (3357 . 3361) (#("        " 0 8 (fontified nil)) . -3355) (3351 . 3355) (#("            " 0 12 (fontified nil)) . -3331) (3330 . 3331) (#("        " 0 8 (fontified nil)) . -3287) (3283 . 3287) 3644) nil (25830 17415 510911 946000) 0 nil])
([nil nil ((3276 . 3277) (#("e" 0 1 (face font-lock-type-face fontified t)) . 3276) (undo-tree-id1613 . -1) (undo-tree-id1614 . -1) (3275 . 3276) (#("z" 0 1 (fontified t)) . 3275) (undo-tree-id1615 . -1) (undo-tree-id1616 . -1)) nil (25830 17415 510908 880000) 0 nil])
([nil nil ((3278 . 3279) (#("o" 0 1 (face font-lock-type-face fontified t)) . 3278) (undo-tree-id1609 . -1) (undo-tree-id1610 . -1) (3277 . 3278) (#("r" 0 1 (face font-lock-type-face fontified t)) . 3277) (undo-tree-id1611 . -1) (undo-tree-id1612 . -1)) nil (25830 17415 511166 393000) 0 nil])
([nil nil ((3272 . 3273) (#("2" 0 1 (face font-lock-type-face fontified t)) . 3272) (undo-tree-id1626 . -1)) nil (25830 17480 626761 467000) 0 nil] [nil nil ((3274 . 3275) (#(":" 0 1 (fontified nil)) . 3274) (undo-tree-id1607 . -1) (3273 . 3274) (#(":" 0 1 (fontified nil)) . 3273) (3272 . 3273) (#("5" 0 1 (face font-lock-type-face fontified t)) . 3272) (3272 . 3273) (#("2" 0 1 (face font-lock-type-face fontified t)) . 3272) (undo-tree-id1608 . -1)) ((3272 . 3273) (#("5" 0 1 (face font-lock-type-face fontified nil)) . 3272) (3272 . 3273) (#("3" 0 1 (face font-lock-type-face fontified nil)) . 3272) (undo-tree-id1621 . -1) (undo-tree-id1622 . -1) (undo-tree-id1623 . -1) (3273 . 3274) (#("3" 0 1 (face font-lock-type-face fontified nil)) . 3273) (undo-tree-id1624 . -1) (undo-tree-id1625 . -1) (3274 . 3275) (#("3" 0 1 (face font-lock-type-face fontified t)) . 3274)) (25830 17415 510899 873000) 0 nil])
([nil nil ((2827 . 2829)) nil (25830 17480 626753 873000) 0 nil])
nil
([nil nil ((3332 . 3340) (#("	" 0 1 (fontified t)) . 3332) (3407 . 3415) (#("	" 0 1 (fontified t)) . 3407) (3479 . 3487) (#("	" 0 1 (fontified t)) . 3479) (3553 . 3561) (#("	" 0 1 (fontified t)) . 3553) (#("
" 0 1 (fontified t rear-nonsticky t)) . 3579) 2828) nil (25830 17480 626749 715000) 0 nil])
([nil nil ((3294 . 3296) (3292 . 3294) (#("keyboard_input" 0 14 (fontified t)) . 3292) (undo-tree-id1642 . -13) (undo-tree-id1643 . -14) (undo-tree-id1644 . -14) (t 25830 17480 629983 923000)) nil (25830 17494 184441 124000) 0 nil])
([nil nil ((3363 . 3367) (#("keyboard_input" 0 14 (fontified t)) . 3363) (undo-tree-id1637 . -13) (undo-tree-id1638 . -3) (undo-tree-id1639 . -3) (undo-tree-id1640 . -14) (undo-tree-id1641 . -14)) nil (25830 17494 184438 660000) 0 nil])
([nil nil ((3435 . 3439) (#("keyboard_input" 0 14 (fontified t)) . 3435) (undo-tree-id1632 . -13) (undo-tree-id1633 . -3) (undo-tree-id1634 . -3) (undo-tree-id1635 . -14) (undo-tree-id1636 . -14)) nil (25830 17494 184435 233000) 0 nil])
([nil nil ((3504 . 3508) (#("keyboard_input" 0 14 (fontified t)) . 3504) (undo-tree-id1627 . -13) (undo-tree-id1628 . -3) (undo-tree-id1629 . -3) (undo-tree-id1630 . -14) (undo-tree-id1631 . -14)) nil (25830 17494 184428 200000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t)) . 3281) (undo-tree-id1647 . -1) (undo-tree-id1648 . -1) (t 25830 17494 186650 748000)) nil (25830 17505 920855 229000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t)) . 3281) (undo-tree-id1645 . -1) (undo-tree-id1646 . -1)) nil (25830 17505 920851 852000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -3566) (undo-tree-id1865 . -4) (undo-tree-id1866 . -4) (undo-tree-id1867 . -4) (undo-tree-id1868 . -4) 3570 (3565 . 3570) (t 25830 17505 923317 565000) 3564) nil (25830 17752 590468 931000) 0 nil])
([nil nil ((3184 . 3188)) nil (25830 17752 590466 968000) 0 nil])
([nil nil ((#("m" 0 1 (face font-lock-keyword-face fontified t)) . 3184) (undo-tree-id1863 . -1) (undo-tree-id1864 . -1)) nil (25830 17752 590466 537000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t)) . 3184) (undo-tree-id1861 . -1) (undo-tree-id1862 . -1)) nil (25830 17752 590465 425000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . 3184) (undo-tree-id1855 . -1) (undo-tree-id1856 . -1) (undo-tree-id1857 . -1) (undo-tree-id1858 . -1) (undo-tree-id1859 . -1) (undo-tree-id1860 . -1)) nil (25830 17752 590464 222000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 3184) (undo-tree-id1851 . -1) (undo-tree-id1852 . -1) (undo-tree-id1853 . -1) (undo-tree-id1854 . -1)) nil (25830 17752 590461 47000) 0 nil])
([nil nil ((3570 . 3588) (3566 . 3570) (3566 . 3567) (#("
" 0 1 (fontified t)) . 3566) (undo-tree-id1849 . -1) (undo-tree-id1850 . -1)) nil (25830 17752 590457 540000) 0 nil])
([nil nil ((3315 . 3316) (3308 . 3315) (#("i" 0 1 (fontified t)) . -3308) (undo-tree-id1711 . -1) (3306 . 3309) (#("}" 0 1 (fontified t)) . -3306) (undo-tree-id1712 . -1) (undo-tree-id1713 . -1) (undo-tree-id1714 . -1) (undo-tree-id1715 . -1) 3307 (3300 . 3307) (#("." 0 1 (fontified t)) . -3300) (undo-tree-id1716 . -1) (undo-tree-id1717 . -1) (undo-tree-id1718 . -1) (undo-tree-id1719 . -1) (undo-tree-id1720 . -1) (undo-tree-id1721 . -1) (undo-tree-id1722 . -1) (undo-tree-id1723 . -1) (undo-tree-id1724 . -1) (undo-tree-id1725 . -1) (undo-tree-id1726 . -1) (undo-tree-id1727 . -1) (undo-tree-id1728 . -1) (undo-tree-id1729 . -1) (#("p" 0 1 (fontified t)) . -3301) (undo-tree-id1730 . -1) (undo-tree-id1731 . -1) (undo-tree-id1732 . -1) (undo-tree-id1733 . -1) (undo-tree-id1734 . -1) (undo-tree-id1735 . -1) (undo-tree-id1736 . -1) (undo-tree-id1737 . -1) (undo-tree-id1738 . -1) (undo-tree-id1739 . -1) (undo-tree-id1740 . -1) (undo-tree-id1741 . -1) (#("l" 0 1 (fontified t)) . -3302) (undo-tree-id1742 . -1) (undo-tree-id1743 . -1) (undo-tree-id1744 . -1) (undo-tree-id1745 . -1) (undo-tree-id1746 . -1) (undo-tree-id1747 . -1) (undo-tree-id1748 . -1) (undo-tree-id1749 . -1) (#("a" 0 1 (fontified t)) . -3303) (undo-tree-id1750 . -1) (undo-tree-id1751 . -1) (undo-tree-id1752 . -1) (undo-tree-id1753 . -1) 3304 (3300 . 3304) (#("s" 0 1 (fontified t)) . -3300) (undo-tree-id1754 . -1) (undo-tree-id1755 . -1) (undo-tree-id1756 . -1) (undo-tree-id1757 . -1) (undo-tree-id1758 . -1) (undo-tree-id1759 . -1) (undo-tree-id1760 . -1) (undo-tree-id1761 . -1) (undo-tree-id1762 . -1) (undo-tree-id1763 . -1) (undo-tree-id1764 . -1) (undo-tree-id1765 . -1) (undo-tree-id1766 . -1) (undo-tree-id1767 . -1) (undo-tree-id1768 . -1) (undo-tree-id1769 . -1) (undo-tree-id1770 . -1) (undo-tree-id1771 . -1) (undo-tree-id1772 . -1) (undo-tree-id1773 . -1) (undo-tree-id1774 . -1) (undo-tree-id1775 . -1) (undo-tree-id1776 . -1) (undo-tree-id1777 . -1) (#("i" 0 1 (fontified t)) . -3301) (undo-tree-id1778 . -1) (undo-tree-id1779 . -1) (undo-tree-id1780 . -1) (undo-tree-id1781 . -1) (undo-tree-id1782 . -1) (undo-tree-id1783 . -1) (undo-tree-id1784 . -1) (undo-tree-id1785 . -1) (undo-tree-id1786 . -1) (undo-tree-id1787 . -1) (undo-tree-id1788 . -1) (undo-tree-id1789 . -1) (undo-tree-id1790 . -1) (undo-tree-id1791 . -1) (undo-tree-id1792 . -1) (undo-tree-id1793 . -1) (undo-tree-id1794 . -1) (undo-tree-id1795 . -1) (undo-tree-id1796 . -1) (undo-tree-id1797 . -1) (#("n" 0 1 (fontified t)) . -3302) (undo-tree-id1798 . -1) (undo-tree-id1799 . -1) (undo-tree-id1800 . -1) (undo-tree-id1801 . -1) (undo-tree-id1802 . -1) (undo-tree-id1803 . -1) (undo-tree-id1804 . -1) (undo-tree-id1805 . -1) (undo-tree-id1806 . -1) (undo-tree-id1807 . -1) (undo-tree-id1808 . -1) (undo-tree-id1809 . -1) (undo-tree-id1810 . -1) (undo-tree-id1811 . -1) (undo-tree-id1812 . -1) (undo-tree-id1813 . -1) (undo-tree-id1814 . -1) (undo-tree-id1815 . -1) (#("g" 0 1 (fontified t)) . -3303) (undo-tree-id1816 . -1) (undo-tree-id1817 . -1) (undo-tree-id1818 . -1) (undo-tree-id1819 . -1) (undo-tree-id1820 . -1) (undo-tree-id1821 . -1) (undo-tree-id1822 . -1) (undo-tree-id1823 . -1) (undo-tree-id1824 . -1) (undo-tree-id1825 . -1) (undo-tree-id1826 . -1) (undo-tree-id1827 . -1) (undo-tree-id1828 . -1) (undo-tree-id1829 . -1) (#("l" 0 1 (fontified t)) . -3304) (undo-tree-id1830 . -1) (undo-tree-id1831 . -1) (undo-tree-id1832 . -1) (undo-tree-id1833 . -1) (undo-tree-id1834 . -1) (undo-tree-id1835 . -1) (undo-tree-id1836 . -1) (undo-tree-id1837 . -1) (undo-tree-id1838 . -1) (undo-tree-id1839 . -1) (#("e" 0 1 (fontified t)) . -3305) (undo-tree-id1840 . -1) (undo-tree-id1841 . -1) (undo-tree-id1842 . -1) (undo-tree-id1843 . -1) (undo-tree-id1844 . -1) (undo-tree-id1845 . -1) 3306 (3301 . 3306) (#("i" 0 1 (fontified t)) . -3301) (undo-tree-id1846 . -1) (3290 . 3302) (#("u" 0 1 (fontified t)) . -3290) (undo-tree-id1847 . -1) (undo-tree-id1848 . -1) 3291 (3287 . 3291) (3282 . 3287) 3268) nil (25830 17752 590451 268000) 0 nil])
([nil nil ((3622 . 3632)) nil (25830 17752 590394 462000) 0 nil])
([nil nil ((3628 . 3633) (#("i" 0 1 (fontified t)) . -3628) (undo-tree-id1709 . -1) (3623 . 3629) (#("i" 0 1 (fontified t)) . -3623) (undo-tree-id1710 . -1) (3622 . 3624)) nil (25830 17752 590393 350000) 0 nil])
([nil nil ((3754 . 3756) (3753 . 3754) (3738 . 3753) (#("i" 0 1 (face font-lock-type-face fontified t)) . -3738) (undo-tree-id1649 . -1) (3732 . 3739) (3728 . 3732) (#(")" 0 1 (fontified t)) . -3728) (undo-tree-id1650 . -1) (undo-tree-id1651 . -1) (undo-tree-id1652 . -1) (undo-tree-id1653 . -1) 3729 (3724 . 3729) (3715 . 3724) (#("i" 0 1 (face font-lock-type-face fontified t)) . -3715) (undo-tree-id1654 . -1) (3703 . 3716) (#("B" 0 1 (face font-lock-type-face fontified t)) . -3703) (undo-tree-id1655 . -1) (undo-tree-id1656 . -1) (undo-tree-id1657 . -1) (undo-tree-id1658 . -1) 3704 (3703 . 3704) (3701 . 3703) (3690 . 3701) (#("custom" 0 6 (fontified t)) . -3690) (undo-tree-id1659 . -1) (undo-tree-id1660 . -1) (undo-tree-id1661 . -1) (undo-tree-id1662 . -1) (undo-tree-id1663 . -1) (undo-tree-id1664 . -1) (undo-tree-id1665 . -2) (undo-tree-id1666 . -2) (undo-tree-id1667 . -3) (undo-tree-id1668 . -3) (undo-tree-id1669 . -4) (undo-tree-id1670 . -4) (undo-tree-id1671 . -5) (undo-tree-id1672 . -5) (undo-tree-id1673 . -6) (undo-tree-id1674 . -6) (undo-tree-id1675 . -6) (undo-tree-id1676 . -6) (undo-tree-id1677 . -6) (undo-tree-id1678 . -6) 3696 (3691 . 3696) (#("o" 0 1 (fontified t)) . -3691) (undo-tree-id1679 . -1) (undo-tree-id1680 . -1) (undo-tree-id1681 . -1) (undo-tree-id1682 . -1) (undo-tree-id1683 . -1) (undo-tree-id1684 . -1) (#("u" 0 1 (fontified t)) . -3692) (undo-tree-id1685 . -1) (undo-tree-id1686 . -1) (undo-tree-id1687 . -1) (undo-tree-id1688 . -1) (#("t" 0 1 (fontified t)) . -3693) (undo-tree-id1689 . -1) (undo-tree-id1690 . -1) (#("s" 0 1 (fontified t)) . -3694) (undo-tree-id1691 . -1) (undo-tree-id1692 . -1) 3695 (3687 . 3695) (3681 . 3687) (#("pla" 0 3 (fontified t)) . -3681) (undo-tree-id1693 . -1) (undo-tree-id1694 . -1) (undo-tree-id1695 . -2) (undo-tree-id1696 . -2) (undo-tree-id1697 . -3) (undo-tree-id1698 . -3) (undo-tree-id1699 . -3) (undo-tree-id1700 . -3) (undo-tree-id1701 . -3) (undo-tree-id1702 . -3) 3684 (3681 . 3684) (3678 . 3681) (#("F" 0 1 (face font-lock-type-face fontified t)) . -3678) (undo-tree-id1703 . -1) (undo-tree-id1704 . -1) (undo-tree-id1705 . -1) (undo-tree-id1706 . -1) 3679 (3665 . 3679) (3660 . 3665) (#("i" 0 1 (fontified t)) . -3660) (undo-tree-id1707 . -1) (undo-tree-id1708 . -1) (3657 . 3661) (3652 . 3657) (3643 . 3652)) nil (25830 17752 590387 398000) 0 nil])
([nil nil ((3622 . 3631) (3632 . 3639) (3633 . 3634) (3642 . 3649) (3643 . 3644) (3664 . 3671) (3665 . 3666) (3680 . 3687) (3681 . 3682) (3702 . 3709) (3703 . 3704) (3731 . 3738) (3732 . 3733) (3754 . 3760) 3755) nil (25830 17752 590217 259000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . 3604) (undo-tree-id1881 . -1) (undo-tree-id1882 . -1) (undo-tree-id1883 . -1) (undo-tree-id1884 . -1) (t 25830 17752 593320 464000)) nil (25830 17761 455696 953000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . 3604) (undo-tree-id1879 . -1) (undo-tree-id1880 . -1)) nil (25830 17761 455694 989000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . 3604) (undo-tree-id1877 . -1) (undo-tree-id1878 . -1)) nil (25830 17761 455693 656000) 0 nil])
([nil nil ((#("y" 0 1 (fontified t)) . 3604) (undo-tree-id1875 . -1) (undo-tree-id1876 . -1)) nil (25830 17761 455691 813000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . 3604) (undo-tree-id1873 . -1) (undo-tree-id1874 . -1)) nil (25830 17761 455689 990000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . 3604) (undo-tree-id1871 . -1) (undo-tree-id1872 . -1)) nil (25830 17761 455687 555000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . 3604) (undo-tree-id1869 . -1) (undo-tree-id1870 . -1)) nil (25830 17761 455683 467000) 0 nil])
([nil nil ((3607 . 3611) (#("i" 0 1 (face font-lock-type-face fontified t)) . -3607) (undo-tree-id1887 . -1) (3604 . 3608) (t 25830 17761 459987 243000)) nil (25830 17852 136140 997000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -3610) (undo-tree-id1885 . -1) (undo-tree-id1886 . -1) 3611) nil (25830 17852 136138 42000) 0 nil])
([nil nil ((3610 . 3619)) nil (25830 17852 136128 263000) 0 nil])
([nil nil ((3604 . 3608) (t 25830 17852 139988 350000)) nil (25830 17881 583442 660000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . -3607) (undo-tree-id1904 . -1) (undo-tree-id1905 . -1) 3608) nil (25830 17881 583442 140000) 0 nil])
([nil nil ((3607 . 3614)) nil (25830 17881 583440 977000) 0 nil])
([nil nil ((#("y" 0 1 (fontified t)) . -3611) (undo-tree-id1898 . -1) (undo-tree-id1899 . -1) (#("e" 0 1 (fontified t)) . -3612) (undo-tree-id1900 . -1) (undo-tree-id1901 . -1) (#("r" 0 1 (fontified t)) . -3613) (undo-tree-id1902 . -1) (undo-tree-id1903 . -1) 3614) nil (25830 17881 583440 356000) 0 nil])
([nil nil ((3612 . 3617) (#("i" 0 1 (fontified t)) . -3612) (undo-tree-id1897 . -1) (3611 . 3613)) nil (25830 17881 583436 619000) 0 nil])
([nil nil ((#("9" 0 1 (fontified t)) . -3616) (undo-tree-id1895 . -1) (undo-tree-id1896 . -1) 3617) nil (25830 17881 583435 267000) 0 nil])
([nil nil ((3616 . 3617)) nil (25830 17881 583434 54000) 0 nil])
([nil nil ((#("D" 0 1 (face font-lock-type-face fontified t)) . -3616) (undo-tree-id1893 . -1) (undo-tree-id1894 . -1) 3617) nil (25830 17881 583433 473000) 0 nil])
([nil nil ((3616 . 3619)) nil (25830 17881 583431 439000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -3617) (undo-tree-id1889 . -1) (undo-tree-id1890 . -1) (#(" " 0 1 (fontified t)) . -3618) (undo-tree-id1891 . -1) (undo-tree-id1892 . -1) 3619) nil (25830 17881 583430 267000) 0 nil])
([nil nil ((3617 . 3619)) nil (25830 17881 583426 560000) 0 nil])
([nil nil ((3623 . 3627) (#("i" 0 1 (fontified t)) . -3623) (undo-tree-id1888 . -1) (3619 . 3624)) nil (25830 17881 583424 206000) 0 nil])
([nil nil ((3845 . 3850) (3843 . 3845) (#("
" 0 1 (fontified t)) . -3843) (undo-tree-id1906 . -1) (undo-tree-id1907 . -1) (undo-tree-id1908 . -1) (undo-tree-id1909 . -1) (undo-tree-id1910 . -1) (undo-tree-id1911 . -1) (undo-tree-id1912 . -1) (undo-tree-id1913 . -1) (undo-tree-id1914 . -1) (undo-tree-id1915 . -1) (undo-tree-id1916 . -1) (#("	" 0 1 (fontified t)) . -3844) (undo-tree-id1917 . -1) (undo-tree-id1918 . -1) (undo-tree-id1919 . -1) (undo-tree-id1920 . -1) (undo-tree-id1921 . -1) (undo-tree-id1922 . -1) (undo-tree-id1923 . -1) (undo-tree-id1924 . -1) (undo-tree-id1925 . -1) (undo-tree-id1926 . -1) (#("n" 0 1 (fontified t)) . -3845) (undo-tree-id1927 . -1) (undo-tree-id1928 . -1) (undo-tree-id1929 . -1) (undo-tree-id1930 . -1) (undo-tree-id1931 . -1) (undo-tree-id1932 . -1) (undo-tree-id1933 . -1) (undo-tree-id1934 . -1) (#("o" 0 1 (fontified t)) . -3846) (undo-tree-id1935 . -1) (undo-tree-id1936 . -1) (undo-tree-id1937 . -1) (undo-tree-id1938 . -1) (undo-tree-id1939 . -1) (undo-tree-id1940 . -1) (#("n" 0 1 (fontified t)) . -3847) (undo-tree-id1941 . -1) (undo-tree-id1942 . -1) (undo-tree-id1943 . -1) (undo-tree-id1944 . -1) (#("e" 0 1 (fontified t)) . -3848) (undo-tree-id1945 . -1) (undo-tree-id1946 . -1) 3849 (3845 . 3849) (3843 . 3845) (t 25830 17881 586655 385000) 3840) nil (25830 17915 21407 789000) 0 nil])
([nil nil ((3604 . 3611)) nil (25830 17915 21235 336000) 0 nil])
([nil nil ((3130 . 3134) (3129 . 3130) (3128 . 3129) (t 25830 17915 23322 411000) 3128) nil (25830 17940 410659 921000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3181 . 3182) (nil fontified nil 3134 . 3182) (3134 . 3182) 3133) nil (25830 17940 410658 969000) 0 nil])
([nil nil ((3182 . 3183)) nil (25830 17940 410657 937000) 0 nil])
([nil nil ((#("bevy_rapier3d::plugin::RapierContext::" 0 13 (face font-lock-constant-face fontified t) 13 15 (fontified t) 15 21 (face font-lock-constant-face fontified t) 21 23 (fontified t) 23 36 (face font-lock-type-face fontified t) 36 38 (fontified t)) . 3666) (undo-tree-id1950 . -37) (undo-tree-id1951 . -13) (undo-tree-id1952 . -13) (undo-tree-id1953 . -13) (undo-tree-id1954 . -13) (undo-tree-id1955 . -13) (undo-tree-id1956 . -13) (undo-tree-id1957 . -38)) nil (25830 17940 410656 795000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 3129) (undo-tree-id1947 . 1) (undo-tree-id1948 . -1) (undo-tree-id1949 . -1) (3868 . 3876) (#("	" 0 1 (fontified t)) . 3868) 3666) nil (25830 17940 410649 561000) 0 nil])
([nil nil ((#("/" 0 1 (face font-lock-comment-delimiter-face fontified t)) . 2827) (undo-tree-id1973 . -1) (undo-tree-id1974 . -1) (t 25830 17940 416656 28000)) nil (25833 41264 778885 338000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . 2827) (undo-tree-id1971 . -1) (undo-tree-id1972 . -1)) nil (25833 41264 778883 605000) 0 nil])
([nil nil ((#("KinematicPositionBased" 0 22 (face font-lock-type-face fontified t)) . 2838) (undo-tree-id1969 . -21) (undo-tree-id1970 . -22)) nil (25833 41264 778881 521000) 0 nil])
([nil nil ((2843 . 2845) (#("i" 0 1 (face font-lock-type-face fontified t)) . -2843) (undo-tree-id1958 . -1) (undo-tree-id1959 . -1) (2839 . 2844) (#("i" 0 1 (face font-lock-type-face fontified t)) . -2839) (undo-tree-id1960 . -1) (undo-tree-id1961 . -1) (undo-tree-id1962 . -1) (undo-tree-id1963 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -2840) (undo-tree-id1964 . -1) (undo-tree-id1965 . -1) (undo-tree-id1966 . -1) (undo-tree-id1967 . -1) 2841 (2839 . 2841) (#("i" 0 1 (face font-lock-type-face fontified t)) . -2839) (undo-tree-id1968 . -1) (2838 . 2840)) nil (25833 41264 778877 434000) 0 nil])
([nil nil ((#("use bevy_rapier3d::plugin::RapierContext::move_shape;
fn movement_system(
    keys: Res<Input<KeyCode>>,
    player: Query<(&Collider, &KinematicCharacterController)>,
) {
    let mut direction = Vec3::ZERO;
    let player = player.single();
    if keys.pressed(KeyCode::Left) {
        direction.x -= 1.0;
    }
    if keys.pressed(KeyCode::Right) {
        direction.x += 1.0;
    }
    if keys.pressed(KeyCode::Up) {
        direction.y += 1.0;
    }
    if keys.pressed(KeyCode::Down) {
        direction.y -= 1.0;
    }
    player.move_shape(
        direction,
        player.0,
        player.1.translation,
        Quat::IDENTITY,
        player.1.custom_mass,
        MoveShapeOptions::default(),
        QueryFilter::default(),
        None,
    );
}
" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 17 (face font-lock-constant-face fontified t) 17 19 (fontified t) 19 25 (face font-lock-constant-face fontified t) 25 27 (fontified t) 27 40 (face font-lock-type-face fontified t) 40 51 (fontified t) 51 52 (fontified t rear-nonsticky t) 52 53 (fontified t) 53 54 (fontified t) 54 56 (face font-lock-keyword-face fontified t) 56 57 (fontified t) 57 72 (face font-lock-function-name-face fontified t) 72 74 (fontified t) 74 78 (fontified t) 78 82 (face font-lock-variable-name-face fontified t) 82 84 (fontified t) 84 87 (face font-lock-type-face fontified t) 87 88 (fontified t) 88 93 (face font-lock-type-face fontified t) 93 94 (fontified t) 94 101 (face font-lock-type-face fontified t) 101 104 (fontified t) 104 105 (fontified t) 105 109 (fontified t) 109 115 (face font-lock-variable-name-face fontified t) 115 117 (fontified t) 117 122 (face font-lock-type-face fontified t) 122 124 (fontified t) 124 125 (face rust-ampersand-face fontified t) 125 133 (face font-lock-type-face fontified t) 133 135 (fontified t) 135 136 (face rust-ampersand-face fontified t) 136 164 (face font-lock-type-face fontified t) 164 166 (fontified t) 166 167 (fontified t) 167 168 (fontified t) 168 171 (fontified t) 171 172 (fontified t) 172 176 (fontified t) 176 179 (face font-lock-keyword-face fontified t) 179 180 (fontified t) 180 183 (face font-lock-keyword-face fontified t) 183 184 (fontified t) 184 193 (face font-lock-variable-name-face fontified t) 193 196 (fontified t) 196 199 (face font-lock-type-face fontified t) 199 200 (face font-lock-type-face fontified t) 200 201 (fontified t) 201 202 (fontified t) 202 203 (face font-lock-type-face fontified t) 203 204 (face font-lock-type-face fontified t) 204 205 (face font-lock-type-face fontified t) 205 206 (face font-lock-type-face fontified t) 206 207 (fontified t) 207 208 (fontified t) 208 212 (fontified t) 212 215 (face font-lock-keyword-face fontified t) 215 216 (fontified t) 216 222 (face font-lock-variable-name-face fontified t) 222 241 (fontified t) 241 242 (fontified t) 242 246 (fontified t) 246 248 (face font-lock-keyword-face fontified t) 248 262 (fontified t) 262 269 (face font-lock-type-face fontified t) 269 271 (fontified t) 271 275 (face font-lock-type-face fontified t) 275 279 (fontified t) 279 287 (fontified t) 287 311 (fontified t) 311 313 (fontified t) 313 317 (fontified t) 317 319 (face font-lock-keyword-face fontified t) 319 333 (fontified t) 333 340 (face font-lock-type-face fontified t) 340 342 (fontified t) 342 347 (face font-lock-type-face fontified t) 347 351 (fontified t) 351 359 (fontified t) 359 383 (fontified t) 383 385 (fontified t) 385 389 (fontified t) 389 391 (face font-lock-keyword-face fontified t) 391 405 (fontified t) 405 412 (face font-lock-type-face fontified t) 412 414 (fontified t) 414 416 (face font-lock-type-face fontified t) 416 420 (fontified t) 420 428 (fontified t) 428 448 (fontified t) 448 452 (fontified t) 452 454 (fontified t) 454 458 (fontified t) 458 460 (face font-lock-keyword-face fontified t) 460 474 (fontified t) 474 481 (face font-lock-type-face fontified t) 481 483 (fontified t) 483 487 (face font-lock-type-face fontified t) 487 491 (fontified t) 491 499 (fontified t) 499 519 (fontified t) 519 523 (fontified t) 523 524 (fontified t) 524 525 (fontified t) 525 529 (fontified t) 529 536 (fontified t) 536 546 (fontified t) 546 547 (fontified t) 547 548 (fontified t) 548 556 (fontified t) 556 566 (fontified t) 566 573 (fontified t) 573 574 (fontified t) 574 575 (fontified t) 575 584 (fontified t) 584 591 (fontified t) 591 592 (fontified t) 592 593 (fontified t) 593 614 (fontified t) 614 621 (fontified t) 621 622 (fontified t) 622 623 (fontified t) 623 627 (face font-lock-type-face fontified t) 627 629 (fontified t) 629 637 (face font-lock-type-face fontified t) 637 638 (fontified t) 638 645 (fontified t) 645 646 (fontified t) 646 647 (fontified t) 647 656 (fontified t) 656 668 (fontified t) 668 675 (fontified t) 675 676 (fontified t) 676 677 (fontified t) 677 693 (face font-lock-type-face fontified t) 693 705 (fontified t) 705 706 (fontified t) 706 712 (fontified t) 712 713 (fontified t) 713 714 (fontified t) 714 725 (face font-lock-type-face fontified t) 725 736 (fontified t) 736 738 (fontified t) 738 746 (fontified t) 746 750 (face font-lock-type-face fontified t) 750 751 (fontified t) 751 752 (fontified t) 752 756 (fontified t) 756 758 (fontified t) 758 759 (fontified t) 759 760 (fontified t) 760 761 (fontified t rear-nonsticky t)) . 3112) (undo-tree-id2063 . -760) (undo-tree-id2064 . -305) (undo-tree-id2065 . -760) (undo-tree-id2066 . -25) (undo-tree-id2067 . -760) (undo-tree-id2068 . -54) (undo-tree-id2069 . -166) (undo-tree-id2070 . -320) (undo-tree-id2071 . -320) (undo-tree-id2072 . -392) (undo-tree-id2073 . -392) (undo-tree-id2074 . -758) (undo-tree-id2075 . -735) (undo-tree-id2076 . -545) (undo-tree-id2077 . -536) (undo-tree-id2078 . -536) (undo-tree-id2079 . -4) (undo-tree-id2080 . -105) (undo-tree-id2081 . -25) (undo-tree-id2082 . -25) (undo-tree-id2083 . -25) (undo-tree-id2084 . -25) (undo-tree-id2085 . -73) (undo-tree-id2086 . -73) (undo-tree-id2087 . -99) (undo-tree-id2088 . -99) (undo-tree-id2089 . -130) (undo-tree-id2090 . -130) (undo-tree-id2091 . -171) (undo-tree-id2092 . -171) (undo-tree-id2093 . -197) (undo-tree-id2094 . -197) (undo-tree-id2095 . -233) (undo-tree-id2096 . -233) (undo-tree-id2097 . -267) (undo-tree-id2098 . -267) (undo-tree-id2099 . -304) (undo-tree-id2100 . -304) (undo-tree-id2101 . -312) (undo-tree-id2102 . -312) (undo-tree-id2103 . -338) (undo-tree-id2104 . -338) (undo-tree-id2105 . -376) (undo-tree-id2106 . -376) (undo-tree-id2107 . -384) (undo-tree-id2108 . -384) (undo-tree-id2109 . -410) (undo-tree-id2110 . -410) (undo-tree-id2111 . -445) (undo-tree-id2112 . -445) (undo-tree-id2113 . -453) (undo-tree-id2114 . -453) (undo-tree-id2115 . -479) (undo-tree-id2116 . -479) (undo-tree-id2117 . -516) (undo-tree-id2118 . -516) (undo-tree-id2119 . -524) (undo-tree-id2120 . -524) (undo-tree-id2121 . -547) (undo-tree-id2122 . -547) (undo-tree-id2123 . -566) (undo-tree-id2124 . -566) (undo-tree-id2125 . -584) (undo-tree-id2126 . -584) (undo-tree-id2127 . -610) (undo-tree-id2128 . -610) (undo-tree-id2129 . -638) (undo-tree-id2130 . -638) (undo-tree-id2131 . -664) (undo-tree-id2132 . -664) (undo-tree-id2133 . -694) (undo-tree-id2134 . -694) (undo-tree-id2135 . -731) (undo-tree-id2136 . -731) (undo-tree-id2137 . -751) (undo-tree-id2138 . -751) (undo-tree-id2139 . -758) (undo-tree-id2140 . -758) (undo-tree-id2141 . -760) (undo-tree-id2142 . -760) (undo-tree-id2143 . -761) (undo-tree-id2144 . -761) (undo-tree-id2145 . -761) (undo-tree-id2146 . -761) (undo-tree-id2147 . -759) (undo-tree-id2148 . -760) (undo-tree-id2149 . -760) (undo-tree-id2150 . -760) (undo-tree-id2151 . -760) (undo-tree-id2152 . -761) 3872 (t 25833 41264 782885 135000)) nil (25833 41280 715650 366000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 3111) (undo-tree-id1975 . -1) (undo-tree-id1976 . -1) (undo-tree-id1977 . -1) (undo-tree-id1978 . -1) (undo-tree-id1979 . -1) (undo-tree-id1980 . -1) (undo-tree-id1981 . -1) (undo-tree-id1982 . -1) (undo-tree-id1983 . -1) (undo-tree-id1984 . -1) (undo-tree-id1985 . -1) (undo-tree-id1986 . -1) (undo-tree-id1987 . -1) (undo-tree-id1988 . -1) (undo-tree-id1989 . -1) (undo-tree-id1990 . -1) (undo-tree-id1991 . -1) (undo-tree-id1992 . -1) (undo-tree-id1993 . -1) (undo-tree-id1994 . -1) (undo-tree-id1995 . -1) (undo-tree-id1996 . -1) (undo-tree-id1997 . -1) (undo-tree-id1998 . -1) (undo-tree-id1999 . -1) (undo-tree-id2000 . -1) (undo-tree-id2001 . -1) (undo-tree-id2002 . -1) (undo-tree-id2003 . -1) (undo-tree-id2004 . -1) (undo-tree-id2005 . -1) (undo-tree-id2006 . -1) (undo-tree-id2007 . -1) (undo-tree-id2008 . -1) (undo-tree-id2009 . -1) (undo-tree-id2010 . -1) (undo-tree-id2011 . -1) (undo-tree-id2012 . -1) (undo-tree-id2013 . -1) (undo-tree-id2014 . -1) (undo-tree-id2015 . -1) (undo-tree-id2016 . -1) (undo-tree-id2017 . -1) (undo-tree-id2018 . -1) (undo-tree-id2019 . -1) (undo-tree-id2020 . -1) (undo-tree-id2021 . -1) (undo-tree-id2022 . -1) (undo-tree-id2023 . -1) (undo-tree-id2024 . -1) (undo-tree-id2025 . -1) (undo-tree-id2026 . -1) (undo-tree-id2027 . -1) (undo-tree-id2028 . -1) (undo-tree-id2029 . -1) (undo-tree-id2030 . -1) (undo-tree-id2031 . -1) (undo-tree-id2032 . -1) (undo-tree-id2033 . -1) (undo-tree-id2034 . -1) (undo-tree-id2035 . -1) (undo-tree-id2036 . -1) (undo-tree-id2037 . -1) (undo-tree-id2038 . -1) (undo-tree-id2039 . -1) (undo-tree-id2040 . -1) (undo-tree-id2041 . -1) (undo-tree-id2042 . -1) (undo-tree-id2043 . -1) (undo-tree-id2044 . -1) (undo-tree-id2045 . -1) (undo-tree-id2046 . -1) (undo-tree-id2047 . -1) (undo-tree-id2048 . -1) (undo-tree-id2049 . -1) (undo-tree-id2050 . -1) (undo-tree-id2051 . -1) (undo-tree-id2052 . -1) (undo-tree-id2053 . -1) (undo-tree-id2054 . -1) (undo-tree-id2055 . -1) (undo-tree-id2056 . -1) (undo-tree-id2057 . -1) (undo-tree-id2058 . -1) (undo-tree-id2059 . -1) (undo-tree-id2060 . -1) (undo-tree-id2061 . -1) (undo-tree-id2062 . -1)) nil (25833 41280 715562 632000) 0 nil])
([nil nil ((#("            custom_mass: Some(100900.0),
            apply_impulse_to_dynamic_bodies: true,
            ..default()
" 0 8 (fontified t) 8 12 (fontified t) 12 23 (face font-lock-variable-name-face fontified t) 23 25 (fontified t) 25 29 (face font-lock-type-face fontified t) 29 30 (fontified t) 30 36 (fontified t) 36 37 (fontified t) 37 40 (fontified t) 40 41 (fontified t) 41 48 (fontified t) 48 49 (fontified t) 49 53 (fontified t) 53 84 (face font-lock-variable-name-face fontified t) 84 86 (fontified t) 86 90 (face font-lock-keyword-face fontified t) 90 91 (fontified t rear-nonsticky t) 91 92 (fontified t) 92 95 (fontified t) 95 96 (fontified t) 96 104 (fontified t) 104 115 (fontified t) 115 116 (fontified t)) . 2974) (undo-tree-id2252 . -92) (undo-tree-id2253 . -115) (undo-tree-id2254 . -49) (undo-tree-id2255 . -114) (undo-tree-id2256 . -92) (undo-tree-id2257 . -116) (undo-tree-id2258 . -116) (undo-tree-id2259 . -92) (undo-tree-id2260 . -92) (undo-tree-id2261 . -41) (undo-tree-id2262 . -41) (undo-tree-id2263 . -41) (undo-tree-id2264 . -41) (undo-tree-id2265 . -92) (undo-tree-id2266 . -92) (undo-tree-id2267 . -41) (undo-tree-id2268 . -41) (undo-tree-id2269 . -41) (undo-tree-id2270 . -41) (undo-tree-id2271 . -92) (undo-tree-id2272 . -92) (undo-tree-id2273 . -92) (undo-tree-id2274 . -92) (undo-tree-id2275 . -92) (undo-tree-id2276 . -116) 3066 (t 25833 41280 719551 987000)) nil (25833 41646 307835 896000) 0 nil])
([nil nil ((#("        " 0 8 (fontified nil)) . 2973) (undo-tree-id2214 . 8) (#("
" 0 1 (fontified t)) . -2973) (undo-tree-id2215 . -1) (undo-tree-id2216 . -1) (undo-tree-id2217 . -1) (undo-tree-id2218 . -1) (undo-tree-id2219 . -1) (undo-tree-id2220 . -1) (undo-tree-id2221 . -1) (undo-tree-id2222 . -1) (undo-tree-id2223 . -1) (undo-tree-id2224 . -1) (undo-tree-id2225 . -1) (undo-tree-id2226 . -1) (undo-tree-id2227 . -1) (undo-tree-id2228 . -1) (undo-tree-id2229 . -1) (undo-tree-id2230 . -1) (undo-tree-id2231 . -1) (undo-tree-id2232 . -1) (undo-tree-id2233 . -1) (undo-tree-id2234 . -1) (undo-tree-id2235 . -1) (undo-tree-id2236 . -1) (undo-tree-id2237 . -1) (undo-tree-id2238 . -1) (undo-tree-id2239 . -1) (undo-tree-id2240 . -1) (undo-tree-id2241 . -1) (undo-tree-id2242 . -1) (undo-tree-id2243 . -1) (undo-tree-id2244 . -1) (undo-tree-id2245 . -1) (undo-tree-id2246 . -1) (undo-tree-id2247 . -1) (undo-tree-id2248 . -1) (undo-tree-id2249 . -1) (undo-tree-id2250 . -1) (undo-tree-id2251 . -1) 2972) nil (25833 41646 307824 685000) 0 nil])
([nil nil ((#(" {}" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . 2971) (undo-tree-id2171 . -2) (undo-tree-id2172 . -2) (undo-tree-id2173 . -2) (undo-tree-id2174 . -2) (undo-tree-id2175 . -2) (undo-tree-id2176 . 1) (undo-tree-id2177 . -2) (undo-tree-id2178 . -2) (undo-tree-id2179 . -2) (undo-tree-id2180 . -2) (undo-tree-id2181 . -2) (undo-tree-id2182 . -2) (undo-tree-id2183 . -2) (undo-tree-id2184 . -2) (undo-tree-id2185 . -2) (undo-tree-id2186 . -2) (undo-tree-id2187 . -2) (undo-tree-id2188 . -2) (undo-tree-id2189 . -2) (undo-tree-id2190 . -2) (undo-tree-id2191 . -2) (undo-tree-id2192 . -2) (undo-tree-id2193 . -2) (undo-tree-id2194 . -2) (undo-tree-id2195 . -2) (undo-tree-id2196 . -2) (undo-tree-id2197 . -2) (undo-tree-id2198 . -2) (undo-tree-id2199 . -2) (undo-tree-id2200 . -2) (undo-tree-id2201 . -2) (undo-tree-id2202 . -2) (undo-tree-id2203 . -2) (undo-tree-id2204 . -2) (undo-tree-id2205 . -2) (undo-tree-id2206 . -2) (undo-tree-id2207 . -1) (undo-tree-id2208 . -1) (undo-tree-id2209 . -2) (undo-tree-id2210 . -2) (undo-tree-id2211 . -1) (undo-tree-id2212 . -1) (undo-tree-id2213 . -3)) nil (25833 41646 307809 627000) 0 nil])
([nil nil ((2971 . 2982)) nil (25833 41646 307792 434000) 0 nil])
([nil nil ((2859 . 2860) (2852 . 2859) (#("i" 0 1 (face font-lock-type-face fontified t)) . -2852) (undo-tree-id2161 . -1) (2850 . 2853) (#("i" 0 1 (face font-lock-type-face fontified t)) . -2850) (undo-tree-id2162 . -1) (2845 . 2851) (#("i" 0 1 (face font-lock-type-face fontified t)) . -2845) (undo-tree-id2163 . -1) (undo-tree-id2164 . -1) (2839 . 2846) (#("i" 0 1 (face font-lock-type-face fontified t)) . -2839) (undo-tree-id2165 . -1) (2838 . 2840) (#("Dynamic" 0 7 (face font-lock-type-face fontified t)) . 2838) (undo-tree-id2166 . -6) (undo-tree-id2167 . -7) (undo-tree-id2168 . -7) (undo-tree-id2169 . -7) (undo-tree-id2170 . -7)) nil (25833 41646 307791 202000) 0 nil])
([nil nil ((2987 . 2993) (2986 . 2987) (#(":" 0 1 (fontified t)) . -2986) (undo-tree-id2153 . -1) (undo-tree-id2154 . -1) (undo-tree-id2155 . -1) (undo-tree-id2156 . -1) (#(":" 0 1 (fontified t)) . -2987) (undo-tree-id2157 . -1) (undo-tree-id2158 . -1) (undo-tree-id2159 . -1) (undo-tree-id2160 . -1) 2988) nil (25833 41646 307784 199000) 0 nil])
([nil nil ((3002 . 3003)) nil (25833 41646 307772 156000) 0 nil])
([nil nil ((2993 . 2995)) nil (25833 41646 307771 675000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3030 . 3031) (nil fontified nil 2993 . 3031) (2993 . 3031) (2987 . 2993) 2963) nil (25833 41646 307770 674000) 0 nil])
([nil nil ((2986 . 2987) (2988 . 2993) (#("	" 0 1 (fontified t)) . 2988) (2993 . 2996) (3032 . 3035) (#("	" 0 1 (fontified t)) . 3032) (3037 . 3042) (3048 . 3057) 3030) nil (25833 42136 42980 403000) 0 nil])
([nil nil ((3055 . 3057) (#("z" 0 1 (fontified t)) . -3055) (undo-tree-id2340 . -1) (undo-tree-id2341 . -1) 3056 (3045 . 3056) (3039 . 3045) (t 25833 43534 212914 767000) 2997) nil (25833 43611 557398 751000) 0 nil] [nil nil ((2968 . 2982) (#("d" 0 1 (fontified t)) . -2968) (undo-tree-id2277 . -1) (undo-tree-id2278 . -1) 2969 (2966 . 2969) (#("i" 0 1 (fontified t)) . -2966) (undo-tree-id2279 . -1) (2958 . 2967) (t 25833 41646 309556 109000)) ((#("bevy_rapi" 0 8 (face font-lock-constant-face fontified nil) 8 9 (fontified nil)) . 2958) (undo-tree-id2280 . -8) (undo-tree-id2281 . -8) (undo-tree-id2282 . -8) (undo-tree-id2283 . -8) (undo-tree-id2284 . -8) (undo-tree-id2285 . -8) (undo-tree-id2286 . -8) (undo-tree-id2287 . -8) (undo-tree-id2288 . -8) (undo-tree-id2289 . -8) (undo-tree-id2290 . -8) (undo-tree-id2291 . -8) (undo-tree-id2292 . -8) (undo-tree-id2293 . -8) (undo-tree-id2294 . -8) (undo-tree-id2295 . -8) (undo-tree-id2296 . -8) (undo-tree-id2297 . -9) (undo-tree-id2298 . -8) (undo-tree-id2299 . -8) (2966 . 2967) (#("ied" 0 2 (face font-lock-constant-face fontified nil) 2 3 (fontified nil)) . 2966) (undo-tree-id2300 . -2) (undo-tree-id2301 . -2) (undo-tree-id2302 . -2) (undo-tree-id2303 . -2) (undo-tree-id2304 . -2) (undo-tree-id2305 . -2) (undo-tree-id2306 . -2) (undo-tree-id2307 . -2) (undo-tree-id2308 . -2) (undo-tree-id2309 . -2) (undo-tree-id2310 . -2) (undo-tree-id2311 . -2) (undo-tree-id2312 . -2) (undo-tree-id2313 . -2) (undo-tree-id2314 . -2) (undo-tree-id2315 . -2) (undo-tree-id2316 . -2) (undo-tree-id2317 . -3) (undo-tree-id2318 . -2) (undo-tree-id2319 . -2) (2968 . 2969) (#("r3d::control::" 0 3 (face font-lock-constant-face fontified t) 3 5 (fontified t) 5 12 (face font-lock-constant-face fontified t) 12 14 (fontified t)) . 2968) (undo-tree-id2320 . -13) (undo-tree-id2321 . -13) (undo-tree-id2322 . -13) (undo-tree-id2323 . -13) (undo-tree-id2324 . -13) (undo-tree-id2325 . -13) (undo-tree-id2326 . -13) (undo-tree-id2327 . -13) (undo-tree-id2328 . -13) (undo-tree-id2329 . -13) (undo-tree-id2330 . -13) (undo-tree-id2331 . -13) (undo-tree-id2332 . -13) (undo-tree-id2333 . -13) (undo-tree-id2334 . -13) (undo-tree-id2335 . -13) (undo-tree-id2336 . -13) (undo-tree-id2337 . -13) (undo-tree-id2338 . -13) (undo-tree-id2339 . -13) (t 25833 42129 276228 943000)) (25833 42127 933969 183000) 0 nil])
([nil nil ((3040 . 3048) (#("	" 0 1 (fontified t)) . 3040) 3056) nil (25833 43611 557385 646000) 0 nil])
nil
([nil nil ((3099 . 3101) (t 25833 43611 562915 808000) 3098) nil (25833 43636 965694 201000) 0 nil])
([nil nil ((3101 . 3110)) nil (25833 43636 965693 720000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -3109) (undo-tree-id2358 . -1) (undo-tree-id2359 . -1) (undo-tree-id2360 . -1) (undo-tree-id2361 . -1) 3110) nil (25833 43636 965693 269000) 0 nil])
([nil nil ((3109 . 3112)) nil (25833 43636 965690 394000) 0 nil])
([nil nil ((#("P" 0 1 (face font-lock-type-face fontified t)) . -3111) (undo-tree-id2354 . -1) (undo-tree-id2355 . -1) (undo-tree-id2356 . -1) (undo-tree-id2357 . -1) 3112) nil (25833 43636 965689 783000) 0 nil])
([nil nil ((3111 . 3115)) nil (25833 43636 965687 689000) 0 nil])
([nil nil ((#("a" 0 1 (face font-lock-string-face fontified t)) . -3113) (undo-tree-id2344 . -1) (undo-tree-id2345 . -1) (undo-tree-id2346 . -1) (undo-tree-id2347 . -1) (undo-tree-id2348 . -1) (undo-tree-id2349 . -1) (#("l" 0 1 (face font-lock-string-face fontified t)) . -3114) (undo-tree-id2350 . -1) (undo-tree-id2351 . -1) (undo-tree-id2352 . -1) (undo-tree-id2353 . -1) 3115) nil (25833 43636 965686 507000) 0 nil])
([nil nil ((3113 . 3121)) nil (25833 43636 965679 554000) 0 nil])
([nil nil ((3100 . 3108) (#("	" 0 1 (fontified t)) . 3100) (undo-tree-id2342 . -1) (undo-tree-id2343 . -1) 3121) nil (25833 43636 965677 49000) 0 nil])
([nil nil ((#("            up: Vec3::Z,
" 0 8 (fontified t) 8 12 (fontified t) 12 14 (face font-lock-variable-name-face fontified t) 14 16 (fontified t) 16 20 (face font-lock-type-face fontified t) 20 22 (fontified t) 22 23 (face font-lock-type-face fontified t) 23 24 (fontified t) 24 25 (fontified t)) . 3040) (undo-tree-id2362 . 1) (undo-tree-id2363 . -24) (undo-tree-id2364 . -24) (undo-tree-id2365 . -24) (undo-tree-id2366 . -24) (undo-tree-id2367 . -24) (undo-tree-id2368 . -24) (undo-tree-id2369 . -24) (undo-tree-id2370 . -24) (undo-tree-id2371 . -24) (undo-tree-id2372 . -23) (undo-tree-id2373 . -23) (undo-tree-id2374 . -23) (undo-tree-id2375 . -23) (undo-tree-id2376 . -23) (undo-tree-id2377 . -23) (undo-tree-id2378 . -24) (undo-tree-id2379 . -23) (undo-tree-id2380 . -23) (undo-tree-id2381 . -25) 3063 (t 25833 43636 969582 817000)) nil (25833 44190 265497 630000) 0 nil])
([nil nil ((#("	" 0 1 (fontified t)) . -3075) (undo-tree-id2426 . -1) (undo-tree-id2427 . -1) (undo-tree-id2428 . -1) (undo-tree-id2429 . -1) 3076 (3074 . 3076) (t 25833 44190 266256 881000) 3064) nil (25833 44796 104822 424000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 3075) (undo-tree-id2422 . 1) (undo-tree-id2423 . -1) (undo-tree-id2424 . -1) (undo-tree-id2425 . -1)) nil (25833 44796 104818 938000) 0 nil])
([nil nil ((3091 . 3092) (#(";" 0 1 (fontified t)) . -3091) (undo-tree-id2382 . -1) (undo-tree-id2383 . -1) (undo-tree-id2384 . -1) (undo-tree-id2385 . -1) 3092 (3090 . 3092) (#("R" 0 1 (face font-lock-type-face fontified t)) . -3090) (undo-tree-id2386 . -1) (undo-tree-id2387 . -1) (undo-tree-id2388 . -1) (undo-tree-id2389 . -1) 3091 (3078 . 3091) (#("x" 0 1 (face font-lock-type-face fontified t)) . -3078) (undo-tree-id2390 . -1) (undo-tree-id2391 . -1) (undo-tree-id2392 . -1) (undo-tree-id2393 . -1) (undo-tree-id2394 . -1) (undo-tree-id2395 . -1) (undo-tree-id2396 . -1) (undo-tree-id2397 . -1) (#("c" 0 1 (face font-lock-type-face fontified t)) . -3079) (undo-tree-id2398 . -1) (undo-tree-id2399 . -1) (undo-tree-id2400 . -1) (undo-tree-id2401 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -3080) (undo-tree-id2402 . -1) (undo-tree-id2403 . -1) (undo-tree-id2404 . -1) (undo-tree-id2405 . -1) (#("u" 0 1 (face font-lock-type-face fontified t)) . -3081) (undo-tree-id2406 . -1) (undo-tree-id2407 . -1) (undo-tree-id2408 . -1) (undo-tree-id2409 . -1) (#("d" 0 1 (face font-lock-type-face fontified t)) . -3082) (undo-tree-id2410 . -1) (undo-tree-id2411 . -1) (undo-tree-id2412 . -1) (undo-tree-id2413 . -1) (#("e" 0 1 (face font-lock-type-face fontified t)) . -3083) (undo-tree-id2414 . -1) (undo-tree-id2415 . -1) (undo-tree-id2416 . -1) (undo-tree-id2417 . -1) 3084 (3074 . 3084) (#("s" 0 1 (face font-lock-type-face fontified t)) . -3074) (undo-tree-id2418 . -1) (undo-tree-id2419 . -1) 3075 (3065 . 3075) (#("i" 0 1 (face font-lock-type-face fontified t)) . -3065) (undo-tree-id2420 . -1) (3060 . 3066) (3059 . 3060) (3046 . 3059) (#("i" 0 1 (fontified t)) . -3046) (undo-tree-id2421 . -1) (3045 . 3047) (3039 . 3045) 2989) nil (25833 44796 104813 227000) 0 nil])
([nil nil ((3040 . 3048) (#("	" 0 1 (fontified t)) . 3040) 3091) nil (25833 44796 104783 361000) 0 nil])
([nil nil ((3066 . 3069) (t 25833 44796 102931 944000)) nil (25833 44833 44064 284000) 0 nil])
([nil nil ((#("g" 0 1 (fontified t)) . -3068) (undo-tree-id2433 . -1) (undo-tree-id2434 . -1) 3069) nil (25833 44833 44062 601000) 0 nil])
([nil nil ((3074 . 3081) (#("i" 0 1 (fontified t)) . -3074) (undo-tree-id2432 . -1) (3068 . 3075)) nil (25833 44833 44060 167000) 0 nil])
([nil nil ((3086 . 3091) (#("i" 0 1 (fontified t)) . -3086) (undo-tree-id2430 . -1) (3082 . 3087) (#("i" 0 1 (fontified t)) . -3082) (undo-tree-id2431 . -1) (3081 . 3083)) nil (25833 44833 44056 500000) 0 nil])
([nil nil ((3116 . 3117) (#(":" 0 1 (fontified t)) . -3116) (undo-tree-id2435 . -1) (undo-tree-id2436 . -1) (undo-tree-id2437 . -1) (undo-tree-id2438 . -1) (undo-tree-id2439 . -1) (undo-tree-id2440 . -1) (undo-tree-id2441 . -1) (undo-tree-id2442 . -1) (undo-tree-id2443 . -1) (undo-tree-id2444 . -1) (undo-tree-id2445 . -1) (undo-tree-id2446 . -1) (#(":" 0 1 (fontified t)) . -3117) (undo-tree-id2447 . 1) (undo-tree-id2448 . -1) (undo-tree-id2449 . -1) (undo-tree-id2450 . -1) (undo-tree-id2451 . -1) 3118 (t 25833 44833 42932 533000)) nil (25833 44846 303991 890000) 0 nil])
([nil nil ((3117 . 3124) (#("FIXED" 0 5 (face font-lock-type-face fontified t)) . 3117) (undo-tree-id2452 . 5) (undo-tree-id2453 . -4) (undo-tree-id2454 . -5) (undo-tree-id2455 . -5) (t 25833 44846 302932 734000)) nil (25833 44958 166853 875000) 0 nil])
([nil nil ((#("    " 0 4 (fontified nil)) . -3279) (undo-tree-id33 . -4) (undo-tree-id34 . -4) (undo-tree-id35 . -4) (undo-tree-id36 . -4) (3283 . 3284) (3278 . 3283) (3269 . 3278) (3241 . 3269) (#("Kin" 0 3 (face font-lock-type-face fontified t)) . -3241) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -3) (undo-tree-id42 . -3) (undo-tree-id43 . -3) (undo-tree-id44 . -3) (undo-tree-id45 . -3) (undo-tree-id46 . -3) 3244 (3242 . 3244) (#("i" 0 1 (face font-lock-type-face fontified t)) . -3242) (undo-tree-id47 . -1) (3241 . 3243) (3229 . 3241) (#("i" 0 1 (fontified t)) . -3229) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (3227 . 3230) (#("i" 0 1 (fontified t)) . -3227) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (3223 . 3228) (#("m" 0 1 (fontified t)) . -3223) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (#("u" 0 1 (fontified t)) . -3224) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (#("t" 0 1 (face font-lock-keyword-face fontified t)) . -3225) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (#(" " 0 1 (fontified t)) . -3226) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) 3227 (3222 . 3227) (3217 . 3222) (#("i" 0 1 (face font-lock-function-name-face fontified t)) . -3217) (undo-tree-id88 . -1) (3210 . 3218) (#("i" 0 1 (face font-lock-function-name-face fontified t)) . -3210) (undo-tree-id89 . -1) (3208 . 3211) (#("i" 0 1 (face font-lock-function-name-face fontified t)) . -3208) (undo-tree-id90 . -1) (3201 . 3209) (3200 . 3201) (3199 . 3200) (t 25833 44958 169600 948000) 3198) nil (25835 38996 449411 925000) 0 nil])
([nil nil ((3319 . 3328) (#("i" 0 1 (fontified t)) . -3319) (undo-tree-id12 . -1) (3317 . 3320) (3307 . 3317) (#("coll" 0 4 (fontified t)) . -3307) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -2) (undo-tree-id16 . -2) (undo-tree-id17 . -2) (undo-tree-id18 . -2) (undo-tree-id19 . -3) (undo-tree-id20 . -3) (undo-tree-id21 . -4) (undo-tree-id22 . -4) (undo-tree-id23 . -4) (undo-tree-id24 . -4) 3311 (3304 . 3311) (3301 . 3304) (#("%" 0 1 (face rust-string-interpolation fontified t)) . -3301) (undo-tree-id25 . -1) (undo-tree-id26 . -1) 3302 (3299 . 3302) (#("\"" 0 1 (face font-lock-string-face fontified t)) . -3299) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) 3300 (3288 . 3300) (3285 . 3288) (#("i" 0 1 (fontified t)) . -3285) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (3283 . 3286) (3278 . 3283) 3201) nil (25835 38996 449378 953000) 0 nil])
([nil nil ((4245 . 4263) (#("col" 0 3 (fontified t)) . -4245) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -2) (undo-tree-id3 . -2) (undo-tree-id4 . -3) (undo-tree-id5 . -3) (undo-tree-id6 . -3) (undo-tree-id7 . -3) (undo-tree-id8 . -3) (undo-tree-id9 . -3) (undo-tree-id10 . -3) (undo-tree-id11 . -3) 4248 (4243 . 4248)) nil (25835 38996 449364 366000) 0 nil])
([nil nil ((3277 . 3278) 4262) nil (25835 38996 449335 532000) 0 nil])
([nil nil ((2469 . 2470) (t 25835 38996 454589 515000)) nil (25835 39035 874074 763000) 0 nil])
([nil nil ((3242 . 3243)) nil (25835 39035 874073 340000) 0 nil])
([nil nil ((#("	" 0 1 (fontified t)) . 2469) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) 3242) nil (25835 39035 874070 435000) 0 nil])
([nil nil ((#(", collisions_printer" 0 2 (fontified t) 2 20 (fontified t)) . 4245) (undo-tree-id95 . -20) (undo-tree-id96 . -19) (t 25835 39035 877923 436000)) nil (25835 39069 367574 763000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3794 . 3795) (nil fontified nil 3775 . 3795) (3775 . 3795) 3774) nil (25835 39069 367564 293000) 0 nil])
([nil nil ((3329 . 3339) (#("coll" 0 4 (fontified t)) . -3329) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -2) (undo-tree-id100 . -2) (undo-tree-id101 . -3) (undo-tree-id102 . -3) (undo-tree-id103 . -4) (undo-tree-id104 . -4) (undo-tree-id105 . -4) (undo-tree-id106 . -4) (undo-tree-id107 . -4) (undo-tree-id108 . -4) 3333 (3328 . 3333) (t 25835 39069 371257 239000)) nil (25835 39253 236103 472000) 0 nil])
([nil nil ((#("fn collisions_printer(collisions: Query<&KinematicCharacterControllerOutput>) {
    println!(\"output {:?}\", collisions.single().collisions);
}
" 0 2 (face font-lock-keyword-face fontified t) 2 3 (fontified t) 3 21 (face font-lock-function-name-face fontified t) 21 22 (fontified t) 22 32 (face font-lock-variable-name-face fontified t) 32 34 (fontified t) 34 39 (face font-lock-type-face fontified t) 39 40 (fontified t) 40 41 (face rust-ampersand-face fontified t) 41 75 (face font-lock-type-face fontified t) 75 77 (fontified t) 77 78 (fontified t) 78 79 (fontified t) 79 80 (fontified t) 80 84 (fontified t) 84 92 (face rust-builtin-formatting-macro fontified t) 92 93 (fontified t) 93 101 (face font-lock-string-face fontified t) 101 105 (face rust-string-interpolation fontified t) 105 106 (face font-lock-string-face fontified t) 106 108 (fontified t) 108 128 (fontified t) 128 138 (fontified t) 138 140 (fontified t) 140 141 (fontified t) 141 142 (fontified t) 142 143 (fontified t)) . 3201) (undo-tree-id206 . -142) (undo-tree-id207 . 5) (undo-tree-id208 . -142) (undo-tree-id209 . -128) (undo-tree-id210 . -128) (undo-tree-id211 . -128) (undo-tree-id212 . -128) (undo-tree-id213 . -128) (undo-tree-id214 . -128) (undo-tree-id215 . -128) (undo-tree-id216 . -128) (undo-tree-id217 . -128) (undo-tree-id218 . -128) (undo-tree-id219 . -137) (undo-tree-id220 . -137) (undo-tree-id221 . -137) (undo-tree-id222 . -137) (undo-tree-id223 . -137) (undo-tree-id224 . -137) (undo-tree-id225 . -137) (undo-tree-id226 . -137) (undo-tree-id227 . -137) (undo-tree-id228 . -137) (undo-tree-id229 . -137) (undo-tree-id230 . -137) (undo-tree-id231 . -45) (undo-tree-id232 . -45) (undo-tree-id233 . -45) (undo-tree-id234 . -142) (undo-tree-id235 . -45) (undo-tree-id236 . -45) (undo-tree-id237 . -125) (undo-tree-id238 . -125) (undo-tree-id239 . -141) (undo-tree-id240 . -142) (undo-tree-id241 . -137) (undo-tree-id242 . -142) (undo-tree-id243 . -142) (undo-tree-id244 . -142) (undo-tree-id245 . -143) 3343 (t 25835 39253 237926 407000)) nil (25835 39345 552990 111000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3489 . 3490) (nil fontified nil 3201 . 3490) (3201 . 3490) (3200 . 3201) 3200) nil (25835 39345 552916 913000) 0 nil])
([nil nil ((3204 . 3222) (#("coll" 0 4 (face font-lock-function-name-face fontified t)) . -3204) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -2) (undo-tree-id152 . -2) (undo-tree-id153 . -3) (undo-tree-id154 . -3) (undo-tree-id155 . -4) (undo-tree-id156 . -4) (undo-tree-id157 . -4) (undo-tree-id158 . -4) (undo-tree-id159 . -4) (undo-tree-id160 . -4) (undo-tree-id161 . -4) (undo-tree-id162 . -4) (undo-tree-id163 . -4) (undo-tree-id164 . -4) 3208 (3204 . 3208) (#("p" 0 1 (face font-lock-function-name-face fontified t)) . -3204) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (#("r" 0 1 (face font-lock-function-name-face fontified t)) . -3205) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (#("i" 0 1 (face font-lock-function-name-face fontified t)) . -3206) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (#("n" 0 1 (face font-lock-function-name-face fontified t)) . -3207) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (#("t" 0 1 (face font-lock-function-name-face fontified t)) . -3208) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) 3209 (3206 . 3209) (#("i" 0 1 (face font-lock-function-name-face fontified t)) . -3206) (undo-tree-id201 . -1) (undo-tree-id202 . -1) 3207 (3204 . 3207) (#("modify_character_controller_slopes" 0 34 (face font-lock-function-name-face fontified t)) . 3204) (undo-tree-id203 . -33) (undo-tree-id204 . -34) (undo-tree-id205 . -34)) nil (25835 39345 552914 228000) 0 nil])
([nil nil ((3427 . 3429) (3418 . 3427) (#("coll" 0 4 (fontified t)) . -3418) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -2) (undo-tree-id112 . -2) (undo-tree-id113 . -3) (undo-tree-id114 . -3) (undo-tree-id115 . -4) (undo-tree-id116 . -4) (undo-tree-id117 . -4) (undo-tree-id118 . -4) (undo-tree-id119 . -4) (undo-tree-id120 . -4) (undo-tree-id121 . -4) (undo-tree-id122 . -4) (undo-tree-id123 . -4) (undo-tree-id124 . -4) 3422 (#("i" 0 1 (fontified t)) . -3422) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) 3423 (3422 . 3423) (#("i" 0 1 (fontified t)) . -3422) (undo-tree-id129 . -1) (3414 . 3423) (#("\"" 0 1 (face font-lock-string-face fontified t)) . -3414) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) 3415 (3413 . 3415) (3408 . 3413) (#("#" 0 1 (fontified t)) . -3408) (undo-tree-id134 . -1) (undo-tree-id135 . -1) 3409 (3403 . 3409) (#("i" 0 1 (fontified t)) . -3403) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (3401 . 3404) (3396 . 3401) (3396 . 3397) (#("            // Do something with that collision information.
" 0 12 (fontified t) 12 15 (face font-lock-comment-delimiter-face fontified t) 15 61 (face font-lock-comment-face fontified t)) . 3396) (undo-tree-id138 . -60) (undo-tree-id139 . -61) (undo-tree-id140 . -61) (undo-tree-id141 . -20) (undo-tree-id142 . -20) (undo-tree-id143 . -20) (undo-tree-id144 . -20) (undo-tree-id145 . -20) (undo-tree-id146 . -20) (undo-tree-id147 . -61) (undo-tree-id148 . -61) 3416) nil (25835 39345 552860 999000) 0 nil])
([nil nil ((3223 . 3228) (3303 . 3305) (3396 . 3404) (#("	" 0 1 (fontified t)) . 3396) 3428) nil (25835 39345 552680 751000) 0 nil])
([nil nil ((#("character_c" 0 11 (face font-lock-variable-name-face fontified t)) . 3232) (undo-tree-id251 . -10) (undo-tree-id252 . -11) (t 25835 39345 554594 319000)) nil (25835 39361 278460 364000) 0 nil])
([nil nil ((#("ontr" 0 4 (face font-lock-variable-name-face fontified t)) . 3232) (undo-tree-id249 . -3) (undo-tree-id250 . -4)) nil (25835 39361 278458 530000) 0 nil])
([nil nil ((#("oller_" 0 6 (face font-lock-variable-name-face fontified t)) . 3232) (undo-tree-id247 . -5) (undo-tree-id248 . -6)) nil (25835 39361 278456 126000) 0 nil])
([nil nil ((#("
    " 0 1 (fontified t) 1 5 (fontified t)) . 3223) (undo-tree-id246 . -1) (#(",
" 0 2 (fontified t)) . 3287) 3232) nil (25835 39361 278451 157000) 0 nil])
([nil nil ((#("&" 0 1 (fontified t)) . -3420) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) 3421 (3417 . 3421) (#("i" 0 1 (fontified t)) . -3417) (undo-tree-id257 . -1) (3415 . 3418) (#("s" 0 1 (fontified t)) . -3415) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (#("t" 0 1 (fontified t)) . -3416) (undo-tree-id262 . -1) (undo-tree-id263 . -1) 3417 (3413 . 3417) (t 25835 39361 277927 831000)) nil (25835 39491 846985 994000) 0 nil])
([nil nil ((3052 . 3054) (t 25835 39491 851262 839000)) nil (25835 39702 570112 181000) 0 nil])
([nil nil ((3443 . 3444) (3442 . 3443) (t 25835 39702 574598 805000) 3441) nil (25835 39816 399762 419000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3857 . 3858) (nil fontified nil 3444 . 3858) (3444 . 3858)) nil (25835 39816 399761 587000) 0 nil])
([nil nil ((3416 . 3420) (#("i" 0 1 (face font-lock-string-face fontified t)) . -3416) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (3410 . 3417) (#("i" 0 1 (face font-lock-string-face fontified t)) . -3410) (undo-tree-id281 . -1) (3399 . 3411)) nil (25835 39816 399760 355000) 0 nil])
([nil nil ((4344 . 4358) (#("display" 0 7 (fontified t)) . -4344) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -3) (undo-tree-id267 . -3) (undo-tree-id268 . -4) (undo-tree-id269 . -4) (undo-tree-id270 . -5) (undo-tree-id271 . -5) (undo-tree-id272 . -6) (undo-tree-id273 . -6) (undo-tree-id274 . -7) (undo-tree-id275 . -7) (undo-tree-id276 . -7) (undo-tree-id277 . -7) 4351 (4345 . 4351) (#("i" 0 1 (fontified t)) . -4345) (undo-tree-id278 . -1) (4342 . 4346)) nil (25835 39816 399756 508000) 0 nil])
([nil nil ((4291 . 4304) (4298 . 4303) (4299 . 4306) (4359 . 4369) 4357) nil (25835 39816 399739 957000) 0 nil])
([nil nil ((#("/" 0 1 (face font-lock-comment-delimiter-face fontified t)) . 3052) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (t 25835 39816 404600 213000)) nil (25835 40479 537667 65000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . 3052) (undo-tree-id282 . -1) (undo-tree-id283 . -1)) nil (25835 40637 789766 671000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2118 . 2119) (#("
" 0 1 (fontified nil)) . -2150) (2110 . 2151) 2108 (t 25835 40479 541275 477000)) nil (25835 40649 443569 609000) 0 nil] [nil nil ((2116 . 2117) (2110 . 2116) (t 25835 40479 541275 477000) 2108) ((#("
	    " 0 1 (fontified t) 1 6 (fontified nil)) . 2110) (undo-tree-id286 . -1) (undo-tree-id287 . -6) (undo-tree-id288 . -6) (#("p" 0 1 (fontified t)) . 2116)) (25835 40637 789511 703000) 0 nil])
([nil nil ((#("        " 0 7 (fontified nil) 7 8 (rear-nonsticky t fontified nil)) . -2116) (undo-tree-id312 . -8) (undo-tree-id313 . -8) (undo-tree-id314 . -8) (undo-tree-id315 . -8) (undo-tree-id316 . -8) (undo-tree-id317 . -8) (undo-tree-id318 . -8) (2111 . 2116) 2119) nil (25835 40649 443568 627000) 0 nil])
nil
([nil nil ((nil rear-nonsticky nil 1095 . 1096) (#("
" 0 1 (fontified nil)) . -1127) (1087 . 1128) 1081) nil (25835 40649 443564 990000) 0 nil])
([nil nil ((#("        " 0 7 (fontified nil) 7 8 (rear-nonsticky t fontified nil)) . -1093) (undo-tree-id305 . -8) (undo-tree-id306 . -8) (undo-tree-id307 . -8) (undo-tree-id308 . -8) (undo-tree-id309 . -8) (undo-tree-id310 . -8) (undo-tree-id311 . -8) (1088 . 1093) 1096) nil (25835 40649 443563 568000) 0 nil])
([nil nil ((1088 . 1096) (#("	" 0 1 (fontified t)) . 1088) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (2148 . 2156) (#("	" 0 1 (fontified t)) . 2148) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) 1089) nil (25835 40649 443557 616000) 0 nil])
([nil nil ((#("mut " 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t)) . 3382) (undo-tree-id319 . -3) (undo-tree-id320 . -4) (t 25835 40649 447944 228000)) nil (25835 40737 573943 615000) 0 nil])
([nil current ((3140 . 3142) (t 25835 40737 577945 336000)) nil (25835 40812 62574 135000) 0 nil])
nil
