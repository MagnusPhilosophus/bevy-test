(undo-tree-save-format-version . 1)
"46db822c17d85f35058f4319bd0e7110382ca919"
[nil nil nil nil (25817 7454 754229 470000) 0 nil]
([nil nil ((4071 . 4081) (4062 . 4071) (#("trans" 0 5 (fontified t)) . -4062) (undo-tree-id10 . -5) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -2) (undo-tree-id14 . -2) (undo-tree-id15 . -3) (undo-tree-id16 . -3) (undo-tree-id17 . -4) (undo-tree-id18 . -4) (undo-tree-id19 . -5) (undo-tree-id20 . -5) (undo-tree-id21 . -5) (undo-tree-id22 . -5) (undo-tree-id23 . -5) 4067 (4062 . 4067) (#("forward" 0 7 (fontified t)) . 4062) (undo-tree-id24 . -7) (undo-tree-id25 . -7) (undo-tree-id26 . -6) (t 25816 50746 225708 469000)) nil (25817 7460 271082 79000) 0 nil])
([nil nil ((4015 . 4034) (#("forward" 0 1 (fontified t) 1 7 (fontified t)) . 4015) (undo-tree-id79 . -1) (undo-tree-id80 . -6) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -7) (undo-tree-id84 . -7)) nil (25817 7478 495255 0) 0 nil] [nil nil ((nil rear-nonsticky nil 4020 . 4021) (nil fontified nil 4016 . 4021) (4016 . 4021) 4015) ((#("right" 0 4 (fontified nil) 4 5 (fontified nil rear-nonsticky nil)) . 4016) (undo-tree-id34 . -4) (undo-tree-id35 . -4) (undo-tree-id36 . -4) (nil rear-nonsticky t 4020 . 4021)) (25817 7460 270982 523000) 0 nil] [nil nil ((nil rear-nonsticky nil 4020 . 4021) (nil fontified nil 4016 . 4021) (4016 . 4021) 4015) ((#("right" 0 4 (fontified nil) 4 5 (fontified nil rear-nonsticky nil)) . 4016) (undo-tree-id31 . -4) (undo-tree-id32 . -4) (undo-tree-id33 . -4) (nil rear-nonsticky t 4020 . 4021)) (25817 7459 37430 220000) 0 nil] [nil nil ((4130 . 4140) (4121 . 4130) (#("trans" 0 5 (fontified nil)) . 4121) (4121 . 4126) (#("right" 0 5 (fontified t)) . 4121) (undo-tree-id5 . -4) (undo-tree-id6 . -5) (undo-tree-id7 . -5) (undo-tree-id8 . -5) (undo-tree-id9 . -5)) ((4121 . 4126) (#("trans" 0 5 (fontified nil)) . 4121) (4121 . 4126) (#("transform" 0 9 (fontified nil)) . 4121) (#(".forward()" 0 10 (fontified t)) . 4130)) (25817 7454 754468 488000) 0 nil])
([nil nil ((4133 . 4152) (#("right" 0 5 (fontified t)) . 4133) (undo-tree-id74 . -4) (undo-tree-id75 . -5) (undo-tree-id76 . -5) (undo-tree-id77 . -5) (undo-tree-id78 . -5)) nil (25817 7478 495248 628000) 0 nil])
nil
nil
([nil nil ((4189 . 4199) (4180 . 4189) (#("trans" 0 5 (fontified nil)) . 4180) (4180 . 4185) (#("right" 0 5 (fontified t)) . 4180) (undo-tree-id0 . -4) (undo-tree-id1 . -5) (undo-tree-id2 . -5) (undo-tree-id3 . -5) (undo-tree-id4 . -5)) ((4180 . 4185) (#("trans" 0 5 (fontified nil)) . 4180) (4180 . 4185) (#("transform" 0 9 (fontified nil)) . 4180) (undo-tree-id27 . -9) (undo-tree-id28 . -9) (#(".forward()" 0 10 (fontified t)) . 4189) (undo-tree-id29 . -3) (undo-tree-id30 . -3)) (25817 7454 754204 763000) 0 nil])
([nil nil ((4192 . 4211) (#("right" 0 5 (fontified t)) . 4192) (undo-tree-id69 . -4) (undo-tree-id70 . -5) (undo-tree-id71 . -5) (undo-tree-id72 . -5) (undo-tree-id73 . -5)) nil (25817 7478 495242 657000) 0 nil])
nil
([nil nil ((4144 . 4148) (#("i" 0 1 (fontified t)) . -4144) (undo-tree-id65 . -1) (4143 . 4145) (#("forward" 0 7 (fontified t)) . 4143) (undo-tree-id66 . -6) (undo-tree-id67 . -7) (undo-tree-id68 . -7)) nil (25817 7478 495237 137000) 0 nil])
([nil nil ((4200 . 4205) (#("forward" 0 7 (fontified t)) . 4200) (undo-tree-id58 . -6) (undo-tree-id59 . -4) (undo-tree-id60 . -4) (undo-tree-id61 . -4) (undo-tree-id62 . -4) (undo-tree-id63 . -7) (undo-tree-id64 . -7)) nil (25817 7478 495231 666000) 0 nil])
([nil nil ((#("    let forward = transform.forward();
    let right = transform.right();
" 0 4 (fontified t) 4 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t) 8 15 (fontified t face font-lock-variable-name-face) 15 43 (fontified t) 43 46 (fontified t face font-lock-keyword-face) 46 47 (fontified t) 47 52 (fontified t face font-lock-variable-name-face) 52 74 (fontified t)) . 3842) (undo-tree-id37 . -73) (undo-tree-id38 . -73) (undo-tree-id39 . -73) (undo-tree-id40 . -74) (undo-tree-id41 . -74) (undo-tree-id42 . -72) (undo-tree-id43 . -72) (undo-tree-id44 . -37) (undo-tree-id45 . -37) (undo-tree-id46 . -37) (undo-tree-id47 . -73) (undo-tree-id48 . -74) (undo-tree-id49 . -37) (undo-tree-id50 . -73) (undo-tree-id51 . -37) (undo-tree-id52 . -37) (undo-tree-id53 . -39) (undo-tree-id54 . -73) (undo-tree-id55 . -73) (undo-tree-id56 . -73) (undo-tree-id57 . -74) 3915) nil (25817 7478 495220 535000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 4278) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (t 25817 7478 492709 122000)) nil (25817 7508 635172 186000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 3842) (undo-tree-id89 . 1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1)) nil (25817 7508 635168 28000) 0 nil])
([nil nil ((#("2" 0 1 (fontified t)) . 4937) (undo-tree-id87 . -1) (undo-tree-id88 . -1)) nil (25817 7508 635162 989000) 0 nil])
([nil nil ((#("2" 0 1 (fontified t)) . 5006) (undo-tree-id85 . -1) (undo-tree-id86 . -1)) nil (25817 7508 635157 228000) 0 nil])
([nil nil ((135 . 146) (134 . 135) (t 25817 7508 639376 236000) 126) nil (25817 8088 905690 181000) 0 nil])
([nil nil ((#("use bevy::window::{CursorGrabMode, PrimaryWindow};
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 8 (fontified t face font-lock-constant-face) 8 10 (fontified t) 10 16 (fontified t face font-lock-constant-face) 16 19 (fontified t) 19 33 (fontified t face font-lock-type-face) 33 35 (fontified t) 35 48 (fontified t face font-lock-type-face) 48 50 (fontified t) 50 51 (fontified t)) . 84) (undo-tree-id332 . -46) (undo-tree-id333 . -50) (undo-tree-id334 . -41) (undo-tree-id335 . 8) (undo-tree-id336 . -41) (undo-tree-id337 . -42) (undo-tree-id338 . -46) (undo-tree-id339 . -46) (undo-tree-id340 . -43) 130) nil (25817 8088 905688 759000) 0 nil])
([nil nil ((nil rear-nonsticky nil 61 . 62) (#("
" 0 1 (fontified nil)) . -112) (61 . 113) 35) nil (25817 8088 905683 669000) 0 nil])
([nil nil ((#("use bevy::input::mouse::MouseMotion;
use bevy::window::{CursorGrabMode, PrimaryWindow};
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 8 (fontified t face font-lock-constant-face) 8 10 (fontified t) 10 15 (fontified t face font-lock-constant-face) 15 17 (fontified t) 17 22 (fontified t face font-lock-constant-face) 22 24 (fontified t) 24 35 (fontified t face font-lock-type-face) 35 36 (fontified t) 36 37 (fontified t rear-nonsticky t) 37 40 (fontified t face font-lock-keyword-face) 40 41 (fontified t) 41 45 (fontified t face font-lock-constant-face) 45 47 (fontified t) 47 53 (fontified t face font-lock-constant-face) 53 56 (fontified t) 56 70 (fontified t face font-lock-type-face) 70 72 (fontified t) 72 85 (fontified t face font-lock-type-face) 85 87 (fontified t) 87 88 (fontified t)) . 25) (undo-tree-id328 . -37) (undo-tree-id329 . -87) (undo-tree-id330 . -37) (undo-tree-id331 . -37)) nil (25817 8088 905682 547000) 0 nil])
([nil nil ((#("#[derive(Component)]
struct FlyCamera;

fn setup_camera(mut commands: Commands) {
    commands.spawn((
        Camera3dBundle {
            transform: Transform::from_xyz(4.0, 4.0, 4.0).looking_at(Vec3::ZERO, Vec3::Y),
            ..default()
        },
        FlyCamera,
    ));
    commands.spawn(PointLightBundle {
        point_light: PointLight {
            intensity: 1500.0,
            shadows_enabled: true,
            ..default()
        },
        transform: Transform::from_xyz(4.0, 8.0, 4.0),
        ..default()
    });
}

" 0 20 (fontified t face font-lock-preprocessor-face) 20 21 (fontified t) 21 27 (fontified t face font-lock-keyword-face) 27 28 (fontified t) 28 37 (fontified t face font-lock-type-face) 37 40 (fontified t) 40 42 (fontified t face font-lock-keyword-face) 42 43 (fontified t) 43 55 (fontified t face font-lock-function-name-face) 55 56 (fontified t) 56 59 (fontified t face font-lock-keyword-face) 59 60 (fontified t) 60 68 (fontified t face font-lock-variable-name-face) 68 70 (fontified t) 70 78 (fontified t face font-lock-type-face) 78 111 (fontified t) 111 125 (fontified t face font-lock-type-face) 125 140 (fontified t) 140 149 (fontified t face font-lock-variable-name-face) 149 151 (fontified t) 151 160 (fontified t face font-lock-type-face) 160 197 (fontified t) 197 201 (fontified t face font-lock-type-face) 201 203 (fontified t) 203 207 (fontified t face font-lock-type-face) 207 209 (fontified t) 209 213 (fontified t face font-lock-type-face) 213 215 (fontified t) 215 216 (fontified t face font-lock-type-face) 216 262 (fontified t) 262 271 (fontified t face font-lock-type-face) 271 300 (fontified t) 300 316 (fontified t face font-lock-type-face) 316 327 (fontified t) 327 338 (fontified t face font-lock-variable-name-face) 338 340 (fontified t) 340 350 (fontified t face font-lock-type-face) 350 365 (fontified t) 365 374 (fontified t face font-lock-variable-name-face) 374 396 (fontified t) 396 411 (fontified t face font-lock-variable-name-face) 411 413 (fontified t) 413 417 (fontified t face font-lock-keyword-face) 417 462 (fontified t) 462 471 (fontified t face font-lock-variable-name-face) 471 473 (fontified t) 473 482 (fontified t face font-lock-type-face) 482 540 (fontified t)) . 194) (undo-tree-id323 . -539) (undo-tree-id324 . -539) (undo-tree-id325 . -539) (undo-tree-id326 . -539) (undo-tree-id327 . -539) 733) nil (25817 8088 905680 22000) 0 nil])
([nil nil ((#("fn camera_move(
    mut transform: Query<&mut Transform, With<FlyCamera>>,
    time: Res<Time>,
    keys: Res<Input<KeyCode>>,
) {
    let mut transform = transform
        .get_single_mut()
        .expect(\"Only one camera with FlyCamera\");
    let mut velocity = Vec3::ZERO;
    for key in keys.get_pressed() {
        match key {
            KeyCode::Comma => velocity += transform.forward(),
            KeyCode::O => velocity -= transform.forward(),
            KeyCode::E => velocity += transform.right(),
            KeyCode::A => velocity -= transform.right(),
            KeyCode::Space => velocity += Vec3::Y,
            KeyCode::ShiftLeft => velocity -= Vec3::Y,
            _ => (),
        }
    }
    transform.translation += velocity.normalize_or_zero() * time.delta_seconds() * 2.0;
}

fn camera_look(
    mut transform: Query<&mut Transform, With<FlyCamera>>,
    window: Query<&Window, With<PrimaryWindow>>,
    mut mouse_motion: EventReader<MouseMotion>,
) {
    let window = window.get_single().expect(\"Failed to find a window\");
    let mut transform = transform
        .get_single_mut()
        .expect(\"Only one camera with FlyCamera\");

    for event in mouse_motion.iter() {
        let (mut yaw, mut pitch, _) = transform.rotation.to_euler(EulerRot::YXZ);
        let window_scale = window.height().min(window.width());
        pitch -= (0.0001 * event.delta.y * window_scale).to_radians();
        yaw -= (0.0001 * event.delta.x * window_scale).to_radians();
        pitch = pitch.clamp(-1.54, 1.54);
        transform.rotation =
            Quat::from_axis_angle(Vec3::Y, yaw) * Quat::from_axis_angle(Vec3::X, pitch);
    }
}

fn toggle_grab_cursor(window: &mut Window) {
    if window.cursor.grab_mode == CursorGrabMode::None {
        window.cursor.grab_mode = CursorGrabMode::Confined;
        window.cursor.visible = false;
    } else {
        window.cursor.grab_mode = CursorGrabMode::None;
        window.cursor.visible = true;
    }
}

fn initial_grab_cursor(mut window: Query<&mut Window, With<PrimaryWindow>>) {
    let mut window = window.get_single_mut().expect(\"Failed to find window\");
    toggle_grab_cursor(&mut window);
}

fn grab_cursor(mut window: Query<&mut Window, With<PrimaryWindow>>, keys: Res<Input<KeyCode>>) {
    let mut window = window.get_single_mut().expect(\"Failed to find window\");
    if keys.just_pressed(KeyCode::Tab) {
        toggle_grab_cursor(&mut window);
    }
}

" 0 2 (fontified t face font-lock-keyword-face) 2 3 (fontified t) 3 14 (fontified t face font-lock-function-name-face) 14 20 (fontified t) 20 23 (fontified t face font-lock-keyword-face) 23 24 (fontified t) 24 33 (fontified t face font-lock-variable-name-face) 33 35 (fontified t) 35 40 (fontified t face font-lock-type-face) 40 41 (fontified t) 41 42 (fontified t face rust-ampersand-face) 42 45 (fontified t face font-lock-keyword-face) 45 46 (fontified t) 46 55 (fontified t face font-lock-type-face) 55 57 (fontified t) 57 61 (fontified t face font-lock-type-face) 61 62 (fontified t) 62 71 (fontified t face font-lock-type-face) 71 79 (fontified t) 79 83 (fontified t face font-lock-variable-name-face) 83 85 (fontified t) 85 88 (fontified t face font-lock-type-face) 88 89 (fontified t) 89 93 (fontified t face font-lock-type-face) 93 100 (fontified t) 100 104 (fontified t face font-lock-variable-name-face) 104 106 (fontified t) 106 109 (fontified t face font-lock-type-face) 109 110 (fontified t) 110 115 (fontified t face font-lock-type-face) 115 116 (fontified t) 116 123 (fontified t face font-lock-type-face) 123 135 (fontified t) 135 138 (fontified t face font-lock-keyword-face) 138 139 (fontified t) 139 142 (fontified t face font-lock-keyword-face) 142 143 (fontified t) 143 152 (fontified t face font-lock-variable-name-face) 152 207 (fontified t) 207 239 (fontified t face font-lock-string-face) 239 246 (fontified t) 246 249 (fontified t face font-lock-keyword-face) 249 250 (fontified t) 250 253 (fontified t face font-lock-keyword-face) 253 254 (fontified t) 254 262 (fontified t face font-lock-variable-name-face) 262 265 (fontified t) 265 269 (fontified t face font-lock-type-face) 269 271 (fontified t) 271 275 (fontified t face font-lock-type-face) 275 277 (fontified t) 277 281 (fontified t) 281 284 (fontified t face font-lock-keyword-face) 284 285 (fontified t) 285 288 (fontified t face font-lock-variable-name-face) 288 289 (fontified t) 289 291 (fontified t face font-lock-keyword-face) 291 307 (fontified t) 307 313 (fontified t) 313 321 (fontified t) 321 326 (fontified t face font-lock-keyword-face) 326 333 (fontified t) 333 345 (fontified t) 345 352 (fontified t face font-lock-type-face) 352 354 (fontified t) 354 359 (fontified t face font-lock-type-face) 359 361 (fontified t) 361 362 (syntax-table (1) fontified t) 362 385 (fontified t) 385 394 (fontified t) 394 396 (fontified t) 396 408 (fontified t) 408 415 (fontified t face font-lock-type-face) 415 417 (fontified t) 417 418 (fontified t face font-lock-type-face) 418 420 (fontified t) 420 421 (syntax-table (1) fontified t) 421 434 (fontified t) 434 444 (fontified t) 444 453 (fontified t) 453 455 (fontified t) 455 467 (fontified t) 467 474 (fontified t face font-lock-type-face) 474 476 (fontified t) 476 477 (fontified t face font-lock-type-face) 477 479 (fontified t) 479 480 (syntax-table (1) fontified t) 480 510 (fontified t) 510 512 (fontified t) 512 524 (fontified t) 524 531 (fontified t face font-lock-type-face) 531 533 (fontified t) 533 534 (fontified t face font-lock-type-face) 534 536 (fontified t) 536 537 (syntax-table (1) fontified t) 537 567 (fontified t) 567 569 (fontified t) 569 581 (fontified t) 581 588 (fontified t face font-lock-type-face) 588 590 (fontified t) 590 595 (fontified t face font-lock-type-face) 595 597 (fontified t) 597 598 (syntax-table (1) fontified t) 598 611 (fontified t) 611 615 (fontified t face font-lock-type-face) 615 617 (fontified t) 617 618 (fontified t face font-lock-type-face) 618 632 (fontified t) 632 639 (fontified t face font-lock-type-face) 639 641 (fontified t) 641 650 (fontified t face font-lock-type-face) 650 652 (fontified t) 652 653 (syntax-table (1) fontified t) 653 666 (fontified t) 666 670 (fontified t face font-lock-type-face) 670 672 (fontified t) 672 673 (fontified t face font-lock-type-face) 673 690 (fontified t) 690 691 (syntax-table (1) fontified t) 691 712 (fontified t) 712 800 (fontified t) 800 803 (fontified t) 803 805 (fontified t face font-lock-keyword-face) 805 806 (fontified t) 806 817 (fontified t face font-lock-function-name-face) 817 823 (fontified t) 823 826 (fontified t face font-lock-keyword-face) 826 827 (fontified t) 827 836 (fontified t face font-lock-variable-name-face) 836 838 (fontified t) 838 843 (fontified t face font-lock-type-face) 843 844 (fontified t) 844 845 (fontified t face rust-ampersand-face) 845 848 (fontified t face font-lock-keyword-face) 848 849 (fontified t) 849 858 (fontified t face font-lock-type-face) 858 860 (fontified t) 860 864 (fontified t face font-lock-type-face) 864 865 (fontified t) 865 874 (fontified t face font-lock-type-face) 874 882 (fontified t) 882 888 (fontified t face font-lock-variable-name-face) 888 890 (fontified t) 890 895 (fontified t face font-lock-type-face) 895 896 (fontified t) 896 897 (fontified t face rust-ampersand-face) 897 903 (fontified t face font-lock-type-face) 903 905 (fontified t) 905 909 (fontified t face font-lock-type-face) 909 910 (fontified t) 910 923 (fontified t face font-lock-type-face) 923 931 (fontified t) 931 934 (fontified t face font-lock-keyword-face) 934 935 (fontified t) 935 941 (fontified t face font-lock-variable-name-face) 941 947 (fontified t face font-lock-variable-name-face) 947 949 (fontified t) 949 960 (fontified t face font-lock-type-face) 960 961 (fontified t) 961 972 (fontified t face font-lock-type-face) 972 975 (fontified t) 975 983 (fontified t) 983 986 (fontified t face font-lock-keyword-face) 986 987 (fontified t) 987 993 (fontified t face font-lock-variable-name-face) 993 1023 (fontified t) 1023 1048 (fontified t face font-lock-string-face) 1048 1055 (fontified t) 1055 1058 (fontified t face font-lock-keyword-face) 1058 1059 (fontified t) 1059 1062 (fontified t face font-lock-keyword-face) 1062 1063 (fontified t) 1063 1072 (fontified t face font-lock-variable-name-face) 1072 1127 (fontified t) 1127 1159 (fontified t face font-lock-string-face) 1159 1167 (fontified t) 1167 1170 (fontified t face font-lock-keyword-face) 1170 1171 (fontified t) 1171 1176 (fontified t face font-lock-variable-name-face) 1176 1177 (fontified t) 1177 1179 (fontified t face font-lock-keyword-face) 1179 1210 (fontified t) 1210 1213 (fontified t face font-lock-keyword-face) 1213 1215 (fontified t) 1215 1218 (fontified t face font-lock-keyword-face) 1218 1224 (fontified t) 1224 1227 (fontified t face font-lock-keyword-face) 1227 1268 (fontified t) 1268 1276 (fontified t face font-lock-type-face) 1276 1278 (fontified t) 1278 1281 (fontified t face font-lock-type-face) 1281 1292 (fontified t) 1292 1295 (fontified t face font-lock-keyword-face) 1295 1296 (fontified t) 1296 1308 (fontified t face font-lock-variable-name-face) 1308 1348 (fontified t) 1348 1419 (fontified t) 1419 1488 (fontified t) 1488 1571 (fontified t) 1571 1575 (fontified t face font-lock-type-face) 1575 1593 (fontified t) 1593 1597 (fontified t face font-lock-type-face) 1597 1599 (fontified t) 1599 1600 (fontified t face font-lock-type-face) 1600 1609 (fontified t) 1609 1613 (fontified t face font-lock-type-face) 1613 1631 (fontified t) 1631 1635 (fontified t face font-lock-type-face) 1635 1637 (fontified t) 1637 1638 (fontified t face font-lock-type-face) 1638 1657 (fontified t) 1657 1659 (fontified t face font-lock-keyword-face) 1659 1660 (fontified t) 1660 1678 (fontified t face font-lock-function-name-face) 1678 1679 (fontified t) 1679 1685 (fontified t face font-lock-variable-name-face) 1685 1687 (fontified t) 1687 1688 (fontified t face rust-ampersand-face) 1688 1691 (fontified t face font-lock-keyword-face) 1691 1692 (fontified t) 1692 1698 (fontified t face font-lock-type-face) 1698 1706 (fontified t) 1706 1708 (fontified t face font-lock-keyword-face) 1708 1736 (fontified t) 1736 1750 (fontified t face font-lock-type-face) 1750 1752 (fontified t) 1752 1756 (fontified t face font-lock-type-face) 1756 1774 (fontified t) 1774 1793 (fontified t) 1793 1807 (fontified t face font-lock-type-face) 1807 1809 (fontified t) 1809 1811 (fontified t face font-lock-type-face) 1811 1813 (fontified t face font-lock-type-face) 1813 1817 (face font-lock-type-face fontified t) 1817 1819 (fontified t) 1819 1851 (fontified t) 1851 1856 (fontified t face font-lock-keyword-face) 1856 1864 (fontified t) 1864 1868 (fontified t face font-lock-keyword-face) 1868 1903 (fontified t) 1903 1905 (fontified t) 1905 1917 (fontified t face font-lock-type-face) 1917 1919 (fontified t face font-lock-type-face) 1919 1921 (fontified t) 1921 1925 (fontified t face font-lock-type-face) 1925 1927 (fontified t) 1927 1959 (fontified t) 1959 1962 (fontified t face font-lock-keyword-face) 1962 1963 (fontified t face font-lock-keyword-face) 1963 1965 (fontified t) 1965 1974 (fontified t) 1974 1976 (fontified t face font-lock-keyword-face) 1976 1977 (fontified t) 1977 1996 (fontified t face font-lock-function-name-face) 1996 1997 (fontified t) 1997 2000 (fontified t face font-lock-keyword-face) 2000 2001 (fontified t) 2001 2007 (fontified t face font-lock-variable-name-face) 2007 2009 (fontified t) 2009 2014 (fontified t face font-lock-type-face) 2014 2015 (fontified t) 2015 2016 (fontified t face rust-ampersand-face) 2016 2019 (fontified t face font-lock-keyword-face) 2019 2020 (fontified t) 2020 2021 (fontified t face font-lock-type-face) 2021 2026 (fontified t face font-lock-type-face) 2026 2028 (fontified t) 2028 2032 (fontified t face font-lock-type-face) 2032 2033 (fontified t) 2033 2046 (fontified t face font-lock-type-face) 2046 2052 (fontified t) 2052 2056 (fontified t) 2056 2059 (fontified t face font-lock-keyword-face) 2059 2060 (fontified t) 2060 2063 (fontified t face font-lock-keyword-face) 2063 2064 (fontified t) 2064 2066 (fontified t face font-lock-variable-name-face) 2066 2070 (fontified t face font-lock-variable-name-face) 2070 2104 (fontified t) 2104 2127 (fontified t face font-lock-string-face) 2127 2130 (fontified t) 2130 2153 (fontified t) 2153 2154 (fontified t face rust-ampersand-face) 2154 2157 (fontified t face font-lock-keyword-face) 2157 2170 (fontified t) 2170 2172 (fontified t face font-lock-keyword-face) 2172 2173 (fontified t) 2173 2184 (fontified t face font-lock-function-name-face) 2184 2185 (fontified t) 2185 2188 (fontified t face font-lock-keyword-face) 2188 2189 (fontified t) 2189 2195 (fontified t face font-lock-variable-name-face) 2195 2197 (fontified t) 2197 2202 (fontified t face font-lock-type-face) 2202 2203 (fontified t) 2203 2204 (fontified t face rust-ampersand-face) 2204 2207 (fontified t face font-lock-keyword-face) 2207 2208 (fontified t) 2208 2210 (fontified t face font-lock-type-face) 2210 2214 (fontified t face font-lock-type-face) 2214 2216 (fontified t) 2216 2220 (fontified t face font-lock-type-face) 2220 2221 (fontified t) 2221 2234 (fontified t face font-lock-type-face) 2234 2238 (fontified t) 2238 2242 (fontified t face font-lock-variable-name-face) 2242 2244 (fontified t) 2244 2247 (fontified t face font-lock-type-face) 2247 2248 (fontified t) 2248 2253 (fontified t face font-lock-type-face) 2253 2254 (fontified t) 2254 2261 (fontified t face font-lock-type-face) 2261 2267 (fontified t) 2267 2271 (fontified t) 2271 2274 (fontified t face font-lock-keyword-face) 2274 2275 (fontified t) 2275 2278 (fontified t face font-lock-keyword-face) 2278 2279 (fontified t) 2279 2285 (fontified t face font-lock-variable-name-face) 2285 2298 (fontified t) 2298 2319 (fontified t) 2319 2342 (fontified t face font-lock-string-face) 2342 2345 (fontified t) 2345 2349 (fontified t) 2349 2351 (fontified t face font-lock-keyword-face) 2351 2370 (fontified t) 2370 2377 (fontified t face font-lock-type-face) 2377 2379 (fontified t) 2379 2382 (fontified t face font-lock-type-face) 2382 2413 (fontified t) 2413 2414 (fontified t face rust-ampersand-face) 2414 2417 (fontified t face font-lock-keyword-face) 2417 2436 (fontified t)) . 2949) (undo-tree-id305 . -2435) (undo-tree-id306 . -2435) (undo-tree-id307 . -375) (undo-tree-id308 . -375) (undo-tree-id309 . -493) (undo-tree-id310 . -493) (undo-tree-id311 . -550) (undo-tree-id312 . -550) (undo-tree-id313 . -2435) (undo-tree-id314 . -2435) (undo-tree-id315 . -712) (undo-tree-id316 . -2435) (undo-tree-id317 . -16) (undo-tree-id318 . -802) (undo-tree-id319 . -1162) (undo-tree-id320 . -1656) (undo-tree-id321 . -1973) (undo-tree-id322 . -2169) 5384) nil (25817 8088 905676 165000) 0 nil])
([nil nil ((86 . 87) (71 . 86) (#("Fly" 0 3 (fontified t face font-lock-type-face)) . -71) (undo-tree-id293 . -3) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -2) (undo-tree-id297 . -2) (undo-tree-id298 . -3) (undo-tree-id299 . -3) (undo-tree-id300 . -3) (undo-tree-id301 . -3) (undo-tree-id302 . -3) (undo-tree-id303 . -3) (undo-tree-id304 . -3) 74 (63 . 74) (59 . 63) (58 . 59) 47) nil (25817 8088 905666 156000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t)) . 5745) (undo-tree-id291 . -1) (undo-tree-id292 . -1)) nil (25817 8088 905659 243000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . 5745) (undo-tree-id289 . -1) (undo-tree-id290 . -1)) nil (25817 8088 905657 300000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t)) . 5745) (undo-tree-id287 . -1) (undo-tree-id288 . -1)) nil (25817 8088 905655 466000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . 5745) (undo-tree-id285 . -1) (undo-tree-id286 . -1)) nil (25817 8088 905653 342000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . 5745) (undo-tree-id283 . -1) (undo-tree-id284 . -1)) nil (25817 8088 905651 348000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . 5745) (undo-tree-id281 . -1) (undo-tree-id282 . -1)) nil (25817 8088 905649 916000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . 5745) (undo-tree-id279 . -1) (undo-tree-id280 . -1)) nil (25817 8088 905648 353000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t face font-lock-keyword-face)) . 5745) (undo-tree-id277 . -1) (undo-tree-id278 . -1)) nil (25817 8088 905646 810000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . 5745) (undo-tree-id275 . -1) (undo-tree-id276 . -1)) nil (25817 8088 905641 891000) 0 nil])
([nil nil ((#("v" 0 1 (fontified t)) . 5745) (undo-tree-id273 . -1) (undo-tree-id274 . -1)) nil (25817 8088 905640 338000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . 5745) (undo-tree-id271 . -1) (undo-tree-id272 . -1)) nil (25817 8088 905638 805000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . 5745) (undo-tree-id269 . -1) (undo-tree-id270 . -1)) nil (25817 8088 905637 21000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 5745) (undo-tree-id267 . -1) (undo-tree-id268 . -1)) nil (25817 8088 905635 218000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t)) . 5745) (undo-tree-id265 . -1) (undo-tree-id266 . -1)) nil (25817 8088 905633 545000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . 5745) (undo-tree-id263 . -1) (undo-tree-id264 . -1)) nil (25817 8088 905632 52000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t)) . 5745) (undo-tree-id261 . -1) (undo-tree-id262 . -1)) nil (25817 8088 905630 650000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . 5745) (undo-tree-id259 . -1) (undo-tree-id260 . -1)) nil (25817 8088 905629 107000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . 5745) (undo-tree-id257 . -1) (undo-tree-id258 . -1)) nil (25817 8088 905627 584000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . 5745) (undo-tree-id255 . -1) (undo-tree-id256 . -1)) nil (25817 8088 905625 931000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . 5745) (undo-tree-id253 . -1) (undo-tree-id254 . -1)) nil (25817 8088 905624 358000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . 5745) (undo-tree-id251 . -1) (undo-tree-id252 . -1)) nil (25817 8088 905622 604000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . 5745) (undo-tree-id249 . -1) (undo-tree-id250 . -1)) nil (25817 8088 905620 791000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . 5745) (undo-tree-id247 . -1) (undo-tree-id248 . -1)) nil (25817 8088 905618 857000) 0 nil])
([nil nil ((#("k" 0 1 (fontified t)) . 5745) (undo-tree-id245 . -1) (undo-tree-id246 . -1)) nil (25817 8088 905617 335000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . 5745) (undo-tree-id243 . -1) (undo-tree-id244 . -1)) nil (25817 8088 905615 842000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 5745) (undo-tree-id241 . -1) (undo-tree-id242 . -1)) nil (25817 8088 905614 199000) 0 nil])
([nil nil ((#("g" 0 1 (fontified t)) . 5745) (undo-tree-id239 . -1) (undo-tree-id240 . -1)) nil (25817 8088 905612 105000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . 5745) (undo-tree-id237 . -1) (undo-tree-id238 . -1)) nil (25817 8088 905610 582000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . 5745) (undo-tree-id235 . -1) (undo-tree-id236 . -1)) nil (25817 8088 905608 799000) 0 nil])
([nil nil ((#("b" 0 1 (fontified t)) . 5745) (undo-tree-id233 . -1) (undo-tree-id234 . -1)) nil (25817 8088 905607 266000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . 5745) (undo-tree-id231 . -1) (undo-tree-id232 . -1)) nil (25817 8088 905605 542000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t)) . 5745) (undo-tree-id229 . -1) (undo-tree-id230 . -1)) nil (25817 8088 905603 779000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t)) . 5745) (undo-tree-id227 . -1) (undo-tree-id228 . -1)) nil (25817 8088 905601 996000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . 5745) (undo-tree-id225 . -1) (undo-tree-id226 . -1)) nil (25817 8088 905600 132000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . 5745) (undo-tree-id223 . -1) (undo-tree-id224 . -1)) nil (25817 8088 905598 619000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . 5745) (undo-tree-id221 . -1) (undo-tree-id222 . -1)) nil (25817 8088 905597 187000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . 5745) (undo-tree-id219 . -1) (undo-tree-id220 . -1)) nil (25817 8088 905595 724000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . 5745) (undo-tree-id217 . -1) (undo-tree-id218 . -1)) nil (25817 8088 905594 241000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 5745) (undo-tree-id215 . -1) (undo-tree-id216 . -1)) nil (25817 8088 905592 658000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . 5640) (undo-tree-id213 . -1) (undo-tree-id214 . -1)) nil (25817 8088 905590 905000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . 5640) (undo-tree-id211 . -1) (undo-tree-id212 . -1)) nil (25817 8088 905589 182000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . 5640) (undo-tree-id209 . -1) (undo-tree-id210 . -1)) nil (25817 8088 905587 398000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t)) . 5640) (undo-tree-id207 . -1) (undo-tree-id208 . -1)) nil (25817 8088 905585 635000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . 5640) (undo-tree-id205 . -1) (undo-tree-id206 . -1)) nil (25817 8088 905583 421000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . 5640) (undo-tree-id203 . -1) (undo-tree-id204 . -1)) nil (25817 8088 905580 415000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t)) . 5640) (undo-tree-id201 . -1) (undo-tree-id202 . -1)) nil (25817 8088 905578 923000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . 5640) (undo-tree-id199 . -1) (undo-tree-id200 . -1)) nil (25817 8088 905577 480000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t)) . 5640) (undo-tree-id197 . -1) (undo-tree-id198 . -1)) nil (25817 8088 905575 907000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . 5640) (undo-tree-id195 . -1) (undo-tree-id196 . -1)) nil (25817 8088 905574 484000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . 5640) (undo-tree-id193 . -1) (undo-tree-id194 . -1)) nil (25817 8088 905573 21000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . 5640) (undo-tree-id191 . -1) (undo-tree-id192 . -1)) nil (25817 8088 905571 368000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . 5640) (undo-tree-id189 . -1) (undo-tree-id190 . -1)) nil (25817 8088 905569 765000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 5640) (undo-tree-id187 . -1) (undo-tree-id188 . -1)) nil (25817 8088 905568 62000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . 5640) (undo-tree-id185 . -1) (undo-tree-id186 . -1)) nil (25817 8088 905566 459000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . 5640) (undo-tree-id183 . -1) (undo-tree-id184 . -1)) nil (25817 8088 905563 904000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . 5640) (undo-tree-id181 . -1) (undo-tree-id182 . -1)) nil (25817 8088 905562 101000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . 5640) (undo-tree-id179 . -1) (undo-tree-id180 . -1)) nil (25817 8088 905560 688000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . 5640) (undo-tree-id177 . -1) (undo-tree-id178 . -1)) nil (25817 8088 905559 105000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . 5640) (undo-tree-id175 . -1) (undo-tree-id176 . -1)) nil (25817 8088 905557 512000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . 5640) (undo-tree-id173 . -1) (undo-tree-id174 . -1)) nil (25817 8088 905556 70000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . 5640) (undo-tree-id171 . -1) (undo-tree-id172 . -1)) nil (25817 8088 905554 497000) 0 nil])
([nil nil ((#("g" 0 1 (fontified t)) . 5640) (undo-tree-id169 . -1) (undo-tree-id170 . -1)) nil (25817 8088 905553 14000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . 5640) (undo-tree-id167 . -1) (undo-tree-id168 . -1)) nil (25817 8088 905551 561000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . 5640) (undo-tree-id165 . -1) (undo-tree-id166 . -1)) nil (25817 8088 905549 888000) 0 nil])
([nil nil ((#("b" 0 1 (fontified t)) . 5640) (undo-tree-id163 . -1) (undo-tree-id164 . -1)) nil (25817 8088 905547 554000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . 5640) (undo-tree-id161 . -1) (undo-tree-id162 . -1)) nil (25817 8088 905545 770000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t)) . 5640) (undo-tree-id159 . -1) (undo-tree-id160 . -1)) nil (25817 8088 905544 97000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t)) . 5640) (undo-tree-id157 . -1) (undo-tree-id158 . -1)) nil (25817 8088 905541 723000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . 5640) (undo-tree-id155 . -1) (undo-tree-id156 . -1)) nil (25817 8088 905333 622000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . 5640) (undo-tree-id153 . -1) (undo-tree-id154 . -1)) nil (25817 8088 905332 39000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . 5640) (undo-tree-id151 . -1) (undo-tree-id152 . -1)) nil (25817 8088 905330 386000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . 5640) (undo-tree-id149 . -1) (undo-tree-id150 . -1)) nil (25817 8088 905328 663000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . 5640) (undo-tree-id147 . -1) (undo-tree-id148 . -1)) nil (25817 8088 905326 900000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 5640) (undo-tree-id145 . -1) (undo-tree-id146 . -1)) nil (25817 8088 905325 6000) 0 nil])
([nil nil ((5467 . 5469) (5465 . 5467) 5460) nil (25817 8088 905323 143000) 0 nil])
([nil nil ((#("	.a
" 0 3 (fontified t) 3 4 (fontified t)) . 5466) (undo-tree-id122 . -3) (undo-tree-id123 . 1) (undo-tree-id124 . -2) (undo-tree-id125 . -4) (undo-tree-id126 . -4) (undo-tree-id127 . -4) (undo-tree-id128 . -4) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -2) (undo-tree-id132 . -2) (undo-tree-id133 . -3) (undo-tree-id134 . -3) (undo-tree-id135 . -3) (undo-tree-id136 . -3) (undo-tree-id137 . -2) (undo-tree-id138 . -2) (undo-tree-id139 . -2) (undo-tree-id140 . -2) (undo-tree-id141 . -2) (undo-tree-id142 . -2) (undo-tree-id143 . -2) (undo-tree-id144 . -4) 5468) nil (25817 8088 905320 929000) 0 nil])
([nil nil ((5450 . 5451)) nil (25817 8088 905307 503000) 0 nil])
([nil nil ((5482 . 5483) (5467 . 5482) (#("F" 0 1 (fontified t face font-lock-type-face)) . -5467) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) 5468 (5465 . 5468)) nil (25817 8088 905305 670000) 0 nil])
([nil nil ((#("
            " 0 13 (fontified t)) . 5695) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (#("
    " 0 1 (fontified t) 1 5 (fontified t)) . 5715) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (#("       " 0 7 (fontified t)) . 5721) (#(",
        " 0 2 (fontified t) 2 10 (fontified t)) . 5744) (undo-tree-id112 . -2) (undo-tree-id113 . -2) 5482) nil (25817 8088 905296 713000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t)) . 5671) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . 1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (t 25817 8088 909384 830000)) nil (25817 8130 552008 907000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t)) . 5658) (undo-tree-id355 . 1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1)) nil (25817 8130 552003 257000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t)) . 5701) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . 1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1)) nil (25817 8130 551999 109000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t)) . 5715) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (undo-tree-id345 . 1) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (undo-tree-id348 . -1)) nil (25817 8130 551992 6000) 0 nil])
([nil nil ((#("                print!(\"X\");
" 0 16 (fontified t) 16 22 (fontified t face rust-builtin-formatting-macro) 22 23 (fontified t) 23 26 (fontified t face font-lock-string-face) 26 29 (fontified t)) . 4281) (undo-tree-id401 . -28) (undo-tree-id402 . -27) (undo-tree-id403 . -27) (undo-tree-id404 . -27) (undo-tree-id405 . -27) (undo-tree-id406 . -27) (undo-tree-id407 . -27) (undo-tree-id408 . -27) (undo-tree-id409 . -27) (undo-tree-id410 . -27) (undo-tree-id411 . -27) (undo-tree-id412 . -27) (undo-tree-id413 . -27) (undo-tree-id414 . -27) (undo-tree-id415 . -27) (undo-tree-id416 . -29) 4308 (t 25817 8130 552718 780000)) nil (25817 8166 858478 138000) 0 nil])
([nil nil ((#("                print!(\"#\");
" 0 16 (fontified t) 16 22 (fontified t face rust-builtin-formatting-macro) 22 23 (fontified t) 23 26 (fontified t face font-lock-string-face) 26 29 (fontified t)) . 4652) (undo-tree-id383 . -28) (undo-tree-id384 . -27) (undo-tree-id385 . -27) (undo-tree-id386 . -27) (undo-tree-id387 . -27) (undo-tree-id388 . -27) (undo-tree-id389 . -27) (undo-tree-id390 . -27) (undo-tree-id391 . -27) (undo-tree-id392 . -27) (undo-tree-id393 . -27) (undo-tree-id394 . -27) (undo-tree-id395 . -27) (undo-tree-id396 . -27) (undo-tree-id397 . -27) (undo-tree-id398 . -27) (undo-tree-id399 . -27) (undo-tree-id400 . -29) 4679) nil (25817 8166 858467 929000) 0 nil])
([nil nil ((5600 . 5601)) nil (25817 8166 858455 405000) 0 nil])
([nil nil ((5625 . 5626) (5615 . 5625) (#("print" 0 5 (fontified t)) . -5615) (undo-tree-id368 . -5) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -2) (undo-tree-id372 . -2) (undo-tree-id373 . -4) (undo-tree-id374 . -4) (undo-tree-id375 . -5) (undo-tree-id376 . -5) (undo-tree-id377 . -5) (undo-tree-id378 . -5) (undo-tree-id379 . -5) (undo-tree-id380 . -5) (undo-tree-id381 . -5) 5620 (5617 . 5620) (#("i" 0 1 (fontified t)) . -5617) (undo-tree-id382 . -1) (5613 . 5618)) nil (25817 8166 858447 911000) 0 nil])
([nil nil ((#("#[derive(Clone)]
struct Cell {
    visited: bool,
}

impl Cell {
    fn new() -> Self {
        Cell { visited: false }
    }
}

#[derive(Component)]
struct Grid {
    width: usize,
    height: usize,
    grid: Vec<Vec<Cell>>,
    stack: Vec<(usize, usize)>,
    visited_cells: usize,
    path_width: usize,
}

impl Grid {
    fn new(width: usize, height: usize, path_width: usize) -> Self {
        Grid {
            width,
            height,
            grid: vec![vec![Cell::new(); width]; height],
            stack: vec![],
            visited_cells: 0,
            path_width,
        }
    }
}

fn create_grid(mut commands: Commands) {
    let mut grid = Grid::new(16, 16, 3);
    grid.grid[0][0].visited = true;
    grid.stack.push((0, 0));
    grid.visited_cells += 1;

    commands.spawn(grid);
}

fn display_grid(
    grid: Query<&Grid>,
    mut commands: Commands,
    mut meshes: ResMut<Assets<Mesh>>,
    mut materials: ResMut<Assets<StandardMaterial>>,
) {
    let grid = grid.single();
    for (row_i, row) in grid.grid.iter().enumerate() {
        for (col_i, cell) in row.iter().enumerate() {
            if cell.visited {
                commands.spawn(PbrBundle {
                    mesh: meshes.add(Mesh::from(shape::Cube { size: 0.1 })),
                    material: materials.add(Color::rgb(1.0, 1.0, 1.0).into()),
                    transform: Transform::from_xyz(row_i as f32 / 10.0, 1.0, col_i as f32 / 10.0),
                    ..default()
                });
            } else {
                commands.spawn(PbrBundle {
                    mesh: meshes.add(Mesh::from(shape::Cube { size: 0.1 })),
                    material: materials.add(Color::rgb(0.0, 0.0, 1.0).into()),
                    transform: Transform::from_xyz(row_i as f32 / 10.0, 1.0, col_i as f32 / 10.0),
                    ..default()
                });
            }
        }
        println!();
    }
}

fn print_grid(grid: Query<&Grid>) {
    let grid = grid.single();
    for row in grid.grid.clone() {
        for cell in row {
            if cell.visited {
                print!(\"X\");
            } else {
                print!(\"#\");
            }
        }
        println!();
    }
}
" 0 16 (fontified t face font-lock-preprocessor-face) 16 17 (fontified t) 17 23 (fontified t face font-lock-keyword-face) 23 24 (fontified t) 24 28 (fontified t face font-lock-type-face) 28 35 (fontified t) 35 42 (fontified t face font-lock-variable-name-face) 42 44 (fontified t) 44 48 (fontified t face font-lock-type-face) 48 53 (fontified t) 53 57 (fontified t face font-lock-keyword-face) 57 58 (fontified t) 58 62 (fontified t face font-lock-type-face) 62 69 (fontified t) 69 71 (fontified t face font-lock-keyword-face) 71 72 (fontified t) 72 75 (fontified t face font-lock-function-name-face) 75 79 (fontified t) 79 80 (syntax-table (1) fontified t) 80 81 (fontified t) 81 85 (fontified t face font-lock-type-face) 85 88 (fontified t) 88 96 (fontified t) 96 100 (fontified t face font-lock-type-face) 100 103 (fontified t) 103 110 (fontified t face font-lock-variable-name-face) 110 112 (fontified t) 112 117 (fontified t face font-lock-keyword-face) 117 120 (fontified t) 120 126 (fontified t) 126 129 (fontified t) 129 149 (fontified t face font-lock-preprocessor-face) 149 150 (fontified t) 150 156 (fontified t face font-lock-keyword-face) 156 157 (fontified t) 157 161 (fontified t face font-lock-type-face) 161 168 (fontified t) 168 173 (fontified t face font-lock-variable-name-face) 173 175 (fontified t) 175 180 (fontified t face font-lock-type-face) 180 186 (fontified t) 186 192 (fontified t face font-lock-variable-name-face) 192 194 (fontified t) 194 199 (fontified t face font-lock-type-face) 199 205 (fontified t) 205 209 (fontified t face font-lock-variable-name-face) 209 211 (fontified t) 211 214 (fontified t face font-lock-type-face) 214 215 (fontified t) 215 218 (fontified t face font-lock-type-face) 218 219 (fontified t) 219 223 (fontified t face font-lock-type-face) 223 231 (fontified t) 231 236 (fontified t face font-lock-variable-name-face) 236 238 (fontified t) 238 241 (fontified t face font-lock-type-face) 241 243 (fontified t) 243 248 (fontified t face font-lock-type-face) 248 250 (fontified t) 250 255 (fontified t face font-lock-type-face) 255 263 (fontified t) 263 276 (fontified t face font-lock-variable-name-face) 276 278 (fontified t) 278 283 (fontified t face font-lock-type-face) 283 289 (fontified t) 289 299 (fontified t face font-lock-variable-name-face) 299 301 (fontified t) 301 306 (fontified t face font-lock-type-face) 306 308 (fontified t) 308 311 (fontified t) 311 315 (fontified t face font-lock-keyword-face) 315 316 (fontified t) 316 320 (fontified t face font-lock-type-face) 320 327 (fontified t) 327 329 (fontified t face font-lock-keyword-face) 329 330 (fontified t) 330 333 (fontified t face font-lock-function-name-face) 333 334 (fontified t) 334 339 (fontified t face font-lock-variable-name-face) 339 341 (fontified t) 341 346 (fontified t face font-lock-type-face) 346 348 (fontified t) 348 354 (fontified t face font-lock-variable-name-face) 354 356 (fontified t) 356 361 (fontified t face font-lock-type-face) 361 363 (fontified t) 363 373 (fontified t face font-lock-variable-name-face) 373 375 (fontified t) 375 380 (fontified t face font-lock-type-face) 380 383 (fontified t) 383 384 (syntax-table (1) fontified t) 384 385 (fontified t) 385 389 (fontified t face font-lock-type-face) 389 392 (fontified t) 392 400 (fontified t) 400 404 (fontified t face font-lock-type-face) 404 458 (fontified t) 458 462 (fontified t face font-lock-variable-name-face) 462 464 (fontified t) 464 468 (fontified t face font-lock-preprocessor-face) 468 469 (fontified t) 469 473 (fontified t face font-lock-preprocessor-face) 473 474 (fontified t) 474 478 (fontified t face font-lock-type-face) 478 516 (fontified t) 516 521 (fontified t face font-lock-variable-name-face) 521 523 (fontified t) 523 527 (fontified t face font-lock-preprocessor-face) 527 543 (fontified t) 543 556 (fontified t face font-lock-variable-name-face) 556 604 (fontified t) 604 606 (fontified t face font-lock-keyword-face) 606 607 (fontified t) 607 618 (fontified t face font-lock-function-name-face) 618 619 (fontified t) 619 622 (fontified t face font-lock-keyword-face) 622 623 (fontified t) 623 631 (fontified t face font-lock-variable-name-face) 631 633 (fontified t) 633 641 (fontified t face font-lock-type-face) 641 649 (fontified t) 649 652 (fontified t face font-lock-keyword-face) 652 653 (fontified t) 653 656 (fontified t face font-lock-keyword-face) 656 657 (fontified t) 657 661 (fontified t face font-lock-variable-name-face) 661 664 (fontified t) 664 668 (fontified t face font-lock-type-face) 668 716 (fontified t) 716 720 (fontified t face font-lock-keyword-face) 720 723 (fontified t) 723 751 (fontified t) 751 807 (fontified t) 807 809 (fontified t) 809 810 (fontified t) 810 812 (fontified t face font-lock-keyword-face) 812 813 (fontified t) 813 825 (fontified t face font-lock-function-name-face) 825 827 (fontified t) 827 831 (fontified t) 831 835 (fontified t face font-lock-variable-name-face) 835 837 (fontified t) 837 842 (fontified t face font-lock-type-face) 842 843 (fontified t) 843 844 (fontified t face rust-ampersand-face) 844 848 (fontified t face font-lock-type-face) 848 855 (fontified t) 855 858 (fontified t face font-lock-keyword-face) 858 859 (fontified t) 859 867 (fontified t face font-lock-variable-name-face) 867 869 (fontified t) 869 877 (fontified t face font-lock-type-face) 877 883 (fontified t) 883 886 (fontified t face font-lock-keyword-face) 886 887 (fontified t) 887 893 (fontified t face font-lock-variable-name-face) 893 895 (fontified t) 895 901 (fontified t face font-lock-type-face) 901 902 (fontified t) 902 908 (fontified t face font-lock-type-face) 908 909 (fontified t) 909 913 (fontified t face font-lock-type-face) 913 921 (fontified t) 921 924 (fontified t face font-lock-keyword-face) 924 925 (fontified t) 925 934 (fontified t face font-lock-variable-name-face) 934 936 (fontified t) 936 942 (fontified t face font-lock-type-face) 942 943 (fontified t) 943 949 (fontified t face font-lock-type-face) 949 950 (fontified t) 950 966 (fontified t face font-lock-type-face) 966 978 (fontified t) 978 981 (fontified t face font-lock-keyword-face) 981 982 (fontified t) 982 986 (fontified t face font-lock-variable-name-face) 986 1008 (fontified t) 1008 1011 (fontified t face font-lock-keyword-face) 1011 1025 (fontified t) 1025 1027 (fontified t face font-lock-keyword-face) 1027 1067 (fontified t) 1067 1070 (fontified t face font-lock-keyword-face) 1070 1085 (fontified t) 1085 1087 (fontified t face font-lock-keyword-face) 1087 1125 (fontified t) 1125 1127 (fontified t face font-lock-keyword-face) 1127 1143 (fontified t) 1143 1174 (fontified t) 1174 1183 (fontified t face font-lock-type-face) 1183 1186 (fontified t) 1186 1206 (fontified t) 1206 1210 (fontified t face font-lock-variable-name-face) 1210 1223 (fontified t) 1223 1227 (fontified t face font-lock-type-face) 1227 1234 (fontified t) 1234 1239 (fontified t face font-lock-constant-face) 1239 1241 (fontified t) 1241 1245 (fontified t face font-lock-type-face) 1245 1248 (fontified t) 1248 1252 (fontified t face font-lock-variable-name-face) 1252 1283 (fontified t) 1283 1291 (fontified t face font-lock-variable-name-face) 1291 1307 (fontified t) 1307 1311 (fontified t face font-lock-type-face) 1311 1312 (fontified t face font-lock-type-face) 1312 1342 (fontified t) 1342 1362 (fontified t) 1362 1371 (fontified t face font-lock-variable-name-face) 1371 1373 (fontified t) 1373 1382 (fontified t face font-lock-type-face) 1382 1390 (fontified t) 1390 1399 (fontified t) 1399 1401 (fontified t face font-lock-keyword-face) 1401 1402 (fontified t) 1402 1405 (fontified t face font-lock-type-face) 1405 1425 (fontified t) 1425 1427 (fontified t face font-lock-keyword-face) 1427 1428 (fontified t) 1428 1431 (fontified t face font-lock-type-face) 1431 1434 (fontified t) 1434 1441 (fontified t) 1441 1507 (fontified t) 1507 1511 (fontified t face font-lock-keyword-face) 1511 1514 (fontified t) 1514 1545 (fontified t) 1545 1554 (fontified t face font-lock-type-face) 1554 1557 (fontified t) 1557 1577 (fontified t) 1577 1581 (fontified t face font-lock-variable-name-face) 1581 1594 (fontified t) 1594 1598 (fontified t face font-lock-type-face) 1598 1605 (fontified t) 1605 1610 (fontified t face font-lock-constant-face) 1610 1612 (fontified t) 1612 1616 (fontified t face font-lock-type-face) 1616 1619 (fontified t) 1619 1623 (fontified t face font-lock-variable-name-face) 1623 1634 (fontified t) 1634 1654 (fontified t) 1654 1662 (fontified t face font-lock-variable-name-face) 1662 1678 (fontified t) 1678 1683 (fontified t face font-lock-type-face) 1683 1713 (fontified t) 1713 1733 (fontified t) 1733 1742 (fontified t face font-lock-variable-name-face) 1742 1744 (fontified t) 1744 1753 (fontified t face font-lock-type-face) 1753 1770 (fontified t) 1770 1772 (fontified t face font-lock-keyword-face) 1772 1773 (fontified t) 1773 1776 (fontified t face font-lock-type-face) 1776 1796 (fontified t) 1796 1798 (fontified t face font-lock-keyword-face) 1798 1799 (fontified t) 1799 1802 (fontified t face font-lock-type-face) 1802 1812 (fontified t) 1812 1844 (fontified t) 1844 1864 (fontified t) 1864 1896 (fontified t) 1896 1904 (fontified t face rust-builtin-formatting-macro) 1904 1917 (fontified t) 1917 1919 (fontified t face font-lock-keyword-face) 1919 1920 (fontified t) 1920 1930 (fontified t face font-lock-function-name-face) 1930 1931 (fontified t) 1931 1935 (fontified t face font-lock-variable-name-face) 1935 1937 (fontified t) 1937 1942 (fontified t face font-lock-type-face) 1942 1943 (fontified t) 1943 1944 (fontified t face rust-ampersand-face) 1944 1948 (fontified t face font-lock-type-face) 1948 1949 (fontified t) 1949 1957 (fontified t) 1957 1960 (fontified t face font-lock-keyword-face) 1960 1961 (fontified t) 1961 1965 (fontified t face font-lock-variable-name-face) 1965 1987 (fontified t) 1987 1990 (fontified t face font-lock-keyword-face) 1990 1991 (fontified t) 1991 1994 (fontified t face font-lock-variable-name-face) 1994 1995 (fontified t) 1995 1997 (fontified t face font-lock-keyword-face) 1997 2026 (fontified t) 2026 2029 (fontified t face font-lock-keyword-face) 2029 2030 (fontified t) 2030 2034 (fontified t face font-lock-variable-name-face) 2034 2035 (fontified t) 2035 2037 (fontified t face font-lock-keyword-face) 2037 2056 (fontified t) 2056 2058 (fontified t face font-lock-keyword-face) 2058 2074 (fontified t) 2074 2090 (fontified t) 2090 2096 (fontified t face rust-builtin-formatting-macro) 2096 2097 (fontified t) 2097 2100 (fontified t face font-lock-string-face) 2100 2117 (fontified t) 2117 2121 (fontified t face font-lock-keyword-face) 2121 2140 (fontified t) 2140 2146 (fontified t face rust-builtin-formatting-macro) 2146 2147 (fontified t) 2147 2150 (fontified t face font-lock-string-face) 2150 2185 (fontified t) 2185 2193 (fontified t face rust-builtin-formatting-macro) 2193 2205 (fontified t)) . 3138) (undo-tree-id418 . -2204) (undo-tree-id419 . -2204) (undo-tree-id420 . -2) (undo-tree-id421 . -2204) (undo-tree-id422 . -2204) (undo-tree-id423 . -1342) (undo-tree-id424 . -2) (undo-tree-id425 . -2204) 5342 (t 25817 8166 859385 983000)) nil (25817 8435 701963 878000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 3138) (undo-tree-id417 . 1)) nil (25817 8435 701954 69000) 0 nil])
([nil nil ((#("        .add_systems(PreStartup, create_grid)
" 0 21 (fontified t) 21 31 (fontified t face font-lock-type-face) 31 46 (fontified t)) . 3221) (undo-tree-id445 . -45) (undo-tree-id446 . -46) (undo-tree-id447 . -46) (undo-tree-id448 . -46) (undo-tree-id449 . -46) (undo-tree-id450 . -33) (undo-tree-id451 . -44) (undo-tree-id452 . -46) (undo-tree-id453 . -46) (undo-tree-id454 . -46) (undo-tree-id455 . -46) (undo-tree-id456 . -46) (t 25817 8435 706056 630000)) nil (25817 8451 240709 854000) 0 nil])
([nil nil ((#("        .add_systems(Startup, (display_grid, print_grid))
" 0 21 (fontified t) 21 28 (fontified t face font-lock-type-face) 28 45 (fontified t) 45 56 (fontified t) 56 58 (fontified t)) . 3318) (undo-tree-id438 . -57) (undo-tree-id439 . 2) (undo-tree-id440 . -8) (undo-tree-id441 . -8) (undo-tree-id442 . -8) (undo-tree-id443 . -8) (undo-tree-id444 . -58) 3326) nil (25817 8451 240701 989000) 0 nil])
([nil nil ((3220 . 3230) (#("Maze" 0 4 (fontified t face font-lock-type-face)) . -3220) (undo-tree-id426 . -4) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (undo-tree-id429 . -2) (undo-tree-id430 . -2) (undo-tree-id431 . -3) (undo-tree-id432 . -3) (undo-tree-id433 . -4) (undo-tree-id434 . -4) (undo-tree-id435 . -4) (undo-tree-id436 . -4) (undo-tree-id437 . -4) 3224 (3218 . 3224)) nil (25817 8451 240693 163000) 0 nil])
([nil nil ((nil rear-nonsticky nil 58 . 59) (#("
" 0 1 (fontified nil)) . -70) (58 . 71) 57 (t 25817 8451 246056 858000)) nil (25817 8476 260373 764000) 0 nil])
([nil nil ((63 . 67) (#("camera" 0 6 (fontified t face font-lock-constant-face)) . 63) (undo-tree-id557 . -5) (undo-tree-id558 . -6) (undo-tree-id559 . -6)) nil (25817 8476 260371 650000) 0 nil])
([nil nil ((nil rear-nonsticky nil 97 . 98) (#("
" 0 1 (fontified nil)) . -126) (97 . 127) 76) nil (25817 8476 260368 875000) 0 nil])
([nil nil ((102 . 106) (#("camera" 0 6 (fontified t face font-lock-constant-face)) . 102) (undo-tree-id554 . -5) (undo-tree-id555 . -6) (undo-tree-id556 . -6)) nil (25817 8476 260367 312000) 0 nil])
([nil nil ((108 . 112) (#("FlyCamera" 0 9 (fontified t face font-lock-type-face)) . 108) (undo-tree-id551 . -8) (undo-tree-id552 . -9) (undo-tree-id553 . -9)) nil (25817 8476 260363 675000) 0 nil])
([nil nil ((#("use maze::MazePlugin;
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 8 (fontified t face font-lock-constant-face) 8 10 (fontified t) 10 14 (fontified t face font-lock-type-face) 14 20 (fontified t face font-lock-type-face) 20 21 (fontified t) 21 22 (fontified t)) . 98) (undo-tree-id509 . -21) (undo-tree-id510 . -21) (undo-tree-id511 . 8) (undo-tree-id512 . -13) (undo-tree-id513 . -4) (undo-tree-id514 . -4) (undo-tree-id515 . -4) (undo-tree-id516 . -4) (undo-tree-id517 . -4) (undo-tree-id518 . -4) (undo-tree-id519 . -5) (undo-tree-id520 . -5) (undo-tree-id521 . -6) (undo-tree-id522 . -6) (undo-tree-id523 . -7) (undo-tree-id524 . -7) (undo-tree-id525 . -8) (undo-tree-id526 . -8) (undo-tree-id527 . -8) (undo-tree-id528 . -8) (undo-tree-id529 . -7) (undo-tree-id530 . -7) (undo-tree-id531 . -7) (undo-tree-id532 . -7) (undo-tree-id533 . -7) (undo-tree-id534 . -7) (undo-tree-id535 . -10) (undo-tree-id536 . -10) (undo-tree-id537 . -10) (undo-tree-id538 . -10) (undo-tree-id539 . -10) (undo-tree-id540 . -10) (undo-tree-id541 . -13) (undo-tree-id542 . -13) (undo-tree-id543 . -13) (undo-tree-id544 . -13) (undo-tree-id545 . -13) (undo-tree-id546 . -13) (undo-tree-id547 . -13) (undo-tree-id548 . -13) (undo-tree-id549 . -13) (undo-tree-id550 . -22) 111) nil (25817 8476 260359 106000) 0 nil])
([nil nil ((nil rear-nonsticky nil 68 . 69) (#("
" 0 1 (fontified nil)) . -90) (68 . 91) 59) nil (25817 8476 260334 731000) 0 nil])
([nil nil ((#("use camera::FlyCameraPlugin;
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 10 (fontified t face font-lock-constant-face) 10 12 (fontified t) 12 27 (fontified t face font-lock-type-face) 27 28 (fontified t) 28 29 (fontified t rear-nonsticky t)) . 91) (undo-tree-id457 . -28) (undo-tree-id458 . -27) (undo-tree-id459 . -27) (undo-tree-id460 . -7) (undo-tree-id461 . -7) (undo-tree-id462 . -7) (undo-tree-id463 . -7) (undo-tree-id464 . -7) (undo-tree-id465 . -7) (undo-tree-id466 . -7) (undo-tree-id467 . -7) (undo-tree-id468 . -29) (undo-tree-id469 . -29) (undo-tree-id470 . -29) (undo-tree-id471 . -29) (undo-tree-id472 . -29) (undo-tree-id473 . -29) (undo-tree-id474 . -29) (undo-tree-id475 . -29) (undo-tree-id476 . -29) (undo-tree-id477 . -29) (undo-tree-id478 . -29) (undo-tree-id479 . -29) (undo-tree-id480 . -29) (undo-tree-id481 . -29) (undo-tree-id482 . -29) (undo-tree-id483 . -29) (undo-tree-id484 . -29) (undo-tree-id485 . -29) (undo-tree-id486 . -29) (undo-tree-id487 . -29) (undo-tree-id488 . -29) (undo-tree-id489 . -29) (undo-tree-id490 . -29) (undo-tree-id491 . -29) (undo-tree-id492 . -29) (undo-tree-id493 . -29) (undo-tree-id494 . -29) (undo-tree-id495 . -29) (undo-tree-id496 . -29) (undo-tree-id497 . -29) (undo-tree-id498 . -29) (undo-tree-id499 . -29) (undo-tree-id500 . -29) (undo-tree-id501 . -29) (undo-tree-id502 . -29) (undo-tree-id503 . -29) (undo-tree-id504 . -29) (undo-tree-id505 . -29) (undo-tree-id506 . -29) (undo-tree-id507 . -29) (undo-tree-id508 . -29)) nil (25817 8476 260513 877000) 0 nil])
([nil nil ((nil rear-nonsticky nil 58 . 59) (#("
" 0 1 (rear-nonsticky t fontified nil)) . -87) (58 . 88) 47) nil (25817 8478 769433 796000) 0 nil] [nil nil ((nil rear-nonsticky nil 46 . 47) (#("
" 0 1 (rear-nonsticky t fontified nil)) . -75) (46 . 76) 25) ((#("
use camera::FlyCameraPlugin;
" 0 1 (fontified nil rear-nonsticky nil) 1 4 (fontified nil face font-lock-keyword-face) 4 5 (fontified nil) 5 11 (fontified nil face font-lock-constant-face) 11 13 (fontified nil) 13 28 (fontified nil face font-lock-type-face) 28 29 (fontified nil) 29 30 (rear-nonsticky t fontified nil)) . 46) (undo-tree-id560 . -29) (undo-tree-id561 . -1) (undo-tree-id562 . -29) (undo-tree-id563 . -1) (undo-tree-id564 . -1) (undo-tree-id565 . -1) (75 . 76) (nil rear-nonsticky t 46 . 47)) (25817 8476 260205 148000) 0 nil])
([nil nil ((#("#[derive(Component)]
struct Turret {
    shooting_timer: Timer,
}

#[derive(Component)]
struct Bullet {
    lifetime_timer: Timer,
}

fn setup_scene(
    mut commands: Commands,
    mut meshes: ResMut<Assets<Mesh>>,
    mut materials: ResMut<Assets<StandardMaterial>>,
    asset_server: Res<AssetServer>,
) {
    commands.spawn((
        PbrBundle {
            transform: Transform::from_xyz(0.0, 0.5, 0.0),
            mesh: meshes.add(Mesh::from(shape::Cube { size: 1.0 })),
            material: materials.add(Color::rgb(1.0, 0.0, 0.0).into()),
            ..default()
        },
        Turret {
            shooting_timer: Timer::from_seconds(1.0, TimerMode::Repeating),
        },
    ));

    commands.spawn(PbrBundle {
        mesh: meshes.add(Mesh::from(shape::Plane {
            size: 5.0,
            subdivisions: 0,
        })),
        material: materials.add(Color::rgb(0.0, 1.0, 0.0).into()),
        ..default()
    });

    commands.spawn(PointLightBundle {
        point_light: PointLight {
            intensity: 1500.0,
            shadows_enabled: true,
            ..default()
        },
        transform: Transform::from_xyz(4.0, 8.0, 4.0),
        ..default()
    });

    commands.spawn(SceneBundle {
        scene: asset_server.load(\"john.glb#Scene0\"),
        transform: Transform::from_xyz(0.0, 0.0, 1.0),
        ..default()
    });

    commands.spawn(SceneBundle {
        scene: asset_server.load(\"lenin.glb#Scene0\"),
        transform: Transform::from_xyz(0.0, 0.0, -1.0),
        ..default()
    });
}

fn rotate_cube(mut cube_transform: Query<&mut Transform, With<Turret>>, time: Res<Time>) {
    cube_transform.single_mut().rotate_y(time.delta_seconds());
}

fn tower_shooting(
    mut commands: Commands,
    mut meshes: ResMut<Assets<Mesh>>,
    mut materials: ResMut<Assets<StandardMaterial>>,
    mut turrets: Query<&mut Turret>,
    time: Res<Time>,
) {
    for mut turret in turrets.iter_mut() {
        turret.shooting_timer.tick(time.delta());
        if turret.shooting_timer.just_finished() {
            commands.spawn((
                PbrBundle {
                    transform: Transform::from_xyz(2.0, 0.0, 0.0),
                    mesh: meshes.add(Mesh::from(shape::Cube { size: 0.1 })),
                    material: materials.add(Color::rgb(0.87, 0.44, 0.42).into()),
                    ..default()
                },
                Bullet {
                    lifetime_timer: Timer::from_seconds(0.5, TimerMode::Once),
                },
            ));
        }
    }
}

fn bullets_dispawn(
    mut commands: Commands,
    mut bullets: Query<(Entity, &mut Bullet)>,
    time: Res<Time>,
) {
    for (bullet_entity, mut bullet) in bullets.iter_mut() {
        bullet.lifetime_timer.tick(time.delta());
        if bullet.lifetime_timer.just_finished() {
            commands.entity(bullet_entity).despawn();
        }
    }
}

" 0 20 (fontified t face font-lock-preprocessor-face) 20 21 (fontified t) 21 27 (fontified t face font-lock-keyword-face) 27 28 (fontified t) 28 34 (fontified t face font-lock-type-face) 34 41 (fontified t) 41 55 (fontified t face font-lock-variable-name-face) 55 57 (fontified t) 57 62 (fontified t face font-lock-type-face) 62 67 (fontified t) 67 87 (fontified t face font-lock-preprocessor-face) 87 88 (fontified t) 88 94 (fontified t face font-lock-keyword-face) 94 95 (fontified t) 95 101 (fontified t face font-lock-type-face) 101 108 (fontified t) 108 122 (fontified t face font-lock-variable-name-face) 122 124 (fontified t) 124 129 (fontified t face font-lock-type-face) 129 134 (fontified t) 134 136 (fontified t face font-lock-keyword-face) 136 137 (fontified t) 137 148 (fontified t face font-lock-function-name-face) 148 150 (fontified t) 150 154 (fontified t) 154 157 (fontified t face font-lock-keyword-face) 157 158 (fontified t) 158 166 (fontified t face font-lock-variable-name-face) 166 168 (fontified t) 168 176 (fontified t face font-lock-type-face) 176 178 (fontified t) 178 182 (fontified t) 182 185 (fontified t face font-lock-keyword-face) 185 186 (fontified t) 186 192 (fontified t face font-lock-variable-name-face) 192 194 (fontified t) 194 200 (fontified t face font-lock-type-face) 200 201 (fontified t) 201 207 (fontified t face font-lock-type-face) 207 208 (fontified t) 208 212 (fontified t face font-lock-type-face) 212 220 (fontified t) 220 223 (fontified t face font-lock-keyword-face) 223 224 (fontified t) 224 233 (fontified t face font-lock-variable-name-face) 233 235 (fontified t) 235 241 (fontified t face font-lock-type-face) 241 242 (fontified t) 242 248 (fontified t face font-lock-type-face) 248 249 (fontified t) 249 265 (fontified t face font-lock-type-face) 265 273 (fontified t) 273 285 (fontified t face font-lock-variable-name-face) 285 287 (fontified t) 287 290 (fontified t face font-lock-type-face) 290 291 (fontified t) 291 302 (fontified t face font-lock-type-face) 302 338 (fontified t) 338 347 (fontified t face font-lock-type-face) 347 362 (fontified t) 362 371 (fontified t face font-lock-variable-name-face) 371 373 (fontified t) 373 382 (fontified t face font-lock-type-face) 382 421 (fontified t) 421 425 (fontified t face font-lock-variable-name-face) 425 438 (fontified t) 438 442 (fontified t face font-lock-type-face) 442 449 (fontified t) 449 454 (fontified t face font-lock-constant-face) 454 456 (fontified t) 456 460 (fontified t face font-lock-type-face) 460 463 (fontified t) 463 467 (fontified t face font-lock-variable-name-face) 467 490 (fontified t) 490 498 (fontified t face font-lock-variable-name-face) 498 514 (fontified t) 514 519 (fontified t face font-lock-type-face) 519 592 (fontified t) 592 598 (fontified t face font-lock-type-face) 598 613 (fontified t) 613 627 (fontified t face font-lock-variable-name-face) 627 629 (fontified t) 629 634 (fontified t face font-lock-type-face) 634 654 (fontified t) 654 663 (fontified t face font-lock-type-face) 663 665 (fontified t) 665 674 (fontified t face font-lock-type-face) 674 716 (fontified t) 716 725 (fontified t face font-lock-type-face) 725 736 (fontified t) 736 740 (fontified t face font-lock-variable-name-face) 740 753 (fontified t) 753 757 (fontified t face font-lock-type-face) 757 764 (fontified t) 764 769 (fontified t face font-lock-constant-face) 769 771 (fontified t) 771 776 (fontified t face font-lock-type-face) 776 791 (fontified t) 791 795 (fontified t face font-lock-variable-name-face) 795 814 (fontified t) 814 825 (fontified t face font-lock-variable-name-face) 825 826 (fontified t face font-lock-variable-name-face) 826 831 (fontified t) 831 852 (fontified t) 852 860 (fontified t face font-lock-variable-name-face) 860 876 (fontified t) 876 881 (fontified t face font-lock-type-face) 881 911 (fontified t) 911 925 (fontified t) 925 931 (fontified t) 931 939 (fontified t) 939 947 (fontified t) 947 959 (fontified t) 959 975 (fontified t face font-lock-type-face) 975 978 (fontified t) 978 986 (fontified t) 986 997 (fontified t face font-lock-variable-name-face) 997 999 (fontified t) 999 1009 (fontified t face font-lock-type-face) 1009 1024 (fontified t) 1024 1033 (fontified t face font-lock-variable-name-face) 1033 1055 (fontified t) 1055 1070 (fontified t face font-lock-variable-name-face) 1070 1072 (fontified t) 1072 1076 (fontified t face font-lock-keyword-face) 1076 1121 (fontified t) 1121 1130 (fontified t face font-lock-variable-name-face) 1130 1132 (fontified t) 1132 1141 (fontified t face font-lock-type-face) 1141 1216 (fontified t) 1216 1227 (fontified t face font-lock-type-face) 1227 1238 (fontified t) 1238 1243 (fontified t face font-lock-variable-name-face) 1243 1263 (fontified t) 1263 1280 (fontified t face font-lock-string-face) 1280 1291 (fontified t) 1291 1300 (fontified t face font-lock-variable-name-face) 1300 1302 (fontified t) 1302 1311 (fontified t face font-lock-type-face) 1311 1386 (fontified t) 1386 1397 (fontified t face font-lock-type-face) 1397 1408 (fontified t) 1408 1413 (fontified t face font-lock-variable-name-face) 1413 1433 (fontified t) 1433 1451 (fontified t face font-lock-string-face) 1451 1462 (fontified t) 1462 1467 (fontified t face font-lock-variable-name-face) 1467 1470 (face font-lock-variable-name-face fontified t) 1470 1471 (face font-lock-variable-name-face fontified t) 1471 1473 (fontified t) 1473 1482 (face font-lock-type-face fontified t) 1482 1499 (fontified t) 1499 1510 (fontified t) 1510 1538 (fontified t) 1538 1540 (fontified t) 1540 1541 (fontified t) 1541 1543 (fontified t face font-lock-keyword-face) 1543 1544 (fontified t) 1544 1555 (fontified t face font-lock-function-name-face) 1555 1556 (fontified t) 1556 1559 (fontified t face font-lock-keyword-face) 1559 1560 (fontified t) 1560 1574 (fontified t face font-lock-variable-name-face) 1574 1576 (fontified t) 1576 1581 (fontified t face font-lock-type-face) 1581 1582 (fontified t) 1582 1583 (fontified t face rust-ampersand-face) 1583 1586 (fontified t face font-lock-keyword-face) 1586 1587 (fontified t) 1587 1596 (fontified t face font-lock-type-face) 1596 1598 (fontified t) 1598 1602 (fontified t face font-lock-type-face) 1602 1603 (fontified t) 1603 1609 (fontified t face font-lock-type-face) 1609 1613 (fontified t) 1613 1617 (fontified t face font-lock-variable-name-face) 1617 1619 (fontified t) 1619 1622 (fontified t face font-lock-type-face) 1622 1623 (fontified t) 1623 1627 (fontified t face font-lock-type-face) 1627 1634 (fontified t) 1634 1650 (fontified t) 1650 1696 (fontified t) 1696 1699 (fontified t) 1699 1701 (fontified t face font-lock-keyword-face) 1701 1702 (fontified t) 1702 1716 (fontified t face font-lock-function-name-face) 1716 1722 (fontified t) 1722 1725 (fontified t face font-lock-keyword-face) 1725 1726 (fontified t) 1726 1734 (fontified t face font-lock-variable-name-face) 1734 1736 (fontified t) 1736 1744 (fontified t face font-lock-type-face) 1744 1750 (fontified t) 1750 1753 (fontified t face font-lock-keyword-face) 1753 1754 (fontified t) 1754 1760 (fontified t face font-lock-variable-name-face) 1760 1762 (fontified t) 1762 1768 (fontified t face font-lock-type-face) 1768 1769 (fontified t) 1769 1775 (fontified t face font-lock-type-face) 1775 1776 (fontified t) 1776 1780 (fontified t face font-lock-type-face) 1780 1788 (fontified t) 1788 1791 (fontified t face font-lock-keyword-face) 1791 1792 (fontified t) 1792 1801 (fontified t face font-lock-variable-name-face) 1801 1803 (fontified t) 1803 1809 (fontified t face font-lock-type-face) 1809 1810 (fontified t) 1810 1816 (fontified t face font-lock-type-face) 1816 1817 (fontified t) 1817 1833 (fontified t face font-lock-type-face) 1833 1837 (fontified t) 1837 1841 (fontified t) 1841 1844 (fontified t face font-lock-keyword-face) 1844 1845 (fontified t) 1845 1852 (fontified t face font-lock-variable-name-face) 1852 1854 (fontified t) 1854 1859 (fontified t face font-lock-type-face) 1859 1860 (fontified t) 1860 1861 (fontified t face rust-ampersand-face) 1861 1864 (fontified t face font-lock-keyword-face) 1864 1865 (fontified t) 1865 1871 (fontified t face font-lock-type-face) 1871 1874 (fontified t) 1874 1878 (fontified t) 1878 1882 (fontified t face font-lock-variable-name-face) 1882 1884 (fontified t) 1884 1887 (fontified t face font-lock-type-face) 1887 1888 (fontified t) 1888 1892 (fontified t face font-lock-type-face) 1892 1903 (fontified t) 1903 1906 (fontified t face font-lock-keyword-face) 1906 1907 (fontified t) 1907 1910 (fontified t face font-lock-keyword-face) 1910 1911 (fontified t) 1911 1917 (fontified t face font-lock-variable-name-face) 1917 1918 (fontified t) 1918 1920 (fontified t face font-lock-keyword-face) 1920 2000 (fontified t) 2000 2002 (fontified t face font-lock-keyword-face) 2002 2088 (fontified t) 2088 2097 (fontified t face font-lock-type-face) 2097 2120 (fontified t) 2120 2129 (fontified t face font-lock-variable-name-face) 2129 2131 (fontified t) 2131 2140 (fontified t face font-lock-type-face) 2140 2187 (fontified t) 2187 2191 (fontified t face font-lock-variable-name-face) 2191 2204 (fontified t) 2204 2208 (fontified t face font-lock-type-face) 2208 2215 (fontified t) 2215 2220 (fontified t face font-lock-constant-face) 2220 2222 (fontified t) 2222 2226 (fontified t face font-lock-type-face) 2226 2229 (fontified t) 2229 2233 (fontified t face font-lock-variable-name-face) 2233 2264 (fontified t) 2264 2272 (fontified t face font-lock-variable-name-face) 2272 2288 (fontified t) 2288 2293 (fontified t face font-lock-type-face) 2293 2331 (fontified t) 2331 2358 (fontified t) 2358 2393 (fontified t) 2393 2399 (fontified t face font-lock-type-face) 2399 2422 (fontified t) 2422 2436 (fontified t face font-lock-variable-name-face) 2436 2438 (fontified t) 2438 2443 (fontified t face font-lock-type-face) 2443 2463 (fontified t) 2463 2472 (fontified t face font-lock-type-face) 2472 2474 (fontified t) 2474 2478 (fontified t face font-lock-type-face) 2478 2535 (fontified t) 2535 2537 (fontified t face font-lock-keyword-face) 2537 2538 (fontified t) 2538 2553 (fontified t face font-lock-function-name-face) 2553 2559 (fontified t) 2559 2562 (fontified t face font-lock-keyword-face) 2562 2563 (fontified t) 2563 2571 (fontified t face font-lock-variable-name-face) 2571 2573 (fontified t) 2573 2581 (fontified t face font-lock-type-face) 2581 2583 (fontified t) 2583 2587 (fontified t) 2587 2590 (fontified t face font-lock-keyword-face) 2590 2591 (fontified t) 2591 2598 (fontified t face font-lock-variable-name-face) 2598 2600 (fontified t) 2600 2605 (fontified t face font-lock-type-face) 2605 2607 (fontified t) 2607 2613 (fontified t face font-lock-type-face) 2613 2615 (fontified t) 2615 2616 (fontified t face rust-ampersand-face) 2616 2619 (fontified t face font-lock-keyword-face) 2619 2620 (fontified t) 2620 2626 (fontified t face font-lock-type-face) 2626 2630 (fontified t) 2630 2634 (fontified t) 2634 2638 (fontified t face font-lock-variable-name-face) 2638 2640 (fontified t) 2640 2643 (fontified t face font-lock-type-face) 2643 2644 (fontified t) 2644 2648 (fontified t face font-lock-type-face) 2648 2651 (fontified t) 2651 2659 (fontified t) 2659 2662 (fontified t face font-lock-keyword-face) 2662 2679 (fontified t) 2679 2682 (fontified t face font-lock-keyword-face) 2682 2691 (fontified t) 2691 2693 (fontified t face font-lock-keyword-face) 2693 2773 (fontified t) 2773 2775 (fontified t face font-lock-keyword-face) 2775 2889 (fontified t)) . 121) (undo-tree-id598 . -2888) (undo-tree-id599 . -2888) (undo-tree-id600 . -2888) (undo-tree-id601 . -2889) (undo-tree-id602 . -2889) (undo-tree-id603 . -2889) (undo-tree-id604 . -2889) (undo-tree-id605 . -2889) (undo-tree-id606 . -2889) (undo-tree-id607 . -2889) (undo-tree-id608 . -131) (undo-tree-id609 . -131) (undo-tree-id610 . -1718) (undo-tree-id611 . -2888) (undo-tree-id612 . -2888) (undo-tree-id613 . -66) (undo-tree-id614 . -133) (undo-tree-id615 . -696) (undo-tree-id616 . -939) (undo-tree-id617 . -1196) (undo-tree-id618 . -1366) (undo-tree-id619 . -1540) (undo-tree-id620 . -1698) (undo-tree-id621 . -2534) (undo-tree-id622 . -2888) 3009 (t 25817 8478 772723 934000)) nil (25817 8770 647279 712000) 0 nil])
nil
([nil nil ((151 . 154) (#("i" 0 1 (fontified t face font-lock-type-face)) . -151) (undo-tree-id582 . -1) (undo-tree-id583 . -1) (147 . 152) (141 . 147) (#(":" 0 1 (fontified t)) . -141) (undo-tree-id584 . -1) (undo-tree-id585 . -1) (undo-tree-id586 . -1) (undo-tree-id587 . -1) 142 (131 . 142) (130 . 131) (127 . 130) (#("e" 0 1 (fontified t face font-lock-constant-face)) . -127) (undo-tree-id588 . -1) (undo-tree-id589 . -1) (undo-tree-id590 . -1) (undo-tree-id591 . -1) (undo-tree-id592 . -1) (undo-tree-id593 . -1) (#("n" 0 1 (fontified t face font-lock-constant-face)) . -128) (undo-tree-id594 . -1) (undo-tree-id595 . -1) (undo-tree-id596 . -1) (undo-tree-id597 . -1) 129 (120 . 129) (119 . 120) 98) nil (25817 8770 647260 856000) 0 nil])
([nil nil ((410 . 421) (#("Scene" 0 5 (fontified t face font-lock-type-face)) . -410) (undo-tree-id566 . -5) (undo-tree-id567 . -1) (undo-tree-id568 . -1) (undo-tree-id569 . -2) (undo-tree-id570 . -2) (undo-tree-id571 . -3) (undo-tree-id572 . -3) (undo-tree-id573 . -4) (undo-tree-id574 . -4) (undo-tree-id575 . -5) (undo-tree-id576 . -5) (undo-tree-id577 . -5) (undo-tree-id578 . -5) (undo-tree-id579 . -5) (undo-tree-id580 . -5) (undo-tree-id581 . -5) 415 (408 . 415)) nil (25817 8770 647244 696000) 0 nil])
([nil nil ((#("        // .add_systems(Startup, (setup_scene, setup_camera, initial_grab_cursor, display_grid))
" 0 8 (fontified t) 8 11 (fontified t face font-lock-comment-delimiter-face) 11 97 (fontified t face font-lock-comment-face)) . 424) (undo-tree-id662 . -96) (undo-tree-id663 . -77) (undo-tree-id664 . -77) (undo-tree-id665 . -77) (undo-tree-id666 . -77) (undo-tree-id667 . -77) (undo-tree-id668 . -77) (undo-tree-id669 . -97) 501 (t 25817 8770 649394 922000)) nil (25817 8866 471110 525000) 0 nil])
([nil nil ((#("        // .add_systems(
        //     Update,
        //     (
        //         camera_move,
        //         camera_look,
        //         rotate_cube,
        //         tower_shooting,
        //         bullets_dispawn,
        //         grab_cursor,
        //         exit_on_escape,
        //     ),
        // )
" 0 8 (fontified t) 8 11 (fontified t face font-lock-comment-delimiter-face) 11 25 (fontified t face font-lock-comment-face) 25 33 (fontified t) 33 40 (fontified t face font-lock-comment-delimiter-face) 40 48 (fontified t face font-lock-comment-face) 48 56 (fontified t) 56 63 (fontified t face font-lock-comment-delimiter-face) 63 65 (fontified t face font-lock-comment-face) 65 73 (fontified t) 73 84 (fontified t face font-lock-comment-delimiter-face) 84 97 (fontified t face font-lock-comment-face) 97 105 (fontified t) 105 116 (fontified t face font-lock-comment-delimiter-face) 116 129 (fontified t face font-lock-comment-face) 129 137 (fontified t) 137 148 (fontified t face font-lock-comment-delimiter-face) 148 161 (fontified t face font-lock-comment-face) 161 165 (fontified t) 165 169 (fontified t) 169 180 (fontified t face font-lock-comment-delimiter-face) 180 196 (fontified t face font-lock-comment-face) 196 204 (fontified t) 204 215 (fontified t face font-lock-comment-delimiter-face) 215 232 (fontified t face font-lock-comment-face) 232 240 (fontified t) 240 251 (fontified t face font-lock-comment-delimiter-face) 251 264 (fontified t face font-lock-comment-face) 264 272 (fontified t) 272 283 (fontified t face font-lock-comment-delimiter-face) 283 297 (fontified t face font-lock-comment-face) 297 299 (fontified t face font-lock-comment-face) 299 307 (fontified t) 307 314 (fontified t face font-lock-comment-delimiter-face) 314 317 (fontified t face font-lock-comment-face) 317 325 (fontified t) 325 328 (fontified t face font-lock-comment-delimiter-face) 328 330 (fontified t face font-lock-comment-face)) . 469) (undo-tree-id623 . -329) (undo-tree-id624 . -48) (undo-tree-id625 . -329) (undo-tree-id626 . -48) (undo-tree-id627 . -23) (undo-tree-id628 . -329) (undo-tree-id629 . -329) (undo-tree-id630 . -23) (undo-tree-id631 . -23) (undo-tree-id632 . -330) (undo-tree-id633 . -23) (undo-tree-id634 . -329) (undo-tree-id635 . -23) (undo-tree-id636 . -23) (undo-tree-id637 . -47) (undo-tree-id638 . -47) (undo-tree-id639 . -64) (undo-tree-id640 . -64) (undo-tree-id641 . -88) (undo-tree-id642 . -88) (undo-tree-id643 . -120) (undo-tree-id644 . -120) (undo-tree-id645 . -152) (undo-tree-id646 . -152) (undo-tree-id647 . -184) (undo-tree-id648 . -184) (undo-tree-id649 . -219) (undo-tree-id650 . -219) (undo-tree-id651 . -255) (undo-tree-id652 . -255) (undo-tree-id653 . -287) (undo-tree-id654 . -287) (undo-tree-id655 . -316) (undo-tree-id656 . -316) (undo-tree-id657 . -317) (undo-tree-id658 . -329) (undo-tree-id659 . -329) (undo-tree-id660 . -329) (undo-tree-id661 . -330) 798) nil (25817 8866 471100 867000) 0 nil])
([nil nil ((411 . 412) (#("!" 0 1 (fontified t)) . -411) (undo-tree-id715 . -1) (undo-tree-id716 . -1) 412 (410 . 412) (t 25817 8866 472729 679000)) nil (25817 11255 415588 102000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . 408) (undo-tree-id713 . -1) (undo-tree-id714 . -1)) nil (25817 11255 415585 928000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 408) (undo-tree-id709 . -1) (undo-tree-id710 . -1) (undo-tree-id711 . -1) (undo-tree-id712 . -1)) nil (25817 11255 415584 305000) 0 nil])
([nil nil ((#("*" 0 1 (fontified t)) . 408) (undo-tree-id700 . -1) (undo-tree-id701 . -1) (undo-tree-id702 . -1) (undo-tree-id703 . -1) (undo-tree-id704 . -1) (undo-tree-id705 . -1) (undo-tree-id706 . -1) (undo-tree-id707 . -1) (undo-tree-id708 . -1)) nil (25817 11255 415581 579000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . 408) (undo-tree-id698 . -1) (undo-tree-id699 . -1)) nil (25817 11255 415576 189000) 0 nil])
([nil nil ((#("S" 0 1 (fontified t face font-lock-type-face)) . 408) (undo-tree-id696 . -1) (undo-tree-id697 . -1)) nil (25817 11255 415574 346000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t face font-lock-type-face)) . 408) (undo-tree-id694 . -1) (undo-tree-id695 . -1)) nil (25817 11255 415572 132000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t face font-lock-type-face)) . 408) (undo-tree-id692 . -1) (undo-tree-id693 . -1)) nil (25817 11255 415570 399000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t face font-lock-type-face)) . 408) (undo-tree-id690 . -1) (undo-tree-id691 . -1)) nil (25817 11255 415568 525000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t face font-lock-type-face)) . 408) (undo-tree-id688 . -1) (undo-tree-id689 . -1)) nil (25817 11255 415566 351000) 0 nil])
([nil nil ((#("P" 0 1 (fontified t face font-lock-type-face)) . 408) (undo-tree-id686 . -1) (undo-tree-id687 . -1)) nil (25817 11255 415564 658000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t face font-lock-type-face)) . 408) (undo-tree-id684 . -1) (undo-tree-id685 . -1)) nil (25817 11255 415562 824000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t face font-lock-type-face)) . 408) (undo-tree-id682 . -1) (undo-tree-id683 . -1)) nil (25817 11255 415560 921000) 0 nil])
([nil nil ((#("g" 0 1 (fontified t face font-lock-type-face)) . 408) (undo-tree-id680 . -1) (undo-tree-id681 . -1)) nil (25817 11255 415558 526000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t face font-lock-type-face)) . 408) (undo-tree-id674 . -1) (undo-tree-id675 . -1) (undo-tree-id676 . -1) (undo-tree-id677 . -1) (undo-tree-id678 . -1) (undo-tree-id679 . -1)) nil (25817 11255 415555 290000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t face font-lock-type-face)) . 408) (undo-tree-id670 . -1) (undo-tree-id671 . -1) (undo-tree-id672 . -1) (undo-tree-id673 . -1)) nil (25817 11255 415547 225000) 0 nil])
([nil nil ((131 . 133) (t 25817 11255 419431 738000)) nil (25817 11300 619686 448000) 0 nil])
([nil nil ((421 . 423) (#("i" 0 1 (face font-lock-type-face fontified t)) . -421) (undo-tree-id0 . -1) (418 . 422) (#("u" 0 1 (face font-lock-type-face fontified t)) . -418) (undo-tree-id1 . -1) (#("l" 0 1 (face font-lock-type-face fontified t)) . -419) (undo-tree-id2 . -1) 420 (410 . 420) (t 25817 58140 167723 64000)) nil (25818 5380 237259 838000) 0 nil])
([nil nil ((#("/" 0 1 (face font-lock-comment-delimiter-face fontified t)) . 131) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (t 25818 5380 241118 231000)) nil (25818 5397 54378 836000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . 131) (undo-tree-id3 . -1) (undo-tree-id4 . -1)) nil (25818 5397 54373 88000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . 131) (130 . 131) (#("
" 0 1 (fontified t)) . -130) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) 131 (#("u" 0 1 (fontified t)) . -131) (undo-tree-id9 . -1) (#("s" 0 1 (face font-lock-keyword-face fontified t)) . -132) (undo-tree-id10 . -1) (#("a" 0 1 (fontified t)) . -133) (undo-tree-id11 . -1) (#("a" 0 1 (fontified t)) . -134) (undo-tree-id12 . -1) (#("a" 0 1 (fontified t)) . -135) (undo-tree-id13 . -1) (#("a" 0 1 (fontified t)) . -136) (undo-tree-id14 . -1) 137 (133 . 137) (t 25818 5397 57784 981000)) nil (25819 19213 535767 531000) 0 nil])
([nil nil ((47 . 1216) (#("mod camera;
use camera::FlyCameraPlugin;
mod maze;
use maze::MazePlugin;
mod scene;
 scene::ScenePlugin;

fn exit_on_escape(mut exit: EventWriter<AppExit>, keys: Res<Input<KeyCode>>) {
    if keys.just_pressed(KeyCode::Escape) {
        exit.send(AppExit);
    }
}

fn main() {
    App::new()
        .add_plugins((DefaultPlugins, FlyCameraPlugin, MazePlugin, ScenePlugin))
        .add_systems(Update, exit_on_escape" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 10 (face font-lock-constant-face fontified t) 10 12 (fontified t) 12 15 (face font-lock-keyword-face fontified t) 15 16 (fontified t) 16 22 (face font-lock-constant-face fontified t) 22 24 (fontified t) 24 39 (face font-lock-type-face fontified t) 39 41 (fontified t) 41 44 (face font-lock-keyword-face fontified t) 44 45 (fontified t) 45 49 (face font-lock-constant-face fontified t) 49 51 (fontified t) 51 54 (face font-lock-keyword-face fontified t) 54 55 (fontified t) 55 59 (face font-lock-constant-face fontified t) 59 61 (fontified t) 61 71 (face font-lock-type-face fontified t) 71 73 (fontified t) 73 76 (face font-lock-keyword-face fontified t) 76 77 (fontified t) 77 82 (face font-lock-constant-face fontified t) 82 84 (fontified t) 84 85 (fontified t) 85 90 (face font-lock-constant-face fontified t) 90 92 (fontified t) 92 103 (face font-lock-type-face fontified t) 103 105 (fontified t) 105 106 (fontified t) 106 108 (face font-lock-keyword-face fontified t) 108 109 (fontified t) 109 123 (face font-lock-function-name-face fontified t) 123 124 (fontified t) 124 127 (face font-lock-keyword-face fontified t) 127 128 (fontified t) 128 132 (face font-lock-variable-name-face fontified t) 132 134 (fontified t) 134 145 (face font-lock-type-face fontified t) 145 146 (fontified t) 146 153 (face font-lock-type-face fontified t) 153 156 (fontified t) 156 160 (face font-lock-variable-name-face fontified t) 160 162 (fontified t) 162 165 (face font-lock-type-face fontified t) 165 166 (fontified t) 166 171 (face font-lock-type-face fontified t) 171 172 (fontified t) 172 179 (face font-lock-type-face fontified t) 179 189 (fontified t) 189 191 (face font-lock-keyword-face fontified t) 191 210 (fontified t) 210 217 (face font-lock-type-face fontified t) 217 219 (fontified t) 219 225 (face font-lock-type-face fontified t) 225 247 (fontified t) 247 254 (face font-lock-type-face fontified t) 254 266 (fontified t) 266 268 (face font-lock-keyword-face fontified t) 268 269 (fontified t) 269 273 (face font-lock-function-name-face fontified t) 273 282 (fontified t) 282 285 (face font-lock-type-face fontified t) 285 293 (fontified t) 293 315 (fontified t) 315 329 (face font-lock-type-face fontified t) 329 331 (fontified t) 331 346 (face font-lock-type-face fontified t) 346 348 (fontified t) 348 358 (face font-lock-type-face fontified t) 358 360 (fontified t) 360 371 (face font-lock-type-face fontified t) 371 374 (fontified t) 374 395 (fontified t) 395 401 (face font-lock-type-face fontified t) 401 417 (fontified t)) . 47) (undo-tree-id0 . 333) (undo-tree-id1 . -106) (undo-tree-id2 . -266) (undo-tree-id3 . -83) (undo-tree-id4 . -83)) nil (25819 19213 536071 161000) 0 nil])
([nil nil ((nil rear-nonsticky nil 534 . 535) (#("
" 0 1 (fontified nil)) . -695) (534 . 696) (t 25819 13571 274805 369000)) nil (25819 19306 740580 530000) 0 nil] [nil nil ((nil rear-nonsticky nil 533 . 534) (#("
" 0 1 (fontified nil)) . -694) (533 . 695) 532 (t 25819 13571 274805 369000)) ((#("
fn get_camera_pos(position: Query<&Transform, With<FlyCamera>>) {
    let position = position.single();
    println!(\"position: {:?}\", position.translation);
}

" 0 1 (rear-nonsticky nil fontified nil) 1 3 (face font-lock-keyword-face fontified nil) 3 4 (fontified nil) 4 18 (face font-lock-function-name-face fontified nil) 18 19 (fontified nil) 19 27 (face font-lock-variable-name-face fontified nil) 27 29 (fontified nil) 29 34 (face font-lock-type-face fontified nil) 34 35 (fontified nil) 35 36 (face rust-ampersand-face fontified nil) 36 45 (face font-lock-type-face fontified nil) 45 47 (fontified nil) 47 51 (face font-lock-type-face fontified nil) 51 52 (fontified nil) 52 61 (face font-lock-type-face fontified nil) 61 64 (fontified nil) 64 65 (fontified nil) 65 66 (fontified nil) 66 67 (fontified nil) 67 71 (fontified t) 71 74 (face font-lock-keyword-face fontified t) 74 75 (fontified t) 75 83 (face font-lock-variable-name-face fontified t) 83 105 (fontified t) 105 109 (fontified t) 109 117 (face rust-builtin-formatting-macro fontified t) 117 118 (fontified t) 118 129 (face font-lock-string-face fontified t) 129 133 (face rust-string-interpolation fontified t) 133 134 (face font-lock-string-face fontified t) 134 136 (fontified t) 136 158 (fontified t) 158 159 (fontified t) 159 160 (fontified t) 160 161 (fontified t) 161 162 (fontified nil)) . 533) (undo-tree-id15 . -1) (undo-tree-id16 . -161) (undo-tree-id17 . -161) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (694 . 695) (nil rear-nonsticky t 533 . 534)) (25819 19213 535734 802000) 0 nil])
([nil nil ((#("position: Query<&Transform, With<FlyCamera>>" 0 8 (face font-lock-variable-name-face fontified t) 8 10 (fontified t) 10 15 (face font-lock-type-face fontified t) 15 16 (fontified t) 16 17 (face rust-ampersand-face fontified t) 17 26 (face font-lock-type-face fontified t) 26 28 (fontified t) 28 32 (face font-lock-type-face fontified t) 32 33 (fontified t) 33 42 (face font-lock-type-face fontified t) 42 44 (fontified t)) . 553) (undo-tree-id275 . -43) (undo-tree-id276 . -6) (undo-tree-id277 . -6) (undo-tree-id278 . -6) (undo-tree-id279 . -6) (undo-tree-id280 . -6) (undo-tree-id281 . -6) (undo-tree-id282 . -6) (undo-tree-id283 . -6) (undo-tree-id284 . -44) 559) nil (25819 19306 740579 301000) 0 nil])
nil
([nil nil ((715 . 717)) nil (25819 19306 740573 471000) 0 nil])
([nil nil ((nil rear-nonsticky nil 760 . 761) (nil fontified nil 717 . 761) (717 . 761) 716) nil (25819 19306 740572 686000) 0 nil])
([nil nil ((#("    let position = position.single();
" 0 4 (fontified t) 4 7 (face font-lock-keyword-face fontified t) 7 8 (fontified t) 8 16 (face font-lock-variable-name-face fontified t) 16 38 (fontified t)) . 557) (undo-tree-id258 . -37) (undo-tree-id259 . -38) (undo-tree-id260 . -38) (undo-tree-id261 . -38) (undo-tree-id262 . -38) (undo-tree-id263 . -18) (undo-tree-id264 . -18) (undo-tree-id265 . -18) (undo-tree-id266 . -18) (undo-tree-id267 . -36) (undo-tree-id268 . -36) (undo-tree-id269 . -36) (undo-tree-id270 . -36) (undo-tree-id271 . -18) (undo-tree-id272 . -36) (undo-tree-id273 . -36) (undo-tree-id274 . -38) 593) nil (25819 19306 740571 50000) 0 nil])
([nil nil ((nil rear-nonsticky nil 730 . 731) (#("
" 0 1 (fontified nil)) . -764) (726 . 765) 650) nil (25819 19306 740560 707000) 0 nil])
([nil nil ((#("fn get_camera_pos() {
    println!(\"position: {:?}\", position.translation);
}
" 0 2 (face font-lock-keyword-face fontified t) 2 3 (fontified t) 3 17 (face font-lock-function-name-face fontified t) 17 18 (fontified t) 18 19 (fontified t) 19 20 (fontified t) 20 21 (fontified t) 21 22 (fontified t) 22 26 (fontified t) 26 34 (face rust-builtin-formatting-macro fontified t) 34 35 (fontified t) 35 46 (face font-lock-string-face fontified t) 46 50 (face rust-string-interpolation fontified t) 50 51 (face font-lock-string-face fontified t) 51 53 (fontified t) 53 75 (fontified t) 75 76 (fontified t) 76 77 (fontified t) 77 78 (fontified t)) . 535) (undo-tree-id181 . -77) (undo-tree-id182 . -77) (undo-tree-id183 . -22) (undo-tree-id184 . -22) (undo-tree-id185 . -22) (undo-tree-id186 . -22) (undo-tree-id187 . -76) (undo-tree-id188 . -76) (undo-tree-id189 . -78) (undo-tree-id190 . -78) (undo-tree-id191 . -78) (undo-tree-id192 . -78) (undo-tree-id193 . -76) (undo-tree-id194 . -76) (undo-tree-id195 . -22) (undo-tree-id196 . -22) (undo-tree-id197 . -22) (undo-tree-id198 . -22) (undo-tree-id199 . -22) (undo-tree-id200 . -22) (undo-tree-id201 . -18) (undo-tree-id202 . -18) (undo-tree-id203 . -18) (undo-tree-id204 . -18) (undo-tree-id205 . -18) (undo-tree-id206 . -18) (undo-tree-id207 . -18) (undo-tree-id208 . -22) (undo-tree-id209 . -22) (undo-tree-id210 . -22) (undo-tree-id211 . -22) (undo-tree-id212 . -40) (undo-tree-id213 . -40) (undo-tree-id214 . -76) (undo-tree-id215 . -76) (undo-tree-id216 . -78) (undo-tree-id217 . -78) (undo-tree-id218 . -78) (undo-tree-id219 . -78) (undo-tree-id220 . -78) (undo-tree-id221 . -76) (undo-tree-id222 . -76) (undo-tree-id223 . -74) (undo-tree-id224 . -74) (undo-tree-id225 . -22) (undo-tree-id226 . -22) (undo-tree-id227 . -22) (undo-tree-id228 . -22) (undo-tree-id229 . -58) (undo-tree-id230 . -58) (undo-tree-id231 . -76) (undo-tree-id232 . -76) (undo-tree-id233 . -76) (undo-tree-id234 . -76) (undo-tree-id235 . -78) (undo-tree-id236 . -78) (undo-tree-id237 . -78) (undo-tree-id238 . -78) (undo-tree-id239 . -76) (undo-tree-id240 . -76) (undo-tree-id241 . -26) (undo-tree-id242 . -26) (undo-tree-id243 . -4) (undo-tree-id244 . -4) (undo-tree-id245 . -4) (undo-tree-id246 . -77) (undo-tree-id247 . -4) (undo-tree-id248 . -4) (undo-tree-id249 . -26) (undo-tree-id250 . -26) (undo-tree-id251 . -76) (undo-tree-id252 . -77) (undo-tree-id253 . -22) (undo-tree-id254 . -77) (undo-tree-id255 . -77) (undo-tree-id256 . -77) (undo-tree-id257 . -78) 612) nil (25819 19306 740557 405000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 535) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . 1) (undo-tree-id180 . -1)) nil (25819 19306 740506 592000) 0 nil])
([nil nil ((897 . 900) (#("i" 0 1 (fontified t)) . -897) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (895 . 898) (#("i" 0 1 (fontified t)) . -895) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (894 . 896) (892 . 894) (#("c" 0 1 (fontified t)) . -892) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (#("a" 0 1 (fontified t)) . -893) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) 894 (892 . 894) (#("T" 0 1 (face font-lock-type-face fontified t)) . -892) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -893) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (#("a" 0 1 (face font-lock-type-face fontified t)) . -894) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (#("n" 0 1 (face font-lock-type-face fontified t)) . -895) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (#("s" 0 1 (face font-lock-type-face fontified t)) . -896) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (#("f" 0 1 (face font-lock-type-face fontified t)) . -897) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (#("o" 0 1 (face font-lock-type-face fontified t)) . -898) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (#("r" 0 1 (face font-lock-type-face fontified t)) . -899) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (#("m" 0 1 (face font-lock-type-face fontified t)) . -900) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (#(":" 0 1 (fontified t)) . -901) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (#(":" 0 1 (fontified t)) . -902) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (#("f" 0 1 (fontified t)) . -903) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (#("r" 0 1 (fontified t)) . -904) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) 905 (#("o" 0 1 (fontified t)) . -905) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (#("m" 0 1 (fontified t)) . -906) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (#("_" 0 1 (fontified t)) . -907) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (#("x" 0 1 (fontified t)) . -908) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (#("y" 0 1 (fontified t)) . -909) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (#("z" 0 1 (fontified t)) . -910) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (#("(" 0 1 (fontified t)) . -911) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (#("0" 0 1 (fontified t)) . -912) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (#("." 0 1 (fontified t)) . -913) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (#("0" 0 1 (fontified t)) . -914) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (#("," 0 1 (fontified t)) . -915) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (#(" " 0 1 (fontified t)) . -916) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (#("4" 0 1 (fontified t)) . -917) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (#("." 0 1 (fontified t)) . -918) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (#("0" 0 1 (fontified t)) . -919) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (#("," 0 1 (fontified t)) . -920) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (#(" " 0 1 (fontified t)) . -921) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (#("0" 0 1 (fontified t)) . -922) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (#("." 0 1 (fontified t)) . -923) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (#("0" 0 1 (fontified t)) . -924) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (#(")" 0 1 (fontified t)) . -925) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) 926) nil (25819 19306 740494 779000) 0 nil])
([nil nil ((549 . 554) (572 . 575) (573 . 574) (599 . 602) (600 . 601) (644 . 646) 899) nil (25819 19350 164024 254000) 0 nil])
([nil nil ((nil rear-nonsticky nil 188 . 189) (#("
" 0 1 (fontified nil)) . 227) (188 . 228)) ((#("
#[derive(Component)]
struct FlyCamera;
" 0 1 (rear-nonsticky nil fontified nil) 1 21 (face font-lock-preprocessor-face fontified nil) 21 22 (fontified nil) 22 28 (face font-lock-keyword-face fontified nil) 28 29 (fontified nil) 29 38 (face font-lock-type-face fontified nil) 38 39 (fontified nil) 39 40 (fontified nil)) . 188) (undo-tree-id285 . -1) (undo-tree-id286 . -39) (undo-tree-id287 . -39) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -22) (undo-tree-id297 . -22) (undo-tree-id298 . -1) (227 . 228) (nil rear-nonsticky t 188 . 189) (t 25819 19328 461499 284000)) (25819 19351 523919 286000) 0 nil])
([nil nil ((946 . 966) (t 25819 19328 461499 284000)) nil (25819 19387 745783 985000) 0 nil])
([nil nil ((1034 . 1037) (1023 . 1034) (#("tra" 0 3 (fontified t)) . -1023) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -2) (undo-tree-id302 . -2) (undo-tree-id303 . -3) (undo-tree-id304 . -3) (undo-tree-id305 . -3) (undo-tree-id306 . -3) (undo-tree-id307 . -3) (undo-tree-id308 . -3) (undo-tree-id309 . -3) (undo-tree-id310 . -3) (undo-tree-id311 . -3) (undo-tree-id312 . -3) 1026 (1022 . 1026) (1014 . 1022) (#("pos" 0 3 (fontified t)) . -1014) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -2) (undo-tree-id316 . -2) (undo-tree-id317 . -3) (undo-tree-id318 . -3) (undo-tree-id319 . -3) (undo-tree-id320 . -3) (undo-tree-id321 . -3) (undo-tree-id322 . -3) 1017 (1010 . 1017) (999 . 1010) (#("tr" 0 2 (fontified t)) . -999) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -2) (undo-tree-id326 . -2) (undo-tree-id327 . -2) (undo-tree-id328 . -2) (undo-tree-id329 . -2) (undo-tree-id330 . -2) (undo-tree-id331 . -2) (undo-tree-id332 . -2) (undo-tree-id333 . -2) (undo-tree-id334 . -2) 1001 (998 . 1001) (990 . 998) (#("pos" 0 3 (fontified t)) . -990) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -2) (undo-tree-id338 . -2) (undo-tree-id339 . -3) (undo-tree-id340 . -3) (undo-tree-id341 . -3) (undo-tree-id342 . -3) (undo-tree-id343 . -3) (undo-tree-id344 . -3) 993 (986 . 993) (975 . 986) (#("tran" 0 4 (fontified t)) . -975) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (undo-tree-id347 . -2) (undo-tree-id348 . -2) (undo-tree-id349 . -3) (undo-tree-id350 . -3) (undo-tree-id351 . -4) (undo-tree-id352 . -4) (undo-tree-id353 . -4) (undo-tree-id354 . -4) (undo-tree-id355 . -4) (undo-tree-id356 . -4) (undo-tree-id357 . -4) (undo-tree-id358 . -4) 979 (974 . 979)) nil (25819 19387 745779 443000) 0 nil])
([nil nil ((966 . 983) (989 . 1004) (990 . 991) (1013 . 1028) (1014 . 1015) (1036 . 1050)) nil (25819 19387 745311 383000) 0 nil])
([nil nil ((#("    let position = position.single();
" 0 3 (fontified t) 3 4 (fontified t rear-nonsticky t) 4 7 (face font-lock-keyword-face fontified t) 7 8 (fontified t) 8 16 (face font-lock-variable-name-face fontified t) 16 37 (fontified t) 37 38 (fontified t)) . 702) (undo-tree-id380 . -37) (undo-tree-id381 . -36) (undo-tree-id382 . -36) (undo-tree-id383 . -36) (undo-tree-id384 . -36) (undo-tree-id385 . -36) (undo-tree-id386 . -36) (undo-tree-id387 . -38) 738 (t 25819 19387 748166 214000)) nil (25819 19464 223499 923000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . -778) (740 . 779) 738) nil (25819 19464 223493 250000) 0 nil])
([nil nil ((#("    " 0 3 (fontified nil) 3 4 (fontified nil rear-nonsticky t)) . -742) (undo-tree-id373 . -4) (undo-tree-id374 . -4) (undo-tree-id375 . -4) (undo-tree-id376 . -4) (undo-tree-id377 . -4) (undo-tree-id378 . -4) (undo-tree-id379 . -4) (741 . 742) 745) nil (25819 19470 883566 634000) 0 nil])
([nil nil ((741 . 749) (#("	" 0 1 (fontified t)) . -741) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (undo-tree-id416 . -1) 742) nil (25819 19534 686594 167000) 0 nil] [nil nil ((741 . 749) (#("	" 0 1 (fontified t)) . -741) (undo-tree-id360 . -1) (undo-tree-id362 . -1) (undo-tree-id364 . -1) (undo-tree-id366 . -1) (undo-tree-id368 . -1) (undo-tree-id370 . -1) (undo-tree-id372 . -1) 742) ((741 . 742) (#("        " 0 8 (fontified t)) . 741) (t 25819 19464 228166 590000)) (25819 19470 686303 816000) 0 nil])
([nil nil ((210 . 214) (t 25819 19534 691500 243000)) nil (25819 19792 943321 38000) 0 nil])
([nil nil ((784 . 797) (782 . 784) (t 25819 19464 228166 590000) 741) ((#("
	" 0 1 (fontified t) 1 2 (fontified nil)) . 782) (undo-tree-id388 . -1) (undo-tree-id389 . -2) (undo-tree-id390 . -2) (#("ooooooooooooo" 0 13 (fontified t)) . 784) (undo-tree-id391 . -12) (undo-tree-id392 . -12)) (25819 19470 685929 589000) 0 nil])
([nil nil ((#("#[derive(Component)]
pub struct FlyCamera;
" 0 20 (face font-lock-preprocessor-face fontified t) 20 21 (fontified t) 21 24 (face font-lock-keyword-face fontified t) 24 25 (fontified t) 25 31 (face font-lock-keyword-face fontified t) 31 32 (fontified t) 32 41 (face font-lock-type-face fontified t) 41 42 (fontified t) 42 43 (fontified t)) . 189) (undo-tree-id417 . 18) (undo-tree-id418 . -42) (undo-tree-id419 . -24) (undo-tree-id420 . -3) (undo-tree-id421 . -24) (undo-tree-id422 . -24) (undo-tree-id423 . -24) 213 (t 25819 19792 948168 124000)) nil (25819 19817 596993 327000) 0 nil])
nil
([nil nil ((140 . 141) (131 . 140) (#("Fly" 0 3 (face font-lock-type-face fontified t)) . -131) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (undo-tree-id426 . -2) (undo-tree-id427 . -2) (undo-tree-id428 . -3) (undo-tree-id429 . -3) (undo-tree-id430 . -3) (undo-tree-id431 . -3) (undo-tree-id432 . -3) (undo-tree-id433 . -3) 134 (119 . 134) (118 . 119) (t 25819 19817 601501 578000) 93) nil (25819 19857 922199 218000) 0 nil])
([nil nil ((#("Plugin" 0 6 (face font-lock-type-face fontified t)) . 111) (140 . 146)) nil (25819 19857 922179 525000) 0 nil])
([nil nil ((apply -15 900 1118 undo--wrap-and-run-primitive-undo 900 1118 ((1099 . 1102) (1056 . 1059) (1013 . 1016) (970 . 973) (912 . 915) 1091))) nil (25819 19943 311606 668000) 0 nil])
([nil nil ((1138 . 1143) (#("i" 0 1 (fontified t)) . -1138) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (1136 . 1139) (#("i" 0 1 (fontified t)) . -1136) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (1126 . 1137) (1111 . 1126) (#("Tra" 0 3 (face font-lock-type-face fontified t)) . -1111) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (undo-tree-id440 . -2) (undo-tree-id441 . -2) (undo-tree-id442 . -3) (undo-tree-id443 . -3) (undo-tree-id444 . -3) (undo-tree-id445 . -3) (undo-tree-id446 . -3) (undo-tree-id447 . -3) (undo-tree-id448 . -3) (undo-tree-id449 . -3) 1114 (1111 . 1114) (1105 . 1111) 1097) nil (25819 19943 311603 898000) 0 nil])
([nil nil ((1106 . 1114) (#("	" 0 1 (fontified t)) . 1106) 1142) nil (25819 19987 396246 633000) 0 nil])
([nil nil ((1139 . 1149)) nil (25819 20047 12761 122000) 0 nil] [nil nil ((1149 . 1155) (#("i" 0 1 (fontified t)) . -1149) (undo-tree-id481 . -1) (1148 . 1150) (t 25819 19970 38168 971000)) ((#(".i" 0 1 (fontified nil) 1 2 (fontified nil)) . 1148) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (undo-tree-id492 . -2) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (1149 . 1150) (#("into()" 0 6 (fontified t)) . 1149) (undo-tree-id495 . -5) (undo-tree-id496 . -5) (undo-tree-id497 . -5) (undo-tree-id498 . -5) (undo-tree-id499 . -5) (undo-tree-id500 . -5) (undo-tree-id501 . -5) (undo-tree-id502 . -5) (undo-tree-id503 . -5) (undo-tree-id504 . -5) (undo-tree-id505 . -5) (undo-tree-id506 . -5) (undo-tree-id507 . -5) (t 25819 19984 738169 44000)) (25819 19984 735494 497000) 0 nil] [nil nil ((1157 . 1160) (#("i" 0 1 (fontified t)) . -1157) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (1148 . 1158) (t 25819 19943 314835 517000)) ((#(".translati" 0 9 (fontified nil) 9 10 (fontified nil)) . 1148) (undo-tree-id452 . -10) (undo-tree-id453 . -9) (undo-tree-id454 . -9) (undo-tree-id455 . -9) (undo-tree-id456 . -9) (undo-tree-id457 . -9) (undo-tree-id458 . -9) (undo-tree-id459 . -9) (undo-tree-id460 . -9) (undo-tree-id461 . -9) (undo-tree-id462 . -9) (undo-tree-id463 . -9) (undo-tree-id464 . -10) (undo-tree-id465 . -9) (undo-tree-id466 . -9) (1157 . 1158) (#("ion" 0 3 (fontified t)) . 1157) (undo-tree-id467 . -2) (undo-tree-id468 . -2) (undo-tree-id469 . -2) (undo-tree-id470 . -2) (undo-tree-id471 . -2) (undo-tree-id472 . -2) (undo-tree-id473 . -2) (undo-tree-id474 . -2) (undo-tree-id475 . -2) (undo-tree-id476 . -2) (undo-tree-id477 . -2) (undo-tree-id478 . -2) (undo-tree-id479 . -2) (undo-tree-id480 . -2) (t 25819 19965 504835 613000)) (25819 19965 501699 258000) 0 nil])
([nil nil ((1158 . 1166) (t 25819 20055 558169 392000)) nil (25819 20063 262617 556000) 0 nil] [nil nil ((1159 . 1165) (#("i" 0 1 (fontified t)) . -1159) (undo-tree-id508 . -1) (1158 . 1160) (t 25819 20034 821502 624000)) ((#(".i" 0 1 (fontified nil) 1 2 (fontified nil)) . 1158) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (undo-tree-id516 . -1) (undo-tree-id517 . -2) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (1159 . 1160) (#("into()" 0 6 (fontified t)) . 1159) (undo-tree-id520 . -5) (undo-tree-id521 . -5) (undo-tree-id522 . -5) (undo-tree-id523 . -5) (undo-tree-id524 . -5) (undo-tree-id525 . -5) (undo-tree-id526 . -5) (undo-tree-id527 . -5) (undo-tree-id528 . -5) (undo-tree-id529 . -5) (undo-tree-id530 . -5) (t 25819 20045 488169 340000)) (25819 20045 485675 695000) 0 nil])
nil
nil
([nil nil ((1226 . 1227) (#("{" 0 1 (fontified t)) . -1226) (undo-tree-id531 . -1) (undo-tree-id532 . -1) 1227 (1225 . 1227) (#(")" 0 1 (fontified t)) . -1225) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (undo-tree-id535 . -1) 1226 (1212 . 1226) (1208 . 1212) (#("d" 0 1 (fontified t)) . -1208) (undo-tree-id536 . -1) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (undo-tree-id539 . -1) 1209 (1202 . 1209) (1193 . 1202) (#("tran" 0 4 (fontified t)) . -1193) (undo-tree-id540 . -1) (undo-tree-id541 . -1) (undo-tree-id542 . -2) (undo-tree-id543 . -2) (undo-tree-id544 . -3) (undo-tree-id545 . -3) (undo-tree-id546 . -4) (undo-tree-id547 . -4) (undo-tree-id548 . -4) (undo-tree-id549 . -4) (undo-tree-id550 . -4) (undo-tree-id551 . -4) 1197 (1186 . 1197) (#("i" 0 1 (fontified t)) . -1186) (undo-tree-id552 . -1) (1182 . 1187) (#(" " 0 1 (fontified t)) . -1182) (undo-tree-id553 . -1) (undo-tree-id554 . -1) (undo-tree-id555 . -1) (undo-tree-id556 . -1) (undo-tree-id557 . -1) (undo-tree-id558 . -1) (#(" " 0 1 (fontified t)) . -1183) (undo-tree-id559 . -1) (undo-tree-id560 . -1) (undo-tree-id561 . -1) (undo-tree-id562 . -1) (undo-tree-id563 . -1) (undo-tree-id564 . -1) (#("{" 0 1 (fontified t)) . -1184) (undo-tree-id565 . -1) (undo-tree-id566 . -1) (undo-tree-id567 . -1) (undo-tree-id568 . -1) 1185 (1179 . 1185) (#("i" 0 1 (face font-lock-type-face fontified t)) . -1179) (undo-tree-id569 . -1) (1175 . 1180) (1174 . 1175) (1168 . 1174) (t 25819 20063 268169 430000) 1137) nil (25819 20276 817534 400000) 0 nil])
nil
([nil nil ((1169 . 1175) (#("	" 0 1 (fontified t)) . 1169) (1174 . 1176) (1184 . 1189) (1185 . 1196) (1213 . 1215) (1214 . 1228) (1225 . 1238) 1226) nil (25819 20276 817494 114000) 0 nil])
([nil nil ((1222 . 1224) (#("i" 0 1 (fontified t)) . -1222) (undo-tree-id574 . -1) (1219 . 1223) (#("i" 0 1 (fontified t)) . -1219) (undo-tree-id575 . -1) (undo-tree-id576 . -1) (1216 . 1220) (#("transform" 0 9 (fontified t)) . 1216) (undo-tree-id577 . -8) (undo-tree-id578 . -9) (undo-tree-id579 . -9) (t 25819 20276 854837 94000)) nil (25819 20287 848463 895000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . 1221) (undo-tree-id570 . -1) (undo-tree-id571 . -1) (undo-tree-id572 . -1) (undo-tree-id573 . -1)) nil (25819 20290 397985 254000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1222 . 1223) (nil fontified nil 1222 . 1223) (1222 . 1223) 1221) nil (25819 20292 238526 780000) 0 nil] [nil nil ((nil rear-nonsticky nil 1222 . 1223) (nil fontified nil 1222 . 1223) (1222 . 1223) 1221) ((#("o" 0 1 (rear-nonsticky nil fontified nil)) . 1222) (nil rear-nonsticky t 1222 . 1223)) (25819 20290 397884 495000) 0 nil] [nil nil ((nil rear-nonsticky nil 1223 . 1224) (nil fontified nil 1223 . 1224) (1223 . 1224) 1222) ((#("o" 0 1 (rear-nonsticky nil fontified nil)) . 1223) (nil rear-nonsticky t 1223 . 1224)) (25819 20289 496635 96000) 0 nil] [nil nil ((nil rear-nonsticky nil 1222 . 1223) (nil fontified nil 1222 . 1223) (1222 . 1223) 1221) ((#("o" 0 1 (rear-nonsticky nil fontified nil)) . 1222) (nil rear-nonsticky t 1222 . 1223)) (25819 20287 848438 734000) 0 nil])
([nil nil ((1241 . 1242) (#("*" 0 1 (fontified t)) . -1241) (undo-tree-id580 . -1) (undo-tree-id581 . -1) (undo-tree-id582 . -1) (undo-tree-id583 . -1) 1242 (1234 . 1242) (t 25819 20292 241503 839000)) nil (25819 20329 6225 941000) 0 nil])
nil
nil
nil
([nil nil ((#("1" 0 1 (fontified t)) . 1237) (undo-tree-id585 . -1) (undo-tree-id586 . -1) (t 25819 20329 11504 14000)) nil (25819 20395 150589 209000) 0 nil])
([nil nil ((1237 . 1238) (#("0" 0 1 (fontified t)) . 1237) (undo-tree-id584 . -1)) nil (25819 20395 150583 135000) 0 nil])
([nil nil ((#("            // TransformBundle::from(Transform::from_xyz(
            //     position.translation.x,
            //     position.translation.y,
            //     position.translation.z,
            // )),
" 0 12 (fontified t) 12 15 (face font-lock-comment-delimiter-face fontified t) 15 30 (face font-lock-comment-face fontified t) 30 37 (face font-lock-comment-face fontified t) 37 46 (face font-lock-comment-face fontified t) 46 57 (face font-lock-comment-face fontified t) 57 58 (face font-lock-comment-face fontified t) 58 70 (fontified t) 70 73 (face font-lock-comment-delimiter-face fontified t) 73 77 (face font-lock-comment-delimiter-face fontified t) 77 86 (face font-lock-comment-face fontified t) 86 100 (face font-lock-comment-face fontified t) 100 101 (face font-lock-comment-face fontified t) 101 113 (fontified t) 113 116 (face font-lock-comment-delimiter-face fontified t) 116 118 (face font-lock-comment-delimiter-face fontified t) 118 119 (face font-lock-comment-delimiter-face fontified t) 119 120 (face font-lock-comment-delimiter-face fontified t) 120 129 (face font-lock-comment-face fontified t) 129 143 (face font-lock-comment-face fontified t) 143 144 (face font-lock-comment-face fontified t) 144 156 (fontified t) 156 159 (face font-lock-comment-delimiter-face fontified t) 159 161 (face font-lock-comment-delimiter-face fontified t) 161 162 (face font-lock-comment-delimiter-face fontified t) 162 163 (face font-lock-comment-delimiter-face fontified t) 163 172 (face font-lock-comment-face fontified t) 172 185 (face font-lock-comment-face fontified t) 185 187 (face font-lock-comment-face fontified t) 187 199 (fontified t) 199 202 (face font-lock-comment-delimiter-face fontified t) 202 203 (face font-lock-comment-face fontified t) 203 205 (face font-lock-comment-face fontified t) 205 206 (face font-lock-comment-face fontified t)) . 900) (undo-tree-id587 . -205) (undo-tree-id588 . -204) (undo-tree-id589 . -204) (undo-tree-id590 . -17) (undo-tree-id591 . -204) (undo-tree-id592 . -204) (undo-tree-id593 . -204) (undo-tree-id594 . -204) (undo-tree-id595 . -161) (undo-tree-id596 . -161) (undo-tree-id597 . -118) (undo-tree-id598 . -118) (undo-tree-id599 . -75) (undo-tree-id600 . -75) (undo-tree-id601 . -17) (undo-tree-id602 . -17) (undo-tree-id603 . -17) (undo-tree-id604 . -17) (undo-tree-id605 . -206) 917 (t 25819 20395 154837 663000)) nil (25819 23388 448361 295000) 0 nil])
([nil nil ((150 . 151) (t 25819 37725 327443 906000)) nil (25819 64717 74644 75000) 0 nil])
([nil nil ((161 . 162)) nil (25820 36241 894717 241000) 0 nil])
([nil nil ((186 . 187) (t 25820 33918 465217 901000) 176) nil (25820 36266 695561 831000) 0 nil] [nil nil ((nil rear-nonsticky nil 229 . 230) (nil fontified nil 177 . 230) (177 . 230) 176 (t 25820 33918 465217 901000)) ((#("use bevy_inspector_egui::quick::WorldInspectorPlugin;" 0 4 (fontified nil) 4 23 (fontified nil face font-lock-constant-face) 23 25 (fontified nil) 25 30 (fontified nil face font-lock-constant-face) 30 32 (fontified nil) 32 52 (fontified nil face font-lock-type-face) 52 53 (fontified nil rear-nonsticky nil)) . 177) (undo-tree-id0 . -52) (undo-tree-id1 . -52) (undo-tree-id2 . -52) (nil rear-nonsticky t 229 . 230)) (25820 36241 894385 410000) 0 nil])
([nil nil ((nil rear-nonsticky nil 239 . 240) (nil fontified nil 187 . 240) (187 . 240)) nil (25820 36266 695560 794000) 0 nil])
nil
([nil nil ((#("//use scene::ScenePlugin;
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 26 (fontified t face font-lock-comment-face)) . 241) (undo-tree-id19 . -25) (undo-tree-id20 . -24) (undo-tree-id21 . -24) (undo-tree-id22 . -24) (undo-tree-id23 . -24) (undo-tree-id24 . -24) (undo-tree-id25 . -24) (undo-tree-id26 . -26) 265) nil (25820 36266 695559 190000) 0 nil])
([nil nil ((nil rear-nonsticky nil 186 . 187) (#("
" 0 1 (face font-lock-comment-face fontified nil)) . -212) (186 . 213) 176) nil (25820 36266 695553 432000) 0 nil])
([nil nil ((1260 . 1268) (1240 . 1260) (#("World" 0 5 (fontified t face font-lock-type-face)) . -1240) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -2) (undo-tree-id6 . -2) (undo-tree-id7 . -3) (undo-tree-id8 . -3) (undo-tree-id9 . -4) (undo-tree-id10 . -4) (undo-tree-id11 . -5) (undo-tree-id12 . -5) (undo-tree-id13 . -5) (undo-tree-id14 . -5) 1245 (1240 . 1245) (#("w" 0 1 (fontified t)) . -1240) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) 1241 (1240 . 1241) (1234 . 1240) 1207) nil (25820 36266 695550 583000) 0 nil])
([nil nil ((1235 . 1243) (#("	" 0 1 (fontified t)) . 1235) 1267) nil (25820 36266 695528 741000) 0 nil])
([nil nil ((591 . 592) (#("2" 0 1 (fontified t)) . 591) (undo-tree-id28 . -1) (t 25820 36266 698562 434000)) nil (25820 40447 411973 145000) 0 nil])
([nil nil ((593 . 594) (#("0" 0 1 (fontified t)) . 593) (undo-tree-id27 . -1)) nil (25820 40447 411968 21000) 0 nil])
([nil nil ((#("5" 0 1 (fontified t)) . 1087) (t 25820 40447 415249 86000) (1088 . 1089) 1087 (t 25820 40447 415249 86000)) nil (25820 41875 421550 37000) 0 nil])
([nil nil ((909 . 910) (t 25820 40495 645249 317000)) nil (25820 47645 391343 510000) 0 nil] [nil nil ((#("," 0 1 (fontified t)) . 1102) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) 1103 (1102 . 1103) (1101 . 1102) (1100 . 1101) (1099 . 1100) (1098 . 1099) (1097 . 1098) (1096 . 1097) (1095 . 1096) (1094 . 1095) (1093 . 1094) (1092 . 1093) (#("," 0 1 (fontified t)) . 1091) (1092 . 1093) 1091 (#("0" 0 1 (fontified t)) . 1090) (1091 . 1092) 1090 (#("." 0 1 (fontified t)) . 1089) (1090 . 1091) 1089 (#("0" 0 1 (fontified t)) . 1088) (t 25820 40495 645249 317000) (1089 . 1090) 1088 (t 25820 40495 645249 317000)) ((#("," 0 1 (fontified nil)) . 1089) (t 25820 40495 645249 317000) (1088 . 1089) (#("," 0 1 (fontified nil)) . 1090) (1089 . 1090) (#("," 0 1 (fontified nil)) . 1091) (1090 . 1091) (#("," 0 1 (fontified nil)) . 1092) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (1091 . 1092) (#("," 0 1 (fontified nil)) . 1092) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (#("," 0 1 (fontified nil)) . 1093) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (#("," 0 1 (fontified nil)) . 1094) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (#("," 0 1 (fontified nil)) . 1095) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (#("," 0 1 (fontified nil)) . 1096) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (#("," 0 1 (fontified nil)) . 1097) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (#("," 0 1 (fontified nil)) . 1098) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (#("," 0 1 (fontified nil)) . 1099) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (#("," 0 1 (fontified nil)) . 1100) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (#("," 0 1 (fontified nil)) . 1101) (undo-tree-id81 . 1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (#("," 0 1 (fontified nil)) . 1102) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (1102 . 1103)) (25820 41875 420777 717000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t face font-lock-comment-delimiter-face)) . 187) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (t 25820 52343 771864 900000)) nil (25821 22479 379800 846000) 0 nil])
nil
([nil nil ((#("/" 0 1 (fontified t)) . 187) (undo-tree-id20 . -1) (undo-tree-id21 . -1)) nil (25821 22479 379798 551000) 0 nil])
([nil nil ((1439 . 1450) (#("Scene" 0 5 (fontified t face font-lock-type-face)) . -1439) (undo-tree-id4 . -5) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -2) (undo-tree-id8 . -2) (undo-tree-id9 . -3) (undo-tree-id10 . -3) (undo-tree-id11 . -4) (undo-tree-id12 . -4) (undo-tree-id13 . -5) (undo-tree-id14 . -5) (undo-tree-id15 . -5) (undo-tree-id16 . -5) (undo-tree-id17 . -5) (undo-tree-id18 . -5) (undo-tree-id19 . -5) 1444 (1439 . 1444) (1433 . 1439) 1432) nil (25821 22479 379795 395000) 0 nil])
([nil nil ((#("scene::ScenePlugin;
use " 0 5 (fontified t face font-lock-constant-face) 5 7 (fontified t) 7 18 (fontified t face font-lock-type-face) 18 20 (fontified t) 20 23 (face font-lock-keyword-face)) . 191) (undo-tree-id0 . -20) (undo-tree-id1 . -20) (undo-tree-id2 . -20) (undo-tree-id3 . -20) (257 . 281) (1434 . 1436) (#("	" 0 1 (fontified t)) . 1434) (1439 . 1445) (1450 . 1451) 1449) nil (25821 22479 379781 860000) 0 nil])
([nil nil ((241 . 243) (t 25821 22479 385800 79000)) nil (25822 32143 415331 340000) 0 nil])
([nil nil ((176 . 178)) nil (25822 32143 415330 248000) 0 nil])
([nil nil ((1439 . 1441)) nil (25822 32143 415329 166000) 0 nil])
([nil nil ((1439 . 1450) 1440) nil (25822 32143 415324 277000) 0 nil])
([nil nil ((#("    commands.spawn((
        Collider::cuboid(50.0, 0.1, 50.0),
        TransformBundle::from(Transform::from_xyz(0.0, -0.1, 0.0)),
    ));
" 0 29 (fontified t) 29 37 (fontified t face font-lock-type-face) 37 64 (fontified t) 64 72 (fontified t) 72 87 (fontified t face font-lock-type-face) 87 94 (fontified t) 94 103 (fontified t face font-lock-type-face) 103 132 (fontified t) 132 140 (fontified t)) . 473) (undo-tree-id34 . -139) (undo-tree-id35 . -132) (undo-tree-id36 . -132) (undo-tree-id37 . -132) (undo-tree-id38 . -132) 605 (t 25822 32143 417184 338000)) nil (25822 32282 899523 973000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . -472) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) 473) nil (25822 32282 899517 240000) 0 nil])
([nil nil ((#("fn setup_physics(mut commands: Commands) {}
" 0 2 (fontified t face font-lock-keyword-face) 2 3 (fontified t) 3 16 (fontified t face font-lock-function-name-face) 16 17 (fontified t) 17 20 (fontified t face font-lock-keyword-face) 20 21 (fontified t) 21 29 (fontified t face font-lock-variable-name-face) 29 31 (fontified t) 31 39 (fontified t face font-lock-type-face) 39 42 (fontified t) 42 44 (fontified t)) . 430) (undo-tree-id51 . -43) (undo-tree-id52 . -42) (undo-tree-id53 . -42) (undo-tree-id54 . -42) (undo-tree-id55 . 2) (undo-tree-id56 . -42) (undo-tree-id57 . -42) (undo-tree-id58 . -42) (undo-tree-id59 . -42) (undo-tree-id60 . -42) (undo-tree-id61 . -42) (undo-tree-id62 . -17) (undo-tree-id63 . -29) (undo-tree-id64 . -17) (undo-tree-id65 . -29) (undo-tree-id66 . -17) (undo-tree-id67 . -21) (undo-tree-id68 . -21) (undo-tree-id69 . -29) (undo-tree-id70 . -21) (undo-tree-id71 . -29) (undo-tree-id72 . -21) (undo-tree-id73 . -29) (undo-tree-id74 . -42) (undo-tree-id75 . -42) (undo-tree-id76 . -44) (undo-tree-id77 . -44) (undo-tree-id78 . -44) (undo-tree-id79 . -44) (undo-tree-id80 . -42) (undo-tree-id81 . -42) (undo-tree-id82 . -42) (undo-tree-id83 . -42) (undo-tree-id84 . -44) (undo-tree-id85 . -44) (undo-tree-id86 . -42) (undo-tree-id87 . -42) (undo-tree-id88 . 2) (undo-tree-id89 . -43) (undo-tree-id90 . 3) (undo-tree-id91 . -42) (undo-tree-id92 . -42) (undo-tree-id93 . -42) (undo-tree-id94 . -42) (undo-tree-id95 . -44) 472 (t 25822 32282 903853 847000)) nil (25822 32963 194301 983000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 430) (undo-tree-id49 . 1) (undo-tree-id50 . -1)) nil (25822 32963 194276 895000) 0 nil])
([nil nil ((#("        .add_systems(Startup, setup_physics)
" 0 21 (fontified t) 21 28 (fontified t face font-lock-type-face) 28 45 (fontified t)) . 1301) (undo-tree-id39 . -44) (undo-tree-id40 . -12) (undo-tree-id41 . -45) (undo-tree-id42 . -45) (undo-tree-id43 . -45) (undo-tree-id44 . -45) (undo-tree-id45 . -12) (undo-tree-id46 . -12) (undo-tree-id47 . -12) (undo-tree-id48 . -45) 1313) nil (25822 32963 194271 976000) 0 nil])
([nil nil ((1216 . 1218) (t 25822 32963 197199 479000)) nil (25822 35165 543533 974000) 0 nil])
([nil nil ((592 . 593) (#("T" 0 1 (fontified t face font-lock-type-face)) . 592) (undo-tree-id96 . -1) (t 25822 35165 550573 167000)) nil (25823 27658 18032 147000) 0 nil])
([nil nil ((592 . 593) (#("t" 0 1 (fontified t)) . 592) (undo-tree-id97 . -1) (592 . 593) (#("Q" 0 1 (fontified t face font-lock-type-face)) . 592) (undo-tree-id98 . -1) (t 25823 27658 31583 81000)) nil (25823 27673 539281 851000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t face font-lock-comment-delimiter-face)) . 1216) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (t 25823 27673 541583 327000)) nil (25823 27721 802260 875000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . 1216) (undo-tree-id99 . -1) (undo-tree-id100 . -1)) nil (25823 27721 802255 816000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -503) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) 504 (503 . 504) (t 25823 27721 808250 830000)) nil (25823 27759 695497 880000) 0 nil])
([nil nil ((600 . 601) (#("r" 0 1 (fontified t face font-lock-type-face)) . -600) (undo-tree-id103 . -1) (undo-tree-id104 . -1) 601 (595 . 601) (#("i" 0 1 (fontified t face font-lock-type-face)) . -595) (undo-tree-id105 . -1) (595 . 596) (#("y" 0 1 (fontified t face font-lock-type-face)) . -595) (undo-tree-id106 . -1) (undo-tree-id107 . -1) 596 (592 . 596) (#("T" 0 1 (fontified t face font-lock-type-face)) . -592) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) 593) nil (25823 27759 695490 35000) 0 nil])
([nil nil ((nil rear-nonsticky nil 679 . 680) (#("
" 0 1 (fontified nil)) . -1145) (671 . 1146) 670 (t 25823 27759 698251 434000)) nil (25823 28460 137510 300000) 0 nil])
([nil nil ((#("        " 0 4 (fontified nil) 4 8 (fontified nil)) . -1017) (undo-tree-id425 . -8) (undo-tree-id426 . -8) (undo-tree-id427 . -8) (undo-tree-id428 . -8) (undo-tree-id429 . -8) (undo-tree-id430 . -8) (undo-tree-id431 . -8) (1012 . 1017) (#("            " 0 4 (fontified nil) 4 12 (fontified nil)) . -1000) (undo-tree-id432 . -8) (undo-tree-id433 . -8) (998 . 1000) (#("            " 0 4 (fontified nil) 4 12 (fontified nil)) . -995) (undo-tree-id434 . -8) (undo-tree-id435 . -8) (993 . 995) (#("                " 0 16 (fontified nil)) . -961) (undo-tree-id436 . -8) (undo-tree-id437 . -8) (955 . 961) (#("                " 0 16 (fontified nil)) . -936) (undo-tree-id438 . -8) (undo-tree-id439 . -8) (930 . 936) (#("                " 0 16 (fontified nil)) . -899) (undo-tree-id440 . -8) (undo-tree-id441 . -8) (893 . 899) (#("            " 0 4 (fontified nil) 4 12 (fontified nil)) . -861) (undo-tree-id442 . -8) (undo-tree-id443 . -8) (859 . 861) (#("            " 0 4 (fontified nil) 4 12 (fontified nil)) . -800) (undo-tree-id444 . -8) (undo-tree-id445 . -8) (798 . 800) (#("            " 0 4 (fontified nil) 4 12 (fontified nil)) . -793) (undo-tree-id446 . -8) (undo-tree-id447 . -8) (791 . 793) (#("                " 0 4 (fontified nil) 4 5 (fontified nil) 5 6 (fontified nil) 6 16 (fontified nil)) . -778) (undo-tree-id448 . -8) (undo-tree-id449 . -8) (772 . 778) (#("                " 0 4 (fontified nil) 4 8 (fontified nil) 8 9 (fontified nil) 9 16 (fontified nil)) . -760) (undo-tree-id450 . -8) (undo-tree-id451 . -8) (754 . 760) (#("                " 0 4 (fontified nil) 4 16 (fontified nil)) . -742) (undo-tree-id452 . -8) (undo-tree-id453 . -8) (736 . 742) (#("            " 0 4 (fontified nil) 4 12 (fontified nil)) . -691) (undo-tree-id454 . -8) (undo-tree-id455 . -8) (689 . 691) (#("        " 0 4 (fontified nil) 4 7 (fontified nil) 7 8 (fontified nil rear-nonsticky t)) . -677) (undo-tree-id456 . -8) (undo-tree-id457 . -8) (undo-tree-id458 . -8) (undo-tree-id459 . -8) (undo-tree-id460 . -8) (undo-tree-id461 . -8) (undo-tree-id462 . -8) (672 . 677) 1143) nil (25823 28460 137506 183000) 0 nil])
([nil nil ((#("            TransformBundle::from_transform(position.clone()),
" 0 12 (fontified t) 12 27 (fontified t face font-lock-type-face) 27 63 (fontified t)) . 1129) (undo-tree-id417 . -62) (undo-tree-id418 . -12) (undo-tree-id419 . -8) (undo-tree-id420 . -8) (undo-tree-id421 . -12) (undo-tree-id422 . -12) (undo-tree-id423 . -12) (undo-tree-id424 . -63) 1141) nil (25823 28460 137484 843000) 0 nil])
([nil nil ((#("		    maze_width / 2.0 - wall_width,
		    -wall_width / 2.0,
		    maze_height / 2.0 - wall_width,
" 0 6 (fontified t) 6 23 (fontified t) 23 24 (fontified t) 24 43 (fontified t) 43 68 (fontified t) 68 99 (fontified t) 99 100 (fontified t)) . 893) (undo-tree-id380 . -99) (undo-tree-id381 . -75) (undo-tree-id382 . -13) (undo-tree-id383 . -75) (undo-tree-id384 . -75) (undo-tree-id385 . -6) (undo-tree-id386 . -6) (undo-tree-id387 . -43) (undo-tree-id388 . -43) (undo-tree-id389 . -68) (undo-tree-id390 . -68) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -38) (undo-tree-id394 . -38) (undo-tree-id395 . -63) (undo-tree-id396 . -63) (undo-tree-id397 . -63) (undo-tree-id398 . -63) (undo-tree-id399 . -38) (undo-tree-id400 . -38) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (undo-tree-id403 . -13) (undo-tree-id404 . -13) (undo-tree-id405 . -100) (undo-tree-id406 . -13) (undo-tree-id407 . -75) (undo-tree-id408 . -13) (undo-tree-id409 . -13) (undo-tree-id410 . -50) (undo-tree-id411 . -50) (undo-tree-id412 . -62) (undo-tree-id413 . -75) (undo-tree-id414 . -75) (undo-tree-id415 . -75) (undo-tree-id416 . -100) 968) nil (25823 28460 137479 282000) 0 nil])
([nil nil ((#("		" 0 2 (fontified nil)) . 892) (undo-tree-id340 . 2) (undo-tree-id341 . -2) (undo-tree-id342 . -2) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (#("
" 0 1 (fontified t)) . -892) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) 862) nil (25823 28460 137458 914000) 0 nil])
([nil nil ((#("Transform::from_xyz()" 0 9 (fontified t face font-lock-type-face) 9 20 (fontified t) 20 21 (fontified t)) . 872) (undo-tree-id295 . -20) (undo-tree-id296 . -20) (undo-tree-id297 . -20) (undo-tree-id298 . 1) (undo-tree-id299 . -20) (undo-tree-id300 . -20) (undo-tree-id301 . -20) (undo-tree-id302 . -20) (undo-tree-id303 . -20) (undo-tree-id304 . -20) (undo-tree-id305 . -20) (undo-tree-id306 . -20) (undo-tree-id307 . -20) (undo-tree-id308 . -20) (undo-tree-id309 . -20) (undo-tree-id310 . -20) (undo-tree-id311 . -20) (undo-tree-id312 . -20) (undo-tree-id313 . -20) (undo-tree-id314 . -20) (undo-tree-id315 . -20) (undo-tree-id316 . -20) (undo-tree-id317 . -20) (undo-tree-id318 . -20) (undo-tree-id319 . -20) (undo-tree-id320 . -20) (undo-tree-id321 . -20) (undo-tree-id322 . -20) (undo-tree-id323 . -20) (undo-tree-id324 . -20) (undo-tree-id325 . -20) (undo-tree-id326 . -20) (undo-tree-id327 . -20) (undo-tree-id328 . -20) (undo-tree-id329 . -20) (undo-tree-id330 . -20) (undo-tree-id331 . -20) (undo-tree-id332 . -20) (undo-tree-id333 . -21) (undo-tree-id334 . -21) (undo-tree-id335 . -20) (undo-tree-id336 . -20) (undo-tree-id337 . -20) (undo-tree-id338 . -20) (undo-tree-id339 . -21)) nil (25823 28460 137439 508000) 0 nil])
([nil nil ((877 . 888) (#("i" 0 1 (fontified t)) . -877) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (875 . 878) (#("i" 0 1 (fontified t)) . -875) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (872 . 876)) nil (25823 28460 137417 446000) 0 nil])
([nil nil ((#("		    maze_width,
		    wall_width,
		    maze_height,
" 0 6 (fontified t) 6 16 (fontified t) 16 17 (fontified t) 17 24 (fontified t) 24 35 (fontified t) 35 42 (fontified t) 42 52 (fontified t) 52 53 (rear-nonsticky nil fontified t) 53 54 (fontified t) 54 55 (fontified t)) . 736) (undo-tree-id254 . -54) (undo-tree-id255 . -52) (undo-tree-id256 . -16) (undo-tree-id257 . -52) (undo-tree-id258 . -52) (undo-tree-id259 . -6) (undo-tree-id260 . -6) (undo-tree-id261 . -24) (undo-tree-id262 . -24) (undo-tree-id263 . -42) (undo-tree-id264 . -42) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -19) (undo-tree-id268 . -19) (undo-tree-id269 . -37) (undo-tree-id270 . -37) (undo-tree-id271 . -53) (undo-tree-id272 . -53) (undo-tree-id273 . -34) (undo-tree-id274 . -34) (undo-tree-id275 . -16) (undo-tree-id276 . -16) (undo-tree-id277 . -16) (undo-tree-id278 . -16) (undo-tree-id279 . -55) (undo-tree-id280 . -16) (undo-tree-id281 . -52) (undo-tree-id282 . -16) (undo-tree-id283 . -16) (undo-tree-id284 . -34) (undo-tree-id285 . -34) (undo-tree-id286 . -36) (undo-tree-id287 . -52) (undo-tree-id288 . -52) (undo-tree-id289 . -52) (undo-tree-id290 . -55) 788) nil (25823 28460 137413 18000) 0 nil])
([nil nil ((#("		" 0 2 (fontified nil)) . 735) (undo-tree-id216 . 2) (undo-tree-id217 . -2) (undo-tree-id218 . -2) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (#("
" 0 1 (fontified t)) . -735) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) 694) nil (25823 28460 137394 313000) 0 nil])
([nil nil ((726 . 735) (#("Box" 0 3 (fontified t face font-lock-type-face)) . 726) (undo-tree-id213 . -2) (undo-tree-id214 . -3) (undo-tree-id215 . -3)) nil (25823 28460 137327 147000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . 735) (undo-tree-id210 . 1) (undo-tree-id211 . -1) (undo-tree-id212 . -1)) nil (25823 28460 137324 712000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . 735) (undo-tree-id207 . 1) (undo-tree-id208 . -1) (undo-tree-id209 . -1)) nil (25823 28460 137322 648000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t face font-lock-type-face)) . 735) (undo-tree-id204 . 1) (undo-tree-id205 . -1) (undo-tree-id206 . -1)) nil (25823 28460 137320 795000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t face font-lock-type-face)) . 735) (undo-tree-id201 . 1) (undo-tree-id202 . -1) (undo-tree-id203 . -1)) nil (25823 28460 137318 831000) 0 nil])
([nil nil ((#("w" 0 1 (fontified t face font-lock-type-face)) . 735) (undo-tree-id198 . 1) (undo-tree-id199 . -1) (undo-tree-id200 . -1)) nil (25823 28460 137316 717000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t)) . 735) (undo-tree-id155 . -1) (undo-tree-id156 . 1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . 1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1)) nil (25823 28460 137312 379000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t)) . 735) (undo-tree-id149 . 1) (undo-tree-id150 . 1) (undo-tree-id151 . 1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1)) nil (25823 28460 137278 405000) 0 nil])
([nil nil ((758 . 765) (#("i" 0 1 (fontified t)) . -758) (undo-tree-id145 . -1) (756 . 759) (#("i" 0 1 (fontified t)) . -756) (undo-tree-id146 . -1) (754 . 757) (#("i" 0 1 (fontified t)) . -754) (undo-tree-id147 . -1) (747 . 755) (740 . 747) (#("i" 0 1 (fontified t)) . -740) (undo-tree-id148 . -1) (737 . 741) (735 . 737)) nil (25823 28460 137273 516000) 0 nil])
([nil nil ((765 . 766)) nil (25823 28460 137268 817000) 0 nil])
([nil nil ((672 . 676) (#("	" 0 1 (fontified t)) . 672) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (677 . 681) (689 . 705) (#("		" 0 2 (fontified t)) . 689) (undo-tree-id123 . -2) (undo-tree-id124 . -2) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (735 . 736) (736 . 746) (737 . 747) (749 . 758) (750 . 761) (765 . 783) (770 . 786) (#("		" 0 2 (fontified t)) . 770) (undo-tree-id127 . -2) (undo-tree-id128 . -2) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (831 . 847) (#("		" 0 2 (fontified t)) . 831) (undo-tree-id131 . -2) (undo-tree-id132 . -2) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (862 . 878) (#("		" 0 2 (fontified t)) . 862) (undo-tree-id137 . -2) (undo-tree-id138 . -2) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (876 . 884) (#("	" 0 1 (fontified t)) . 876) (undo-tree-id143 . -1) (undo-tree-id144 . -1) 765) nil (25823 28460 137262 826000) 0 nil])
([nil nil ((558 . 561) (542 . 558) (#("Standard" 0 8 (fontified t face font-lock-type-face)) . -542) (undo-tree-id463 . -8) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -2) (undo-tree-id471 . -2) (undo-tree-id472 . -3) (undo-tree-id473 . -3) (undo-tree-id474 . -4) (undo-tree-id475 . -4) (undo-tree-id476 . -5) (undo-tree-id477 . -5) (undo-tree-id478 . -6) (undo-tree-id479 . -6) (undo-tree-id480 . -7) (undo-tree-id481 . -7) (undo-tree-id482 . -8) (undo-tree-id483 . -8) (undo-tree-id484 . -8) (undo-tree-id485 . -8) (undo-tree-id486 . -8) 550 (543 . 550) (#("T" 0 1 (fontified t face font-lock-type-face)) . -543) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (undo-tree-id492 . -1) (#("a" 0 1 (fontified t face font-lock-type-face)) . -544) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (#("n" 0 1 (fontified t face font-lock-type-face)) . -545) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (#("t" 0 1 (fontified t face font-lock-type-face)) . -546) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (#("a" 0 1 (fontified t face font-lock-type-face)) . -547) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (#("n" 0 1 (fontified t face font-lock-type-face)) . -548) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (#("d" 0 1 (fontified t face font-lock-type-face)) . -549) (undo-tree-id507 . -1) (undo-tree-id508 . -1) 550 (546 . 550) (#("d" 0 1 (fontified t face font-lock-type-face)) . -546) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (undo-tree-id512 . -1) 547 (542 . 547) (#("M" 0 1 (fontified t face font-lock-type-face)) . -542) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (#("a" 0 1 (fontified t face font-lock-type-face)) . -543) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (undo-tree-id526 . -1) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (#("t" 0 1 (fontified t face font-lock-type-face)) . -544) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (undo-tree-id532 . -1) (#("e" 0 1 (fontified t face font-lock-type-face)) . -545) (undo-tree-id533 . -1) (undo-tree-id534 . -1) 546 (535 . 546) (523 . 535) (#("i" 0 1 (fontified t)) . -523) (undo-tree-id535 . -1) (514 . 524) (509 . 514) (#("[" 0 1 (fontified t)) . -509) (undo-tree-id536 . -1) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (undo-tree-id539 . -1) (#("
" 0 1 (fontified t)) . -510) (undo-tree-id540 . -1) (undo-tree-id541 . 1) (undo-tree-id542 . -1) (undo-tree-id543 . -1) (undo-tree-id544 . -1) (undo-tree-id545 . -1) (#("	" 0 1 (fontified t)) . -511) (undo-tree-id546 . -1) (undo-tree-id547 . -1) (undo-tree-id548 . -1) (undo-tree-id549 . -1) 512 (510 . 512) (498 . 510) (477 . 498) (472 . 477) (t 25823 28460 141597 257000) 471) nil (25823 28503 254813 667000) 0 nil])
([nil nil ((541 . 542) (t 25823 28503 258264 826000)) nil (25823 28516 594592 203000) 0 nil])
([nil nil ((501 . 502)) nil (25823 28516 594588 235000) 0 nil])
([nil nil ((938 . 944) (#("i" 0 1 (fontified t)) . -938) (undo-tree-id550 . -1) (937 . 939) (t 25823 28516 598265 114000)) nil (25823 28608 909473 885000) 0 nil])
([nil nil ((847 . 854)) nil (25823 28614 331480 982000) 0 nil] [nil nil ((831 . 852) (850 . 852) (870 . 872) (883 . 885) (903 . 905) (920 . 923) (936 . 937) (937 . 958) (944 . 962)) ((#(",
                " 0 2 (fontified nil) 2 18 (fontified t)) . 944) (undo-tree-id551 . 18) (#("
                    " 0 1 (fontified nil) 1 21 (fontified t)) . 937) (undo-tree-id552 . -1) (#(" " 0 1 (fontified nil)) . 936) (#("   " 0 3 (fontified t)) . 920) (#("  " 0 2 (fontified nil)) . 903) (#("  " 0 2 (fontified t)) . 883) (#("  " 0 2 (fontified nil)) . 870) (#("  " 0 2 (fontified t)) . 850) (#("
                    " 0 21 (fontified t)) . 831) (undo-tree-id553 . -21) (t 25823 28605 274933 411000)) (25823 28605 271712 753000) 0 nil])
([nil nil ((#(".into() {" 0 7 (fontified t) 7 8 (fontified t) 8 9 (fontified t)) . 847) (undo-tree-id586 . -8) (undo-tree-id587 . 1) (undo-tree-id588 . -7) (undo-tree-id589 . -7) (undo-tree-id590 . -7) (undo-tree-id591 . -8) (undo-tree-id592 . -7) (undo-tree-id593 . -1) (undo-tree-id594 . -8) (undo-tree-id595 . -9) (undo-tree-id596 . -7) (undo-tree-id597 . -8) (undo-tree-id598 . -8) (undo-tree-id599 . -8) (undo-tree-id600 . -9) (undo-tree-id601 . -7) (undo-tree-id602 . -7) (undo-tree-id603 . -7) (undo-tree-id604 . -7) (undo-tree-id605 . -7) (undo-tree-id606 . -7) (undo-tree-id607 . -6) (undo-tree-id608 . -9) (undo-tree-id609 . -9) (t 25823 28614 334933 581000)) nil (25823 28629 136923 925000) 0 nil])
nil
([nil nil ((#("                    radius: 0.5,
" 0 9 (fontified t) 9 10 (fontified t) 10 20 (fontified t) 20 26 (fontified t face font-lock-variable-name-face) 26 32 (fontified t) 32 33 (fontified t)) . 848) (undo-tree-id578 . -32) (undo-tree-id579 . -31) (undo-tree-id580 . -31) (undo-tree-id581 . -31) (undo-tree-id582 . -31) (undo-tree-id583 . -31) (undo-tree-id584 . -31) (undo-tree-id585 . -33) 879) nil (25823 28629 136911 712000) 0 nil])
([nil nil ((#("                    subdivisions: 2,
" 0 8 (fontified t) 8 9 (fontified t) 9 20 (fontified t) 20 32 (fontified t face font-lock-variable-name-face) 32 35 (fontified t) 35 37 (fontified t)) . 848) (undo-tree-id570 . -36) (undo-tree-id571 . -31) (undo-tree-id572 . -31) (undo-tree-id573 . -31) (undo-tree-id574 . -31) (undo-tree-id575 . -31) (undo-tree-id576 . -31) (undo-tree-id577 . -37) 879) nil (25823 28629 136906 31000) 0 nil])
([nil nil ((#("                }.into())),
" 0 16 (fontified t) 16 17 (fontified t) 17 18 (fontified t) 18 24 (fontified t) 24 28 (fontified t)) . 848) (undo-tree-id555 . -27) (undo-tree-id556 . -17) (undo-tree-id557 . -17) (undo-tree-id558 . 3) (undo-tree-id559 . -17) (undo-tree-id560 . -17) (undo-tree-id561 . -26) (undo-tree-id562 . -26) (undo-tree-id563 . -26) (undo-tree-id564 . -26) (undo-tree-id565 . -26) (undo-tree-id566 . -26) (undo-tree-id567 . -26) (undo-tree-id568 . -26) (undo-tree-id569 . -28) 874) nil (25823 28629 136899 339000) 0 nil])
([nil nil ((859 . 868) (#("i" 0 1 (fontified t)) . -859) (undo-tree-id554 . -1) (856 . 860) (847 . 856)) nil (25823 28629 136885 834000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t)) . 865) (undo-tree-id634 . 1) (undo-tree-id635 . -1) (undo-tree-id636 . -1) (undo-tree-id637 . -1) (t 25823 28629 141600 515000)) nil (25823 28668 598392 671000) 0 nil])
([nil nil ((#("M" 0 1 (fontified t face font-lock-type-face)) . 820) (undo-tree-id632 . -1) (undo-tree-id633 . -1)) nil (25823 28668 598389 435000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t face font-lock-constant-face)) . 820) (undo-tree-id630 . -1) (undo-tree-id631 . -1)) nil (25823 28668 598387 842000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t face font-lock-constant-face)) . 820) (undo-tree-id628 . -1) (undo-tree-id629 . -1)) nil (25823 28668 598386 229000) 0 nil])
([nil nil ((#("h" 0 1 (fontified t face font-lock-constant-face)) . 820) (undo-tree-id626 . -1) (undo-tree-id627 . -1)) nil (25823 28668 598384 696000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . 820) (undo-tree-id624 . -1) (undo-tree-id625 . -1)) nil (25823 28668 598383 153000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . 820) (undo-tree-id622 . -1) (undo-tree-id623 . -1)) nil (25823 28668 598381 370000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . 820) (undo-tree-id620 . -1) (undo-tree-id621 . -1)) nil (25823 28668 598379 727000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . 820) (undo-tree-id618 . -1) (undo-tree-id619 . -1)) nil (25823 28668 598377 873000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . 820) (undo-tree-id616 . -1) (undo-tree-id617 . -1)) nil (25823 28668 598376 80000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t)) . 820) (undo-tree-id614 . -1) (undo-tree-id615 . -1)) nil (25823 28668 598373 255000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t)) . 820) (undo-tree-id610 . 1) (undo-tree-id611 . -1) (undo-tree-id612 . -1) (undo-tree-id613 . -1)) nil (25823 28668 598368 426000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . 847) (undo-tree-id657 . -1) (undo-tree-id658 . -1) (undo-tree-id659 . -1) (undo-tree-id660 . -1) (undo-tree-id661 . -1) (t 25823 28668 604934 555000)) nil (25823 28679 125123 930000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . 847) (undo-tree-id655 . -1) (undo-tree-id656 . -1)) nil (25823 28679 125120 643000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . 847) (undo-tree-id653 . -1) (undo-tree-id654 . -1)) nil (25823 28679 125118 960000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . 847) (undo-tree-id651 . -1) (undo-tree-id652 . -1)) nil (25823 28679 125116 596000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . 847) (undo-tree-id646 . -1) (undo-tree-id647 . -1) (undo-tree-id648 . -1) (undo-tree-id649 . -1) (undo-tree-id650 . -1)) nil (25823 28679 125114 412000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t)) . 847) (undo-tree-id642 . 1) (undo-tree-id643 . -1) (undo-tree-id644 . -1) (undo-tree-id645 . -1)) nil (25823 28679 125109 703000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t)) . 847) (undo-tree-id638 . 1) (undo-tree-id639 . -1) (undo-tree-id640 . -1) (undo-tree-id641 . -1)) nil (25823 28679 125103 611000) 0 nil])
([nil nil ((852 . 867) (#("i" 0 1 (fontified t)) . -852) (undo-tree-id662 . -1) (847 . 853) (t 25823 28679 128268 87000)) nil (25823 28695 375472 768000) 0 nil])
([nil nil ((860 . 861) (847 . 860) (#(" " 0 1 (fontified t)) . -847) (undo-tree-id663 . -1) (undo-tree-id664 . -1) (undo-tree-id665 . -1) (undo-tree-id666 . -1) 848 (839 . 848) (#("i" 0 1 (fontified t)) . -839) (undo-tree-id667 . -1) (836 . 840) (#(":" 0 1 (fontified t)) . -836) (undo-tree-id668 . -1) (undo-tree-id669 . -1) (undo-tree-id670 . -1) (undo-tree-id671 . -1) (undo-tree-id672 . -1) (undo-tree-id673 . -1) (undo-tree-id674 . -1) (#(":" 0 1 (fontified t)) . -837) (undo-tree-id675 . -1) (undo-tree-id676 . -1) (undo-tree-id677 . -1) (undo-tree-id678 . -1) (undo-tree-id679 . -1) (undo-tree-id680 . -1) (undo-tree-id681 . -1) (#("d" 0 1 (fontified t)) . -838) (undo-tree-id682 . -1) (undo-tree-id683 . -1) (undo-tree-id684 . -1) (undo-tree-id685 . -1) (undo-tree-id686 . -1) (undo-tree-id687 . -1) (undo-tree-id688 . -1) (#("e" 0 1 (fontified t)) . -839) (undo-tree-id689 . -1) (undo-tree-id690 . -1) (undo-tree-id691 . -1) (undo-tree-id692 . -1) (undo-tree-id693 . -1) (undo-tree-id694 . -1) (undo-tree-id695 . -1) (#("f" 0 1 (fontified t)) . -840) (undo-tree-id696 . -1) (undo-tree-id697 . -1) (undo-tree-id698 . -1) (undo-tree-id699 . -1) (undo-tree-id700 . -1) (undo-tree-id701 . -1) (undo-tree-id702 . -1) (#("a" 0 1 (fontified t)) . -841) (undo-tree-id703 . -1) (undo-tree-id704 . -1) (undo-tree-id705 . -1) (undo-tree-id706 . -1) (undo-tree-id707 . -1) (undo-tree-id708 . -1) (undo-tree-id709 . -1) (#("u" 0 1 (fontified t)) . -842) (undo-tree-id710 . -1) (undo-tree-id711 . -1) (undo-tree-id712 . -1) (undo-tree-id713 . -1) (undo-tree-id714 . -1) (undo-tree-id715 . -1) (undo-tree-id716 . -1) (#("l" 0 1 (fontified t)) . -843) (undo-tree-id717 . -1) (undo-tree-id718 . -1) (undo-tree-id719 . -1) (undo-tree-id720 . -1) (undo-tree-id721 . -1) (undo-tree-id722 . -1) (undo-tree-id723 . -1) (#("t" 0 1 (fontified t)) . -844) (undo-tree-id724 . -1) (undo-tree-id725 . -1) (undo-tree-id726 . -1) (undo-tree-id727 . -1) (undo-tree-id728 . -1) (undo-tree-id729 . -1) (undo-tree-id730 . -1) (#("(" 0 1 (fontified t)) . -845) (undo-tree-id731 . -1) (undo-tree-id732 . -1) (undo-tree-id733 . -1) (undo-tree-id734 . -1) (undo-tree-id735 . -1) (undo-tree-id736 . -1) (undo-tree-id737 . -1) (#(")" 0 1 (fontified t)) . -846) (undo-tree-id738 . -1) (undo-tree-id739 . -1) (undo-tree-id740 . -1) (undo-tree-id741 . -1) (undo-tree-id742 . -1) (undo-tree-id743 . 1) (undo-tree-id744 . -1) (undo-tree-id745 . -1) 847 (t 25823 28695 378268 353000)) nil (25823 28732 792225 693000) 0 nil])
([nil nil ((820 . 841) (836 . 837) (837 . 853) (838 . 846) (848 . 859) (849 . 862) (860 . 881) (861 . 882) (872 . 893) (881 . 899) 860) nil (25823 28732 792101 740000) 0 nil])
([nil nil ((887 . 890) (#("i" 0 1 (fontified t face font-lock-variable-name-face)) . -887) (undo-tree-id746 . -1) (884 . 888) (#("size" 0 4 (fontified t face font-lock-variable-name-face)) . 884) (undo-tree-id747 . -3) (undo-tree-id748 . -4) (undo-tree-id749 . -4) (undo-tree-id750 . -4) (undo-tree-id751 . -4) (t 25823 28732 794935 660000)) nil (25823 28745 27013 609000) 0 nil])
([nil nil ((894 . 895) (t 25823 28745 31602 525000)) nil (25823 28761 177618 56000) 0 nil])
([nil nil ((1690 . 1692) (t 25823 28761 181602 789000)) nil (25823 28800 97788 511000) 0 nil])
([nil nil ((1089 . 1090) (#("1" 0 1 (fontified t)) . 1089) (undo-tree-id755 . -1) (t 25823 28800 104936 774000)) nil (25823 28826 478772 242000) 0 nil])
([nil nil ((1096 . 1097) (#("0" 0 1 (fontified t)) . 1096) (undo-tree-id754 . -1)) nil (25823 28826 478770 348000) 0 nil])
([nil nil ((1101 . 1102) (#("0" 0 1 (fontified t)) . 1101) (undo-tree-id753 . -1)) nil (25823 28826 478767 974000) 0 nil])
([nil current ((1091 . 1092) (#("0" 0 1 (fontified t)) . 1091) (undo-tree-id752 . -1)) nil (25823 28826 478762 944000) 0 nil])
nil
