(undo-tree-save-format-version . 1)
"6053022a5a73e8cd1346aad8c22d4adcf3f9d1f7"
[nil nil nil nil (25827 50466 3602 59000) 0 nil]
([nil nil ((#("fn exit_on_escape(mut exit: EventWriter<AppExit>, keys: Res<Input<KeyCode>>) {
    if keys.just_pressed(KeyCode::Escape) {
        exit.send(AppExit);
    }
}

" 0 2 (face font-lock-keyword-face fontified t) 2 3 (fontified t) 3 17 (face font-lock-function-name-face fontified t) 17 18 (fontified t) 18 21 (face font-lock-keyword-face fontified t) 21 22 (fontified t) 22 26 (face font-lock-variable-name-face fontified t) 26 28 (fontified t) 28 39 (face font-lock-type-face fontified t) 39 40 (fontified t) 40 47 (face font-lock-type-face fontified t) 47 50 (fontified t) 50 54 (face font-lock-variable-name-face fontified t) 54 56 (fontified t) 56 59 (face font-lock-type-face fontified t) 59 60 (fontified t) 60 65 (face font-lock-type-face fontified t) 65 66 (fontified t) 66 73 (face font-lock-type-face fontified t) 73 83 (fontified t) 83 85 (face font-lock-keyword-face fontified t) 85 104 (fontified t) 104 111 (face font-lock-type-face fontified t) 111 113 (fontified t) 113 119 (face font-lock-type-face fontified t) 119 141 (fontified t) 141 148 (face font-lock-type-face fontified t) 148 160 (fontified t)) . 347) (undo-tree-id106 . -159) (undo-tree-id107 . -1) (undo-tree-id108 . -159) (undo-tree-id109 . -159) (undo-tree-id110 . -159) 506 (t 25826 19404 879095 654000)) nil (25827 50466 3599 684000) 0 nil])
([nil nil ((379 . 380) (368 . 379) (#("Utils" 0 5 (face font-lock-type-face fontified t)) . -368) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -2) (undo-tree-id91 . -2) (undo-tree-id92 . -2) (undo-tree-id93 . -4) (undo-tree-id94 . -4) (undo-tree-id95 . -5) (undo-tree-id96 . -5) (undo-tree-id97 . -5) (undo-tree-id98 . -5) (undo-tree-id99 . -5) (undo-tree-id100 . -5) 373 (370 . 373) (#("i" 0 1 (face font-lock-type-face fontified t)) . -370) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (363 . 371) (#("i" 0 1 (face font-lock-constant-face fontified t)) . -363) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (357 . 364) (356 . 357) (352 . 356) (#("i" 0 1 (face font-lock-constant-face fontified t)) . -352) (undo-tree-id105 . -1) (346 . 353) (345 . 346) 328) nil (25827 50466 3594 446000) 0 nil])
([nil nil ((4528 . 4529) (4517 . 4528) (#("Utils" 0 5 (face font-lock-type-face fontified t)) . -4517) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -2) (undo-tree-id3 . -2) (undo-tree-id4 . -2) (undo-tree-id5 . -4) (undo-tree-id6 . -4) (undo-tree-id7 . -5) (undo-tree-id8 . -5) (undo-tree-id9 . -5) (undo-tree-id10 . -5) 4522 (4519 . 4522) (#("i" 0 1 (face font-lock-type-face fontified t)) . -4519) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (4517 . 4520) (4516 . 4517) (#(" " 0 1 (fontified t)) . -4516) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (#("u" 0 1 (fontified t)) . -4517) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (#("t" 0 1 (fontified t)) . -4518) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (#("i" 0 1 (fontified t)) . -4519) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (#("l" 0 1 (fontified t)) . -4520) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (#("s" 0 1 (fontified t)) . -4521) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) 4522 (4519 . 4522) (#("i" 0 1 (fontified t)) . -4519) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (4517 . 4520) (4511 . 4517) 4487) nil (25827 50466 3500 90000) 0 nil])
([nil nil ((4512 . 4520) (#("	" 0 1 (fontified t)) . 4512) 4528) nil (25827 50466 3391 68000) 0 nil])
([nil nil ((#("exit_on_e" 0 9 (fontified t)) . 4622) (undo-tree-id113 . -8) (undo-tree-id114 . -9) (t 25827 50466 7864 682000)) nil (25827 50475 655920 915000) 0 nil])
([nil nil ((#("scape, " 0 7 (fontified t)) . 4622) (undo-tree-id111 . -6) (undo-tree-id112 . -7)) nil (25827 50475 655915 328000) 0 nil])
([nil nil ((#("use bevy::app::AppExit;
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 8 (fontified t face font-lock-constant-face) 8 10 (fontified t) 10 13 (fontified t face font-lock-constant-face) 13 15 (fontified t) 15 22 (fontified t face font-lock-type-face) 22 23 (fontified t) 23 24 (fontified t)) . 1) (undo-tree-id115 . -23) (undo-tree-id116 . -23) (undo-tree-id117 . -22) (undo-tree-id118 . -22) (undo-tree-id119 . -22) (undo-tree-id120 . -22) (undo-tree-id121 . -22) (undo-tree-id122 . -22) (undo-tree-id123 . -22) (undo-tree-id124 . -22) (undo-tree-id125 . -22) (undo-tree-id126 . -22) (undo-tree-id127 . -22) (undo-tree-id128 . -22) (undo-tree-id129 . -22) (undo-tree-id130 . -24) 23 (t 25827 50475 657811 728000)) nil (25827 50496 770406 220000) 0 nil])
([nil nil ((#("            WorldInspectorPlugin::new(),
" 0 12 (fontified t) 12 32 (face font-lock-type-face fontified t) 32 41 (fontified t)) . 4199) (undo-tree-id172 . -40) (t 25827 50498 104355 221000)) nil (25827 50562 442761 989000) 0 nil] [nil nil ((#("use bevy::diagnostic::FrameTimeDiagnosticsPlugin;
" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 8 (face font-lock-constant-face fontified t) 8 10 (fontified t) 10 20 (face font-lock-constant-face fontified t) 20 22 (fontified t) 22 48 (face font-lock-type-face fontified t) 48 50 (fontified t)) . 1) (undo-tree-id140 . -49) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -22) (undo-tree-id144 . -22) (undo-tree-id145 . -22) (undo-tree-id146 . -22) (undo-tree-id147 . -22) (undo-tree-id148 . -22) (undo-tree-id149 . -22) (undo-tree-id150 . -22) (undo-tree-id151 . -22) (undo-tree-id152 . -22) (undo-tree-id153 . -22) (undo-tree-id154 . -22) (undo-tree-id155 . -22) (undo-tree-id156 . -22) (undo-tree-id157 . -22) (undo-tree-id158 . -22) (undo-tree-id159 . -22) (undo-tree-id160 . -50) 23 (t 25827 50481 54448 781000)) ((1 . 51) (t 25827 50493 201048 794000)) (25827 50491 199009 927000) 0 nil])
([nil nil ((#("            FrameTimeDiagnosticsPlugin,
" 0 12 (fontified t) 12 38 (face font-lock-type-face fontified t) 38 40 (fontified t)) . 4360) (undo-tree-id170 . -39) (undo-tree-id171 . -27) 4387) nil (25827 50562 442859 697000) 0 nil])
([nil nil ((#("use bevy_inspector_egui::quick::WorldInspectorPlugin;
" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 23 (face font-lock-constant-face fontified t) 23 25 (fontified t) 25 30 (face font-lock-constant-face fontified t) 30 32 (fontified t) 32 52 (face font-lock-type-face fontified t) 52 54 (fontified t)) . 23) (undo-tree-id131 . -53) (undo-tree-id132 . -1) (undo-tree-id133 . -20) (undo-tree-id134 . -20) (undo-tree-id135 . -20) (undo-tree-id136 . -20) (undo-tree-id137 . -20) (undo-tree-id138 . -20) (undo-tree-id139 . -54) 43) ((23 . 77) (t 25827 50488 81076 890000)) (25827 50488 80946 77000) 0 nil])
([nil nil ((#("use bevy_inspector_egui::quick::WorldInspectorPlugin;
" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 23 (face font-lock-constant-face fontified t) 23 25 (fontified t) 25 30 (face font-lock-constant-face fontified t) 30 32 (fontified t) 32 52 (face font-lock-type-face fontified t) 52 54 (fontified t)) . 73) (undo-tree-id173 . -53) (undo-tree-id174 . -1) (undo-tree-id175 . -12) (undo-tree-id176 . -12) (undo-tree-id177 . -12) (undo-tree-id178 . -12) (undo-tree-id179 . -12) (undo-tree-id180 . -12) (undo-tree-id181 . -12) (undo-tree-id182 . -12) (undo-tree-id183 . -12) (undo-tree-id184 . -12) (undo-tree-id185 . -12) (undo-tree-id186 . -12) (undo-tree-id187 . -12) (undo-tree-id188 . -54) 85 (t 25827 50574 87271 602000)) nil (25827 50616 751425 497000) 0 nil] [nil nil ((#("            //RapierDebugRenderPlugin::default(),
" 0 12 (fontified t) 12 14 (face font-lock-comment-delimiter-face fontified t) 14 39 (face font-lock-comment-face fontified t) 39 50 (face font-lock-comment-face fontified t)) . 4310) (undo-tree-id161 . -50) (undo-tree-id162 . -49) (undo-tree-id163 . -20) (undo-tree-id164 . -20) (undo-tree-id165 . -20) (undo-tree-id166 . -20) (undo-tree-id167 . -20) (undo-tree-id168 . -20) (undo-tree-id169 . -50) 4330) ((4310 . 4360)) (25827 50562 442753 468000) 0 nil])
nil
([nil nil ((#("use bevy::diagnostic::FrameTimeDiagnosticsPlugin;
" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 8 (face font-lock-constant-face fontified t) 8 10 (fontified t) 10 20 (face font-lock-constant-face fontified t) 20 22 (fontified t) 22 48 (face font-lock-type-face fontified t) 48 50 (fontified t)) . 1) (undo-tree-id189 . -4) (undo-tree-id190 . -49) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -22) (undo-tree-id194 . -4) (undo-tree-id195 . -4) (undo-tree-id196 . -4) (undo-tree-id197 . -4) (undo-tree-id198 . -4) (undo-tree-id199 . -4) (undo-tree-id200 . -4) (undo-tree-id201 . -4) (undo-tree-id202 . -4) (undo-tree-id203 . -4) (undo-tree-id204 . -4) (undo-tree-id205 . -4) (undo-tree-id206 . -50) 5 (t 25827 50616 757037 454000)) nil (25827 50809 995719 701000) 0 nil])
nil
([nil nil ((#("
// fn update_player(
//     mut query: Query<(&Transform, &mut KinematicCharacterController)>,
//     mut maze_timer: ResMut<MazeTimer>,
//     keys: Res<Input<KeyCode>>,
//     time: Res<Time>,
// ) {
//     if keys.any_pressed([KeyCode::Up, KeyCode::Down, KeyCode::Left, KeyCode::Right])
//         && !maze_timer.player_started
//     {
//         maze_timer.player_started = true;
//         maze_timer.start_time = Some(Instant::now())
//     }
//     let (transform, mut controller) = query.single_mut();
//     let mut velocity = Vec3::ZERO;
//     for key in keys.get_pressed() {
//         match key {
//             KeyCode::Up => velocity += transform.forward(),
//             KeyCode::Down => velocity += transform.back(),
//             KeyCode::Left => velocity += transform.left(),
//             KeyCode::Right => velocity += transform.right(),
//             _ => (),
//         }
//     }
//     controller.translation = Some(velocity.normalize_or_zero() * time.delta_seconds());
// }
" 0 1 (fontified t) 1 4 (face font-lock-comment-delimiter-face fontified t) 4 22 (face font-lock-comment-face fontified t) 22 29 (face font-lock-comment-delimiter-face fontified t) 29 35 (face font-lock-comment-face fontified t) 35 45 (fontified t face font-lock-comment-face) 45 46 (fontified t face font-lock-comment-face syntax-table (1)) 46 73 (fontified t face font-lock-comment-face) 73 93 (fontified t face font-lock-comment-face) 93 94 (fontified t face font-lock-comment-face syntax-table (1)) 94 96 (fontified t face font-lock-comment-face) 96 103 (face font-lock-comment-delimiter-face fontified t) 103 125 (face font-lock-comment-face fontified t) 125 126 (face font-lock-comment-face fontified t syntax-table (1)) 126 135 (face font-lock-comment-face fontified t) 135 136 (face font-lock-comment-face fontified t syntax-table (1)) 136 138 (face font-lock-comment-face fontified t) 138 145 (face font-lock-comment-delimiter-face fontified t) 145 154 (face font-lock-comment-face fontified t) 154 155 (face font-lock-comment-face fontified t syntax-table (1)) 155 160 (face font-lock-comment-face fontified t) 160 161 (face font-lock-comment-face fontified t syntax-table (1)) 161 168 (face font-lock-comment-face fontified t) 168 169 (face font-lock-comment-face fontified t syntax-table (1)) 169 170 (face font-lock-comment-face fontified t syntax-table (1)) 170 172 (face font-lock-comment-face fontified t) 172 179 (face font-lock-comment-delimiter-face fontified t) 179 188 (face font-lock-comment-face fontified t) 188 189 (face font-lock-comment-face fontified t syntax-table (1)) 189 193 (face font-lock-comment-face fontified t) 193 194 (face font-lock-comment-face fontified t syntax-table (1)) 194 196 (face font-lock-comment-face fontified t) 196 199 (face font-lock-comment-delimiter-face fontified t) 199 203 (face font-lock-comment-face fontified t) 203 210 (face font-lock-comment-delimiter-face fontified t) 210 288 (face font-lock-comment-face fontified t) 288 291 (face font-lock-comment-face fontified t) 291 302 (face font-lock-comment-delimiter-face fontified t) 302 332 (face font-lock-comment-face fontified t) 332 339 (face font-lock-comment-delimiter-face fontified t) 339 341 (face font-lock-comment-face fontified t) 341 352 (face font-lock-comment-delimiter-face fontified t) 352 386 (face font-lock-comment-face fontified t) 386 397 (face font-lock-comment-delimiter-face fontified t) 397 442 (face font-lock-comment-face fontified t) 442 449 (face font-lock-comment-delimiter-face fontified t) 449 451 (face font-lock-comment-face fontified t) 451 458 (face font-lock-comment-delimiter-face fontified t) 458 512 (face font-lock-comment-face fontified t) 512 519 (face font-lock-comment-delimiter-face fontified t) 519 550 (face font-lock-comment-face fontified t) 550 557 (face font-lock-comment-delimiter-face fontified t) 557 589 (face font-lock-comment-face fontified t) 589 600 (face font-lock-comment-delimiter-face fontified t) 600 612 (face font-lock-comment-face fontified t) 612 627 (face font-lock-comment-delimiter-face fontified t) 627 640 (face font-lock-comment-face fontified t) 640 641 (face font-lock-comment-face syntax-table (1) fontified t) 641 675 (face font-lock-comment-face fontified t) 675 690 (face font-lock-comment-delimiter-face fontified t) 690 705 (face font-lock-comment-face fontified t) 705 706 (face font-lock-comment-face syntax-table (1) fontified t) 706 737 (face font-lock-comment-face fontified t) 737 752 (face font-lock-comment-delimiter-face fontified t) 752 767 (face font-lock-comment-face fontified t) 767 768 (face font-lock-comment-face syntax-table (1) fontified t) 768 799 (face font-lock-comment-face fontified t) 799 814 (face font-lock-comment-delimiter-face fontified t) 814 830 (face font-lock-comment-face fontified t) 830 831 (face font-lock-comment-face syntax-table (1) fontified t) 831 863 (face font-lock-comment-face fontified t) 863 878 (face font-lock-comment-delimiter-face fontified t) 878 881 (face font-lock-comment-face fontified t) 881 882 (face font-lock-comment-face syntax-table (1) fontified t) 882 887 (face font-lock-comment-face fontified t) 887 898 (face font-lock-comment-delimiter-face fontified t) 898 900 (face font-lock-comment-face fontified t) 900 907 (face font-lock-comment-delimiter-face fontified t) 907 909 (face font-lock-comment-face fontified t) 909 916 (face font-lock-comment-delimiter-face fontified t) 916 1000 (face font-lock-comment-face fontified t) 1000 1003 (face font-lock-comment-delimiter-face fontified t) 1003 1005 (face font-lock-comment-face fontified t)) . 3011) (undo-tree-id214 . -1003) (undo-tree-id215 . -1003) (undo-tree-id216 . -1004) (undo-tree-id217 . -5) (undo-tree-id218 . -5) (undo-tree-id219 . -26) (undo-tree-id220 . -26) (undo-tree-id221 . -100) (undo-tree-id222 . -100) (undo-tree-id223 . -142) (undo-tree-id224 . -142) (undo-tree-id225 . -176) (undo-tree-id226 . -176) (undo-tree-id227 . -200) (undo-tree-id228 . -200) (undo-tree-id229 . -207) (undo-tree-id230 . -207) (undo-tree-id231 . -295) (undo-tree-id232 . -295) (undo-tree-id233 . -336) (undo-tree-id234 . -336) (undo-tree-id235 . -345) (undo-tree-id236 . -345) (undo-tree-id237 . -390) (undo-tree-id238 . -390) (undo-tree-id239 . -446) (undo-tree-id240 . -446) (undo-tree-id241 . -455) (undo-tree-id242 . -455) (undo-tree-id243 . -516) (undo-tree-id244 . -516) (undo-tree-id245 . -554) (undo-tree-id246 . -554) (undo-tree-id247 . -593) (undo-tree-id248 . -593) (undo-tree-id249 . -616) (undo-tree-id250 . -616) (undo-tree-id251 . -679) (undo-tree-id252 . -679) (undo-tree-id253 . -741) (undo-tree-id254 . -741) (undo-tree-id255 . -803) (undo-tree-id256 . -803) (undo-tree-id257 . -867) (undo-tree-id258 . -867) (undo-tree-id259 . -891) (undo-tree-id260 . -891) (undo-tree-id261 . -904) (undo-tree-id262 . -904) (undo-tree-id263 . -913) (undo-tree-id264 . -913) (undo-tree-id265 . -1003) (undo-tree-id266 . -1003) (undo-tree-id267 . -1003) (undo-tree-id268 . -1003) (undo-tree-id269 . -912) (undo-tree-id270 . -912) (undo-tree-id271 . -903) (undo-tree-id272 . -903) (undo-tree-id273 . -890) (undo-tree-id274 . -890) (undo-tree-id275 . -866) (undo-tree-id276 . -866) (undo-tree-id277 . -802) (undo-tree-id278 . -802) (undo-tree-id279 . -740) (undo-tree-id280 . -740) (undo-tree-id281 . -678) (undo-tree-id282 . -678) (undo-tree-id283 . -615) (undo-tree-id284 . -615) (undo-tree-id285 . -592) (undo-tree-id286 . -592) (undo-tree-id287 . -553) (undo-tree-id288 . -553) (undo-tree-id289 . -515) (undo-tree-id290 . -515) (undo-tree-id291 . -454) (undo-tree-id292 . -454) (undo-tree-id293 . -445) (undo-tree-id294 . -445) (undo-tree-id295 . -389) (undo-tree-id296 . -389) (undo-tree-id297 . -344) (undo-tree-id298 . -344) (undo-tree-id299 . -335) (undo-tree-id300 . -335) (undo-tree-id301 . -294) (undo-tree-id302 . -294) (undo-tree-id303 . -206) (undo-tree-id304 . -206) (undo-tree-id305 . -199) (undo-tree-id306 . -199) (undo-tree-id307 . -175) (undo-tree-id308 . -175) (undo-tree-id309 . -141) (undo-tree-id310 . -141) (undo-tree-id311 . -99) (undo-tree-id312 . -99) (undo-tree-id313 . -25) (undo-tree-id314 . -25) (undo-tree-id315 . -4) (undo-tree-id316 . -4) (undo-tree-id317 . -1005) (t 25827 50631 186958 271000)) nil (25827 50832 15764 42000) 0 nil] [nil nil ((#("b" 0 1 (face font-lock-constant-face fontified t)) . 5) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (t 25827 50631 186958 271000)) ((5 . 6)) (25827 50809 995459 891000) 0 nil] [nil nil ((#("b" 0 1 (face font-lock-constant-face fontified t)) . 5) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (t 25827 50631 186958 271000)) ((5 . 6)) (25827 50808 540447 447000) 0 nil])
([nil nil ((#("2" 0 1 (face font-lock-constant-face fontified t)) . 131) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (t 25827 50832 15856 233000)) nil (25827 50886 211757 773000) 0 nil])
nil
nil
([nil nil ((#("2" 0 1 (face font-lock-constant-face fontified t)) . 141) (undo-tree-id318 . -1) (undo-tree-id319 . -1)) nil (25827 50886 211752 465000) 0 nil])
([nil nil ((3028 . 3034) (#("i" 0 1 (fontified t)) . -3028) (undo-tree-id330 . -1) (3018 . 3029) (#("g" 0 1 (fontified t)) . -3018) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (undo-tree-id334 . -1) 3019 (3010 . 3019) (3009 . 3010) (t 25827 50886 212225 500000) 3009) nil (25827 51141 993996 494000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3474 . 3475) (#("
" 0 1 (fontified nil)) . -3938) (3474 . 3939)) nil (25827 51141 993991 326000) 0 nil])
([nil nil ((3480 . 3484) (#("n" 0 1 (face font-lock-preprocessor-face fontified t)) . -3480) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (#("(" 0 1 (face font-lock-preprocessor-face fontified t)) . -3481) (undo-tree-id328 . -1) (undo-tree-id329 . -1) 3482 (3480 . 3482)) nil (25827 51141 993988 952000) 0 nil])
([nil nil ((3502 . 3503)) nil (25827 51141 993984 691000) 0 nil])
([nil nil ((#("/" 0 1 (face font-lock-comment-delimiter-face fontified t)) . 3236) (undo-tree-id324 . -1) (undo-tree-id325 . -1)) nil (25827 51141 993982 317000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . 3236) (undo-tree-id322 . -1) (undo-tree-id323 . -1)) nil (25827 51141 993977 986000) 0 nil])
([nil nil ((3941 . 3942) 3236) nil (25827 51141 993965 485000) 0 nil])
([nil nil ((251 . 254) (#("m" 0 1 (fontified t)) . -251) (undo-tree-id627 . -1) (#("o" 0 1 (fontified t)) . -252) (undo-tree-id628 . -1) (#("d" 0 1 (face font-lock-keyword-face fontified t)) . -253) (undo-tree-id629 . -1) (#(" " 0 1 (fontified t)) . -254) (undo-tree-id630 . -1) (#("u" 0 1 (face font-lock-constant-face fontified t)) . -255) (undo-tree-id631 . -1) (#("t" 0 1 (face font-lock-constant-face fontified t)) . -256) (undo-tree-id632 . -1) (#("i" 0 1 (face font-lock-constant-face fontified t)) . -257) (undo-tree-id633 . -1) (#("l" 0 1 (face font-lock-constant-face fontified t)) . -258) (undo-tree-id634 . -1) (#("s" 0 1 (face font-lock-constant-face fontified t)) . -259) (undo-tree-id635 . -1) (#(":" 0 1 (fontified t)) . -260) (undo-tree-id636 . -1) 261 (257 . 261) (#("i" 0 1 (face font-lock-constant-face fontified t)) . -257) (undo-tree-id637 . -1) (255 . 258) (#("h" 0 1 (face font-lock-constant-face fontified t)) . -255) (undo-tree-id638 . -1) (#("e" 0 1 (face font-lock-constant-face fontified t)) . -256) (undo-tree-id639 . -1) 257 (251 . 257) (#("m" 0 1 (fontified t)) . -251) (undo-tree-id640 . -1) (#("o" 0 1 (fontified t)) . -252) (undo-tree-id641 . -1) (#("d" 0 1 (face font-lock-keyword-face fontified t)) . -253) (undo-tree-id642 . -1) (#(" " 0 1 (fontified t)) . -254) (undo-tree-id643 . -1) 255 (252 . 255) (#("o" 0 1 (fontified t)) . -252) (undo-tree-id644 . -1) (#("d" 0 1 (face font-lock-keyword-face fontified t)) . -253) (undo-tree-id645 . -1) (#(" " 0 1 (fontified t)) . -254) (undo-tree-id646 . -1) 255 (251 . 255) (#("m" 0 1 (fontified t)) . -251) (undo-tree-id647 . -1) (#("o" 0 1 (fontified t)) . -252) (undo-tree-id648 . -1) (#("d" 0 1 (face font-lock-keyword-face fontified t)) . -253) (undo-tree-id649 . -1) (#(" " 0 1 (fontified t)) . -254) (undo-tree-id650 . -1) 255 (254 . 255) (251 . 254) (t 25865 13505 245540 52000)) nil (25865 14772 938387 251000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -251) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (#("n" 0 1 (face font-lock-keyword-face fontified t)) . -252) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (#("c" 0 1 (fontified t)) . -253) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (#("l" 0 1 (fontified t)) . -254) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (#("u" 0 1 (fontified t)) . -255) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (#(")" 0 1 (fontified t)) . -256) (undo-tree-id371 . 1) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) 257 (#("d" 0 1 (fontified t)) . -256) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (#("e" 0 1 (fontified t)) . -257) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (#("!" 0 1 (fontified t)) . -258) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (#("(" 0 1 (fontified t)) . -259) (undo-tree-id504 . -1) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (undo-tree-id526 . -1) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (undo-tree-id535 . -1) (undo-tree-id536 . -1) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (undo-tree-id539 . -1) (undo-tree-id540 . -1) (undo-tree-id541 . -1) (#("0" 0 1 (fontified t)) . -260) (undo-tree-id542 . -1) (undo-tree-id543 . -1) (undo-tree-id544 . -1) (undo-tree-id545 . -1) (undo-tree-id546 . -1) (undo-tree-id547 . -1) (undo-tree-id548 . -1) (undo-tree-id549 . -1) (undo-tree-id550 . -1) (undo-tree-id551 . -1) (undo-tree-id552 . -1) (undo-tree-id553 . -1) 261 (260 . 261) (apply yas--snippet-revive 251 261 #s(yas--snippet nil nil #s(yas--exit 260 nil) 3 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 260 nil) 3 nil nil nil nil)) (251 . 261) (#("include!($0)" 0 12 (fontified nil)) . 251) (251 . 263) (#("in" 0 2 (fontified nil)) . 251) (251 . 253) (#("include!(…)" 0 11 (fontified nil)) . -251) (251 . 262) (#("in" 0 2 (face font-lock-keyword-face fontified t)) . -251) (undo-tree-id554 . -2) (undo-tree-id555 . -2) (undo-tree-id556 . -2) (undo-tree-id557 . -2) (undo-tree-id558 . -2) (undo-tree-id559 . -2) (undo-tree-id560 . -2) (undo-tree-id561 . -2) 253 (251 . 253) (#("i" 0 1 (fontified t)) . -251) (undo-tree-id562 . -1) (undo-tree-id563 . -1) (undo-tree-id564 . -1) (251 . 252) (#(")" 0 1 (fontified t)) . -251) (undo-tree-id565 . -1) (undo-tree-id566 . -1) (undo-tree-id567 . -1) (undo-tree-id568 . -1) (undo-tree-id569 . -1) (undo-tree-id570 . -1) (undo-tree-id571 . -1) (undo-tree-id572 . -1) 252 (#("i" 0 1 (fontified t)) . -251) (undo-tree-id573 . -1) (undo-tree-id574 . -1) (#("n" 0 1 (face font-lock-keyword-face fontified t)) . -252) (undo-tree-id575 . -1) (#("f" 0 1 (fontified t)) . -253) (undo-tree-id576 . -1) (#("o" 0 1 (fontified t)) . -254) (undo-tree-id577 . -1) (#("!" 0 1 (fontified t)) . -255) (undo-tree-id578 . -1) (#("(" 0 1 (fontified t)) . -256) (undo-tree-id579 . -1) 257 (apply yas--snippet-revive 251 258 #s(yas--snippet nil nil #s(yas--exit 257 nil) 2 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 257 nil) 2 nil nil nil nil)) (251 . 258) (#("info!($0)" 0 9 (fontified nil)) . 251) (251 . 260) (#("if" 0 2 (fontified nil)) . 251) (251 . 253) (#("info!(…)" 0 8 (fontified nil)) . -251) (251 . 259) (#("if" 0 2 (face font-lock-keyword-face fontified t)) . -251) (undo-tree-id580 . -2) 253 (251 . 253) (#("i" 0 1 (fontified t)) . -251) (undo-tree-id581 . -1) (251 . 252) (#("h" 0 1 (fontified t)) . -251) (undo-tree-id582 . -1) 252 (251 . 252) (#("c" 0 1 (fontified t)) . -251) (undo-tree-id583 . -1) (#("o" 0 1 (fontified t)) . -252) (undo-tree-id584 . -1) (#("r" 0 1 (fontified t)) . -253) (undo-tree-id585 . -1) (#("e" 0 1 (fontified t)) . -254) (undo-tree-id586 . -1) 255 (251 . 255) (#("re" 0 2 (fontified nil)) . 251) (251 . 253) (#("core" 0 4 (fontified nil)) . -251) (251 . 255) (#("re" 0 2 (fontified t)) . -251) (undo-tree-id587 . -2) 253 (251 . 253) (#("m" 0 1 (fontified t)) . -251) (undo-tree-id588 . -1) (#("a" 0 1 (fontified t)) . -252) (undo-tree-id589 . -1) (#("i" 0 1 (fontified t)) . -253) (undo-tree-id590 . -1) (#("n" 0 1 (fontified t)) . -254) (undo-tree-id591 . -1) 255 (253 . 255) (#("i" 0 1 (fontified t)) . -253) (undo-tree-id592 . -1) (251 . 254) (#("m" 0 1 (fontified t)) . -251) (undo-tree-id593 . -1) (#("o" 0 1 (fontified t)) . -252) (undo-tree-id594 . -1) (#("d" 0 1 (face font-lock-keyword-face fontified t)) . -253) (undo-tree-id595 . -1) (#(" " 0 1 (fontified t)) . -254) (undo-tree-id596 . -1) 255 (apply yas--snippet-revive 251 255 #s(yas--snippet nil nil #s(yas--exit 255 nil) 1 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 255 nil) 1 nil nil nil nil)) (251 . 255) (#("mod $0" 0 6 (fontified nil)) . 251) (251 . 257) (#("mo" 0 2 (fontified nil)) . 251) (251 . 253) (#("mod" 0 3 (fontified nil)) . -251) (251 . 254) (#("mo" 0 2 (fontified t)) . -251) (undo-tree-id597 . -2) 253 (252 . 253) (#("o" 0 1 (fontified t)) . -252) (undo-tree-id598 . -1) (#(" " 0 1 (fontified t)) . -253) (undo-tree-id599 . -1) 254 (251 . 254) (#("m" 0 1 (fontified t)) . -251) (undo-tree-id600 . -1) (#("o" 0 1 (fontified t)) . -252) (undo-tree-id601 . -1) (#("d" 0 1 (face font-lock-keyword-face fontified t)) . -253) (undo-tree-id602 . -1) (#(" " 0 1 (fontified t)) . -254) (undo-tree-id603 . -1) 255 (251 . 255) (#("m" 0 1 (fontified t)) . -251) (undo-tree-id604 . -1) (#("o" 0 1 (fontified t)) . -252) (undo-tree-id605 . -1) (#("d" 0 1 (face font-lock-keyword-face fontified t)) . -253) (undo-tree-id606 . -1) (#(" " 0 1 (fontified t)) . -254) (undo-tree-id607 . -1) 255 (apply yas--snippet-revive 251 255 #s(yas--snippet nil nil #s(yas--exit 255 nil) 0 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 255 nil) 0 nil nil nil nil)) (251 . 255) (#("mod $0" 0 6 (fontified nil)) . 251) (251 . 257) (#("mod" 0 3 (fontified nil)) . 251) (251 . 254) (#("mod" 0 3 (face font-lock-keyword-face fontified t)) . -251) (undo-tree-id608 . -3) 254 (251 . 254) (251 . 252) (#("mod
" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t)) . 251) (undo-tree-id609 . 1) (undo-tree-id610 . -2) (undo-tree-id611 . -2) (undo-tree-id612 . -2) (undo-tree-id613 . -2) (undo-tree-id614 . -2) (undo-tree-id615 . -2) (undo-tree-id616 . -2) (undo-tree-id617 . -2) (undo-tree-id618 . -2) (undo-tree-id619 . -2) (undo-tree-id620 . -2) (undo-tree-id621 . -2) (undo-tree-id622 . -2) (undo-tree-id623 . -2) (undo-tree-id624 . -4) (undo-tree-id625 . -4) (undo-tree-id626 . -3) 253) nil (25865 14772 938333 137000) 0 nil])
([nil nil ((787 . 788) (#(".clone()" 0 8 (fontified t)) . 795) 789 (t 25865 14773 5546 42000)) nil (25865 14931 191878 966000) 0 nil])
([nil nil ((#("
#[cfg(not(debug_assertions))]
fn main() {
    App::new()
        .add_plugins((
            DefaultPlugins,
            FlyCameraPlugin,
            MazePlugin,
            RapierPhysicsPlugin::<NoUserData>::default(),
            //RapierDebugRenderPlugin::default(),
            UIPlugin,
            ScenePlugin,
            UtilsPlugin,
        ))
        .add_systems(Startup, setup_player)
        .add_systems(Update, (spawn_on_q, spawn_on_e))
        .run();
}
" 0 1 (fontified t) 1 30 (face font-lock-preprocessor-face fontified t) 30 31 (fontified t) 31 33 (face font-lock-keyword-face fontified t) 33 34 (fontified t) 34 38 (face font-lock-function-name-face fontified t) 38 47 (fontified t) 47 50 (face font-lock-type-face fontified t) 50 93 (fontified t) 93 107 (face font-lock-type-face fontified t) 107 121 (fontified t) 121 136 (face font-lock-type-face fontified t) 136 150 (fontified t) 150 160 (face font-lock-type-face fontified t) 160 174 (fontified t) 174 193 (face font-lock-type-face fontified t) 193 196 (fontified t) 196 206 (face font-lock-type-face fontified t) 206 232 (fontified t) 232 234 (face font-lock-comment-delimiter-face fontified t) 234 270 (face font-lock-comment-face fontified t) 270 282 (fontified t) 282 290 (face font-lock-type-face fontified t) 290 304 (fontified t) 304 315 (face font-lock-type-face fontified t) 315 329 (fontified t) 329 340 (face font-lock-type-face fontified t) 340 374 (fontified t) 374 381 (face font-lock-type-face fontified t) 381 418 (fontified t) 418 424 (face font-lock-type-face fontified t) 424 470 (fontified t)) . 3465) (undo-tree-id48 . -468) (undo-tree-id49 . -468) (undo-tree-id50 . -469) (t 25865 14931 192213 453000)) nil (25866 27708 192186 125000) 0 nil])
([nil nil ((#("#[cfg(debug_assertions)]
" 0 24 (face font-lock-preprocessor-face fontified t) 24 25 (fontified t)) . 3003) (undo-tree-id47 . -24)) nil (25866 27708 192183 164000) 0 nil])
([nil nil ((#("fn spawn_on_e(
    mut commands: Commands,
    mut meshes: ResMut<Assets<Mesh>>,
    mut materials: ResMut<Assets<StandardMaterial>>,
    keys: Res<Input<KeyCode>>,
    position: Query<&Transform, With<CameraSettings>>,
) {
    if keys.just_pressed(KeyCode::Period) {
        let position = position.single();
        commands.spawn((
            PbrBundle {
                mesh: meshes.add(Mesh::from(shape::Cube { size: 0.05 })),
                material: materials.add(Color::rgb(0.2, 0.5, 0.5).into()),
                transform: *position,
                ..default()
            },
            RigidBody::Dynamic,
            Collider::cuboid(0.05, 0.05, 0.05),
            Restitution::coefficient(0.7),
            Velocity {
                linvel: position.forward() * 10.0,
                ..default()
            },
        ));
    }
}

fn spawn_on_q(
    mut commands: Commands,
    mut meshes: ResMut<Assets<Mesh>>,
    mut materials: ResMut<Assets<StandardMaterial>>,
    keys: Res<Input<KeyCode>>,
    position: Query<&Transform, With<CameraSettings>>,
) {
    if keys.just_pressed(KeyCode::Semicolon) {
        let position = position.single();
        commands.spawn((
            PbrBundle {
                mesh: meshes.add(
                    shape::Icosphere {
                        radius: 0.25,
                        ..default()
                    }
                    .try_into()
                    .unwrap(),
                ),
                material: materials.add(Color::rgb(0.2, 0.5, 0.5).into()),
                transform: position.clone(),
                ..default()
            },
            RigidBody::Dynamic,
            Collider::ball(0.25),
            Restitution::coefficient(0.7),
            Velocity {
                linvel: position.forward() * 10.0,
                ..default()
            },
        ));
    }
}

fn setup_player(
    mut commands: Commands,
    mut materials: ResMut<Assets<StandardMaterial>>,
    mut meshes: ResMut<Assets<Mesh>>,
) {
    let mut transform = Transform::from_xyz(0.5, 0.5, 0.5);
    transform.rotate_local_y(f32::to_radians(180.0));
    // Player
    commands.spawn((
        PbrBundle {
            mesh: meshes.add(
                shape::Capsule {
                    radius: 0.25,
                    depth: 0.5,
                    ..default()
                }
                .try_into()
                .unwrap(),
            ),
            material: materials.add(Color::rgb(0.2, 0.5, 0.5).into()),
            transform,
            ..default()
        },
        RigidBody::KinematicPositionBased,
        Collider::capsule(Vec3::new(0.0, -0.25, 0.0), Vec3::new(0.0, 0.25, 0.0), 0.25),
        KinematicCharacterController::default(),
    ));
}
" 0 2 (face font-lock-keyword-face fontified t) 2 3 (fontified t) 3 13 (face font-lock-function-name-face fontified t) 13 19 (fontified t) 19 22 (face font-lock-keyword-face fontified t) 22 23 (fontified t) 23 31 (face font-lock-variable-name-face fontified t) 31 33 (fontified t) 33 41 (face font-lock-type-face fontified t) 41 47 (fontified t) 47 50 (face font-lock-keyword-face fontified t) 50 51 (fontified t) 51 57 (face font-lock-variable-name-face fontified t) 57 59 (fontified t) 59 65 (face font-lock-type-face fontified t) 65 66 (fontified t) 66 72 (face font-lock-type-face fontified t) 72 73 (fontified t) 73 77 (face font-lock-type-face fontified t) 77 85 (fontified t) 85 88 (face font-lock-keyword-face fontified t) 88 89 (fontified t) 89 98 (face font-lock-variable-name-face fontified t) 98 100 (fontified t) 100 106 (face font-lock-type-face fontified t) 106 107 (fontified t) 107 113 (face font-lock-type-face fontified t) 113 114 (fontified t) 114 130 (face font-lock-type-face fontified t) 130 138 (fontified t) 138 142 (face font-lock-variable-name-face fontified t) 142 144 (fontified t) 144 147 (face font-lock-type-face fontified t) 147 148 (fontified t) 148 153 (face font-lock-type-face fontified t) 153 154 (fontified t) 154 161 (face font-lock-type-face fontified t) 161 169 (fontified t) 169 177 (face font-lock-variable-name-face fontified t) 177 179 (fontified t) 179 184 (face font-lock-type-face fontified t) 184 185 (fontified t) 185 186 (face rust-ampersand-face fontified t) 186 195 (face font-lock-type-face fontified t) 195 197 (fontified t) 197 201 (face font-lock-type-face fontified t) 201 202 (fontified t) 202 216 (face font-lock-type-face fontified t) 216 228 (fontified t) 228 230 (face font-lock-keyword-face fontified t) 230 249 (fontified t) 249 256 (face font-lock-type-face fontified t) 256 258 (fontified t) 258 264 (face font-lock-type-face fontified t) 264 276 (fontified t) 276 279 (face font-lock-keyword-face fontified t) 279 280 (fontified t) 280 288 (face font-lock-variable-name-face fontified t) 288 347 (fontified t) 347 356 (face font-lock-type-face fontified t) 356 375 (fontified t) 375 379 (face font-lock-variable-name-face fontified t) 379 392 (fontified t) 392 396 (face font-lock-type-face fontified t) 396 403 (fontified t) 403 408 (face font-lock-constant-face fontified t) 408 410 (fontified t) 410 414 (face font-lock-type-face fontified t) 414 417 (fontified t) 417 421 (face font-lock-variable-name-face fontified t) 421 449 (fontified t) 449 457 (face font-lock-variable-name-face fontified t) 457 473 (fontified t) 473 478 (face font-lock-type-face fontified t) 478 524 (fontified t) 524 533 (face font-lock-variable-name-face fontified t) 533 601 (fontified t) 601 610 (face font-lock-type-face fontified t) 610 612 (fontified t) 612 619 (face font-lock-type-face fontified t) 619 633 (fontified t) 633 641 (face font-lock-type-face fontified t) 641 681 (fontified t) 681 692 (face font-lock-type-face fontified t) 692 724 (fontified t) 724 732 (face font-lock-type-face fontified t) 732 751 (fontified t) 751 757 (face font-lock-variable-name-face fontified t) 757 850 (fontified t) 850 852 (face font-lock-keyword-face fontified t) 852 853 (fontified t) 853 863 (face font-lock-function-name-face fontified t) 863 869 (fontified t) 869 872 (face font-lock-keyword-face fontified t) 872 873 (fontified t) 873 881 (face font-lock-variable-name-face fontified t) 881 883 (fontified t) 883 891 (face font-lock-type-face fontified t) 891 897 (fontified t) 897 900 (face font-lock-keyword-face fontified t) 900 901 (fontified t) 901 907 (face font-lock-variable-name-face fontified t) 907 909 (fontified t) 909 915 (face font-lock-type-face fontified t) 915 916 (fontified t) 916 922 (face font-lock-type-face fontified t) 922 923 (fontified t) 923 927 (face font-lock-type-face fontified t) 927 935 (fontified t) 935 938 (face font-lock-keyword-face fontified t) 938 939 (fontified t) 939 948 (face font-lock-variable-name-face fontified t) 948 950 (fontified t) 950 956 (face font-lock-type-face fontified t) 956 957 (fontified t) 957 963 (face font-lock-type-face fontified t) 963 964 (fontified t) 964 980 (face font-lock-type-face fontified t) 980 988 (fontified t) 988 992 (face font-lock-variable-name-face fontified t) 992 994 (fontified t) 994 997 (face font-lock-type-face fontified t) 997 998 (fontified t) 998 1003 (face font-lock-type-face fontified t) 1003 1004 (fontified t) 1004 1011 (face font-lock-type-face fontified t) 1011 1019 (fontified t) 1019 1027 (face font-lock-variable-name-face fontified t) 1027 1029 (fontified t) 1029 1034 (face font-lock-type-face fontified t) 1034 1035 (fontified t) 1035 1036 (face rust-ampersand-face fontified t) 1036 1045 (face font-lock-type-face fontified t) 1045 1047 (fontified t) 1047 1051 (face font-lock-type-face fontified t) 1051 1052 (fontified t) 1052 1066 (face font-lock-type-face fontified t) 1066 1078 (fontified t) 1078 1080 (face font-lock-keyword-face fontified t) 1080 1099 (fontified t) 1099 1106 (face font-lock-type-face fontified t) 1106 1108 (fontified t) 1108 1117 (face font-lock-type-face fontified t) 1117 1129 (fontified t) 1129 1132 (face font-lock-keyword-face fontified t) 1132 1133 (fontified t) 1133 1141 (face font-lock-variable-name-face fontified t) 1141 1200 (fontified t) 1200 1209 (face font-lock-type-face fontified t) 1209 1228 (fontified t) 1228 1232 (face font-lock-variable-name-face fontified t) 1232 1249 (fontified t) 1249 1266 (fontified t) 1266 1271 (face font-lock-constant-face fontified t) 1271 1273 (fontified t) 1273 1282 (face font-lock-type-face fontified t) 1282 1285 (fontified t) 1285 1309 (fontified t) 1309 1315 (face font-lock-variable-name-face fontified t) 1315 1479 (fontified t) 1479 1487 (face font-lock-variable-name-face fontified t) 1487 1503 (fontified t) 1503 1508 (face font-lock-type-face fontified t) 1508 1554 (fontified t) 1554 1563 (face font-lock-variable-name-face fontified t) 1563 1638 (fontified t) 1638 1647 (face font-lock-type-face fontified t) 1647 1649 (fontified t) 1649 1656 (face font-lock-type-face fontified t) 1656 1670 (fontified t) 1670 1678 (face font-lock-type-face fontified t) 1678 1704 (fontified t) 1704 1715 (face font-lock-type-face fontified t) 1715 1747 (fontified t) 1747 1755 (face font-lock-type-face fontified t) 1755 1774 (fontified t) 1774 1780 (face font-lock-variable-name-face fontified t) 1780 1873 (fontified t) 1873 1875 (face font-lock-keyword-face fontified t) 1875 1876 (fontified t) 1876 1888 (face font-lock-function-name-face fontified t) 1888 1894 (fontified t) 1894 1897 (face font-lock-keyword-face fontified t) 1897 1898 (fontified t) 1898 1906 (face font-lock-variable-name-face fontified t) 1906 1908 (fontified t) 1908 1916 (face font-lock-type-face fontified t) 1916 1922 (fontified t) 1922 1925 (face font-lock-keyword-face fontified t) 1925 1926 (fontified t) 1926 1935 (face font-lock-variable-name-face fontified t) 1935 1937 (fontified t) 1937 1943 (face font-lock-type-face fontified t) 1943 1944 (fontified t) 1944 1950 (face font-lock-type-face fontified t) 1950 1951 (fontified t) 1951 1967 (face font-lock-type-face fontified t) 1967 1975 (fontified t) 1975 1978 (face font-lock-keyword-face fontified t) 1978 1979 (fontified t) 1979 1985 (face font-lock-variable-name-face fontified t) 1985 1987 (fontified t) 1987 1993 (face font-lock-type-face fontified t) 1993 1994 (fontified t) 1994 2000 (face font-lock-type-face fontified t) 2000 2001 (fontified t) 2001 2005 (face font-lock-type-face fontified t) 2005 2017 (fontified t) 2017 2020 (face font-lock-keyword-face fontified t) 2020 2021 (fontified t) 2021 2024 (face font-lock-keyword-face fontified t) 2024 2025 (fontified t) 2025 2034 (face font-lock-variable-name-face fontified t) 2034 2037 (fontified t) 2037 2046 (face font-lock-type-face fontified t) 2046 2102 (fontified t) 2102 2105 (face font-lock-type-face fontified t) 2105 2131 (fontified t) 2131 2134 (face font-lock-comment-delimiter-face fontified t) 2134 2141 (face font-lock-comment-face fontified t) 2141 2170 (fontified t) 2170 2179 (face font-lock-type-face fontified t) 2179 2194 (fontified t) 2194 2198 (face font-lock-variable-name-face fontified t) 2198 2228 (fontified t) 2228 2233 (face font-lock-constant-face fontified t) 2233 2235 (fontified t) 2235 2242 (face font-lock-type-face fontified t) 2242 2265 (fontified t) 2265 2271 (face font-lock-variable-name-face fontified t) 2271 2299 (fontified t) 2299 2304 (face font-lock-variable-name-face fontified t) 2304 2443 (fontified t) 2443 2451 (face font-lock-variable-name-face fontified t) 2451 2467 (fontified t) 2467 2472 (face font-lock-type-face fontified t) 2472 2568 (fontified t) 2568 2577 (face font-lock-type-face fontified t) 2577 2579 (fontified t) 2579 2601 (face font-lock-type-face fontified t) 2601 2611 (fontified t) 2611 2619 (face font-lock-type-face fontified t) 2619 2629 (fontified t) 2629 2633 (face font-lock-type-face fontified t) 2633 2657 (fontified t) 2657 2661 (face font-lock-type-face fontified t) 2661 2699 (fontified t) 2699 2727 (face font-lock-type-face fontified t) 2727 2750 (fontified t)) . 252) (undo-tree-id40 . -2748) (undo-tree-id41 . -1476) (undo-tree-id42 . -2341) (undo-tree-id43 . -2341) (undo-tree-id44 . -1758) (undo-tree-id45 . -2748) (undo-tree-id46 . -2749)) nil (25866 27708 192181 80000) 0 nil])
([nil nil ((79 . 93) (69 . 79) (66 . 69) (65 . 66) (57 . 65) (#("p" 0 1 (fontified t)) . -57) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (#("l" 0 1 (fontified t)) . -58) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) 59 (57 . 59) (54 . 57) (53 . 54) 23) nil (25866 27708 192173 594000) 0 nil])
([nil nil ((#("{" 0 1 (fontified t)) . -78) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (#("}" 0 1 (fontified t)) . -91) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (#("
" 0 1 (fontified t)) . 292) 92) nil (25866 27708 192148 667000) 0 nil])
([nil nil ((91 . 92) (78 . 78) (78 . 79) (t 25866 27708 222589 567000)) nil (25866 27724 443290 797000) 0 nil])
([nil nil ((112 . 115) (91 . 112)) nil (25866 27724 443289 155000) 0 nil])
([nil nil ((102 . 103) (#("q" 0 1 (fontified t)) . -102) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) 103 (114 . 115) (#("e" 0 1 (fontified t)) . 114) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1)) nil (25866 27724 443284 434000) 0 nil])
([nil nil ((#("use camera::CameraSettings;
" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 10 (face font-lock-constant-face fontified t) 10 12 (fontified t) 12 26 (face font-lock-type-face fontified t) 26 28 (fontified t)) . 130) (undo-tree-id139 . -27) (undo-tree-id140 . -13) (undo-tree-id141 . -13) 143 (t 25866 27724 445922 970000)) nil (25866 27870 533367 149000) 0 nil])
([nil nil ((#("{setup_player, spawn_on_e, spawn_on_q};" 0 1 (fontified t) 1 24 (fontified t) 24 25 (fontified t) 25 36 (fontified t) 36 37 (fontified t) 37 38 (fontified t) 38 39 (fontified t)) . 78) (undo-tree-id131 . -38) (undo-tree-id132 . 2) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -39) (undo-tree-id138 . -39)) nil (25866 27870 533274 112000) 0 nil])
([nil nil ((90 . 91) (78 . 90) (#("Player" 0 6 (fontified nil)) . 78) (78 . 84) (#("PlayerPlugin" 0 12 (fontified nil)) . -78) (78 . 90) (#("Player" 0 6 (face font-lock-type-face fontified t)) . -78) (undo-tree-id104 . -6) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -2) (undo-tree-id115 . -2) (undo-tree-id116 . -3) (undo-tree-id117 . -3) (undo-tree-id118 . -3) (undo-tree-id119 . -4) (undo-tree-id120 . -4) (undo-tree-id121 . -4) (undo-tree-id122 . -5) (undo-tree-id123 . -5) (undo-tree-id124 . -6) (undo-tree-id125 . -6) (undo-tree-id126 . -6) 84 (79 . 84) (#("a" 0 1 (face font-lock-type-face fontified t)) . -79) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) 80 (78 . 80)) nil (25866 27870 533265 225000) 0 nil])
([nil nil ((#("        .add_systems(Startup, setup_player)
        .add_systems(Update, (spawn_on_q, spawn_on_e))
" 0 21 (fontified t) 21 28 (face font-lock-type-face fontified t) 28 65 (fontified t) 65 71 (face font-lock-type-face fontified t) 71 99 (fontified t)) . 582) (undo-tree-id77 . -68) (undo-tree-id78 . -24) (undo-tree-id79 . -68) (undo-tree-id80 . -98) (undo-tree-id81 . -24) (undo-tree-id82 . -68) (undo-tree-id83 . -24) (undo-tree-id84 . -24) (undo-tree-id85 . -24) (undo-tree-id86 . -24) (undo-tree-id87 . -24) (undo-tree-id88 . -24) (undo-tree-id89 . -24) (undo-tree-id90 . -24) (undo-tree-id91 . -24) (undo-tree-id92 . -24) (undo-tree-id93 . -24) (undo-tree-id94 . -24) (undo-tree-id95 . -24) (undo-tree-id96 . -24) (undo-tree-id97 . -44) (undo-tree-id98 . -68) (undo-tree-id99 . -68) (undo-tree-id100 . -68) (undo-tree-id101 . -68) (undo-tree-id102 . -68) (undo-tree-id103 . -99) 650) nil (25866 27870 533238 987000) 0 nil])
([nil nil ((353 . 356) (#("i" 0 1 (face font-lock-type-face fontified t)) . -353) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (349 . 354) (#("," 0 1 (fontified t)) . -349) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) 350 (347 . 350) (343 . 347) (339 . 343) 326) nil (25866 27870 533216 141000) 0 nil])
([nil nil ((340 . 352) (#("			" 0 3 (fontified t)) . -340) (undo-tree-id58 . -3) (undo-tree-id59 . -3) (undo-tree-id60 . -3) (undo-tree-id61 . -3) (undo-tree-id62 . -3) 343) nil (25866 27870 533199 450000) 0 nil])
([nil nil ((262 . 5093) (#("fn main() {
    App::new()
        .add_plugins((
            DefaultPlugins,
            PlayerPlugin,
            FlyCameraPlugin,
            MazePlugin,
            RapierPhysicsPlugin::<NoUserData>::default(),
            RapierDebugRenderPlugin::default(),
            UIPlugin,
            ScenePlugin,
            UtilsPlugin,
        ))" 0 2 (face font-lock-keyword-face fontified t) 2 3 (fontified t) 3 7 (face font-lock-function-name-face fontified t) 7 16 (fontified t) 16 19 (face font-lock-type-face fontified t) 19 62 (fontified t) 62 76 (face font-lock-type-face fontified t) 76 90 (fontified t) 90 102 (face font-lock-type-face fontified t) 102 116 (fontified t) 116 131 (face font-lock-type-face fontified t) 131 145 (fontified t) 145 155 (face font-lock-type-face fontified t) 155 169 (fontified t) 169 188 (face font-lock-type-face fontified t) 188 191 (fontified t) 191 201 (face font-lock-type-face fontified t) 201 227 (fontified t) 227 250 (face font-lock-type-face fontified t) 250 275 (fontified t) 275 283 (face font-lock-type-face fontified t) 283 297 (fontified t) 297 308 (face font-lock-type-face fontified t) 308 322 (fontified t) 322 333 (face font-lock-type-face fontified t) 333 345 (fontified t)) . 262) (t 25866 36123 358880 890000)) nil (25866 37043 555181 933000) 0 nil])
([nil nil ((#("<<<<<<< HEAD
=======
        .add_systems(Startup, setup_player)
        .add_systems(
            Update,
            (spawn_on_q, spawn_on_e, collisions_printer, display_events),
        )
        .run();
}

#[cfg(not(debug_assertions))]
fn main() {
    App::new()
        .add_plugins((
            DefaultPlugins,
            FlyCameraPlugin,
            MazePlugin,
            RapierPhysicsPlugin::<NoUserData>::default(),
            //RapierDebugRenderPlugin::default(),
            UIPlugin,
            ScenePlugin,
            UtilsPlugin,
        ))
        .add_systems(Startup, setup_player)
        .add_systems(Update, (spawn_on_q, spawn_on_e))
>>>>>>> refs/remotes/origin/main
" 0 1 (face smerge-markers fontified t syntax-table (1)) 1 2 (face smerge-markers fontified t syntax-table (1)) 2 8 (face smerge-markers fontified t) 8 12 (face font-lock-type-face fontified t) 12 20 (face smerge-markers fontified t) 20 21 (face nil fontified t) 21 42 (face (smerge-lower) fontified t) 42 49 (face (smerge-lower font-lock-type-face) fontified t) 49 99 (face (smerge-lower) fontified t) 99 105 (face (smerge-lower font-lock-type-face) fontified t) 105 210 (face (smerge-lower) fontified t) 210 239 (face (smerge-lower font-lock-preprocessor-face) fontified t) 239 240 (face (smerge-lower) fontified t) 240 242 (face (smerge-lower font-lock-keyword-face) fontified t) 242 243 (face (smerge-lower) fontified t) 243 247 (face (smerge-lower font-lock-function-name-face) fontified t) 247 256 (face (smerge-lower) fontified t) 256 259 (face (smerge-lower font-lock-type-face) fontified t) 259 302 (face (smerge-lower) fontified t) 302 316 (face (smerge-lower font-lock-type-face) fontified t) 316 330 (face (smerge-lower) fontified t) 330 345 (face (smerge-lower font-lock-type-face) fontified t) 345 359 (face (smerge-lower) fontified t) 359 369 (face (smerge-lower font-lock-type-face) fontified t) 369 383 (face (smerge-lower) fontified t) 383 402 (face (smerge-lower font-lock-type-face) fontified t) 402 405 (face (smerge-lower) fontified t) 405 415 (face (smerge-lower font-lock-type-face) fontified t) 415 441 (face (smerge-lower) fontified t) 441 443 (face (smerge-lower font-lock-comment-delimiter-face) fontified t) 443 479 (face (smerge-lower font-lock-comment-face) fontified t) 479 491 (face (smerge-lower) fontified t) 491 499 (face (smerge-lower font-lock-type-face) fontified t) 499 513 (face (smerge-lower) fontified t) 513 524 (face (smerge-lower font-lock-type-face) fontified t) 524 538 (face (smerge-lower) fontified t) 538 549 (face (smerge-lower font-lock-type-face) fontified t) 549 583 (face (smerge-lower) fontified t) 583 590 (face (smerge-lower font-lock-type-face) fontified t) 590 627 (face (smerge-lower) fontified t) 627 633 (face (smerge-lower font-lock-type-face) fontified t) 633 661 (face (smerge-lower) fontified t) 661 662 (face smerge-markers fontified t syntax-table (1)) 662 663 (face smerge-markers fontified t syntax-table (1)) 663 664 (face smerge-markers fontified t syntax-table (1)) 664 665 (face smerge-markers fontified t syntax-table (1)) 665 666 (face smerge-markers fontified t syntax-table (1)) 666 667 (face smerge-markers fontified t syntax-table (1)) 667 668 (face smerge-markers fontified t syntax-table (1)) 668 693 (face smerge-markers fontified t) 693 694 (face smerge-markers fontified t)) . 4400) (undo-tree-id198 . -13) (undo-tree-id199 . -21) (undo-tree-id200 . -65) (undo-tree-id201 . -87) (undo-tree-id202 . -107) (undo-tree-id203 . -181) (undo-tree-id204 . -191) (undo-tree-id205 . -207) (undo-tree-id206 . -209) (undo-tree-id207 . -209) (undo-tree-id208 . -209) (undo-tree-id209 . -209) (undo-tree-id210 . -209) (undo-tree-id211 . -209) (undo-tree-id212 . -210) (undo-tree-id213 . -210) (undo-tree-id214 . -210) (undo-tree-id215 . -210) (undo-tree-id216 . -210) (undo-tree-id217 . -210) (undo-tree-id218 . -240) (undo-tree-id219 . -252) (undo-tree-id220 . -267) (undo-tree-id221 . -290) (undo-tree-id222 . -318) (undo-tree-id223 . -347) (undo-tree-id224 . -371) (undo-tree-id225 . -429) (undo-tree-id226 . -479) (undo-tree-id227 . -501) (undo-tree-id228 . -526) (undo-tree-id229 . -551) (undo-tree-id230 . -562) (undo-tree-id231 . -606) (undo-tree-id232 . -661) (undo-tree-id233 . -694) (undo-tree-id234 . -694) (undo-tree-id235 . -694) (undo-tree-id236 . -694) (undo-tree-id237 . -694) (undo-tree-id238 . -13) (undo-tree-id239 . -13) (undo-tree-id240 . -13) (undo-tree-id241 . -13) (undo-tree-id242 . -13) (undo-tree-id243 . -13) (undo-tree-id244 . -429) (undo-tree-id245 . -479) (undo-tree-id246 . -501) (undo-tree-id247 . -526) (undo-tree-id248 . -551) (undo-tree-id249 . -562) (undo-tree-id250 . -606) (undo-tree-id251 . -661) (undo-tree-id252 . -694) (undo-tree-id253 . -694) (undo-tree-id254 . -694) (undo-tree-id255 . -694) (undo-tree-id256 . -694) (undo-tree-id257 . -661) (undo-tree-id258 . -661) (undo-tree-id259 . -661) (undo-tree-id260 . -661) (undo-tree-id261 . -606) (undo-tree-id262 . -606) (undo-tree-id263 . -606) (undo-tree-id264 . -606) (undo-tree-id265 . -661) (undo-tree-id266 . -661) (undo-tree-id267 . -661) (undo-tree-id268 . -661) (undo-tree-id269 . -661) (undo-tree-id270 . -661) (undo-tree-id271 . -661) (undo-tree-id272 . -661) (undo-tree-id273 . -661) (undo-tree-id274 . -661) (undo-tree-id275 . -661) (undo-tree-id276 . -661) (undo-tree-id277 . -606) (undo-tree-id278 . -606) (undo-tree-id279 . -606) (undo-tree-id280 . -606) (undo-tree-id281 . -694) (undo-tree-id282 . -693) (t 25866 37003 648885 141000)) nil (25866 37043 555178 0) 0 nil])
([nil current ((#("<<<<<<< HEAD
=======
fn spawn_on_e(
    mut commands: Commands,
    mut meshes: ResMut<Assets<Mesh>>,
    mut materials: ResMut<Assets<StandardMaterial>>,
    keys: Res<Input<KeyCode>>,
    position: Query<&Transform, With<CameraSettings>>,
) {
    if keys.just_pressed(KeyCode::Period) {
        let position = position.single();
        commands.spawn((
            PbrBundle {
                mesh: meshes.add(Mesh::from(shape::Cube { size: 0.05 })),
                material: materials.add(Color::rgb(0.2, 0.5, 0.5).into()),
                transform: position.clone(),
                ..default()
            },
            RigidBody::Dynamic,
            Collider::cuboid(0.05, 0.05, 0.05),
            Restitution::coefficient(0.7),
            Velocity {
                linvel: position.forward() * 10.0,
                ..default()
            },
            ActiveEvents::COLLISION_EVENTS,
        ));
    }
}

fn spawn_on_q(
    mut commands: Commands,
    mut meshes: ResMut<Assets<Mesh>>,
    mut materials: ResMut<Assets<StandardMaterial>>,
    keys: Res<Input<KeyCode>>,
    position: Query<&Transform, With<CameraSettings>>,
) {
    if keys.just_pressed(KeyCode::Semicolon) {
        let position = position.single();
        commands.spawn((
            PbrBundle {
                mesh: meshes.add(
                    shape::Icosphere {
                        radius: 0.25,
                        ..default()
                    }
                    .try_into()
                    .unwrap(),
                ),
                material: materials.add(Color::rgb(0.2, 0.5, 0.5).into()),
                transform: position.clone(),
                ..default()
            },
            RigidBody::Dynamic,
            Collider::ball(0.25),
            Restitution::coefficient(0.7),
            Velocity {
                linvel: position.forward() * 10.0,
                ..default()
            },
            ActiveEvents::COLLISION_EVENTS,
        ));
    }
}

fn setup_player(
    mut commands: Commands,
    mut materials: ResMut<Assets<StandardMaterial>>,
    mut meshes: ResMut<Assets<Mesh>>,
) {
    let mut transform = Transform::from_xyz(0.5, 0.5, 0.5);
    transform.rotate_local_y(f32::to_radians(180.0));
    // Player
    commands.spawn((
        PbrBundle {
            mesh: meshes.add(
                shape::Capsule {
                    radius: 0.25,
                    depth: 0.5,
                    ..default()
                }
                .try_into()
                .unwrap(),
            ),
            material: materials.add(Color::rgb(0.2, 0.5, 0.5).into()),
            transform,
            ..default()
        },
        RigidBody::KinematicPositionBased,
        Collider::capsule(Vec3::new(0.0, -0.25, 0.0), Vec3::new(0.0, 0.25, 0.0), 0.25),
        KinematicCharacterController {
            apply_impulse_to_dynamic_bodies: true,
            //filter_flags: bevy_rapier3d::pipeline::QueryFilterFlags::EXCLUDE_SENSORS,
            ..default()
        },
        Name::new(\"Player\"),
    ));
}

fn collisions_printer(mut outputs: Query<&mut KinematicCharacterControllerOutput>) {
    for output in outputs.iter_mut() {
        for collision in &output.collisions {
            println!(\"Player collided with {:?}\", collision.entity);
        }
    }
}

fn display_events(
    mut collision_events: EventReader<CollisionEvent>,
    mut contact_force_events: EventReader<ContactForceEvent>,
) {
    for collision_event in collision_events.iter() {
        println!(\"Received collision event: {:?}\", collision_event);
    }

    for contact_force_event in contact_force_events.iter() {
        println!(\"Received contact force event: {:?}\", contact_force_event);
    }
}

#[cfg(debug_assertions)]
>>>>>>> refs/remotes/origin/main
" 0 1 (face smerge-markers fontified t smerge-refine-part (85 . 2)) 1 8 (face smerge-markers fontified t) 8 12 (face font-lock-type-face fontified t) 12 20 (face smerge-markers fontified t) 20 21 (face nil fontified t) 21 23 (face (smerge-lower smerge-lower smerge-lower font-lock-keyword-face) fontified t) 23 24 (face (smerge-lower smerge-lower smerge-lower) fontified t) 24 34 (face (smerge-lower smerge-lower smerge-lower font-lock-function-name-face) fontified t) 34 40 (face (smerge-lower smerge-lower smerge-lower) fontified t) 40 43 (face (smerge-lower smerge-lower smerge-lower font-lock-keyword-face) fontified t) 43 44 (face (smerge-lower smerge-lower smerge-lower) fontified t) 44 52 (face (smerge-lower smerge-lower smerge-lower font-lock-variable-name-face) fontified t) 52 54 (face (smerge-lower smerge-lower smerge-lower) fontified t) 54 62 (face (smerge-lower smerge-lower smerge-lower font-lock-type-face) fontified t) 62 68 (face (smerge-lower smerge-lower smerge-lower) fontified t) 68 71 (face (smerge-lower smerge-lower smerge-lower font-lock-keyword-face) fontified t) 71 72 (face (smerge-lower smerge-lower smerge-lower) fontified t) 72 78 (face (smerge-lower smerge-lower smerge-lower font-lock-variable-name-face) fontified t) 78 80 (face (smerge-lower smerge-lower smerge-lower) fontified t) 80 86 (face (smerge-lower smerge-lower smerge-lower font-lock-type-face) fontified t) 86 87 (face (smerge-lower smerge-lower smerge-lower) fontified t) 87 93 (face (smerge-lower smerge-lower smerge-lower font-lock-type-face) fontified t) 93 94 (face (smerge-lower smerge-lower smerge-lower) fontified t) 94 98 (face (smerge-lower smerge-lower smerge-lower font-lock-type-face) fontified t) 98 106 (face (smerge-lower smerge-lower smerge-lower) fontified t) 106 109 (face (smerge-lower smerge-lower smerge-lower font-lock-keyword-face) fontified t) 109 110 (face (smerge-lower smerge-lower smerge-lower) fontified t) 110 119 (face (smerge-lower smerge-lower smerge-lower font-lock-variable-name-face) fontified t) 119 121 (face (smerge-lower smerge-lower smerge-lower) fontified t) 121 127 (face (smerge-lower smerge-lower smerge-lower font-lock-type-face) fontified t) 127 128 (face (smerge-lower smerge-lower smerge-lower) fontified t) 128 134 (face (smerge-lower smerge-lower smerge-lower font-lock-type-face) fontified t) 134 135 (face (smerge-lower smerge-lower smerge-lower) fontified t) 135 151 (face (smerge-lower smerge-lower smerge-lower font-lock-type-face) fontified t) 151 159 (face (smerge-lower smerge-lower smerge-lower) fontified t) 159 163 (face (smerge-lower smerge-lower smerge-lower font-lock-variable-name-face) fontified t) 163 165 (face (smerge-lower smerge-lower smerge-lower) fontified t) 165 168 (face (smerge-lower smerge-lower smerge-lower font-lock-type-face) fontified t) 168 169 (face (smerge-lower smerge-lower smerge-lower) fontified t) 169 174 (face (smerge-lower smerge-lower smerge-lower font-lock-type-face) fontified t) 174 175 (face (smerge-lower smerge-lower smerge-lower) fontified t) 175 182 (face (smerge-lower smerge-lower smerge-lower font-lock-type-face) fontified t) 182 190 (face (smerge-lower smerge-lower smerge-lower) fontified t) 190 198 (face (smerge-lower smerge-lower smerge-lower font-lock-variable-name-face) fontified t) 198 200 (face (smerge-lower smerge-lower smerge-lower) fontified t) 200 205 (face (smerge-lower smerge-lower smerge-lower font-lock-type-face) fontified t) 205 206 (face (smerge-lower smerge-lower smerge-lower) fontified t) 206 207 (face (smerge-lower smerge-lower smerge-lower rust-ampersand-face) fontified t) 207 216 (face (smerge-lower smerge-lower smerge-lower font-lock-type-face) fontified t) 216 218 (face (smerge-lower smerge-lower smerge-lower) fontified t) 218 222 (face (smerge-lower smerge-lower smerge-lower font-lock-type-face) fontified t) 222 223 (face (smerge-lower smerge-lower smerge-lower) fontified t) 223 237 (face (smerge-lower smerge-lower smerge-lower font-lock-type-face) fontified t) 237 249 (face (smerge-lower smerge-lower smerge-lower) fontified t) 249 251 (face (smerge-lower smerge-lower smerge-lower font-lock-keyword-face) fontified t) 251 270 (face (smerge-lower smerge-lower smerge-lower) fontified t) 270 277 (face (smerge-lower smerge-lower smerge-lower font-lock-type-face) fontified t) 277 279 (face (smerge-lower smerge-lower smerge-lower) fontified t) 279 285 (face (smerge-lower smerge-lower smerge-lower font-lock-type-face) fontified t) 285 297 (face (smerge-lower smerge-lower smerge-lower) fontified t) 297 300 (face (smerge-lower smerge-lower smerge-lower font-lock-keyword-face) fontified t) 300 301 (face (smerge-lower smerge-lower smerge-lower) fontified t) 301 309 (face (smerge-lower smerge-lower smerge-lower font-lock-variable-name-face) fontified t) 309 368 (face (smerge-lower smerge-lower smerge-lower) fontified t) 368 377 (face (smerge-lower smerge-lower smerge-lower font-lock-type-face) fontified t) 377 396 (face (smerge-lower smerge-lower smerge-lower) fontified t) 396 400 (face (smerge-lower smerge-lower smerge-lower font-lock-variable-name-face) fontified t) 400 413 (face (smerge-lower smerge-lower smerge-lower) fontified t) 413 417 (face (smerge-lower smerge-lower smerge-lower font-lock-type-face) fontified t) 417 424 (face (smerge-lower smerge-lower smerge-lower) fontified t) 424 429 (face (smerge-lower smerge-lower smerge-lower font-lock-constant-face) fontified t) 429 431 (face (smerge-lower smerge-lower smerge-lower) fontified t) 431 435 (face (smerge-lower smerge-lower smerge-lower font-lock-type-face) fontified t) 435 438 (face (smerge-lower smerge-lower smerge-lower) fontified t) 438 442 (face (smerge-lower smerge-lower smerge-lower font-lock-variable-name-face) fontified t) 442 470 (face (smerge-lower smerge-lower smerge-lower) fontified t) 470 478 (face (smerge-lower smerge-lower smerge-lower font-lock-variable-name-face) fontified t) 478 494 (face (smerge-lower smerge-lower smerge-lower) fontified t) 494 499 (face (smerge-lower smerge-lower smerge-lower font-lock-type-face) fontified t) 499 545 (face (smerge-lower smerge-lower smerge-lower) fontified t) 545 554 (face (smerge-lower smerge-lower smerge-lower font-lock-variable-name-face) fontified t) 554 629 (face (smerge-lower smerge-lower smerge-lower) fontified t) 629 638 (face (smerge-lower smerge-lower smerge-lower font-lock-type-face) fontified t) 638 640 (face (smerge-lower smerge-lower smerge-lower) fontified t) 640 647 (face (smerge-lower smerge-lower smerge-lower font-lock-type-face) fontified t) 647 661 (face (smerge-lower smerge-lower smerge-lower) fontified t) 661 669 (face (smerge-lower smerge-lower smerge-lower font-lock-type-face) fontified t) 669 709 (face (smerge-lower smerge-lower smerge-lower) fontified t) 709 720 (face (smerge-lower smerge-lower smerge-lower font-lock-type-face) fontified t) 720 752 (face (smerge-lower smerge-lower smerge-lower) fontified t) 752 760 (face (smerge-lower smerge-lower smerge-lower font-lock-type-face) fontified t) 760 779 (face (smerge-lower smerge-lower smerge-lower) fontified t) 779 785 (face (smerge-lower smerge-lower smerge-lower font-lock-variable-name-face) fontified t) 785 869 (face (smerge-lower smerge-lower smerge-lower) fontified t) 869 881 (face (smerge-lower smerge-lower smerge-lower font-lock-type-face) fontified t) 881 883 (face (smerge-lower smerge-lower smerge-lower) fontified t) 883 899 (face (smerge-lower smerge-lower smerge-lower font-lock-type-face) fontified t) 899 922 (face (smerge-lower smerge-lower smerge-lower) fontified t) 922 924 (face (smerge-lower smerge-lower smerge-lower font-lock-keyword-face) fontified t) 924 925 (face (smerge-lower smerge-lower smerge-lower) fontified t) 925 935 (face (smerge-lower smerge-lower smerge-lower font-lock-function-name-face) fontified t) 935 941 (face (smerge-lower smerge-lower smerge-lower) fontified t) 941 944 (face (smerge-lower smerge-lower smerge-lower font-lock-keyword-face) fontified t) 944 945 (face (smerge-lower smerge-lower smerge-lower) fontified t) 945 953 (face (smerge-lower smerge-lower smerge-lower font-lock-variable-name-face) fontified t) 953 955 (face (smerge-lower smerge-lower smerge-lower) fontified t) 955 963 (face (smerge-lower smerge-lower smerge-lower font-lock-type-face) fontified t) 963 969 (face (smerge-lower smerge-lower smerge-lower) fontified t) 969 972 (face (smerge-lower smerge-lower smerge-lower font-lock-keyword-face) fontified t) 972 973 (face (smerge-lower smerge-lower smerge-lower) fontified t) 973 979 (face (smerge-lower smerge-lower smerge-lower font-lock-variable-name-face) fontified t) 979 981 (face (smerge-lower smerge-lower smerge-lower) fontified t) 981 987 (face (smerge-lower smerge-lower smerge-lower font-lock-type-face) fontified t) 987 988 (face (smerge-lower smerge-lower smerge-lower) fontified t) 988 994 (face (smerge-lower smerge-lower smerge-lower font-lock-type-face) fontified t) 994 995 (face (smerge-lower smerge-lower smerge-lower) fontified t) 995 999 (face (smerge-lower smerge-lower smerge-lower font-lock-type-face) fontified t) 999 1007 (face (smerge-lower smerge-lower smerge-lower) fontified t) 1007 1010 (face (smerge-lower smerge-lower smerge-lower font-lock-keyword-face) fontified t) 1010 1011 (face (smerge-lower smerge-lower smerge-lower) fontified t) 1011 1020 (face (smerge-lower smerge-lower smerge-lower font-lock-variable-name-face) fontified t) 1020 1022 (face (smerge-lower smerge-lower smerge-lower) fontified t) 1022 1028 (face (smerge-lower smerge-lower smerge-lower font-lock-type-face) fontified t) 1028 1029 (face (smerge-lower smerge-lower smerge-lower) fontified t) 1029 1035 (face (smerge-lower smerge-lower smerge-lower font-lock-type-face) fontified t) 1035 1036 (face (smerge-lower smerge-lower smerge-lower) fontified t) 1036 1052 (face (smerge-lower smerge-lower smerge-lower font-lock-type-face) fontified t) 1052 1060 (face (smerge-lower smerge-lower smerge-lower) fontified t) 1060 1064 (face (smerge-lower smerge-lower smerge-lower font-lock-variable-name-face) fontified t) 1064 1066 (face (smerge-lower smerge-lower smerge-lower) fontified t) 1066 1069 (face (smerge-lower smerge-lower smerge-lower font-lock-type-face) fontified t) 1069 1070 (face (smerge-lower smerge-lower smerge-lower) fontified t) 1070 1075 (face (smerge-lower smerge-lower smerge-lower font-lock-type-face) fontified t) 1075 1076 (face (smerge-lower smerge-lower smerge-lower) fontified t) 1076 1083 (face (smerge-lower smerge-lower smerge-lower font-lock-type-face) fontified t) 1083 1091 (face (smerge-lower smerge-lower smerge-lower) fontified t) 1091 1099 (face (smerge-lower smerge-lower smerge-lower font-lock-variable-name-face) fontified t) 1099 1101 (face (smerge-lower smerge-lower smerge-lower) fontified t) 1101 1106 (face (smerge-lower smerge-lower smerge-lower font-lock-type-face) fontified t) 1106 1107 (face (smerge-lower smerge-lower smerge-lower) fontified t) 1107 1108 (face (smerge-lower smerge-lower smerge-lower rust-ampersand-face) fontified t) 1108 1117 (face (smerge-lower smerge-lower smerge-lower font-lock-type-face) fontified t) 1117 1119 (face (smerge-lower smerge-lower smerge-lower) fontified t) 1119 1123 (face (smerge-lower smerge-lower smerge-lower font-lock-type-face) fontified t) 1123 1124 (face (smerge-lower smerge-lower smerge-lower) fontified t) 1124 1138 (face (smerge-lower smerge-lower smerge-lower font-lock-type-face) fontified t) 1138 1150 (face (smerge-lower smerge-lower smerge-lower) fontified t) 1150 1152 (face (smerge-lower smerge-lower smerge-lower font-lock-keyword-face) fontified t) 1152 1171 (face (smerge-lower smerge-lower smerge-lower) fontified t) 1171 1178 (face (smerge-lower smerge-lower smerge-lower font-lock-type-face) fontified t) 1178 1180 (face (smerge-lower smerge-lower smerge-lower) fontified t) 1180 1189 (face (smerge-lower smerge-lower smerge-lower font-lock-type-face) fontified t) 1189 1201 (face (smerge-lower smerge-lower smerge-lower) fontified t) 1201 1204 (face (smerge-lower smerge-lower smerge-lower font-lock-keyword-face) fontified t) 1204 1205 (face (smerge-lower smerge-lower smerge-lower) fontified t) 1205 1213 (face (smerge-lower smerge-lower smerge-lower font-lock-variable-name-face) fontified t) 1213 1272 (face (smerge-lower smerge-lower smerge-lower) fontified t) 1272 1281 (face (smerge-lower smerge-lower smerge-lower font-lock-type-face) fontified t) 1281 1300 (face (smerge-lower smerge-lower smerge-lower) fontified t) 1300 1304 (face (smerge-lower smerge-lower smerge-lower font-lock-variable-name-face) fontified t) 1304 1338 (face (smerge-lower smerge-lower smerge-lower) fontified t) 1338 1343 (face (smerge-lower smerge-lower smerge-lower font-lock-constant-face) fontified t) 1343 1345 (face (smerge-lower smerge-lower smerge-lower) fontified t) 1345 1354 (face (smerge-lower smerge-lower smerge-lower font-lock-type-face) fontified t) 1354 1381 (face (smerge-lower smerge-lower smerge-lower) fontified t) 1381 1387 (face (smerge-lower smerge-lower smerge-lower font-lock-variable-name-face) fontified t) 1387 1500 (face (smerge-lower smerge-lower smerge-lower) fontified t) 1500 1516 (fontified t face (smerge-lower smerge-lower smerge-lower)) 1516 1551 (face (smerge-lower smerge-lower) fontified t) 1551 1559 (face (smerge-lower smerge-lower font-lock-variable-name-face) fontified t) 1559 1575 (face (smerge-lower smerge-lower) fontified t) 1575 1580 (face (smerge-lower smerge-lower font-lock-type-face) fontified t) 1580 1626 (face (smerge-lower smerge-lower) fontified t) 1626 1635 (face (smerge-lower smerge-lower font-lock-variable-name-face) fontified t) 1635 1710 (face (smerge-lower smerge-lower) fontified t) 1710 1719 (face (smerge-lower smerge-lower font-lock-type-face) fontified t) 1719 1721 (face (smerge-lower smerge-lower) fontified t) 1721 1728 (face (smerge-lower smerge-lower font-lock-type-face) fontified t) 1728 1742 (face (smerge-lower smerge-lower) fontified t) 1742 1750 (face (smerge-lower smerge-lower font-lock-type-face) fontified t) 1750 1776 (face (smerge-lower smerge-lower) fontified t) 1776 1787 (face (smerge-lower smerge-lower font-lock-type-face) fontified t) 1787 1819 (face (smerge-lower smerge-lower) fontified t) 1819 1827 (face (smerge-lower smerge-lower font-lock-type-face) fontified t) 1827 1846 (face (smerge-lower smerge-lower) fontified t) 1846 1852 (face (smerge-lower smerge-lower font-lock-variable-name-face) fontified t) 1852 1936 (face (smerge-lower smerge-lower) fontified t) 1936 1948 (face (smerge-lower smerge-lower font-lock-type-face) fontified t) 1948 1950 (face (smerge-lower smerge-lower) fontified t) 1950 1966 (face (smerge-lower smerge-lower font-lock-type-face) fontified t) 1966 1989 (face (smerge-lower smerge-lower) fontified t) 1989 1991 (face (smerge-lower smerge-lower font-lock-keyword-face) fontified t) 1991 1992 (face (smerge-lower smerge-lower) fontified t) 1992 2004 (face (smerge-lower smerge-lower font-lock-function-name-face) fontified t) 2004 2010 (face (smerge-lower smerge-lower) fontified t) 2010 2013 (face (smerge-lower smerge-lower font-lock-keyword-face) fontified t) 2013 2014 (face (smerge-lower smerge-lower) fontified t) 2014 2022 (face (smerge-lower smerge-lower font-lock-variable-name-face) fontified t) 2022 2024 (face (smerge-lower smerge-lower) fontified t) 2024 2032 (face (smerge-lower smerge-lower font-lock-type-face) fontified t) 2032 2038 (face (smerge-lower smerge-lower) fontified t) 2038 2041 (face (smerge-lower smerge-lower font-lock-keyword-face) fontified t) 2041 2042 (face (smerge-lower smerge-lower) fontified t) 2042 2051 (face (smerge-lower smerge-lower font-lock-variable-name-face) fontified t) 2051 2053 (face (smerge-lower smerge-lower) fontified t) 2053 2059 (face (smerge-lower smerge-lower font-lock-type-face) fontified t) 2059 2060 (face (smerge-lower smerge-lower) fontified t) 2060 2066 (face (smerge-lower smerge-lower font-lock-type-face) fontified t) 2066 2067 (face (smerge-lower smerge-lower) fontified t) 2067 2083 (face (smerge-lower smerge-lower font-lock-type-face) fontified t) 2083 2091 (face (smerge-lower smerge-lower) fontified t) 2091 2094 (face (smerge-lower smerge-lower font-lock-keyword-face) fontified t) 2094 2095 (face (smerge-lower smerge-lower) fontified t) 2095 2101 (face (smerge-lower smerge-lower font-lock-variable-name-face) fontified t) 2101 2103 (face (smerge-lower smerge-lower) fontified t) 2103 2109 (face (smerge-lower smerge-lower font-lock-type-face) fontified t) 2109 2110 (face (smerge-lower smerge-lower) fontified t) 2110 2116 (face (smerge-lower smerge-lower font-lock-type-face) fontified t) 2116 2117 (face (smerge-lower smerge-lower) fontified t) 2117 2121 (face (smerge-lower smerge-lower font-lock-type-face) fontified t) 2121 2133 (face (smerge-lower smerge-lower) fontified t) 2133 2136 (face (smerge-lower smerge-lower font-lock-keyword-face) fontified t) 2136 2137 (face (smerge-lower smerge-lower) fontified t) 2137 2140 (face (smerge-lower smerge-lower font-lock-keyword-face) fontified t) 2140 2141 (face (smerge-lower smerge-lower) fontified t) 2141 2150 (face (smerge-lower smerge-lower font-lock-variable-name-face) fontified t) 2150 2153 (face (smerge-lower smerge-lower) fontified t) 2153 2162 (face (smerge-lower smerge-lower font-lock-type-face) fontified t) 2162 2218 (face (smerge-lower smerge-lower) fontified t) 2218 2221 (face (smerge-lower smerge-lower font-lock-type-face) fontified t) 2221 2247 (face (smerge-lower smerge-lower) fontified t) 2247 2250 (face (smerge-lower smerge-lower font-lock-comment-delimiter-face) fontified t) 2250 2257 (face (smerge-lower smerge-lower font-lock-comment-face) fontified t) 2257 2286 (face (smerge-lower smerge-lower) fontified t) 2286 2295 (face (smerge-lower smerge-lower font-lock-type-face) fontified t) 2295 2310 (face (smerge-lower smerge-lower) fontified t) 2310 2314 (face (smerge-lower smerge-lower font-lock-variable-name-face) fontified t) 2314 2344 (face (smerge-lower smerge-lower) fontified t) 2344 2349 (face (smerge-lower smerge-lower font-lock-constant-face) fontified t) 2349 2351 (face (smerge-lower smerge-lower) fontified t) 2351 2358 (face (smerge-lower smerge-lower font-lock-type-face) fontified t) 2358 2381 (face (smerge-lower smerge-lower) fontified t) 2381 2387 (face (smerge-lower smerge-lower font-lock-variable-name-face) fontified t) 2387 2415 (face (smerge-lower smerge-lower) fontified t) 2415 2420 (face (smerge-lower smerge-lower font-lock-variable-name-face) fontified t) 2420 2559 (face (smerge-lower smerge-lower) fontified t) 2559 2567 (face (smerge-lower smerge-lower font-lock-variable-name-face) fontified t) 2567 2583 (face (smerge-lower smerge-lower) fontified t) 2583 2588 (face (smerge-lower smerge-lower font-lock-type-face) fontified t) 2588 2684 (face (smerge-lower smerge-lower) fontified t) 2684 2693 (face (smerge-lower smerge-lower font-lock-type-face) fontified t) 2693 2695 (face (smerge-lower smerge-lower) fontified t) 2695 2717 (face (smerge-lower smerge-lower font-lock-type-face) fontified t) 2717 2727 (face (smerge-lower smerge-lower) fontified t) 2727 2735 (face (smerge-lower smerge-lower font-lock-type-face) fontified t) 2735 2745 (face (smerge-lower smerge-lower) fontified t) 2745 2749 (face (smerge-lower smerge-lower font-lock-type-face) fontified t) 2749 2773 (face (smerge-lower smerge-lower) fontified t) 2773 2777 (face (smerge-lower smerge-lower font-lock-type-face) fontified t) 2777 2815 (face (smerge-lower smerge-lower) fontified t) 2815 2843 (face (smerge-lower smerge-lower font-lock-type-face) fontified t) 2843 2858 (face (smerge-lower smerge-lower) fontified t) 2858 2889 (face (smerge-lower smerge-lower font-lock-variable-name-face) fontified t) 2889 2891 (face (smerge-lower smerge-lower) fontified t) 2891 2895 (face (smerge-lower smerge-lower font-lock-keyword-face) fontified t) 2895 2909 (face (smerge-lower smerge-lower) fontified t) 2909 2911 (face (smerge-lower smerge-lower font-lock-comment-delimiter-face) fontified t) 2911 2985 (face (smerge-lower smerge-lower font-lock-comment-face) fontified t) 2985 3016 (face (smerge-lower smerge-lower) fontified t) 3016 3020 (fontified t face (smerge-lower smerge-lower)) 3020 3028 (face (smerge-lower) fontified t) 3028 3032 (face (smerge-lower font-lock-type-face) fontified t) 3032 3038 (face (smerge-lower) fontified t) 3038 3046 (face (smerge-lower font-lock-string-face) fontified t) 3046 3060 (face (smerge-lower) fontified t) 3060 3062 (face (smerge-lower font-lock-keyword-face) fontified t) 3062 3063 (face (smerge-lower) fontified t) 3063 3081 (face (smerge-lower font-lock-function-name-face) fontified t) 3081 3082 (face (smerge-lower) fontified t) 3082 3085 (face (smerge-lower font-lock-keyword-face) fontified t) 3085 3086 (face (smerge-lower) fontified t) 3086 3093 (face (smerge-lower font-lock-variable-name-face) fontified t) 3093 3095 (face (smerge-lower) fontified t) 3095 3100 (face (smerge-lower font-lock-type-face) fontified t) 3100 3101 (face (smerge-lower) fontified t) 3101 3102 (face (smerge-lower rust-ampersand-face) fontified t) 3102 3105 (face (smerge-lower font-lock-keyword-face) fontified t) 3105 3106 (face (smerge-lower) fontified t) 3106 3140 (face (smerge-lower font-lock-type-face) fontified t) 3140 3149 (face (smerge-lower) fontified t) 3149 3152 (face (smerge-lower font-lock-keyword-face) fontified t) 3152 3153 (face (smerge-lower) fontified t) 3153 3159 (face (smerge-lower font-lock-variable-name-face) fontified t) 3159 3160 (face (smerge-lower) fontified t) 3160 3162 (face (smerge-lower font-lock-keyword-face) fontified t) 3162 3192 (face (smerge-lower) fontified t) 3192 3195 (face (smerge-lower font-lock-keyword-face) fontified t) 3195 3196 (face (smerge-lower) fontified t) 3196 3205 (face (smerge-lower font-lock-variable-name-face) fontified t) 3205 3206 (face (smerge-lower) fontified t) 3206 3208 (face (smerge-lower font-lock-keyword-face) fontified t) 3208 3209 (face (smerge-lower) fontified t) 3209 3210 (face (smerge-lower rust-ampersand-face) fontified t) 3210 3242 (face (smerge-lower) fontified t) 3242 3250 (face (smerge-lower rust-builtin-formatting-macro) fontified t) 3250 3251 (face (smerge-lower) fontified t) 3251 3273 (face (smerge-lower font-lock-string-face) fontified t) 3273 3277 (face (smerge-lower rust-string-interpolation) fontified t) 3277 3278 (face (smerge-lower font-lock-string-face) fontified t) 3278 3318 (face (smerge-lower) fontified t) 3318 3320 (face (smerge-lower font-lock-keyword-face) fontified t) 3320 3321 (face (smerge-lower) fontified t) 3321 3335 (face (smerge-lower font-lock-function-name-face) fontified t) 3335 3341 (face (smerge-lower) fontified t) 3341 3344 (face (smerge-lower font-lock-keyword-face) fontified t) 3344 3345 (face (smerge-lower) fontified t) 3345 3361 (face (smerge-lower font-lock-variable-name-face) fontified t) 3361 3363 (face (smerge-lower) fontified t) 3363 3374 (face (smerge-lower font-lock-type-face) fontified t) 3374 3375 (face (smerge-lower) fontified t) 3375 3389 (face (smerge-lower font-lock-type-face) fontified t) 3389 3396 (face (smerge-lower) fontified t) 3396 3399 (face (smerge-lower font-lock-keyword-face) fontified t) 3399 3400 (face (smerge-lower) fontified t) 3400 3420 (face (smerge-lower font-lock-variable-name-face) fontified t) 3420 3422 (face (smerge-lower) fontified t) 3422 3433 (face (smerge-lower font-lock-type-face) fontified t) 3433 3434 (face (smerge-lower) fontified t) 3434 3451 (face (smerge-lower font-lock-type-face) fontified t) 3451 3462 (face (smerge-lower) fontified t) 3462 3465 (face (smerge-lower font-lock-keyword-face) fontified t) 3465 3466 (face (smerge-lower) fontified t) 3466 3481 (face (smerge-lower font-lock-variable-name-face) fontified t) 3481 3482 (face (smerge-lower) fontified t) 3482 3484 (face (smerge-lower font-lock-keyword-face) fontified t) 3484 3519 (face (smerge-lower) fontified t) 3519 3527 (face (smerge-lower rust-builtin-formatting-macro) fontified t) 3527 3528 (face (smerge-lower) fontified t) 3528 3555 (face (smerge-lower font-lock-string-face) fontified t) 3555 3559 (face (smerge-lower rust-string-interpolation) fontified t) 3559 3560 (face (smerge-lower font-lock-string-face) fontified t) 3560 3591 (face (smerge-lower) fontified t) 3591 3594 (face (smerge-lower font-lock-keyword-face) fontified t) 3594 3595 (face (smerge-lower) fontified t) 3595 3614 (face (smerge-lower font-lock-variable-name-face) fontified t) 3614 3615 (face (smerge-lower) fontified t) 3615 3617 (face (smerge-lower font-lock-keyword-face) fontified t) 3617 3656 (face (smerge-lower) fontified t) 3656 3664 (face (smerge-lower rust-builtin-formatting-macro) fontified t) 3664 3665 (face (smerge-lower) fontified t) 3665 3696 (face (smerge-lower font-lock-string-face) fontified t) 3696 3700 (face (smerge-lower rust-string-interpolation) fontified t) 3700 3701 (face (smerge-lower font-lock-string-face) fontified t) 3701 3734 (face (smerge-lower) fontified t) 3734 3758 (face (smerge-lower font-lock-preprocessor-face) fontified t) 3758 3759 (face (smerge-lower) fontified t) 3759 3792 (face smerge-markers fontified t)) . 262) (undo-tree-id0 . -13) (undo-tree-id1 . -21) (undo-tree-id2 . -919) (undo-tree-id3 . -3792) (undo-tree-id4 . -13) (undo-tree-id5 . -13) (undo-tree-id6 . -13) (undo-tree-id7 . -13) (undo-tree-id8 . -1142) (undo-tree-id9 . -1146) (undo-tree-id10 . -1193) (undo-tree-id11 . -1235) (undo-tree-id12 . -1260) (undo-tree-id13 . -1284) (undo-tree-id14 . -1318) (undo-tree-id15 . -1357) (undo-tree-id16 . -1395) (undo-tree-id17 . -1431) (undo-tree-id18 . -1453) (undo-tree-id19 . -1485) (undo-tree-id20 . -1516) (undo-tree-id21 . -1535) (undo-tree-id22 . -1610) (undo-tree-id23 . -1655) (undo-tree-id24 . -1683) (undo-tree-id25 . -1698) (undo-tree-id26 . -1730) (undo-tree-id27 . -1764) (undo-tree-id28 . -1807) (undo-tree-id29 . -1830) (undo-tree-id30 . -1881) (undo-tree-id31 . -1909) (undo-tree-id32 . -1924) (undo-tree-id33 . -1968) (undo-tree-id34 . -1980) (undo-tree-id35 . -1986) (undo-tree-id36 . -1988) (undo-tree-id37 . -1989) (undo-tree-id38 . -2006) (undo-tree-id39 . -2034) (undo-tree-id40 . -2087) (undo-tree-id41 . -2125) (undo-tree-id42 . -2129) (undo-tree-id43 . -2189) (undo-tree-id44 . -2243) (undo-tree-id45 . -2257) (undo-tree-id46 . -2278) (undo-tree-id47 . -2298) (undo-tree-id48 . -2328) (undo-tree-id49 . -2361) (undo-tree-id50 . -2395) (undo-tree-id51 . -2427) (undo-tree-id52 . -2459) (undo-tree-id53 . -2477) (undo-tree-id54 . -2505) (undo-tree-id55 . -2532) (undo-tree-id56 . -2547) (undo-tree-id57 . -2618) (undo-tree-id58 . -2641) (undo-tree-id59 . -2665) (undo-tree-id60 . -2676) (undo-tree-id61 . -2719) (undo-tree-id62 . -2807) (undo-tree-id63 . -2846) (undo-tree-id64 . -2897) (undo-tree-id65 . -2985) (undo-tree-id66 . -3009) (undo-tree-id67 . -3020) (undo-tree-id68 . -3049) (undo-tree-id69 . -3057) (undo-tree-id70 . -3059) (undo-tree-id71 . -3060) (undo-tree-id72 . -3145) (undo-tree-id73 . -3184) (undo-tree-id74 . -3230) (undo-tree-id75 . -3299) (undo-tree-id76 . -3309) (undo-tree-id77 . -3315) (undo-tree-id78 . -3317) (undo-tree-id79 . -3318) (undo-tree-id80 . -3337) (undo-tree-id81 . -3392) (undo-tree-id82 . -3454) (undo-tree-id83 . -3458) (undo-tree-id84 . -3511) (undo-tree-id85 . -3580) (undo-tree-id86 . -3586) (undo-tree-id87 . -3587) (undo-tree-id88 . -3648) (undo-tree-id89 . -3725) (undo-tree-id90 . -3731) (undo-tree-id91 . -3733) (undo-tree-id92 . -3734) (undo-tree-id93 . -3759) (undo-tree-id94 . -3792) (undo-tree-id95 . -3759) (undo-tree-id96 . -3759) (undo-tree-id97 . -3791) (undo-tree-id98 . -3792) (undo-tree-id99 . -3759) (undo-tree-id100 . -3734) (undo-tree-id101 . -3733) (undo-tree-id102 . -3731) (undo-tree-id103 . -3725) (undo-tree-id104 . -3648) (undo-tree-id105 . -3587) (undo-tree-id106 . -3586) (undo-tree-id107 . -3580) (undo-tree-id108 . -3511) (undo-tree-id109 . -3458) (undo-tree-id110 . -3454) (undo-tree-id111 . -3392) (undo-tree-id112 . -3454) (undo-tree-id113 . -3454) (undo-tree-id114 . -3454) (undo-tree-id115 . -3454) (undo-tree-id116 . -3454) (undo-tree-id117 . -3725) (undo-tree-id118 . -3725) (undo-tree-id119 . -3725) (undo-tree-id120 . -3725) (undo-tree-id121 . -3731) (undo-tree-id122 . -3731) (undo-tree-id123 . -3731) (undo-tree-id124 . -3731) (undo-tree-id125 . -3733) (undo-tree-id126 . -3733) (undo-tree-id127 . -3733) (undo-tree-id128 . -3733) (undo-tree-id129 . -3734) (undo-tree-id130 . -3734) (undo-tree-id131 . -3734) (undo-tree-id132 . -3734) (undo-tree-id133 . -3759) (undo-tree-id134 . -3759) (undo-tree-id135 . -3759) (undo-tree-id136 . -3759) (undo-tree-id137 . -3759) (undo-tree-id138 . -3759) (undo-tree-id139 . -3759) (undo-tree-id140 . -3759) (undo-tree-id141 . -3759) (undo-tree-id142 . -3759) (undo-tree-id143 . -3759) (undo-tree-id144 . -3733) (undo-tree-id145 . -3733) (undo-tree-id146 . -3733) (undo-tree-id147 . -3733) (undo-tree-id148 . -3733) (undo-tree-id149 . -3586) (undo-tree-id150 . -3586) (undo-tree-id151 . -3586) (undo-tree-id152 . -3586) (undo-tree-id153 . -3586) (undo-tree-id154 . -3317) (undo-tree-id155 . -3317) (undo-tree-id156 . -3317) (undo-tree-id157 . -3317) (undo-tree-id158 . -3317) (undo-tree-id159 . -3317) (undo-tree-id160 . -3317) (undo-tree-id161 . -3059) (undo-tree-id162 . -3059) (undo-tree-id163 . -1988) (undo-tree-id164 . -1988) (undo-tree-id165 . -921) (undo-tree-id166 . -921) (undo-tree-id167 . -13) (undo-tree-id168 . -13) (undo-tree-id169 . -921) (undo-tree-id170 . -921) (undo-tree-id171 . -921) (undo-tree-id172 . -921) (undo-tree-id173 . -921) (undo-tree-id174 . -921) (undo-tree-id175 . -919) (undo-tree-id176 . -919) (undo-tree-id177 . -919) (undo-tree-id178 . -919) (undo-tree-id179 . -919) (undo-tree-id180 . -919) (undo-tree-id181 . -919) (undo-tree-id182 . -919) (undo-tree-id183 . -919) (undo-tree-id184 . -919) (undo-tree-id185 . -919) (undo-tree-id186 . -913) (undo-tree-id187 . -913) (undo-tree-id188 . -913) (undo-tree-id189 . -913) (undo-tree-id190 . -913) (undo-tree-id191 . -901) (undo-tree-id192 . -901) (undo-tree-id193 . -857) (undo-tree-id194 . -857) (undo-tree-id195 . -102) (undo-tree-id196 . -102) (undo-tree-id197 . -3792)) nil (25866 37043 555109 750000) 0 nil])
nil
