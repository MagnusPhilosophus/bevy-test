(undo-tree-save-format-version . 1)
"c99e4edae7da701a4ca91d9e452cc0507ed59357"
[nil nil nil nil (25827 50466 3602 59000) 0 nil]
([nil nil ((#("fn exit_on_escape(mut exit: EventWriter<AppExit>, keys: Res<Input<KeyCode>>) {
    if keys.just_pressed(KeyCode::Escape) {
        exit.send(AppExit);
    }
}

" 0 2 (face font-lock-keyword-face fontified t) 2 3 (fontified t) 3 17 (face font-lock-function-name-face fontified t) 17 18 (fontified t) 18 21 (face font-lock-keyword-face fontified t) 21 22 (fontified t) 22 26 (face font-lock-variable-name-face fontified t) 26 28 (fontified t) 28 39 (face font-lock-type-face fontified t) 39 40 (fontified t) 40 47 (face font-lock-type-face fontified t) 47 50 (fontified t) 50 54 (face font-lock-variable-name-face fontified t) 54 56 (fontified t) 56 59 (face font-lock-type-face fontified t) 59 60 (fontified t) 60 65 (face font-lock-type-face fontified t) 65 66 (fontified t) 66 73 (face font-lock-type-face fontified t) 73 83 (fontified t) 83 85 (face font-lock-keyword-face fontified t) 85 104 (fontified t) 104 111 (face font-lock-type-face fontified t) 111 113 (fontified t) 113 119 (face font-lock-type-face fontified t) 119 141 (fontified t) 141 148 (face font-lock-type-face fontified t) 148 160 (fontified t)) . 347) (undo-tree-id106 . -159) (undo-tree-id107 . -1) (undo-tree-id108 . -159) (undo-tree-id109 . -159) (undo-tree-id110 . -159) 506 (t 25826 19404 879095 654000)) nil (25827 50466 3599 684000) 0 nil])
([nil nil ((379 . 380) (368 . 379) (#("Utils" 0 5 (face font-lock-type-face fontified t)) . -368) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -2) (undo-tree-id91 . -2) (undo-tree-id92 . -2) (undo-tree-id93 . -4) (undo-tree-id94 . -4) (undo-tree-id95 . -5) (undo-tree-id96 . -5) (undo-tree-id97 . -5) (undo-tree-id98 . -5) (undo-tree-id99 . -5) (undo-tree-id100 . -5) 373 (370 . 373) (#("i" 0 1 (face font-lock-type-face fontified t)) . -370) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (363 . 371) (#("i" 0 1 (face font-lock-constant-face fontified t)) . -363) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (357 . 364) (356 . 357) (352 . 356) (#("i" 0 1 (face font-lock-constant-face fontified t)) . -352) (undo-tree-id105 . -1) (346 . 353) (345 . 346) 328) nil (25827 50466 3594 446000) 0 nil])
([nil nil ((4528 . 4529) (4517 . 4528) (#("Utils" 0 5 (face font-lock-type-face fontified t)) . -4517) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -2) (undo-tree-id3 . -2) (undo-tree-id4 . -2) (undo-tree-id5 . -4) (undo-tree-id6 . -4) (undo-tree-id7 . -5) (undo-tree-id8 . -5) (undo-tree-id9 . -5) (undo-tree-id10 . -5) 4522 (4519 . 4522) (#("i" 0 1 (face font-lock-type-face fontified t)) . -4519) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (4517 . 4520) (4516 . 4517) (#(" " 0 1 (fontified t)) . -4516) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (#("u" 0 1 (fontified t)) . -4517) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (#("t" 0 1 (fontified t)) . -4518) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (#("i" 0 1 (fontified t)) . -4519) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (#("l" 0 1 (fontified t)) . -4520) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (#("s" 0 1 (fontified t)) . -4521) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) 4522 (4519 . 4522) (#("i" 0 1 (fontified t)) . -4519) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (4517 . 4520) (4511 . 4517) 4487) nil (25827 50466 3500 90000) 0 nil])
([nil nil ((4512 . 4520) (#("	" 0 1 (fontified t)) . 4512) 4528) nil (25827 50466 3391 68000) 0 nil])
([nil nil ((#("exit_on_e" 0 9 (fontified t)) . 4622) (undo-tree-id113 . -8) (undo-tree-id114 . -9) (t 25827 50466 7864 682000)) nil (25827 50475 655920 915000) 0 nil])
([nil nil ((#("scape, " 0 7 (fontified t)) . 4622) (undo-tree-id111 . -6) (undo-tree-id112 . -7)) nil (25827 50475 655915 328000) 0 nil])
([nil nil ((#("use bevy::app::AppExit;
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 8 (fontified t face font-lock-constant-face) 8 10 (fontified t) 10 13 (fontified t face font-lock-constant-face) 13 15 (fontified t) 15 22 (fontified t face font-lock-type-face) 22 23 (fontified t) 23 24 (fontified t)) . 1) (undo-tree-id115 . -23) (undo-tree-id116 . -23) (undo-tree-id117 . -22) (undo-tree-id118 . -22) (undo-tree-id119 . -22) (undo-tree-id120 . -22) (undo-tree-id121 . -22) (undo-tree-id122 . -22) (undo-tree-id123 . -22) (undo-tree-id124 . -22) (undo-tree-id125 . -22) (undo-tree-id126 . -22) (undo-tree-id127 . -22) (undo-tree-id128 . -22) (undo-tree-id129 . -22) (undo-tree-id130 . -24) 23 (t 25827 50475 657811 728000)) nil (25827 50496 770406 220000) 0 nil])
([nil nil ((#("            WorldInspectorPlugin::new(),
" 0 12 (fontified t) 12 32 (face font-lock-type-face fontified t) 32 41 (fontified t)) . 4199) (undo-tree-id172 . -40) (t 25827 50498 104355 221000)) nil (25827 50562 442761 989000) 0 nil] [nil nil ((#("use bevy::diagnostic::FrameTimeDiagnosticsPlugin;
" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 8 (face font-lock-constant-face fontified t) 8 10 (fontified t) 10 20 (face font-lock-constant-face fontified t) 20 22 (fontified t) 22 48 (face font-lock-type-face fontified t) 48 50 (fontified t)) . 1) (undo-tree-id140 . -49) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -22) (undo-tree-id144 . -22) (undo-tree-id145 . -22) (undo-tree-id146 . -22) (undo-tree-id147 . -22) (undo-tree-id148 . -22) (undo-tree-id149 . -22) (undo-tree-id150 . -22) (undo-tree-id151 . -22) (undo-tree-id152 . -22) (undo-tree-id153 . -22) (undo-tree-id154 . -22) (undo-tree-id155 . -22) (undo-tree-id156 . -22) (undo-tree-id157 . -22) (undo-tree-id158 . -22) (undo-tree-id159 . -22) (undo-tree-id160 . -50) 23 (t 25827 50481 54448 781000)) ((1 . 51) (t 25827 50493 201048 794000)) (25827 50491 199009 927000) 0 nil])
([nil nil ((#("            FrameTimeDiagnosticsPlugin,
" 0 12 (fontified t) 12 38 (face font-lock-type-face fontified t) 38 40 (fontified t)) . 4360) (undo-tree-id170 . -39) (undo-tree-id171 . -27) 4387) nil (25827 50562 442859 697000) 0 nil])
([nil nil ((#("use bevy_inspector_egui::quick::WorldInspectorPlugin;
" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 23 (face font-lock-constant-face fontified t) 23 25 (fontified t) 25 30 (face font-lock-constant-face fontified t) 30 32 (fontified t) 32 52 (face font-lock-type-face fontified t) 52 54 (fontified t)) . 23) (undo-tree-id131 . -53) (undo-tree-id132 . -1) (undo-tree-id133 . -20) (undo-tree-id134 . -20) (undo-tree-id135 . -20) (undo-tree-id136 . -20) (undo-tree-id137 . -20) (undo-tree-id138 . -20) (undo-tree-id139 . -54) 43) ((23 . 77) (t 25827 50488 81076 890000)) (25827 50488 80946 77000) 0 nil])
([nil nil ((#("use bevy_inspector_egui::quick::WorldInspectorPlugin;
" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 23 (face font-lock-constant-face fontified t) 23 25 (fontified t) 25 30 (face font-lock-constant-face fontified t) 30 32 (fontified t) 32 52 (face font-lock-type-face fontified t) 52 54 (fontified t)) . 73) (undo-tree-id173 . -53) (undo-tree-id174 . -1) (undo-tree-id175 . -12) (undo-tree-id176 . -12) (undo-tree-id177 . -12) (undo-tree-id178 . -12) (undo-tree-id179 . -12) (undo-tree-id180 . -12) (undo-tree-id181 . -12) (undo-tree-id182 . -12) (undo-tree-id183 . -12) (undo-tree-id184 . -12) (undo-tree-id185 . -12) (undo-tree-id186 . -12) (undo-tree-id187 . -12) (undo-tree-id188 . -54) 85 (t 25827 50574 87271 602000)) nil (25827 50616 751425 497000) 0 nil] [nil nil ((#("            //RapierDebugRenderPlugin::default(),
" 0 12 (fontified t) 12 14 (face font-lock-comment-delimiter-face fontified t) 14 39 (face font-lock-comment-face fontified t) 39 50 (face font-lock-comment-face fontified t)) . 4310) (undo-tree-id161 . -50) (undo-tree-id162 . -49) (undo-tree-id163 . -20) (undo-tree-id164 . -20) (undo-tree-id165 . -20) (undo-tree-id166 . -20) (undo-tree-id167 . -20) (undo-tree-id168 . -20) (undo-tree-id169 . -50) 4330) ((4310 . 4360)) (25827 50562 442753 468000) 0 nil])
nil
([nil nil ((#("use bevy::diagnostic::FrameTimeDiagnosticsPlugin;
" 0 3 (face font-lock-keyword-face fontified t) 3 4 (fontified t) 4 8 (face font-lock-constant-face fontified t) 8 10 (fontified t) 10 20 (face font-lock-constant-face fontified t) 20 22 (fontified t) 22 48 (face font-lock-type-face fontified t) 48 50 (fontified t)) . 1) (undo-tree-id189 . -4) (undo-tree-id190 . -49) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -22) (undo-tree-id194 . -4) (undo-tree-id195 . -4) (undo-tree-id196 . -4) (undo-tree-id197 . -4) (undo-tree-id198 . -4) (undo-tree-id199 . -4) (undo-tree-id200 . -4) (undo-tree-id201 . -4) (undo-tree-id202 . -4) (undo-tree-id203 . -4) (undo-tree-id204 . -4) (undo-tree-id205 . -4) (undo-tree-id206 . -50) 5 (t 25827 50616 757037 454000)) nil (25827 50809 995719 701000) 0 nil])
nil
([nil nil ((#("
// fn update_player(
//     mut query: Query<(&Transform, &mut KinematicCharacterController)>,
//     mut maze_timer: ResMut<MazeTimer>,
//     keys: Res<Input<KeyCode>>,
//     time: Res<Time>,
// ) {
//     if keys.any_pressed([KeyCode::Up, KeyCode::Down, KeyCode::Left, KeyCode::Right])
//         && !maze_timer.player_started
//     {
//         maze_timer.player_started = true;
//         maze_timer.start_time = Some(Instant::now())
//     }
//     let (transform, mut controller) = query.single_mut();
//     let mut velocity = Vec3::ZERO;
//     for key in keys.get_pressed() {
//         match key {
//             KeyCode::Up => velocity += transform.forward(),
//             KeyCode::Down => velocity += transform.back(),
//             KeyCode::Left => velocity += transform.left(),
//             KeyCode::Right => velocity += transform.right(),
//             _ => (),
//         }
//     }
//     controller.translation = Some(velocity.normalize_or_zero() * time.delta_seconds());
// }
" 0 1 (fontified t) 1 4 (face font-lock-comment-delimiter-face fontified t) 4 22 (face font-lock-comment-face fontified t) 22 29 (face font-lock-comment-delimiter-face fontified t) 29 35 (face font-lock-comment-face fontified t) 35 45 (fontified t face font-lock-comment-face) 45 46 (fontified t face font-lock-comment-face syntax-table (1)) 46 73 (fontified t face font-lock-comment-face) 73 93 (fontified t face font-lock-comment-face) 93 94 (fontified t face font-lock-comment-face syntax-table (1)) 94 96 (fontified t face font-lock-comment-face) 96 103 (face font-lock-comment-delimiter-face fontified t) 103 125 (face font-lock-comment-face fontified t) 125 126 (face font-lock-comment-face fontified t syntax-table (1)) 126 135 (face font-lock-comment-face fontified t) 135 136 (face font-lock-comment-face fontified t syntax-table (1)) 136 138 (face font-lock-comment-face fontified t) 138 145 (face font-lock-comment-delimiter-face fontified t) 145 154 (face font-lock-comment-face fontified t) 154 155 (face font-lock-comment-face fontified t syntax-table (1)) 155 160 (face font-lock-comment-face fontified t) 160 161 (face font-lock-comment-face fontified t syntax-table (1)) 161 168 (face font-lock-comment-face fontified t) 168 169 (face font-lock-comment-face fontified t syntax-table (1)) 169 170 (face font-lock-comment-face fontified t syntax-table (1)) 170 172 (face font-lock-comment-face fontified t) 172 179 (face font-lock-comment-delimiter-face fontified t) 179 188 (face font-lock-comment-face fontified t) 188 189 (face font-lock-comment-face fontified t syntax-table (1)) 189 193 (face font-lock-comment-face fontified t) 193 194 (face font-lock-comment-face fontified t syntax-table (1)) 194 196 (face font-lock-comment-face fontified t) 196 199 (face font-lock-comment-delimiter-face fontified t) 199 203 (face font-lock-comment-face fontified t) 203 210 (face font-lock-comment-delimiter-face fontified t) 210 288 (face font-lock-comment-face fontified t) 288 291 (face font-lock-comment-face fontified t) 291 302 (face font-lock-comment-delimiter-face fontified t) 302 332 (face font-lock-comment-face fontified t) 332 339 (face font-lock-comment-delimiter-face fontified t) 339 341 (face font-lock-comment-face fontified t) 341 352 (face font-lock-comment-delimiter-face fontified t) 352 386 (face font-lock-comment-face fontified t) 386 397 (face font-lock-comment-delimiter-face fontified t) 397 442 (face font-lock-comment-face fontified t) 442 449 (face font-lock-comment-delimiter-face fontified t) 449 451 (face font-lock-comment-face fontified t) 451 458 (face font-lock-comment-delimiter-face fontified t) 458 512 (face font-lock-comment-face fontified t) 512 519 (face font-lock-comment-delimiter-face fontified t) 519 550 (face font-lock-comment-face fontified t) 550 557 (face font-lock-comment-delimiter-face fontified t) 557 589 (face font-lock-comment-face fontified t) 589 600 (face font-lock-comment-delimiter-face fontified t) 600 612 (face font-lock-comment-face fontified t) 612 627 (face font-lock-comment-delimiter-face fontified t) 627 640 (face font-lock-comment-face fontified t) 640 641 (face font-lock-comment-face syntax-table (1) fontified t) 641 675 (face font-lock-comment-face fontified t) 675 690 (face font-lock-comment-delimiter-face fontified t) 690 705 (face font-lock-comment-face fontified t) 705 706 (face font-lock-comment-face syntax-table (1) fontified t) 706 737 (face font-lock-comment-face fontified t) 737 752 (face font-lock-comment-delimiter-face fontified t) 752 767 (face font-lock-comment-face fontified t) 767 768 (face font-lock-comment-face syntax-table (1) fontified t) 768 799 (face font-lock-comment-face fontified t) 799 814 (face font-lock-comment-delimiter-face fontified t) 814 830 (face font-lock-comment-face fontified t) 830 831 (face font-lock-comment-face syntax-table (1) fontified t) 831 863 (face font-lock-comment-face fontified t) 863 878 (face font-lock-comment-delimiter-face fontified t) 878 881 (face font-lock-comment-face fontified t) 881 882 (face font-lock-comment-face syntax-table (1) fontified t) 882 887 (face font-lock-comment-face fontified t) 887 898 (face font-lock-comment-delimiter-face fontified t) 898 900 (face font-lock-comment-face fontified t) 900 907 (face font-lock-comment-delimiter-face fontified t) 907 909 (face font-lock-comment-face fontified t) 909 916 (face font-lock-comment-delimiter-face fontified t) 916 1000 (face font-lock-comment-face fontified t) 1000 1003 (face font-lock-comment-delimiter-face fontified t) 1003 1005 (face font-lock-comment-face fontified t)) . 3011) (undo-tree-id214 . -1003) (undo-tree-id215 . -1003) (undo-tree-id216 . -1004) (undo-tree-id217 . -5) (undo-tree-id218 . -5) (undo-tree-id219 . -26) (undo-tree-id220 . -26) (undo-tree-id221 . -100) (undo-tree-id222 . -100) (undo-tree-id223 . -142) (undo-tree-id224 . -142) (undo-tree-id225 . -176) (undo-tree-id226 . -176) (undo-tree-id227 . -200) (undo-tree-id228 . -200) (undo-tree-id229 . -207) (undo-tree-id230 . -207) (undo-tree-id231 . -295) (undo-tree-id232 . -295) (undo-tree-id233 . -336) (undo-tree-id234 . -336) (undo-tree-id235 . -345) (undo-tree-id236 . -345) (undo-tree-id237 . -390) (undo-tree-id238 . -390) (undo-tree-id239 . -446) (undo-tree-id240 . -446) (undo-tree-id241 . -455) (undo-tree-id242 . -455) (undo-tree-id243 . -516) (undo-tree-id244 . -516) (undo-tree-id245 . -554) (undo-tree-id246 . -554) (undo-tree-id247 . -593) (undo-tree-id248 . -593) (undo-tree-id249 . -616) (undo-tree-id250 . -616) (undo-tree-id251 . -679) (undo-tree-id252 . -679) (undo-tree-id253 . -741) (undo-tree-id254 . -741) (undo-tree-id255 . -803) (undo-tree-id256 . -803) (undo-tree-id257 . -867) (undo-tree-id258 . -867) (undo-tree-id259 . -891) (undo-tree-id260 . -891) (undo-tree-id261 . -904) (undo-tree-id262 . -904) (undo-tree-id263 . -913) (undo-tree-id264 . -913) (undo-tree-id265 . -1003) (undo-tree-id266 . -1003) (undo-tree-id267 . -1003) (undo-tree-id268 . -1003) (undo-tree-id269 . -912) (undo-tree-id270 . -912) (undo-tree-id271 . -903) (undo-tree-id272 . -903) (undo-tree-id273 . -890) (undo-tree-id274 . -890) (undo-tree-id275 . -866) (undo-tree-id276 . -866) (undo-tree-id277 . -802) (undo-tree-id278 . -802) (undo-tree-id279 . -740) (undo-tree-id280 . -740) (undo-tree-id281 . -678) (undo-tree-id282 . -678) (undo-tree-id283 . -615) (undo-tree-id284 . -615) (undo-tree-id285 . -592) (undo-tree-id286 . -592) (undo-tree-id287 . -553) (undo-tree-id288 . -553) (undo-tree-id289 . -515) (undo-tree-id290 . -515) (undo-tree-id291 . -454) (undo-tree-id292 . -454) (undo-tree-id293 . -445) (undo-tree-id294 . -445) (undo-tree-id295 . -389) (undo-tree-id296 . -389) (undo-tree-id297 . -344) (undo-tree-id298 . -344) (undo-tree-id299 . -335) (undo-tree-id300 . -335) (undo-tree-id301 . -294) (undo-tree-id302 . -294) (undo-tree-id303 . -206) (undo-tree-id304 . -206) (undo-tree-id305 . -199) (undo-tree-id306 . -199) (undo-tree-id307 . -175) (undo-tree-id308 . -175) (undo-tree-id309 . -141) (undo-tree-id310 . -141) (undo-tree-id311 . -99) (undo-tree-id312 . -99) (undo-tree-id313 . -25) (undo-tree-id314 . -25) (undo-tree-id315 . -4) (undo-tree-id316 . -4) (undo-tree-id317 . -1005) (t 25827 50631 186958 271000)) nil (25827 50832 15764 42000) 0 nil] [nil nil ((#("b" 0 1 (face font-lock-constant-face fontified t)) . 5) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (t 25827 50631 186958 271000)) ((5 . 6)) (25827 50809 995459 891000) 0 nil] [nil nil ((#("b" 0 1 (face font-lock-constant-face fontified t)) . 5) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (t 25827 50631 186958 271000)) ((5 . 6)) (25827 50808 540447 447000) 0 nil])
([nil nil ((#("2" 0 1 (face font-lock-constant-face fontified t)) . 131) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (t 25827 50832 15856 233000)) nil (25827 50886 211757 773000) 0 nil])
nil
nil
([nil nil ((#("2" 0 1 (face font-lock-constant-face fontified t)) . 141) (undo-tree-id318 . -1) (undo-tree-id319 . -1)) nil (25827 50886 211752 465000) 0 nil])
([nil nil ((3028 . 3034) (#("i" 0 1 (fontified t)) . -3028) (undo-tree-id330 . -1) (3018 . 3029) (#("g" 0 1 (fontified t)) . -3018) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (undo-tree-id334 . -1) 3019 (3010 . 3019) (3009 . 3010) (t 25827 50886 212225 500000) 3009) nil (25827 51141 993996 494000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3474 . 3475) (#("
" 0 1 (fontified nil)) . -3938) (3474 . 3939)) nil (25827 51141 993991 326000) 0 nil])
([nil nil ((3480 . 3484) (#("n" 0 1 (face font-lock-preprocessor-face fontified t)) . -3480) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (#("(" 0 1 (face font-lock-preprocessor-face fontified t)) . -3481) (undo-tree-id328 . -1) (undo-tree-id329 . -1) 3482 (3480 . 3482)) nil (25827 51141 993988 952000) 0 nil])
([nil nil ((3502 . 3503)) nil (25827 51141 993984 691000) 0 nil])
([nil nil ((#("/" 0 1 (face font-lock-comment-delimiter-face fontified t)) . 3236) (undo-tree-id324 . -1) (undo-tree-id325 . -1)) nil (25827 51141 993982 317000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . 3236) (undo-tree-id322 . -1) (undo-tree-id323 . -1)) nil (25827 51141 993977 986000) 0 nil])
([nil current ((3941 . 3942) 3236) nil (25827 51141 993965 485000) 0 nil])
nil
