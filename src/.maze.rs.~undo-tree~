(undo-tree-save-format-version . 1)
"25e4fbf53a72b086f92924c14f96e044ce816f6b"
[nil nil nil nil (25818 2187 457605 299000) 0 nil]
([nil nil ((#("            visited_cells: 0,
" 0 12 (fontified t) 12 25 (fontified t face font-lock-variable-name-face) 25 30 (fontified t)) . 724) (undo-tree-id91 . -15) (undo-tree-id92 . -15) (undo-tree-id93 . -15) (undo-tree-id94 . -15) (undo-tree-id95 . -15) (undo-tree-id96 . -15) (undo-tree-id97 . -15) (undo-tree-id98 . -15) (undo-tree-id99 . -15) (undo-tree-id100 . -15) (undo-tree-id101 . -30) (undo-tree-id102 . -29) 739 (t 25818 2022 57768 485000)) nil (25818 2187 457603 673000) 0 nil])
([nil nil ((#("    fn has_unvisited(&self) -> bool {
        self.visited_cells < self.width * self.height
    }
" 0 4 (fontified t) 4 6 (fontified t face font-lock-keyword-face) 6 7 (fontified t) 7 20 (fontified t face font-lock-function-name-face) 20 21 (fontified t) 21 22 (fontified t face rust-ampersand-face) 22 26 (fontified t face font-lock-keyword-face) 26 29 (fontified t) 29 30 (fontified t syntax-table (1)) 30 31 (fontified t) 31 35 (fontified t face font-lock-type-face) 35 46 (fontified t) 46 50 (fontified t face font-lock-keyword-face) 50 65 (fontified t) 65 66 (fontified t syntax-table (1)) 66 67 (fontified t) 67 71 (fontified t face font-lock-keyword-face) 71 80 (fontified t) 80 84 (fontified t face font-lock-keyword-face) 84 98 (fontified t)) . 1568) (undo-tree-id75 . -97) (undo-tree-id76 . -15) (undo-tree-id77 . -97) (undo-tree-id78 . -97) (undo-tree-id79 . -15) (undo-tree-id80 . -15) (undo-tree-id81 . -15) (undo-tree-id82 . -15) (undo-tree-id83 . -53) (undo-tree-id84 . -53) (undo-tree-id85 . -92) (undo-tree-id86 . -97) (undo-tree-id87 . -97) (undo-tree-id88 . -97) (undo-tree-id89 . -97) (undo-tree-id90 . -98) 1665) nil (25818 2187 457136 83000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1567) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1)) nil (25818 2187 457124 649000) 0 nil])
([nil nil ((#("    // println!(\"neighbors of (0, 0): {:?}\", grid.check_neighbors(1, 0));
    // println!(\"has unvisited {:?}\", grid.has_unvisited());
    // let neighbors = grid.check_neighbors(0, 0);
    //let neighbor = neighbors.choose(&mut rand::thread_rng()).unwrap();
    //grid.grid[neighbor.0][neighbor.1].visited = true;

    // generate_maze(&mut grid);
" 0 4 (fontified t) 4 7 (fontified t face font-lock-comment-delimiter-face) 7 74 (fontified t face font-lock-comment-face) 74 78 (fontified t) 78 81 (fontified t face font-lock-comment-delimiter-face) 81 135 (fontified t face font-lock-comment-face) 135 139 (fontified t) 139 142 (fontified t face font-lock-comment-delimiter-face) 142 186 (fontified t face font-lock-comment-face) 186 190 (fontified t) 190 192 (fontified t face font-lock-comment-delimiter-face) 192 259 (fontified t face font-lock-comment-face) 259 263 (fontified t) 263 265 (fontified t face font-lock-comment-delimiter-face) 265 315 (fontified t face font-lock-comment-face) 315 320 (fontified t) 320 323 (fontified t face font-lock-comment-delimiter-face) 323 349 (fontified t face font-lock-comment-face)) . 2458) (undo-tree-id13 . -316) (undo-tree-id14 . -316) (undo-tree-id15 . -348) (undo-tree-id16 . -74) (undo-tree-id17 . -74) (undo-tree-id18 . -135) (undo-tree-id19 . -135) (undo-tree-id20 . -186) (undo-tree-id21 . -186) (undo-tree-id22 . -259) (undo-tree-id23 . -259) (undo-tree-id24 . -315) (undo-tree-id25 . -315) (undo-tree-id26 . -316) (undo-tree-id27 . -316) (undo-tree-id28 . -349) (undo-tree-id29 . -349) (undo-tree-id30 . -349) (undo-tree-id31 . -349) (undo-tree-id32 . -316) (undo-tree-id33 . -316) (undo-tree-id34 . -315) (undo-tree-id35 . -315) (undo-tree-id36 . -259) (undo-tree-id37 . -259) (undo-tree-id38 . -186) (undo-tree-id39 . -186) (undo-tree-id40 . -135) (undo-tree-id41 . -135) (undo-tree-id42 . -74) (undo-tree-id43 . -74) (undo-tree-id44 . -74) (undo-tree-id45 . -74) (undo-tree-id46 . -135) (undo-tree-id47 . -135) (undo-tree-id48 . -186) (undo-tree-id49 . -186) (undo-tree-id50 . -259) (undo-tree-id51 . -259) (undo-tree-id52 . -315) (undo-tree-id53 . -315) (undo-tree-id54 . -316) (undo-tree-id55 . -316) (undo-tree-id56 . -316) (undo-tree-id57 . -316) (undo-tree-id58 . -316) (undo-tree-id59 . -349) 2774) nil (25818 2187 457110 341000) 0 nil])
([nil nil ((#("// fn generate_maze(mut grid: &mut Grid) {
//     grid.grid[3][3].visited = true;
// }

" 0 3 (fontified t face font-lock-comment-delimiter-face) 3 43 (fontified t face font-lock-comment-face) 43 47 (fontified t face font-lock-comment-delimiter-face) 47 50 (fontified t face font-lock-comment-delimiter-face) 50 82 (fontified t face font-lock-comment-face) 82 85 (fontified t face font-lock-comment-delimiter-face) 85 87 (fontified t face font-lock-comment-face) 87 88 (fontified t)) . 2487) (undo-tree-id0 . -87) (undo-tree-id1 . -87) (undo-tree-id2 . -87) (undo-tree-id3 . -43) (undo-tree-id4 . -43) (undo-tree-id5 . -82) (undo-tree-id6 . -82) (undo-tree-id7 . -87) (undo-tree-id8 . -87) (undo-tree-id9 . -87) (undo-tree-id10 . -87) (undo-tree-id11 . -87) (undo-tree-id12 . -88) 2574) nil (25818 2187 457077 278000) 0 nil])
([nil nil ((#("    visited_cells: usize,
" 0 4 (fontified t) 4 17 (fontified t face font-lock-variable-name-face) 17 19 (fontified t) 19 24 (fontified t face font-lock-type-face) 24 26 (fontified t)) . 448) (undo-tree-id103 . -25) (undo-tree-id104 . -26) (undo-tree-id105 . -26) (undo-tree-id106 . -26) (t 25818 2187 461102 633000)) nil (25818 2200 447278 248000) 0 nil])
([nil nil ((#("    path_width: usize,
" 0 4 (fontified t) 4 14 (fontified t face font-lock-variable-name-face) 14 16 (fontified t) 16 21 (fontified t face font-lock-type-face) 21 23 (fontified t)) . 448) (undo-tree-id117 . -22) (undo-tree-id118 . -23) (t 25818 2200 451102 704000)) nil (25818 2218 654706 295000) 0 nil])
([nil nil ((#("            path_width,
" 0 24 (fontified t)) . 675) (undo-tree-id115 . -23) (undo-tree-id116 . -24)) nil (25818 2218 654704 84000) 0 nil])
([nil nil ((#(", path_width: usize" 0 2 (fontified t) 2 12 (fontified t face font-lock-variable-name-face) 12 14 (fontified t) 14 19 (fontified t face font-lock-type-face)) . 501) (undo-tree-id113 . -18) (undo-tree-id114 . -19)) nil (25818 2218 654701 948000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . 1591) (undo-tree-id111 . -1) (undo-tree-id112 . -1)) nil (25818 2218 654699 347000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 1591) (undo-tree-id109 . -1) (undo-tree-id110 . -1)) nil (25818 2218 654696 472000) 0 nil])
([nil nil ((#("3" 0 1 (fontified t)) . 1591) (undo-tree-id107 . -1) (undo-tree-id108 . -1)) nil (25818 2218 654690 806000) 0 nil])
([nil nil ((apply -21 2154 2383 undo--wrap-and-run-primitive-undo 2154 2383 ((2372 . 2375) (2345 . 2348) (2318 . 2321) (2301 . 2304) (2230 . 2233) (2197 . 2200) (2162 . 2165) 2356))) nil (25818 2557 978240 411000) 0 nil])
([nil nil ((270 . 274) (#("false" 0 5 (fontified t face font-lock-keyword-face)) . 270) (undo-tree-id244 . -4) (undo-tree-id245 . -5) (undo-tree-id246 . -5)) nil (25818 2557 978239 784000) 0 nil])
([nil nil ((276 . 280) (#("false" 0 5 (fontified t face font-lock-keyword-face)) . 276) (undo-tree-id241 . -4) (undo-tree-id242 . -5) (undo-tree-id243 . -5)) nil (25818 2557 978237 154000) 0 nil])
([nil nil ((282 . 286) (#("false" 0 5 (fontified t face font-lock-keyword-face)) . 282) (undo-tree-id238 . -4) (undo-tree-id239 . -5) (undo-tree-id240 . -5)) nil (25818 2557 978234 314000) 0 nil])
([nil nil ((288 . 292) (#("false" 0 5 (fontified t face font-lock-keyword-face)) . 288) (undo-tree-id235 . -4) (undo-tree-id236 . -5) (undo-tree-id237 . -5)) nil (25818 2557 977846 610000) 0 nil])
([nil nil ((#("	    " 0 5 (fontified t)) . -2039) (undo-tree-id231 . -5) (undo-tree-id232 . -5) (undo-tree-id233 . -5) (undo-tree-id234 . -5) 2044 (2038 . 2044) 2007) nil (25818 2557 977843 955000) 0 nil])
([nil nil ((2060 . 2066) (2055 . 2060) (#("v" 0 1 (fontified t face font-lock-comment-face)) . -2055) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (#("a" 0 1 (fontified t face font-lock-comment-face)) . -2056) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (#("l" 0 1 (fontified t face font-lock-comment-face)) . -2057) (undo-tree-id225 . -1) (undo-tree-id226 . -1) 2058 (2045 . 2058) (2040 . 2045) (#("	    " 0 5 (fontified nil)) . 2039) (undo-tree-id227 . -5) (undo-tree-id228 . -5) (undo-tree-id229 . -5) (undo-tree-id230 . -5) (2044 . 2045) (2038 . 2044) 1966) nil (25818 2557 977839 599000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2074 . 2075) (#("
" 0 1 (fontified nil)) . -2127) (2066 . 2128) 2065) nil (25818 2557 977829 385000) 0 nil])
([nil nil ((#("        " 0 7 (fontified nil) 7 8 (fontified nil rear-nonsticky t)) . -2072) (undo-tree-id208 . -8) (undo-tree-id209 . -8) (undo-tree-id210 . -8) (undo-tree-id211 . -8) (undo-tree-id212 . -8) (undo-tree-id213 . -8) (undo-tree-id214 . -8) (undo-tree-id215 . -8) (undo-tree-id216 . -8) (2067 . 2072) 2075) nil (25818 2557 977828 91000) 0 nil])
([nil nil ((#("	    
" 0 5 (fontified t) 5 6 (fontified t)) . 2061) (undo-tree-id189 . -5) (undo-tree-id190 . -5) (undo-tree-id191 . -5) (undo-tree-id192 . -4) (undo-tree-id193 . -4) (undo-tree-id194 . -4) (undo-tree-id195 . -4) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -6) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -6) 2062) nil (25818 2557 977821 762000) 0 nil])
([nil nil ((2084 . 2085)) nil (25818 2557 977808 982000) 0 nil])
([nil nil ((2094 . 2105) (2092 . 2094)) nil (25818 2557 977808 369000) 0 nil])
([nil nil ((2107 . 2119) (2105 . 2107)) nil (25818 2557 977807 648000) 0 nil])
([nil nil ((2121 . 2122)) nil (25818 2557 977806 971000) 0 nil])
([nil nil ((2152 . 2155) (2148 . 2152) (2143 . 2148) (#("Wa" 0 2 (fontified t face font-lock-type-face)) . -2143) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -2) (undo-tree-id174 . -2) (undo-tree-id175 . -2) (undo-tree-id176 . -2) (undo-tree-id177 . -2) (undo-tree-id178 . -2) 2145 (2141 . 2145) (#(":" 0 1 (fontified t)) . -2141) (undo-tree-id179 . -1) (undo-tree-id180 . -1) 2142 (2135 . 2142) (2130 . 2135) (#("Wa" 0 2 (fontified t face font-lock-type-face)) . -2130) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -2) (undo-tree-id184 . -2) (undo-tree-id185 . -2) (undo-tree-id186 . -2) (undo-tree-id187 . -2) (undo-tree-id188 . -2) 2132 (2128 . 2132)) nil (25818 2557 977805 309000) 0 nil])
([nil nil ((2157 . 2158)) nil (25818 2557 977791 261000) 0 nil])
([nil nil ((2187 . 2195) (2182 . 2187) (#("Wal" 0 3 (fontified t face font-lock-type-face)) . -2182) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -2) (undo-tree-id156 . -2) (undo-tree-id157 . -3) (undo-tree-id158 . -3) (undo-tree-id159 . -3) (undo-tree-id160 . -3) (undo-tree-id161 . -3) (undo-tree-id162 . -3) 2185 (2179 . 2185) (2174 . 2179) (#("N" 0 1 (fontified t face font-lock-type-face)) . -2174) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) 2175 (2174 . 2175) (#("n" 0 1 (fontified t)) . -2174) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) 2175 (2174 . 2175) (2165 . 2174)) nil (25818 2557 977789 314000) 0 nil])
([nil nil ((2197 . 2198)) nil (25818 2557 977776 471000) 0 nil])
([nil nil ((2232 . 2233) (2227 . 2232) (#("Nor" 0 3 (fontified t face font-lock-type-face)) . -2227) (undo-tree-id125 . -3) (undo-tree-id126 . -2) (undo-tree-id127 . -3) (undo-tree-id128 . -3) 2230 (2225 . 2230) (2220 . 2225) (#("Wa" 0 2 (fontified t face font-lock-type-face)) . -2220) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -2) (undo-tree-id132 . -2) (undo-tree-id133 . -2) (undo-tree-id134 . -2) (undo-tree-id135 . -2) (undo-tree-id136 . -2) 2222 (2218 . 2222) (2213 . 2218) (#("So" 0 2 (fontified t face font-lock-type-face)) . -2213) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -2) (undo-tree-id142 . -2) (undo-tree-id143 . -2) (undo-tree-id144 . -2) (undo-tree-id145 . -2) (undo-tree-id146 . -2) 2215 (2211 . 2215) (2206 . 2211) (#("W" 0 1 (fontified t face font-lock-type-face)) . -2206) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) 2207 (2204 . 2207)) nil (25818 2557 977772 930000) 0 nil])
([nil nil ((2040 . 2046) (#("	" 0 1 (fontified t)) . 2040) (2045 . 2047) (2061 . 2064) (#("	" 0 1 (fontified t)) . 2061) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (2066 . 2071) (2084 . 2101) (2120 . 2134) (2121 . 2123) (2156 . 2167) (2157 . 2162) (#(" " 0 1 (fontified t)) . 2180) (2196 . 2202) (2197 . 2207) (2233 . 2247) 2232) nil (25818 2557 977276 891000) 0 nil])
([nil nil ((2358 . 2364) (#("i" 0 1 (fontified t)) . -2358) (undo-tree-id1115 . -1) (2353 . 2359) (#("i" 0 1 (fontified t)) . -2353) (undo-tree-id1116 . -1) (2348 . 2354) (#("i" 0 1 (fontified t)) . -2348) (undo-tree-id1117 . -1) (2347 . 2349) (#("s" 0 1 (fontified t face font-lock-variable-name-face)) . -2347) (undo-tree-id1118 . -1) (undo-tree-id1119 . -1) (undo-tree-id1120 . -1) (undo-tree-id1121 . -1) 2348 (2338 . 2348) (#("dir" 0 3 (fontified t face font-lock-variable-name-face)) . -2338) (undo-tree-id1122 . -1) (undo-tree-id1123 . -1) (undo-tree-id1124 . -3) (undo-tree-id1125 . -3) (undo-tree-id1126 . -3) (undo-tree-id1127 . -3) (undo-tree-id1128 . -3) (undo-tree-id1129 . -3) 2341 (2339 . 2341) (#("i" 0 1 (fontified t face font-lock-variable-name-face)) . -2339) (undo-tree-id1130 . -1) (2334 . 2340) (2329 . 2334) (#("	    " 0 5 (fontified nil)) . 2328) (undo-tree-id1131 . -5) (undo-tree-id1132 . -5) (undo-tree-id1133 . -5) (undo-tree-id1134 . -5) (2333 . 2334) (2327 . 2333) (t 25818 2557 981104 468000) 2326) nil (25818 2733 834915 825000) 0 nil])
([nil nil ((#("&" 0 1 (fontified t face rust-ampersand-face)) . 2351) (undo-tree-id1113 . -1) (undo-tree-id1114 . -1)) nil (25818 2733 834898 608000) 0 nil])
([nil nil ((#("	" 0 1 (fontified nil)) . -2402) (2402 . 2403) (#("	" 0 1 (fontified nil)) . 2402) (undo-tree-id1095 . -1) (undo-tree-id1096 . -1) (undo-tree-id1097 . -1) (undo-tree-id1098 . -1) (2398 . 2402) (2399 . 2400) (2396 . 2399) (#("    " 0 4 (fontified nil)) . -2395) (undo-tree-id1099 . -4) (undo-tree-id1100 . -4) (undo-tree-id1101 . -4) (undo-tree-id1102 . -4) (2399 . 2400) (2392 . 2399) (2390 . 2392) (2387 . 2390) (#("i" 0 1 (fontified t)) . -2387) (undo-tree-id1103 . -1) (2382 . 2388) (#("i" 0 1 (fontified t)) . -2382) (undo-tree-id1104 . -1) (2377 . 2383) (2374 . 2377) (#("o" 0 1 (fontified t)) . -2374) (undo-tree-id1105 . -1) (undo-tree-id1106 . -1) (undo-tree-id1107 . -1) (undo-tree-id1108 . -1) (#("r" 0 1 (fontified t)) . -2375) (undo-tree-id1109 . -1) (undo-tree-id1110 . -1) 2376 (2371 . 2376) (#("i" 0 1 (fontified t)) . -2371) (undo-tree-id1111 . -1) (2366 . 2372) (#("i" 0 1 (fontified t)) . -2366) (undo-tree-id1112 . -1) (2363 . 2367) 2351) nil (25818 2733 834894 726000) 0 nil])
([nil nil ((2411 . 2418) (2399 . 2411) (#("curr" 0 4 (fontified t)) . -2399) (undo-tree-id1085 . -1) (undo-tree-id1086 . -1) (undo-tree-id1087 . -2) (undo-tree-id1088 . -2) (undo-tree-id1089 . -3) (undo-tree-id1090 . -3) (undo-tree-id1091 . -4) (undo-tree-id1092 . -4) (undo-tree-id1093 . -4) (undo-tree-id1094 . -4) 2403 (2399 . 2403) (2392 . 2399) 2365) nil (25818 2733 834878 58000) 0 nil])
([nil nil ((2390 . 2391)) nil (25818 2733 834869 482000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -2361) (undo-tree-id658 . -1) (undo-tree-id659 . -1) (undo-tree-id660 . -1) (undo-tree-id661 . -1) (undo-tree-id662 . -1) (undo-tree-id663 . -1) (undo-tree-id664 . -1) (undo-tree-id665 . -1) (undo-tree-id666 . -1) (undo-tree-id667 . -1) (undo-tree-id668 . -1) (undo-tree-id669 . -1) (undo-tree-id670 . -1) (undo-tree-id671 . -1) (undo-tree-id672 . -1) (undo-tree-id673 . -1) (undo-tree-id674 . -1) (undo-tree-id675 . -1) (undo-tree-id676 . -1) (undo-tree-id677 . -1) (undo-tree-id678 . -1) (undo-tree-id679 . -1) (undo-tree-id680 . -1) (undo-tree-id681 . -1) (undo-tree-id682 . -1) (undo-tree-id683 . -1) (undo-tree-id684 . -1) (undo-tree-id685 . -1) (undo-tree-id686 . -1) (undo-tree-id687 . -1) (undo-tree-id688 . -1) (undo-tree-id689 . -1) (undo-tree-id690 . -1) (undo-tree-id691 . -1) (undo-tree-id692 . -1) (#("i" 0 1 (fontified t)) . -2362) (undo-tree-id693 . -1) (undo-tree-id694 . -1) (undo-tree-id695 . -1) (undo-tree-id696 . -1) (undo-tree-id697 . -1) (undo-tree-id698 . -1) (undo-tree-id699 . -1) (undo-tree-id700 . -1) (undo-tree-id701 . -1) (undo-tree-id702 . -1) (undo-tree-id703 . -1) (undo-tree-id704 . -1) (undo-tree-id705 . -1) (undo-tree-id706 . -1) (undo-tree-id707 . -1) (undo-tree-id708 . -1) (undo-tree-id709 . -1) (undo-tree-id710 . -1) (undo-tree-id711 . -1) (undo-tree-id712 . -1) (undo-tree-id713 . -1) (undo-tree-id714 . -1) (undo-tree-id715 . -1) (undo-tree-id716 . -1) (undo-tree-id717 . -1) (undo-tree-id718 . -1) (undo-tree-id719 . -1) (undo-tree-id720 . -1) (undo-tree-id721 . -1) (undo-tree-id722 . -1) (undo-tree-id723 . -1) (undo-tree-id724 . -1) (undo-tree-id725 . -1) (undo-tree-id726 . -1) (undo-tree-id727 . -1) (#("t" 0 1 (fontified t)) . -2363) (undo-tree-id728 . -1) (undo-tree-id729 . -1) (undo-tree-id730 . -1) (undo-tree-id731 . -1) (undo-tree-id732 . -1) (undo-tree-id733 . -1) (undo-tree-id734 . -1) (undo-tree-id735 . -1) (undo-tree-id736 . -1) (undo-tree-id737 . -1) (undo-tree-id738 . -1) (undo-tree-id739 . -1) (undo-tree-id740 . -1) (undo-tree-id741 . -1) (undo-tree-id742 . -1) (undo-tree-id743 . -1) (undo-tree-id744 . -1) (undo-tree-id745 . -1) (undo-tree-id746 . -1) (undo-tree-id747 . -1) (undo-tree-id748 . -1) (undo-tree-id749 . -1) (undo-tree-id750 . -1) (undo-tree-id751 . -1) (undo-tree-id752 . -1) (undo-tree-id753 . -1) (undo-tree-id754 . -1) (undo-tree-id755 . -1) (undo-tree-id756 . -1) (undo-tree-id757 . -1) (undo-tree-id758 . -1) (undo-tree-id759 . -1) (undo-tree-id760 . -1) (undo-tree-id761 . -1) (undo-tree-id762 . -1) (#("e" 0 1 (fontified t)) . -2364) (undo-tree-id763 . -1) (undo-tree-id764 . -1) (undo-tree-id765 . -1) (undo-tree-id766 . -1) (undo-tree-id767 . -1) (undo-tree-id768 . -1) (undo-tree-id769 . -1) (undo-tree-id770 . -1) (undo-tree-id771 . -1) (undo-tree-id772 . -1) (undo-tree-id773 . -1) (undo-tree-id774 . -1) (undo-tree-id775 . -1) (undo-tree-id776 . -1) (undo-tree-id777 . -1) (undo-tree-id778 . -1) (undo-tree-id779 . -1) (undo-tree-id780 . -1) (undo-tree-id781 . -1) (undo-tree-id782 . -1) (undo-tree-id783 . -1) (undo-tree-id784 . -1) (undo-tree-id785 . -1) (undo-tree-id786 . -1) (undo-tree-id787 . -1) (undo-tree-id788 . -1) (undo-tree-id789 . -1) (undo-tree-id790 . -1) (undo-tree-id791 . -1) (undo-tree-id792 . -1) (undo-tree-id793 . -1) (undo-tree-id794 . -1) (undo-tree-id795 . -1) (#("r" 0 1 (fontified t)) . -2365) (undo-tree-id796 . -1) (undo-tree-id797 . -1) (undo-tree-id798 . -1) (undo-tree-id799 . -1) (undo-tree-id800 . -1) (undo-tree-id801 . -1) (undo-tree-id802 . -1) (undo-tree-id803 . -1) (undo-tree-id804 . -1) (undo-tree-id805 . -1) (undo-tree-id806 . -1) (undo-tree-id807 . -1) (undo-tree-id808 . -1) (undo-tree-id809 . -1) (undo-tree-id810 . -1) (undo-tree-id811 . -1) (undo-tree-id812 . -1) (undo-tree-id813 . -1) (undo-tree-id814 . -1) (undo-tree-id815 . -1) (undo-tree-id816 . -1) (undo-tree-id817 . -1) (undo-tree-id818 . -1) (undo-tree-id819 . -1) (undo-tree-id820 . -1) (undo-tree-id821 . -1) (undo-tree-id822 . -1) (undo-tree-id823 . -1) (undo-tree-id824 . -1) (undo-tree-id825 . -1) (undo-tree-id826 . -1) (undo-tree-id827 . -1) (#("(" 0 1 (fontified t)) . -2366) (undo-tree-id828 . -1) (undo-tree-id829 . -1) (undo-tree-id830 . -1) (undo-tree-id831 . -1) (undo-tree-id832 . -1) (undo-tree-id833 . -1) (undo-tree-id834 . -1) (undo-tree-id835 . -1) (undo-tree-id836 . -1) (undo-tree-id837 . -1) (undo-tree-id838 . -1) (undo-tree-id839 . -1) (undo-tree-id840 . -1) (undo-tree-id841 . -1) (undo-tree-id842 . -1) (undo-tree-id843 . -1) (undo-tree-id844 . -1) (undo-tree-id845 . -1) (undo-tree-id846 . -1) (undo-tree-id847 . -1) (undo-tree-id848 . -1) (undo-tree-id849 . -1) (undo-tree-id850 . -1) (undo-tree-id851 . -1) (undo-tree-id852 . -1) (undo-tree-id853 . -1) (undo-tree-id854 . -1) (undo-tree-id855 . -1) (#(")" 0 1 (fontified t)) . -2367) (undo-tree-id856 . -1) (undo-tree-id857 . -1) (undo-tree-id858 . -1) (undo-tree-id859 . -1) (undo-tree-id860 . -1) (undo-tree-id861 . -1) (undo-tree-id862 . -1) (undo-tree-id863 . -1) (undo-tree-id864 . -1) (undo-tree-id865 . -1) (undo-tree-id866 . -1) (undo-tree-id867 . -1) (undo-tree-id868 . -1) (undo-tree-id869 . -1) (undo-tree-id870 . -1) (undo-tree-id871 . -1) (undo-tree-id872 . -1) (undo-tree-id873 . -1) (undo-tree-id874 . -1) (undo-tree-id875 . -1) (undo-tree-id876 . -1) (undo-tree-id877 . -1) (undo-tree-id878 . -1) (undo-tree-id879 . -1) (undo-tree-id880 . -1) (undo-tree-id881 . -1) (undo-tree-id882 . -1) (undo-tree-id883 . -1) (#("." 0 1 (fontified t)) . -2368) (undo-tree-id884 . -1) (undo-tree-id885 . -1) (undo-tree-id886 . -1) (undo-tree-id887 . -1) (undo-tree-id888 . -1) (undo-tree-id889 . -1) (undo-tree-id890 . -1) (undo-tree-id891 . -1) (undo-tree-id892 . -1) (undo-tree-id893 . -1) (undo-tree-id894 . -1) (undo-tree-id895 . -1) (undo-tree-id896 . -1) (undo-tree-id897 . -1) (undo-tree-id898 . -1) (undo-tree-id899 . -1) (undo-tree-id900 . -1) (undo-tree-id901 . -1) (undo-tree-id902 . -1) (undo-tree-id903 . -1) (undo-tree-id904 . -1) (undo-tree-id905 . -1) (undo-tree-id906 . -1) (undo-tree-id907 . -1) (undo-tree-id908 . -1) (undo-tree-id909 . -1) (#("e" 0 1 (fontified t)) . -2369) (undo-tree-id910 . -1) (undo-tree-id911 . -1) (undo-tree-id912 . -1) (undo-tree-id913 . -1) (undo-tree-id914 . -1) (undo-tree-id915 . -1) (undo-tree-id916 . -1) (undo-tree-id917 . -1) (undo-tree-id918 . -1) (undo-tree-id919 . -1) (undo-tree-id920 . -1) (undo-tree-id921 . -1) (undo-tree-id922 . -1) (undo-tree-id923 . -1) (undo-tree-id924 . -1) (undo-tree-id925 . -1) (undo-tree-id926 . -1) (undo-tree-id927 . -1) (undo-tree-id928 . -1) (undo-tree-id929 . -1) (undo-tree-id930 . -1) (undo-tree-id931 . -1) (undo-tree-id932 . -1) (undo-tree-id933 . -1) (undo-tree-id934 . -1) (undo-tree-id935 . -1) (#("n" 0 1 (fontified t)) . -2370) (undo-tree-id936 . -1) (undo-tree-id937 . -1) (undo-tree-id938 . -1) (undo-tree-id939 . -1) (undo-tree-id940 . -1) (undo-tree-id941 . -1) (undo-tree-id942 . -1) (undo-tree-id943 . -1) (undo-tree-id944 . -1) (undo-tree-id945 . -1) (undo-tree-id946 . -1) (undo-tree-id947 . -1) (undo-tree-id948 . -1) (undo-tree-id949 . -1) (undo-tree-id950 . -1) (undo-tree-id951 . -1) (undo-tree-id952 . -1) (undo-tree-id953 . -1) (undo-tree-id954 . -1) (undo-tree-id955 . -1) (undo-tree-id956 . -1) (undo-tree-id957 . -1) (undo-tree-id958 . -1) (undo-tree-id959 . -1) (#("u" 0 1 (fontified t)) . -2371) (undo-tree-id960 . -1) (undo-tree-id961 . -1) (undo-tree-id962 . -1) (undo-tree-id963 . -1) (undo-tree-id964 . -1) (undo-tree-id965 . -1) (undo-tree-id966 . -1) (undo-tree-id967 . -1) (undo-tree-id968 . -1) (undo-tree-id969 . -1) (undo-tree-id970 . -1) (undo-tree-id971 . -1) (undo-tree-id972 . -1) (undo-tree-id973 . -1) (undo-tree-id974 . -1) (undo-tree-id975 . -1) (undo-tree-id976 . -1) (undo-tree-id977 . -1) (undo-tree-id978 . -1) (undo-tree-id979 . -1) (undo-tree-id980 . -1) (undo-tree-id981 . -1) (#("m" 0 1 (fontified t face font-lock-keyword-face)) . -2372) (undo-tree-id982 . -1) (undo-tree-id983 . -1) (undo-tree-id984 . -1) (undo-tree-id985 . -1) (undo-tree-id986 . -1) (undo-tree-id987 . -1) (undo-tree-id988 . -1) (undo-tree-id989 . -1) (undo-tree-id990 . -1) (undo-tree-id991 . -1) (undo-tree-id992 . -1) (undo-tree-id993 . -1) (undo-tree-id994 . -1) (undo-tree-id995 . -1) (undo-tree-id996 . -1) (undo-tree-id997 . -1) (undo-tree-id998 . -1) (undo-tree-id999 . -1) (undo-tree-id1000 . -1) (undo-tree-id1001 . -1) (#("e" 0 1 (fontified t)) . -2373) (undo-tree-id1002 . -1) (undo-tree-id1003 . -1) (undo-tree-id1004 . -1) (undo-tree-id1005 . -1) (undo-tree-id1006 . -1) (undo-tree-id1007 . -1) (undo-tree-id1008 . -1) (undo-tree-id1009 . -1) (undo-tree-id1010 . -1) (undo-tree-id1011 . -1) (undo-tree-id1012 . -1) (undo-tree-id1013 . -1) (undo-tree-id1014 . -1) (undo-tree-id1015 . -1) (undo-tree-id1016 . -1) (undo-tree-id1017 . -1) (undo-tree-id1018 . -1) (undo-tree-id1019 . -1) (#("r" 0 1 (fontified t)) . -2374) (undo-tree-id1020 . -1) (undo-tree-id1021 . -1) (undo-tree-id1022 . -1) (undo-tree-id1023 . -1) (undo-tree-id1024 . -1) (undo-tree-id1025 . -1) (undo-tree-id1026 . -1) (undo-tree-id1027 . -1) (undo-tree-id1028 . -1) (undo-tree-id1029 . -1) (undo-tree-id1030 . -1) (undo-tree-id1031 . -1) (undo-tree-id1032 . -1) (undo-tree-id1033 . -1) (undo-tree-id1034 . -1) (undo-tree-id1035 . -1) (#("a" 0 1 (fontified t)) . -2375) (undo-tree-id1036 . -1) (undo-tree-id1037 . -1) (undo-tree-id1038 . -1) (undo-tree-id1039 . -1) (undo-tree-id1040 . -1) (undo-tree-id1041 . -1) (undo-tree-id1042 . -1) (undo-tree-id1043 . -1) (undo-tree-id1044 . -1) (undo-tree-id1045 . -1) (undo-tree-id1046 . -1) (undo-tree-id1047 . -1) (undo-tree-id1048 . -1) (undo-tree-id1049 . -1) (#("t" 0 1 (fontified t)) . -2376) (undo-tree-id1050 . -1) (undo-tree-id1051 . -1) (undo-tree-id1052 . -1) (undo-tree-id1053 . -1) (undo-tree-id1054 . -1) (undo-tree-id1055 . -1) (undo-tree-id1056 . -1) (undo-tree-id1057 . -1) (undo-tree-id1058 . -1) (undo-tree-id1059 . -1) (undo-tree-id1060 . -1) (undo-tree-id1061 . -1) (#("e" 0 1 (fontified t)) . -2377) (undo-tree-id1062 . -1) (undo-tree-id1063 . -1) (undo-tree-id1064 . -1) (undo-tree-id1065 . -1) (undo-tree-id1066 . -1) (undo-tree-id1067 . -1) (undo-tree-id1068 . -1) (undo-tree-id1069 . -1) (undo-tree-id1070 . -1) (undo-tree-id1071 . -1) (#("(" 0 1 (fontified t)) . -2378) (undo-tree-id1072 . -1) (undo-tree-id1073 . -1) (undo-tree-id1074 . -1) (undo-tree-id1075 . -1) (undo-tree-id1076 . -1) (undo-tree-id1077 . -1) (#(")" 0 1 (fontified t)) . -2379) (undo-tree-id1078 . -1) (undo-tree-id1079 . -1) (undo-tree-id1080 . -1) (undo-tree-id1081 . -1) (undo-tree-id1082 . -1) (undo-tree-id1083 . -1) 2380 (2362 . 2380) (#("i" 0 1 (fontified t)) . -2362) (undo-tree-id1084 . -1) (2361 . 2363)) nil (25818 2733 834854 752000) 0 nil])
([nil nil ((2391 . 2392)) nil (25818 2733 834569 575000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -2448) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (#("e" 0 1 (fontified t)) . -2449) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (#("i" 0 1 (fontified t)) . -2450) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (#("g" 0 1 (fontified t)) . -2451) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (undo-tree-id486 . -1) (#("h" 0 1 (fontified t)) . -2452) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (#("b" 0 1 (fontified t)) . -2453) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (undo-tree-id526 . -1) (#("o" 0 1 (fontified t)) . -2454) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (undo-tree-id535 . -1) (undo-tree-id536 . -1) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (undo-tree-id539 . -1) (undo-tree-id540 . -1) (undo-tree-id541 . -1) (undo-tree-id542 . -1) (undo-tree-id543 . -1) (undo-tree-id544 . -1) (undo-tree-id545 . -1) (undo-tree-id546 . -1) (#("r" 0 1 (fontified t)) . -2455) (undo-tree-id547 . -1) (undo-tree-id548 . -1) (undo-tree-id549 . -1) (undo-tree-id550 . -1) (undo-tree-id551 . -1) (undo-tree-id552 . -1) (undo-tree-id553 . -1) (undo-tree-id554 . -1) (undo-tree-id555 . -1) (undo-tree-id556 . -1) (undo-tree-id557 . -1) (undo-tree-id558 . -1) (undo-tree-id559 . -1) (undo-tree-id560 . -1) (undo-tree-id561 . -1) (undo-tree-id562 . -1) (undo-tree-id563 . -1) (undo-tree-id564 . -1) (undo-tree-id565 . -1) (undo-tree-id566 . -1) (#("." 0 1 (fontified t)) . -2456) (undo-tree-id567 . -1) (undo-tree-id568 . -1) (undo-tree-id569 . -1) (undo-tree-id570 . -1) (undo-tree-id571 . -1) (undo-tree-id572 . -1) (undo-tree-id573 . -1) (undo-tree-id574 . -1) (undo-tree-id575 . -1) (undo-tree-id576 . -1) (undo-tree-id577 . -1) (undo-tree-id578 . -1) (undo-tree-id579 . -1) (undo-tree-id580 . -1) (undo-tree-id581 . -1) (undo-tree-id582 . -1) (#("w" 0 1 (fontified t)) . -2457) (undo-tree-id583 . -1) (undo-tree-id584 . -1) (undo-tree-id585 . -1) (undo-tree-id586 . -1) (undo-tree-id587 . -1) (undo-tree-id588 . -1) (undo-tree-id589 . -1) (undo-tree-id590 . -1) (undo-tree-id591 . -1) (undo-tree-id592 . -1) (undo-tree-id593 . -1) (undo-tree-id594 . -1) (undo-tree-id595 . -1) (undo-tree-id596 . -1) (undo-tree-id597 . -1) (undo-tree-id598 . -1) (#("a" 0 1 (fontified t)) . -2458) (undo-tree-id599 . -1) (undo-tree-id600 . -1) (undo-tree-id601 . -1) (undo-tree-id602 . -1) (undo-tree-id603 . -1) (undo-tree-id604 . -1) (undo-tree-id605 . -1) (undo-tree-id606 . -1) (undo-tree-id607 . -1) (undo-tree-id608 . -1) (undo-tree-id609 . -1) (undo-tree-id610 . -1) (undo-tree-id611 . -1) (undo-tree-id612 . -1) (#("l" 0 1 (fontified t)) . -2459) (undo-tree-id613 . -1) (undo-tree-id614 . -1) (undo-tree-id615 . -1) (undo-tree-id616 . -1) (undo-tree-id617 . -1) (undo-tree-id618 . -1) (undo-tree-id619 . -1) (undo-tree-id620 . -1) (undo-tree-id621 . -1) (undo-tree-id622 . -1) (undo-tree-id623 . -1) (undo-tree-id624 . -1) (#("l" 0 1 (fontified t)) . -2460) (undo-tree-id625 . -1) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (undo-tree-id628 . -1) (undo-tree-id629 . -1) (undo-tree-id630 . -1) (undo-tree-id631 . -1) (undo-tree-id632 . -1) (undo-tree-id633 . -1) (undo-tree-id634 . -1) (#("s" 0 1 (fontified t)) . -2461) (undo-tree-id635 . -1) (undo-tree-id636 . -1) (undo-tree-id637 . -1) (undo-tree-id638 . -1) (undo-tree-id639 . -1) (undo-tree-id640 . -1) (undo-tree-id641 . -1) (undo-tree-id642 . -1) 2462 (2456 . 2462) (2448 . 2456) (#("neigh" 0 5 (fontified t)) . -2448) (undo-tree-id643 . -1) (undo-tree-id644 . -1) (undo-tree-id645 . -2) (undo-tree-id646 . -2) (undo-tree-id647 . -4) (undo-tree-id648 . -4) (undo-tree-id649 . -5) (undo-tree-id650 . -5) (undo-tree-id651 . -5) (undo-tree-id652 . -5) (undo-tree-id653 . -5) (undo-tree-id654 . -5) 2453 (2450 . 2453) (#("i" 0 1 (fontified t)) . -2450) (undo-tree-id655 . -1) (2448 . 2451) (2441 . 2448) (2426 . 2441) (#("i" 0 1 (fontified t)) . -2426) (undo-tree-id656 . -1) (2421 . 2427) (#("i" 0 1 (fontified t)) . -2421) (undo-tree-id657 . -1) (2420 . 2422)) nil (25818 2733 834559 560000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2453 . 2454) (#("
" 0 1 (fontified nil)) . -2503) (2441 . 2504) 2400) nil (25818 2733 833797 659000) 0 nil])
([nil nil ((#("		    
" 0 6 (fontified t) 6 7 (fontified t)) . 2504) (undo-tree-id359 . -6) (undo-tree-id360 . 1) (undo-tree-id361 . 1) (undo-tree-id362 . -6) (undo-tree-id363 . -6) (undo-tree-id364 . -6) (undo-tree-id365 . -6) (undo-tree-id366 . -6) (undo-tree-id367 . -6) (undo-tree-id368 . -6) (undo-tree-id369 . -6) (undo-tree-id370 . -6) (undo-tree-id371 . -6) (undo-tree-id372 . -6) (undo-tree-id373 . -6) (undo-tree-id374 . -6) (undo-tree-id375 . -6) (undo-tree-id376 . -6) (undo-tree-id377 . -6) (undo-tree-id378 . -6) (undo-tree-id379 . -6) (undo-tree-id380 . -6) (undo-tree-id381 . -6) (undo-tree-id382 . -6) (undo-tree-id383 . -6) (undo-tree-id384 . -6) (undo-tree-id385 . -6) (undo-tree-id386 . -6) (undo-tree-id387 . -6) (undo-tree-id388 . -6) (undo-tree-id389 . -6) (undo-tree-id390 . -6) (undo-tree-id391 . -6) (undo-tree-id392 . -5) (undo-tree-id393 . -5) (undo-tree-id394 . -5) (undo-tree-id395 . -5) (undo-tree-id396 . -5) (undo-tree-id397 . -5) (undo-tree-id398 . -5) (undo-tree-id399 . -5) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (undo-tree-id406 . -7) 2505) nil (25818 2733 833795 259000) 0 nil])
([nil nil ((#("            " 0 11 (fontified nil) 11 12 (fontified nil rear-nonsticky t)) . -2444) (undo-tree-id348 . -12) (undo-tree-id349 . -12) (undo-tree-id350 . -8) (undo-tree-id351 . -8) (undo-tree-id352 . -8) (undo-tree-id353 . -8) (undo-tree-id354 . -8) (undo-tree-id355 . -8) (undo-tree-id356 . -8) (undo-tree-id357 . -8) (undo-tree-id358 . -8) (2442 . 2444) 2450) nil (25818 2733 833763 553000) 0 nil])
([nil nil ((#("		" 0 2 (fontified nil)) . -2448) (undo-tree-id331 . -2) (undo-tree-id332 . -2) (undo-tree-id333 . -2) (undo-tree-id334 . -2) (undo-tree-id335 . -2) (undo-tree-id336 . -2) (undo-tree-id337 . -2) (undo-tree-id338 . -2) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (2442 . 2448) 2443) nil (25818 2733 833755 876000) 0 nil])
([nil nil ((2482 . 2487) (#("visited" 0 7 (fontified t)) . 2482) (undo-tree-id328 . -6) (undo-tree-id329 . -7) (undo-tree-id330 . -7)) nil (25818 2733 833745 128000) 0 nil])
([nil nil ((#(" = true;" 0 3 (fontified t) 3 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t)) . 2487) (undo-tree-id323 . -8) (undo-tree-id324 . -7) (undo-tree-id325 . 8) (undo-tree-id326 . -8) (undo-tree-id327 . -8)) nil (25818 2733 833741 903000) 0 nil])
([nil nil ((2408 . 2411) (#("i" 0 1 (fontified t)) . -2408) (undo-tree-id318 . -1) (2407 . 2409) (2403 . 2407) (#("i" 0 1 (fontified t)) . -2403) (undo-tree-id319 . -1) (2401 . 2404) (#("current" 0 7 (fontified t)) . 2401) (undo-tree-id320 . -6) (undo-tree-id321 . -7) (undo-tree-id322 . -7)) nil (25818 2733 833738 163000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . 2411) (undo-tree-id315 . 1) (undo-tree-id316 . -1) (undo-tree-id317 . -1)) nil (25818 2733 833733 860000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t)) . 2411) (undo-tree-id312 . 1) (undo-tree-id313 . -1) (undo-tree-id314 . -1)) nil (25818 2733 833731 210000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . 2411) (undo-tree-id309 . 1) (undo-tree-id310 . -1) (undo-tree-id311 . -1)) nil (25818 2733 833728 761000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . 2411) (undo-tree-id306 . 1) (undo-tree-id307 . -1) (undo-tree-id308 . -1)) nil (25818 2733 833726 37000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . 2411) (undo-tree-id299 . 1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1)) nil (25818 2733 833722 428000) 0 nil])
([nil nil ((2439 . 2442) (2427 . 2439) (#("cur" 0 3 (fontified t)) . -2427) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -2) (undo-tree-id284 . -2) (undo-tree-id285 . -3) (undo-tree-id286 . -3) (undo-tree-id287 . -3) (undo-tree-id288 . -3) 2430 (2429 . 2430) (2423 . 2429) (2411 . 2423) (#("cur" 0 3 (fontified t)) . -2411) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -2) (undo-tree-id292 . -2) (undo-tree-id293 . -3) (undo-tree-id294 . -3) (undo-tree-id295 . -3) (undo-tree-id296 . -3) (undo-tree-id297 . -3) (undo-tree-id298 . -3) 2414 (2411 . 2414)) nil (25818 2733 833716 213000) 0 nil])
([nil nil ((2531 . 2538) (2526 . 2531) (2517 . 2526) (#("dire" 0 4 (fontified t)) . -2517) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -3) (undo-tree-id273 . -3) (undo-tree-id274 . -4) (undo-tree-id275 . -4) (undo-tree-id276 . -4) (undo-tree-id277 . -4) (undo-tree-id278 . -4) (undo-tree-id279 . -4) 2521 (2518 . 2521) (#("i" 0 1 (fontified t)) . -2518) (undo-tree-id280 . -1) (2516 . 2519)) nil (25818 2733 833702 193000) 0 nil])
([nil nil ((2329 . 2334) (#("	" 0 1 (fontified t)) . 2329) (2334 . 2337) (2364 . 2380) (#("		" 0 2 (fontified t)) . 2364) (undo-tree-id247 . -2) (undo-tree-id248 . -2) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (2395 . 2411) (#("		" 0 2 (fontified t)) . 2395) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (2471 . 2481) (#("		" 0 2 (fontified t)) . 2471) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (2477 . 2483) (2539 . 2555) (#("		" 0 2 (fontified t)) . 2539) (undo-tree-id257 . 2) (undo-tree-id258 . -2) (undo-tree-id259 . -2) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -2) (undo-tree-id265 . -2) (undo-tree-id266 . -2) (undo-tree-id267 . -2) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (2543 . 2551) (#("	" 0 1 (fontified t)) . 2543) 2537) nil (25818 2898 79058 345000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2130 . 2131) (nil fontified nil 2096 . 2131) (2096 . 2131) (2094 . 2096)) nil (25818 2943 467402 707000) 0 nil] [nil nil ((2112 . 2127) (2108 . 2112) (#("i" 0 1 (fontified t)) . -2108) (undo-tree-id1135 . -1) (2106 . 2109) (#("i" 0 1 (fontified t)) . -2106) (undo-tree-id1136 . -1) (2101 . 2107) (#("i" 0 1 (fontified t)) . -2101) (undo-tree-id1137 . -1) (2099 . 2102) (#("i" 0 1 (fontified t)) . -2099) (undo-tree-id1138 . -1) (2094 . 2100) (t 25818 2733 837771 987000)) ((#(": [((i" 0 5 (fontified nil) 5 6 (fontified nil)) . 2094) (undo-tree-id1139 . -5) (undo-tree-id1140 . -5) (undo-tree-id1141 . -5) (undo-tree-id1142 . -5) (undo-tree-id1143 . -5) (undo-tree-id1144 . -5) (undo-tree-id1145 . -5) (undo-tree-id1146 . -5) (undo-tree-id1147 . -5) (undo-tree-id1148 . -5) (undo-tree-id1149 . -6) (undo-tree-id1150 . -5) (undo-tree-id1151 . -5) (2099 . 2100) (#("isi" 0 2 (fontified nil face font-lock-type-face) 2 3 (fontified nil)) . 2099) (undo-tree-id1152 . -2) (undo-tree-id1153 . -2) (undo-tree-id1154 . -2) (undo-tree-id1155 . -2) (undo-tree-id1156 . -2) (undo-tree-id1157 . -2) (undo-tree-id1158 . -2) (undo-tree-id1159 . -2) (undo-tree-id1160 . -2) (undo-tree-id1161 . -2) (undo-tree-id1162 . -3) (undo-tree-id1163 . -2) (undo-tree-id1164 . -2) (2101 . 2102) (#("ize, i" 0 3 (fontified nil face font-lock-type-face) 3 5 (fontified nil) 5 6 (fontified nil)) . 2101) (undo-tree-id1165 . -5) (undo-tree-id1166 . -5) (undo-tree-id1167 . -5) (undo-tree-id1168 . -5) (undo-tree-id1169 . -5) (undo-tree-id1170 . -5) (undo-tree-id1171 . -5) (undo-tree-id1172 . -5) (undo-tree-id1173 . -5) (undo-tree-id1174 . -5) (undo-tree-id1175 . -6) (undo-tree-id1176 . -5) (undo-tree-id1177 . -5) (2106 . 2107) (#("isi" 0 2 (fontified nil face font-lock-type-face) 2 3 (fontified nil)) . 2106) (undo-tree-id1178 . -2) (undo-tree-id1179 . -2) (undo-tree-id1180 . -2) (undo-tree-id1181 . -2) (undo-tree-id1182 . -2) (undo-tree-id1183 . -2) (undo-tree-id1184 . -2) (undo-tree-id1185 . -2) (undo-tree-id1186 . -2) (undo-tree-id1187 . -2) (undo-tree-id1188 . -3) (undo-tree-id1189 . -2) (undo-tree-id1190 . -2) (2108 . 2109) (#("ize)" 0 3 (fontified nil face font-lock-type-face) 3 4 (fontified nil)) . 2108) (undo-tree-id1191 . -4) (undo-tree-id1192 . -4) (undo-tree-id1193 . -4) (undo-tree-id1194 . -4) (undo-tree-id1195 . -4) (undo-tree-id1196 . -4) (undo-tree-id1197 . -4) (undo-tree-id1198 . -4) (undo-tree-id1199 . -4) (undo-tree-id1200 . -4) (undo-tree-id1201 . -4) (undo-tree-id1202 . -4) (undo-tree-id1203 . -4) (#(", Walls, Walls)" 0 2 (fontified t) 2 7 (fontified t face font-lock-type-face) 7 9 (fontified t) 9 14 (fontified t face font-lock-type-face) 14 15 (fontified t)) . 2112) (undo-tree-id1204 . -15) (undo-tree-id1205 . -15) (undo-tree-id1206 . -15) (undo-tree-id1207 . -15) (undo-tree-id1208 . -15) (undo-tree-id1209 . -15) (undo-tree-id1210 . -15) (undo-tree-id1211 . -15) (undo-tree-id1212 . -15) (undo-tree-id1213 . -15) (undo-tree-id1214 . -15) (undo-tree-id1215 . -15) (undo-tree-id1216 . -15)) (25818 2897 726950 487000) 0 nil])
([nil nil ((2395 . 2396) (#("*" 0 1 (fontified t)) . -2395) (undo-tree-id1217 . -1) (undo-tree-id1218 . -1) (undo-tree-id1219 . -1) (undo-tree-id1220 . -1) (undo-tree-id1221 . -1) 2396 (2395 . 2396) (t 25818 2943 471106 379000)) nil (25818 2984 46497 599000) 0 nil])
([nil nil ((2127 . 2128)) ((#("]" 0 1 (fontified t)) . 2127) (t 25818 2892 831106 122000)) (25818 2892 827507 51000) 0 nil])
([nil nil ((2453 . 2455) (2441 . 2453) (#("cur" 0 3 (fontified t)) . -2441) (undo-tree-id1267 . -1) (undo-tree-id1268 . -1) (undo-tree-id1269 . -2) (undo-tree-id1270 . -2) (undo-tree-id1271 . -3) (undo-tree-id1272 . -3) (undo-tree-id1273 . -3) (undo-tree-id1274 . -3) (undo-tree-id1275 . -3) (undo-tree-id1276 . -3) 2444 (2436 . 2444) (t 25818 2984 47773 247000)) nil (25818 3128 527597 408000) 0 nil])
nil
([nil nil ((2514 . 2516) (2505 . 2514) (#("dir" 0 3 (fontified t)) . -2505) (undo-tree-id1222 . -1) (undo-tree-id1223 . -1) (undo-tree-id1224 . -3) (undo-tree-id1225 . -3) (undo-tree-id1226 . -3) (undo-tree-id1227 . -3) (undo-tree-id1228 . -3) (undo-tree-id1229 . -3) (undo-tree-id1230 . -3) (undo-tree-id1231 . -3) (undo-tree-id1232 . -3) (undo-tree-id1233 . -3) (undo-tree-id1234 . -3) (undo-tree-id1235 . -3) (undo-tree-id1236 . -3) (undo-tree-id1237 . -3) (undo-tree-id1238 . -3) (undo-tree-id1239 . -3) (undo-tree-id1240 . -3) (undo-tree-id1241 . -3) (undo-tree-id1242 . -3) (undo-tree-id1243 . -3) (undo-tree-id1244 . -3) (undo-tree-id1245 . -3) 2508 (2506 . 2508) (#("i" 0 1 (fontified t)) . -2506) (undo-tree-id1246 . -1) (2499 . 2507) (2487 . 2499) (#("cur" 0 3 (fontified t)) . -2487) (undo-tree-id1247 . -1) (undo-tree-id1248 . -1) (undo-tree-id1249 . -2) (undo-tree-id1250 . -2) (undo-tree-id1251 . -3) (undo-tree-id1252 . -3) (undo-tree-id1253 . -3) (undo-tree-id1254 . -3) (undo-tree-id1255 . -3) (undo-tree-id1256 . -3) (undo-tree-id1257 . -3) (undo-tree-id1258 . -3) 2490 (2482 . 2490) (2474 . 2482) (#("ne" 0 2 (fontified t)) . -2474) (undo-tree-id1259 . -1) (undo-tree-id1260 . -1) (undo-tree-id1261 . -2) (undo-tree-id1262 . -2) (undo-tree-id1263 . -2) (undo-tree-id1264 . -2) (undo-tree-id1265 . -2) (undo-tree-id1266 . -2) 2476 (2473 . 2476) (2470 . 2473)) nil (25818 3128 527586 520000) 0 nil])
([nil nil ((2470 . 2488) (2471 . 2473) (2516 . 2532) 2607) nil (25818 3128 527543 640000) 0 nil])
([nil nil ((2470 . 2472) (t 25818 3128 531107 270000)) nil (25818 3164 220683 460000) 0 nil])
([nil nil ((2537 . 2540) (#("1" 0 1 (fontified t)) . -2537) (undo-tree-id1277 . -1) (undo-tree-id1278 . -1) (undo-tree-id1279 . -1) (undo-tree-id1280 . -1) 2538) nil (25818 3164 220681 254000) 0 nil])
([nil nil ((2470 . 2471) (2538 . 2539) 2539) nil (25818 3164 220666 665000) 0 nil])
([nil nil ((2479 . 2482) (#("i" 0 1 (fontified t)) . -2479) (undo-tree-id1282 . -1) (2474 . 2480) (#("s" 0 1 (fontified t)) . -2474) (undo-tree-id1283 . -1) (undo-tree-id1284 . -1) (undo-tree-id1285 . -1) (undo-tree-id1286 . -1) 2475 (2473 . 2475) (t 25818 3164 224440 783000)) nil (25818 3178 272740 433000) 0 nil])
([nil nil ((2552 . 2560) (#("s" 0 1 (fontified nil)) . -2552) (undo-tree-id1281 . -1) 2553 (2551 . 2553)) nil (25818 3178 272731 400000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 2470) (undo-tree-id1289 . -1) (undo-tree-id1290 . -1) (t 25818 3178 277774 181000)) nil (25818 3188 254269 311000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 2547) (undo-tree-id1287 . -1) (undo-tree-id1288 . -1)) nil (25818 3188 254262 893000) 0 nil])
([nil nil ((2470 . 2471) (2547 . 2548)) nil (25818 3188 254233 49000) 0 nil])
([nil nil ((2664 . 2667) (#("i" 0 1 (fontified t)) . -2664) (undo-tree-id1293 . -1) (2658 . 2665) (#("e" 0 1 (fontified t)) . -2658) (undo-tree-id1294 . -1) (undo-tree-id1295 . -1) (undo-tree-id1296 . -1) (undo-tree-id1297 . -1) (undo-tree-id1298 . -1) (#(" " 0 1 (fontified t)) . -2659) (undo-tree-id1299 . -1) (undo-tree-id1300 . -1) (undo-tree-id1301 . -1) (undo-tree-id1302 . -1) 2660 (2658 . 2660) (t 25818 3188 257774 231000)) nil (25818 3245 455865 970000) 0 nil])
([nil nil ((2749 . 2758) (#("e" 0 1 (fontified nil)) . -2749) (undo-tree-id1291 . -1) (#(" " 0 1 (fontified nil)) . -2750) (undo-tree-id1292 . -1) 2751 (2749 . 2751)) nil (25818 3245 455853 989000) 0 nil])
([nil nil ((2663 . 2665) (#("size" 0 4 (fontified t face font-lock-type-face)) . 2663) (undo-tree-id1315 . -3) (undo-tree-id1316 . -4) (undo-tree-id1317 . -4) (t 25818 3245 457774 486000)) nil (25818 3255 132305 347000) 0 nil])
([nil nil ((2752 . 2754) (#("size" 0 4 (fontified t face font-lock-type-face)) . 2752) (undo-tree-id1303 . -3) (undo-tree-id1304 . -3) (undo-tree-id1305 . -3) (undo-tree-id1306 . -3) (undo-tree-id1307 . -3) (undo-tree-id1308 . -3) (undo-tree-id1309 . -3) (undo-tree-id1310 . -3) (undo-tree-id1311 . -3) (undo-tree-id1312 . -3) (undo-tree-id1313 . -4) (undo-tree-id1314 . -4)) nil (25818 3255 132298 915000) 0 nil])
([nil nil ((2664 . 2667) (#("i" 0 1 (fontified t)) . -2664) (undo-tree-id1340 . -1) (2663 . 2665) (#("3" 0 1 (fontified t)) . -2663) (undo-tree-id1341 . -1) (undo-tree-id1342 . -1) (undo-tree-id1343 . -1) (undo-tree-id1344 . -1) (undo-tree-id1345 . -1) (#("2" 0 1 (fontified t face font-lock-type-face)) . -2664) (undo-tree-id1346 . -1) (undo-tree-id1347 . -1) (undo-tree-id1348 . -1) (undo-tree-id1349 . -1) 2665 (t 25818 3255 137774 530000)) nil (25818 3310 109443 808000) 0 nil])
([nil nil ((2754 . 2758) (#("3" 0 1 (fontified nil face font-lock-type-face)) . -2754) (undo-tree-id1318 . -1) (undo-tree-id1319 . -1) (undo-tree-id1320 . -1) (undo-tree-id1321 . -1) (undo-tree-id1322 . -1) (undo-tree-id1323 . -1) (undo-tree-id1324 . -1) (undo-tree-id1325 . -1) (undo-tree-id1326 . -1) (undo-tree-id1327 . -1) (undo-tree-id1328 . -1) (undo-tree-id1329 . -1) (undo-tree-id1330 . -1) (undo-tree-id1331 . -1) (undo-tree-id1332 . -1) (undo-tree-id1333 . -1) (undo-tree-id1334 . -1) (undo-tree-id1335 . -1) (undo-tree-id1336 . -1) (undo-tree-id1337 . -1) (#("2" 0 1 (fontified t face font-lock-type-face)) . -2755) (undo-tree-id1338 . -1) (undo-tree-id1339 . -1) 2756) nil (25818 3345 806902 94000) 0 nil])
([nil nil ((40 . 41) (39 . 40) (38 . 39) (t 25818 3347 317775 5000) 38) nil (25818 3362 540581 295000) 0 nil] [nil nil ((2658 . 2666)) ((#(".clone()" 0 8 (fontified t)) . 2658)) (25818 3345 646996 72000) 0 nil] [nil nil ((2647 . 2648) (t 25818 3310 111108 133000)) ((#("&" 0 1 (fontified t face rust-ampersand-face)) . 2647)) (25818 3331 487323 263000) 0 nil])
([nil nil ((#("#
" 0 1 (fontified t) 1 2 (fontified t)) . 40) (undo-tree-id1382 . -1) (undo-tree-id1383 . 1) (undo-tree-id1384 . -1) (undo-tree-id1385 . -1) (undo-tree-id1386 . -2)) nil (25818 3362 540579 811000) 0 nil])
([nil nil ((2757 . 2765)) ((#(".clone()" 0 8 (fontified t)) . 2757) (undo-tree-id1362 . -7) (undo-tree-id1363 . -7) (undo-tree-id1364 . -7) (undo-tree-id1365 . -7) (undo-tree-id1366 . -7) (undo-tree-id1367 . -7) (undo-tree-id1368 . -7) (undo-tree-id1369 . -7) (undo-tree-id1370 . -7) (undo-tree-id1371 . -7)) (25818 3344 766902 405000) 0 nil])
([nil nil ((2739 . 2740)) ((#("&" 0 1 (fontified t face rust-ampersand-face)) . 2739) (t 25818 3324 767774 893000)) (25818 3324 764098 605000) 0 nil])
([nil nil ((nil rear-nonsticky nil 39 . 40) (#("
" 0 1 (fontified nil)) . -56) (39 . 57)) nil (25818 3362 540575 24000) 0 nil])
([nil nil ((2678 . 2702) 2764) ((#("
                       " 0 24 (fontified t)) . 2678) (t 25818 3338 491108 296000)) (25818 3338 489710 523000) 0 nil])
nil
([nil nil ((#("
" 0 1 (fontified t rear-nonsticky t)) . -39) (undo-tree-id1372 . -1) (undo-tree-id1373 . -1) (undo-tree-id1374 . -1) (undo-tree-id1375 . -1) (undo-tree-id1376 . -1) (undo-tree-id1377 . -1) (undo-tree-id1378 . -1) (undo-tree-id1379 . -1) (undo-tree-id1380 . -1) (undo-tree-id1381 . -1) 40) nil (25818 3362 540571 7000) 0 nil])
nil
([nil nil ((48 . 52) (#("Clone" 0 5 (fontified t face font-lock-preprocessor-face)) . 48) (undo-tree-id1387 . -4) (undo-tree-id1388 . -5) (undo-tree-id1389 . -5) (t 25818 3362 544441 742000)) nil (25818 3368 876388 992000) 0 nil])
([nil nil ((58 . 60) (52 . 58) (t 25818 3368 881108 443000)) nil (25818 3378 430046 295000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t face font-lock-preprocessor-face)) . 54) 59) nil (25818 3378 430041 855000) 0 nil])
([nil nil ((#("            for direction in &directions {
                if neighbor.0 - current_cell.0 == direction.0 .0 as usize
                    && neighbor.1 - current_cell.1 == direction.0 .1 as usize
                {
                    grid.grid[current_cell.0][current_cell.1].walls[direction.1 as usize] = false;
                    grid.grid[neighbor.0][neighbor.1].walls[direction.2 as usize] = false;
                }
            }
" 0 5 (fontified t) 5 9 (fontified t) 9 12 (fontified t) 12 15 (fontified t face font-lock-keyword-face) 15 16 (fontified t) 16 25 (fontified t face font-lock-variable-name-face) 25 26 (fontified t) 26 28 (fontified t face font-lock-keyword-face) 28 29 (fontified t) 29 30 (fontified t face rust-ampersand-face) 30 40 (fontified t) 40 42 (fontified t) 42 43 (fontified t) 43 59 (fontified t) 59 61 (fontified t face font-lock-keyword-face) 61 75 (fontified t) 75 89 (fontified t) 89 104 (fontified t) 104 105 (fontified t) 105 108 (fontified t) 108 110 (fontified t face font-lock-keyword-face) 110 111 (fontified t) 111 116 (fontified t face font-lock-type-face) 116 117 (fontified t) 117 134 (fontified t) 134 135 (fontified t) 135 137 (fontified t) 137 140 (fontified t) 140 153 (fontified t) 153 171 (fontified t) 171 182 (fontified t) 182 183 (fontified t) 183 186 (fontified t) 186 188 (fontified t face font-lock-keyword-face) 188 189 (fontified t) 189 194 (fontified t face font-lock-type-face) 194 195 (fontified t) 195 210 (fontified t) 210 212 (fontified t) 212 213 (fontified t) 213 229 (fontified t) 229 243 (fontified t) 243 259 (fontified t) 259 274 (fontified t) 274 281 (fontified t) 281 292 (fontified t) 292 293 (fontified t) 293 295 (fontified t face font-lock-keyword-face) 295 296 (fontified t) 296 301 (fontified t face font-lock-type-face) 301 304 (fontified t) 304 305 (fontified t) 305 310 (fontified t face font-lock-keyword-face) 310 311 (fontified t) 311 312 (fontified t) 312 322 (fontified t) 322 326 (fontified t) 326 332 (fontified t) 332 372 (fontified t) 372 383 (fontified t) 383 384 (fontified t) 384 386 (fontified t face font-lock-keyword-face) 386 387 (fontified t) 387 392 (fontified t face font-lock-type-face) 392 396 (fontified t) 396 401 (fontified t face font-lock-keyword-face) 401 402 (fontified t) 402 403 (fontified t) 403 419 (fontified t) 419 421 (fontified t) 421 429 (fontified t) 429 434 (fontified t) 434 435 (fontified t)) . 2389) (undo-tree-id1415 . -434) (undo-tree-id1416 . -20) (undo-tree-id1417 . -434) (undo-tree-id1418 . -434) (undo-tree-id1419 . -371) (undo-tree-id1420 . -137) (undo-tree-id1421 . -137) (undo-tree-id1422 . -137) (undo-tree-id1423 . -137) (undo-tree-id1424 . -137) (undo-tree-id1425 . -137) (undo-tree-id1426 . -137) (undo-tree-id1427 . -137) (undo-tree-id1428 . -137) (undo-tree-id1429 . -137) (undo-tree-id1430 . -137) (undo-tree-id1431 . -137) (undo-tree-id1432 . -137) (undo-tree-id1433 . -63) (undo-tree-id1434 . -63) (undo-tree-id1435 . -20) (undo-tree-id1436 . -20) (undo-tree-id1437 . -20) (undo-tree-id1438 . -20) (undo-tree-id1439 . -63) (undo-tree-id1440 . -63) (undo-tree-id1441 . -137) (undo-tree-id1442 . -137) (undo-tree-id1443 . -212) (undo-tree-id1444 . -212) (undo-tree-id1445 . -233) (undo-tree-id1446 . -233) (undo-tree-id1447 . -332) (undo-tree-id1448 . -332) (undo-tree-id1449 . -420) (undo-tree-id1450 . -420) (undo-tree-id1451 . -421) (undo-tree-id1452 . -434) (undo-tree-id1453 . -137) (undo-tree-id1454 . -434) (undo-tree-id1455 . -434) (undo-tree-id1456 . -434) (undo-tree-id1457 . -435) 2823 (t 25818 3378 434441 820000)) nil (25818 3612 130963 294000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 2389) (undo-tree-id1413 . 1) (undo-tree-id1414 . -1)) nil (25818 3612 130935 238000) 0 nil])
([nil nil ((897 . 901) (#("W" 0 1 (fontified t face font-lock-type-face)) . -897) (undo-tree-id1409 . -1) (undo-tree-id1410 . -1) (undo-tree-id1411 . -1) (undo-tree-id1412 . -1) 898 (895 . 898)) nil (25818 3612 130933 167000) 0 nil])
([nil nil ((842 . 853) (840 . 842)) nil (25818 3612 130929 623000) 0 nil])
([nil nil ((861 . 874)) nil (25818 3612 130928 934000) 0 nil])
([nil nil ((883 . 896)) nil (25818 3612 130928 471000) 0 nil])
([nil nil ((904 . 917)) nil (25818 3612 130928 31000) 0 nil])
([nil nil ((870 . 874) (#("West" 0 4 (fontified t face font-lock-type-face)) . 870) (undo-tree-id1402 . -3) (undo-tree-id1403 . -3) (undo-tree-id1404 . -3) (undo-tree-id1405 . -3) (undo-tree-id1406 . -3) (undo-tree-id1407 . -4) (undo-tree-id1408 . -4)) nil (25818 3612 130927 197000) 0 nil])
([nil nil ((892 . 897) (#("West" 0 4 (fontified t face font-lock-type-face)) . 892) (undo-tree-id1397 . -3) (undo-tree-id1398 . -3) (undo-tree-id1399 . -3) (undo-tree-id1400 . -4) (undo-tree-id1401 . -4)) nil (25818 3612 130921 384000) 0 nil])
([nil nil ((914 . 919) (#("West" 0 4 (fontified t face font-lock-type-face)) . 914) (undo-tree-id1390 . -3) (undo-tree-id1391 . -3) (undo-tree-id1392 . -3) (undo-tree-id1393 . -2) (undo-tree-id1394 . -2) (undo-tree-id1395 . -4) (undo-tree-id1396 . -4)) nil (25818 3612 130916 506000) 0 nil])
([nil nil ((1465 . 1471)) nil (25818 3612 130903 960000) 0 nil])
([nil nil ((766 . 772)) nil (25818 3612 130903 478000) 0 nil])
([nil nil ((772 . 773)) nil (25818 3612 130903 35000) 0 nil])
([nil nil ((2078 . 2079)) nil (25818 3612 130902 527000) 0 nil])
([nil nil ((754 . 755)) nil (25818 3612 130901 963000) 0 nil])
([nil nil ((767 . 768)) nil (25818 3612 130901 327000) 0 nil])
([nil nil ((1474 . 1475)) nil (25818 3612 130899 577000) 0 nil])
([nil nil ((1448 . 1449)) nil (25818 3612 130896 80000) 0 nil])
([nil nil ((2095 . 2098) (2091 . 2095) (t 25818 3612 134442 996000)) nil (25818 3627 641662 993000) 0 nil])
([nil nil ((843 . 856) (864 . 866) (865 . 875) (885 . 890) (886 . 893) (908 . 916) (909 . 913) (929 . 939) 2097) nil (25818 3627 641658 831000) 0 nil])
([nil nil ((1543 . 1549) (#("o" 0 1 (fontified t)) . -1543) (undo-tree-id1458 . -1) (undo-tree-id1459 . -1) (undo-tree-id1460 . -1) (undo-tree-id1461 . -1) (undo-tree-id1462 . -1) (undo-tree-id1463 . -1) (undo-tree-id1464 . -1) (undo-tree-id1465 . -1) (#("p" 0 1 (fontified t)) . -1544) (undo-tree-id1466 . -1) (undo-tree-id1467 . -1) (undo-tree-id1468 . -1) (undo-tree-id1469 . -1) (undo-tree-id1470 . -1) (undo-tree-id1471 . -1) 1545 (1541 . 1545) (t 25818 3627 644443 70000)) nil (25818 3673 728929 590000) 0 nil])
([nil nil ((882 . 888) (877 . 882) (#("W" 0 1 (fontified t face font-lock-type-face)) . -877) (undo-tree-id1481 . -1) (undo-tree-id1482 . -1) (undo-tree-id1483 . -1) (undo-tree-id1484 . -1) (undo-tree-id1485 . -1) (undo-tree-id1486 . -1) 878 (875 . 878) (t 25818 3673 731109 957000)) nil (25818 3745 853135 927000) 0 nil])
([nil nil ((928 . 934) (923 . 928) (#("W" 0 1 (fontified nil face font-lock-type-face)) . 923) (921 . 924)) nil (25818 3745 853128 971000) 0 nil])
([nil nil ((976 . 982) (971 . 976) (#("W" 0 1 (fontified nil face font-lock-type-face)) . 971) (969 . 972)) nil (25818 3745 853127 634000) 0 nil])
([nil nil ((1023 . 1029) (1018 . 1023) (#("W" 0 1 (fontified nil face font-lock-type-face)) . 1018) (1016 . 1019)) nil (25818 3745 853126 192000) 0 nil])
([nil nil ((930 . 934) (#("East" 0 4 (fontified t face font-lock-type-face)) . 930) (undo-tree-id1474 . -3) (undo-tree-id1475 . -3) (undo-tree-id1476 . -3) (undo-tree-id1477 . -4) (undo-tree-id1478 . -4) (undo-tree-id1479 . -4) (undo-tree-id1480 . -4)) nil (25818 3745 853272 944000) 0 nil])
([nil nil ((978 . 983) (#("East" 0 4 (fontified t face font-lock-type-face)) . 978) (undo-tree-id1498 . -3) (undo-tree-id1499 . 4) (undo-tree-id1500 . -4) (undo-tree-id1501 . -4)) nil (25818 3780 828225 225000) 0 nil] [nil nil ((977 . 979) (#(":" 0 1 (fontified t)) . 977) (undo-tree-id1472 . -1) (undo-tree-id1473 . -1)) ((977 . 978) (#("So" 0 2 (fontified t face font-lock-type-face)) . 977) (undo-tree-id1487 . -1) (undo-tree-id1488 . -1)) (25818 3745 853111 603000) 0 nil])
([nil nil ((1026 . 1030) (#("East" 0 4 (fontified t face font-lock-type-face)) . 1026) (undo-tree-id1493 . -3) (undo-tree-id1494 . -4) (undo-tree-id1495 . -4) (undo-tree-id1496 . -4) (undo-tree-id1497 . -4)) nil (25818 3780 828220 150000) 0 nil])
nil
([nil nil ((1030 . 1031)) nil (25818 3780 828213 847000) 0 nil])
([nil nil ((770 . 771)) nil (25818 3780 828213 37000) 0 nil])
([nil nil ((776 . 784)) nil (25818 3781 695553 763000) 0 nil])
([nil nil ((1107 . 1109) (1103 . 1107) (#("i" 0 1 (fontified t)) . -1103) (undo-tree-id1538 . -1) (1086 . 1104)) nil (25818 3817 456239 448000) 0 nil] [nil nil ((873 . 874)) ((#("(" 0 1 (fontified t)) . 873)) (25818 3781 55500 168000) 0 nil])
([nil nil ((1623 . 1624)) nil (25818 3817 456237 433000) 0 nil])
([nil nil ((898 . 899)) ((#(")" 0 1 (fontified t)) . 898)) (25818 3780 828389 6000) 0 nil])
([nil nil ((1637 . 1638)) nil (25818 3817 456236 661000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t)) . -921) (undo-tree-id1489 . -1) (undo-tree-id1490 . -1) (undo-tree-id1491 . -1) (undo-tree-id1492 . -1) 922 (921 . 922)) ((#("u" 0 1 (fontified nil)) . 921) (undo-tree-id1502 . -1) (undo-tree-id1503 . -1) (921 . 922)) (25818 3780 828205 390000) 0 nil])
([nil nil ((1628 . 1631)) nil (25818 3817 456235 941000) 0 nil])
nil
([nil nil ((1624 . 1636) (#("wall_cur" 0 8 (fontified t)) . -1624) (undo-tree-id1520 . -4) (undo-tree-id1521 . -4) (undo-tree-id1522 . -5) (undo-tree-id1523 . -5) (undo-tree-id1524 . -6) (undo-tree-id1525 . -6) (undo-tree-id1526 . -7) (undo-tree-id1527 . -7) (undo-tree-id1528 . -7) (undo-tree-id1529 . -7) (undo-tree-id1530 . -6) (undo-tree-id1531 . -6) (undo-tree-id1532 . -6) (undo-tree-id1533 . -6) (undo-tree-id1534 . -7) (undo-tree-id1535 . -8) (undo-tree-id1536 . -7) (undo-tree-id1537 . -8) 1632 (1631 . 1632)) nil (25818 3817 456234 443000) 0 nil])
([nil nil ((1659 . 1661) (1646 . 1659) (#("wall" 0 4 (fontified t)) . -1646) (undo-tree-id1504 . -1) (undo-tree-id1505 . -1) (undo-tree-id1506 . -2) (undo-tree-id1507 . -2) (undo-tree-id1508 . -3) (undo-tree-id1509 . -3) (undo-tree-id1510 . -4) (undo-tree-id1511 . -4) (undo-tree-id1512 . -4) (undo-tree-id1513 . -4) (undo-tree-id1514 . -4) (undo-tree-id1515 . -4) (undo-tree-id1516 . -4) (undo-tree-id1517 . -4) (undo-tree-id1518 . -4) (undo-tree-id1519 . -4) 1650 (1644 . 1650)) nil (25818 3817 456219 621000) 0 nil])
([nil nil ((1593 . 1622) (1622 . 1635) (1623 . 1638) (1662 . 1688) 2354) nil (25818 3817 456196 796000) 0 nil])
([nil nil ((1716 . 1722) (t 25818 3817 461110 641000)) nil (25818 3833 516797 837000) 0 nil])
([nil nil ((#("            // remove walls
            let directions: [((isize, isize), Walls, Walls); 4] = [
                ((-1, 0), Walls::West, Walls::East),
                ((1, 0), Walls::East, Walls::West),
                ((0, -1), Walls::North, Walls::South),
                ((0, 1), Walls::South, Walls::North),
            ];
" 0 6 (fontified t) 6 10 (fontified t) 10 11 (fontified t) 11 12 (fontified t) 12 15 (fontified t face font-lock-comment-delimiter-face) 15 28 (fontified t face font-lock-comment-face) 28 31 (fontified t) 31 35 (fontified t) 35 40 (fontified t) 40 43 (fontified t face font-lock-keyword-face) 43 44 (fontified t) 44 54 (fontified t face font-lock-variable-name-face) 54 56 (fontified t) 56 59 (fontified t) 59 64 (fontified t face font-lock-type-face) 64 66 (fontified t) 66 71 (fontified t face font-lock-type-face) 71 74 (fontified t) 74 79 (fontified t face font-lock-type-face) 79 81 (fontified t) 81 86 (fontified t face font-lock-type-face) 86 90 (fontified t) 90 91 (rear-nonsticky t fontified t) 91 95 (fontified t) 95 96 (fontified t) 96 112 (fontified t) 112 122 (fontified t) 122 127 (fontified t face font-lock-type-face) 127 129 (fontified t) 129 132 (fontified t face font-lock-type-face) 132 133 (fontified t face font-lock-type-face) 133 135 (fontified t) 135 139 (fontified t face font-lock-type-face) 139 140 (fontified t face font-lock-type-face) 140 141 (fontified t) 141 142 (fontified t) 142 146 (fontified t face font-lock-type-face) 146 147 (fontified t) 147 148 (fontified t) 148 149 (fontified t) 149 162 (fontified t) 162 163 (fontified t) 163 165 (fontified t) 165 168 (fontified t) 168 170 (fontified t) 170 174 (fontified t) 174 179 (fontified t face font-lock-type-face) 179 181 (fontified t) 181 185 (fontified t face font-lock-type-face) 185 187 (fontified t) 187 192 (fontified t face font-lock-type-face) 192 194 (fontified t) 194 198 (fontified t face font-lock-type-face) 198 199 (fontified t) 199 200 (fontified t) 200 201 (fontified t) 201 211 (fontified t) 211 212 (fontified t) 212 217 (fontified t) 217 218 (fontified t) 218 227 (fontified t) 227 232 (fontified t face font-lock-type-face) 232 234 (fontified t) 234 239 (fontified t face font-lock-type-face) 239 241 (fontified t) 241 246 (fontified t face font-lock-type-face) 246 248 (fontified t) 248 253 (fontified t face font-lock-type-face) 253 254 (fontified t) 254 255 (fontified t) 255 256 (fontified t) 256 261 (fontified t) 261 262 (fontified t) 262 265 (fontified t) 265 272 (fontified t) 272 276 (fontified t) 276 281 (fontified t) 281 286 (fontified t face font-lock-type-face) 286 288 (fontified t) 288 293 (fontified t face font-lock-type-face) 293 295 (fontified t) 295 300 (fontified t face font-lock-type-face) 300 302 (fontified t) 302 307 (fontified t face font-lock-type-face) 307 308 (fontified t) 308 310 (fontified t) 310 322 (fontified t) 322 324 (fontified t) 324 325 (fontified t)) . 2417) (undo-tree-id1542 . -324) (undo-tree-id1543 . -26) (undo-tree-id1544 . -324) (undo-tree-id1545 . -324) (undo-tree-id1546 . -132) (undo-tree-id1547 . -114) (undo-tree-id1548 . -324) (undo-tree-id1549 . -26) (undo-tree-id1550 . -26) (undo-tree-id1551 . -94) (undo-tree-id1552 . -94) (undo-tree-id1553 . -94) (undo-tree-id1554 . -94) (undo-tree-id1555 . -94) (undo-tree-id1556 . -94) (undo-tree-id1557 . -94) (undo-tree-id1558 . -94) (undo-tree-id1559 . -94) (undo-tree-id1560 . -94) (undo-tree-id1561 . -147) (undo-tree-id1562 . -147) (undo-tree-id1563 . -147) (undo-tree-id1564 . -147) (undo-tree-id1565 . -79) (undo-tree-id1566 . -79) (undo-tree-id1567 . -26) (undo-tree-id1568 . -26) (undo-tree-id1569 . -26) (undo-tree-id1570 . -26) (undo-tree-id1571 . -54) (undo-tree-id1572 . -54) (undo-tree-id1573 . -122) (undo-tree-id1574 . -122) (undo-tree-id1575 . -175) (undo-tree-id1576 . -175) (undo-tree-id1577 . -227) (undo-tree-id1578 . -227) (undo-tree-id1579 . -282) (undo-tree-id1580 . -282) (undo-tree-id1581 . -310) (undo-tree-id1582 . -324) (undo-tree-id1583 . -147) (undo-tree-id1584 . -324) (undo-tree-id1585 . -324) (undo-tree-id1586 . -324) (undo-tree-id1587 . -325) 2741 (t 25818 3833 521110 723000)) nil (25818 3864 845682 54000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 2417) (undo-tree-id1539 . 1) (undo-tree-id1540 . -1) (undo-tree-id1541 . -1)) nil (25818 3864 845646 954000) 0 nil])
([nil nil ((2485 . 2486) (2484 . 2485) (2463 . 2484) (2460 . 2463) (2448 . 2460) (#("cu" 0 2 (fontified t)) . -2448) (undo-tree-id1598 . -1) (undo-tree-id1599 . -1) (undo-tree-id1600 . -2) (undo-tree-id1601 . -2) (undo-tree-id1602 . -2) (undo-tree-id1603 . -2) (undo-tree-id1604 . -2) (undo-tree-id1605 . -2) 2450 (2444 . 2450) (2432 . 2444) (#("cur" 0 3 (fontified t)) . -2432) (undo-tree-id1606 . -1) (undo-tree-id1607 . -1) (undo-tree-id1608 . -2) (undo-tree-id1609 . -2) (undo-tree-id1610 . -3) (undo-tree-id1611 . -3) (undo-tree-id1612 . -3) (undo-tree-id1613 . -3) (undo-tree-id1614 . -3) (undo-tree-id1615 . -3) 2435 (2429 . 2435) (#("i" 0 1 (fontified t)) . -2429) (undo-tree-id1616 . -1) (undo-tree-id1617 . -1) (2424 . 2430) (#("i" 0 1 (fontified t)) . -2424) (undo-tree-id1618 . -1) (undo-tree-id1619 . -1) (2422 . 2425) (2417 . 2422) (#("	    " 0 5 (fontified nil)) . 2416) (undo-tree-id1620 . -5) (undo-tree-id1621 . -5) (undo-tree-id1622 . -5) (undo-tree-id1623 . -5) (2421 . 2422) (2415 . 2421) (t 25818 3864 851110 867000) 2335) nil (25818 3917 917964 335000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2491 . 2492) (#("
" 0 1 (fontified nil)) . -2556) (2486 . 2557) 2485) nil (25818 3917 917931 38000) 0 nil])
([nil nil ((2504 . 2510) (#("i" 0 1 (fontified t)) . -2504) (undo-tree-id1594 . -1) (2502 . 2505) (#("current_cell" 0 12 (fontified t)) . 2502) (undo-tree-id1595 . -11) (undo-tree-id1596 . -12) (undo-tree-id1597 . -12)) nil (25818 3917 917929 7000) 0 nil])
([nil nil ((2514 . 2522) (#("current_cell" 0 12 (fontified t)) . 2514) (undo-tree-id1591 . -11) (undo-tree-id1592 . -12) (undo-tree-id1593 . -12)) nil (25818 3917 918113 486000) 0 nil])
([nil nil ((2537 . 2538) (#("0" 0 1 (fontified t)) . 2537) (undo-tree-id1626 . -1)) nil (25818 3921 291747 638000) 0 nil] [nil nil ((2532 . 2540) (#("wall" 0 4 (fontified t)) . 2532) (undo-tree-id1588 . -3) (undo-tree-id1589 . -4) (undo-tree-id1590 . -4)) ((2532 . 2536) (#("neighbor" 0 8 (fontified t)) . 2532) (undo-tree-id1624 . -7) (undo-tree-id1625 . -7)) (25818 3917 917915 340000) 0 nil])
([nil nil ((2417 . 2425) (#("	" 0 1 (fontified t)) . 2417) (2487 . 2495) (#("	" 0 1 (fontified t)) . 2487) 2537) nil (25818 3932 790 324000) 0 nil])
nil
([nil nil ((2483 . 2490) (t 25818 3921 294444 463000)) nil (25818 3936 975717 213000) 0 nil] [nil nil ((2489 . 2492) (#("i" 0 1 (fontified t)) . -2489) (undo-tree-id1627 . -1) (2485 . 2490) (2483 . 2485) (t 25818 3921 294444 463000)) ((#(" a" 0 1 (fontified nil) 1 2 (fontified nil face font-lock-keyword-face)) . 2483) (undo-tree-id1628 . -2) (undo-tree-id1629 . -2) (#("s usi" 0 1 (fontified nil face font-lock-keyword-face) 1 2 (fontified nil) 2 4 (fontified nil face font-lock-type-face) 4 5 (fontified nil)) . 2485) (undo-tree-id1630 . -5) (undo-tree-id1631 . -4) (2489 . 2490) (#("ize" 0 3 (fontified t face font-lock-type-face)) . 2489) (undo-tree-id1632 . -2) (undo-tree-id1633 . -2)) (25818 3932 303 136000) 0 nil])
([nil nil ((2559 . 2566)) nil (25818 3936 975712 976000) 0 nil])
nil
([nil nil ((2489 . 2492) (#("i" 0 1 (fontified t)) . -2489) (undo-tree-id1653 . -1) (2488 . 2490) (#("32" 0 2 (fontified t face font-lock-type-face)) . 2488) (undo-tree-id1654 . -1) (undo-tree-id1655 . -2) (undo-tree-id1656 . -2) (t 25818 3936 981111 218000)) nil (25818 3982 495399 613000) 0 nil])
([nil nil ((2566 . 2570) (#("32" 0 2 (fontified t face font-lock-type-face)) . 2566) (undo-tree-id1634 . -1) (undo-tree-id1635 . -1) (undo-tree-id1636 . -1) (undo-tree-id1637 . -1) (undo-tree-id1638 . -1) (undo-tree-id1639 . -1) (undo-tree-id1640 . -1) (undo-tree-id1641 . -1) (undo-tree-id1642 . -1) (undo-tree-id1643 . -1) (undo-tree-id1644 . -1) (undo-tree-id1645 . -1) (undo-tree-id1646 . -1) (undo-tree-id1647 . -1) (undo-tree-id1648 . -1) (undo-tree-id1649 . -1) (undo-tree-id1650 . -1) (undo-tree-id1651 . -2) (undo-tree-id1652 . -2)) nil (25818 3982 495384 132000) 0 nil])
([nil nil ((2131 . 2132) (#(" " 0 1 (fontified t)) . -2131) (undo-tree-id1681 . -1) (undo-tree-id1682 . -1) (undo-tree-id1683 . -1) (undo-tree-id1684 . -1) (#("2" 0 1 (fontified t)) . -2132) (undo-tree-id1685 . -1) (undo-tree-id1686 . -1) (undo-tree-id1687 . -1) (undo-tree-id1688 . -1) 2133 (2122 . 2133) (#(" " 0 1 (fontified t)) . -2122) (undo-tree-id1689 . -1) (undo-tree-id1690 . -1) (undo-tree-id1691 . -1) 2123 (2122 . 2123) (t 25818 3982 501111 454000)) nil (25818 4116 470236 385000) 0 nil])
([nil nil ((2104 . 2109) (#(" " 0 1 (fontified t)) . -2104) (undo-tree-id1661 . -1) (undo-tree-id1662 . -1) 2105 (2100 . 2105) (#("w" 0 1 (fontified t face font-lock-variable-name-face)) . -2100) (undo-tree-id1663 . -1) (undo-tree-id1664 . -1) (undo-tree-id1665 . -1) (undo-tree-id1666 . -1) (undo-tree-id1667 . -1) (undo-tree-id1668 . -1) (undo-tree-id1669 . -1) (undo-tree-id1670 . -1) (#("a" 0 1 (fontified t face font-lock-variable-name-face)) . -2101) (undo-tree-id1671 . -1) (undo-tree-id1672 . -1) (undo-tree-id1673 . -1) (undo-tree-id1674 . -1) (undo-tree-id1675 . -1) (undo-tree-id1676 . -1) (#("v" 0 1 (fontified t face font-lock-variable-name-face)) . -2102) (undo-tree-id1677 . -1) (undo-tree-id1678 . -1) (undo-tree-id1679 . -1) (undo-tree-id1680 . -1) 2103 (2092 . 2103) (2087 . 2092) 2086) nil (25818 4116 470226 79000) 0 nil])
([nil nil ((2160 . 2166) (#(" " 0 1 (fontified t)) . -2160) (undo-tree-id1659 . -1) (undo-tree-id1660 . -1) 2161 (2157 . 2161) (2155 . 2157) 2131) nil (25818 4116 470210 222000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 2106) (2154 . 2155) (2156 . 2164) (#("	" 0 1 (fontified t)) . 2156) (undo-tree-id1657 . -1) (undo-tree-id1658 . -1) 2165) nil (25818 4182 69963 393000) 0 nil])
([nil nil ((1292 . 1295) (1289 . 1292) (t 25818 4116 474445 464000) 1288) nil (25818 4577 829955 481000) 0 nil] [nil nil ((926 . 931) (#("East" 0 4 (fontified t face font-lock-type-face)) . 926) (undo-tree-id1692 . -3) (undo-tree-id1693 . -4) (undo-tree-id1694 . -4) (t 25818 4116 474445 464000)) ((926 . 930) (#("North" 0 5 (fontified t face font-lock-type-face)) . 926) (undo-tree-id1695 . -4) (undo-tree-id1696 . -4)) (25818 4182 69619 951000) 0 nil])
([nil nil ((#("		oaa
" 0 5 (fontified t) 5 6 (fontified t)) . 1290) (undo-tree-id1749 . -5) (undo-tree-id1750 . 1) (undo-tree-id1751 . -2) (undo-tree-id1752 . -2) (undo-tree-id1753 . -5) (undo-tree-id1754 . -5) (undo-tree-id1755 . -5) (undo-tree-id1756 . -5) (undo-tree-id1757 . -5) (undo-tree-id1758 . -5) (undo-tree-id1759 . -5) (undo-tree-id1760 . -5) (undo-tree-id1761 . -5) (undo-tree-id1762 . -5) (undo-tree-id1763 . -5) (undo-tree-id1764 . -5) (undo-tree-id1765 . -5) (undo-tree-id1766 . -5) (undo-tree-id1767 . -5) (undo-tree-id1768 . -5) (undo-tree-id1769 . -5) (undo-tree-id1770 . -4) (undo-tree-id1771 . -4) (undo-tree-id1772 . -4) (undo-tree-id1773 . -4) (undo-tree-id1774 . -4) (undo-tree-id1775 . -4) (undo-tree-id1776 . -5) (undo-tree-id1777 . -4) (undo-tree-id1778 . -4) (undo-tree-id1779 . -6) 1294) nil (25818 4577 829953 504000) 0 nil])
nil
([nil nil ((880 . 885) (#("West" 0 4 (fontified t face font-lock-type-face)) . 880) (undo-tree-id1746 . -3) (undo-tree-id1747 . -4) (undo-tree-id1748 . -4)) nil (25818 4577 829931 683000) 0 nil])
([nil nil ((894 . 899) (#("East" 0 4 (fontified t face font-lock-type-face)) . 894) (undo-tree-id1743 . -3) (undo-tree-id1744 . -4) (undo-tree-id1745 . -4)) nil (25818 4577 829928 434000) 0 nil])
([nil nil ((928 . 933) (#("East" 0 4 (fontified t face font-lock-type-face)) . 928) (undo-tree-id1740 . -3) (undo-tree-id1741 . -4) (undo-tree-id1742 . -4)) nil (25818 4577 829925 759000) 0 nil])
([nil nil ((942 . 947) (#("West" 0 4 (fontified t face font-lock-type-face)) . 942) (undo-tree-id1737 . -3) (undo-tree-id1738 . -4) (undo-tree-id1739 . -4)) nil (25818 4577 829923 28000) 0 nil])
([nil nil ((977 . 981) (#("North" 0 5 (fontified t face font-lock-type-face)) . 977) (undo-tree-id1734 . -4) (undo-tree-id1735 . -5) (undo-tree-id1736 . -5)) nil (25818 4577 829919 842000) 0 nil])
([nil nil ((990 . 994) (#("e" 0 1 (fontified t)) . -990) (undo-tree-id1717 . -1) (undo-tree-id1718 . -1) (undo-tree-id1719 . -1) (undo-tree-id1720 . -1) (undo-tree-id1721 . -1) (undo-tree-id1722 . -1) (#("s" 0 1 (fontified t)) . -991) (undo-tree-id1723 . -1) (undo-tree-id1724 . -1) (undo-tree-id1725 . -1) (undo-tree-id1726 . -1) 992 (990 . 992) (#("South" 0 5 (fontified t face font-lock-type-face)) . 990) (undo-tree-id1727 . -4) (undo-tree-id1728 . -3) (undo-tree-id1729 . -3) (undo-tree-id1730 . -3) (undo-tree-id1731 . -3) (undo-tree-id1732 . -5) (undo-tree-id1733 . -5)) nil (25818 4577 829916 16000) 0 nil])
([nil nil ((1023 . 1027) (#("e" 0 1 (fontified t)) . -1023) (undo-tree-id1704 . -1) (undo-tree-id1705 . -1) (undo-tree-id1706 . -1) (undo-tree-id1707 . -1) (undo-tree-id1708 . -1) (undo-tree-id1709 . -1) (#("a" 0 1 (fontified t)) . -1024) (undo-tree-id1710 . -1) (undo-tree-id1711 . -1) (undo-tree-id1712 . -1) (undo-tree-id1713 . -1) 1025 (1023 . 1025) (#("South" 0 5 (fontified t face font-lock-type-face)) . 1023) (undo-tree-id1714 . -4) (undo-tree-id1715 . -5) (undo-tree-id1716 . -5)) nil (25818 4577 829901 366000) 0 nil])
([nil nil ((1036 . 1040) (#("North" 0 5 (fontified t face font-lock-type-face)) . 1036) (undo-tree-id1697 . -4) (undo-tree-id1698 . -3) (undo-tree-id1699 . -3) (undo-tree-id1700 . -3) (undo-tree-id1701 . -3) (undo-tree-id1702 . -5) (undo-tree-id1703 . -5)) nil (25818 4577 829888 7000) 0 nil])
([nil nil ((2152 . 2153) (#("2" 0 1 (fontified t)) . 2152) (undo-tree-id1780 . -1) (t 25818 4577 834447 715000)) nil (25818 4601 536026 283000) 0 nil])
([nil nil ((#("&& " 0 3 (fontified t)) . 2143) (undo-tree-id1818 . -2) (undo-tree-id1819 . -3) (t 25818 4601 541114 491000)) nil (25818 4630 737042 445000) 0 nil])
([nil nil ((#("val " 0 4 (fontified t)) . 2143) (undo-tree-id1816 . -3) (undo-tree-id1817 . -4)) nil (25818 4630 737040 217000) 0 nil])
([nil nil ((#("< " 0 1 (fontified t syntax-table (1)) 1 2 (fontified t)) . 2143) (undo-tree-id1797 . -1) (undo-tree-id1798 . -2) (undo-tree-id1799 . -2) (undo-tree-id1800 . -2) (undo-tree-id1801 . -2) (undo-tree-id1802 . -2) (undo-tree-id1803 . -2) (undo-tree-id1804 . -2) (undo-tree-id1805 . -2) (undo-tree-id1806 . -2) (undo-tree-id1807 . -2) (undo-tree-id1808 . -2) (undo-tree-id1809 . -2) (undo-tree-id1810 . -2) (undo-tree-id1811 . -2) (undo-tree-id1812 . -2) (undo-tree-id1813 . -2) (undo-tree-id1814 . -2) (undo-tree-id1815 . -2)) nil (25818 4630 737037 803000) 0 nil])
([nil nil ((#("5 " 0 1 (fontified t) 1 2 (fontified t)) . 2143) (undo-tree-id1795 . -1) (undo-tree-id1796 . -2)) nil (25818 4630 737024 560000) 0 nil])
([nil nil ((#("    let mut val = 0;
" 0 4 (fontified t) 4 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t) 8 11 (fontified t face font-lock-keyword-face) 11 12 (fontified t) 12 15 (fontified t face font-lock-variable-name-face) 15 20 (fontified t) 20 21 (fontified t)) . 2088) (undo-tree-id1783 . -20) (undo-tree-id1784 . -21) (undo-tree-id1785 . -21) (undo-tree-id1786 . -21) (undo-tree-id1787 . -21) (undo-tree-id1788 . -19) (undo-tree-id1789 . -19) (undo-tree-id1790 . -19) (undo-tree-id1791 . -19) (undo-tree-id1792 . -19) (undo-tree-id1793 . -19) (undo-tree-id1794 . -21) 2107) nil (25818 4630 737021 789000) 0 nil])
([nil nil ((#("        val += 1;
" 0 8 (fontified t) 8 17 (fontified t) 17 18 (fontified t)) . 2124) (undo-tree-id1781 . -17) (undo-tree-id1782 . -18)) nil (25818 4630 737011 247000) 0 nil])
([nil nil ((apply -48 3986 4664 undo--wrap-and-run-primitive-undo 3986 4664 ((4642 . 4645) (4623 . 4626) (4592 . 4595) (4570 . 4573) (4521 . 4524) (4493 . 4496) (4444 . 4447) (4393 . 4396) (4370 . 4373) (4314 . 4317) (4286 . 4289) (4230 . 4233) (4169 . 4172) (4093 . 4096) (4051 . 4054) (3994 . 3997) 4599))) nil (25818 4630 736999 210000) 0 nil])
([nil nil ((1952 . 1954) (#("5" 0 1 (fontified t)) . -1952) (undo-tree-id1824 . -1) (undo-tree-id1825 . -1) (undo-tree-id1826 . -1) (undo-tree-id1827 . -1) 1953 (1952 . 1953) (#("1" 0 1 (fontified t)) . -1952) (undo-tree-id1828 . -1) (undo-tree-id1829 . -1) (undo-tree-id1830 . -1) (undo-tree-id1831 . -1) 1953 (1952 . 1953) (#("4" 0 1 (fontified t)) . -1952) (undo-tree-id1832 . -1) (undo-tree-id1833 . -1) (undo-tree-id1834 . -1) (undo-tree-id1835 . -1) 1953 (t 25818 4630 741114 637000)) nil (25818 4667 118533 770000) 0 nil])
([nil nil ((1956 . 1958) (#("5" 0 1 (fontified nil)) . -1956) (undo-tree-id1820 . -1) 1957 (1956 . 1957) (#("1" 0 1 (fontified nil)) . -1956) (undo-tree-id1821 . -1) 1957 (1956 . 1957) (#("4" 0 1 (fontified t)) . -1956) (undo-tree-id1822 . -1) (undo-tree-id1823 . -1) 1957) nil (25818 4667 118375 188000) 0 nil])
([nil nil ((1952 . 1954) (#("32" 0 2 (fontified t)) . 1952) (undo-tree-id1854 . -1) (undo-tree-id1855 . -2) (undo-tree-id1856 . -2) (t 25818 4667 124448 134000)) nil (25818 4819 935180 647000) 0 nil])
([nil nil ((1956 . 1958) (#("32" 0 2 (fontified t)) . 1956) (undo-tree-id1836 . -1) (undo-tree-id1837 . -1) (undo-tree-id1838 . -1) (undo-tree-id1839 . -1) (undo-tree-id1840 . -1) (undo-tree-id1841 . -1) (undo-tree-id1842 . -1) (undo-tree-id1843 . -1) (undo-tree-id1844 . -1) (undo-tree-id1845 . -1) (undo-tree-id1846 . -1) (undo-tree-id1847 . -1) (undo-tree-id1848 . -1) (undo-tree-id1849 . -1) (undo-tree-id1850 . -1) (undo-tree-id1851 . -1) (undo-tree-id1852 . -2) (undo-tree-id1853 . -2)) nil (25818 4819 935173 848000) 0 nil])
([nil nil ((#("        // for row in &grid.grid {
        //     for cell in row {
        //         print!(\"{}\", if cell.visited { \"X\" } else { \"#\" });
        //     }
        //     println!();
        //     println!();
        // }
" 0 8 (fontified t) 8 11 (fontified t face font-lock-comment-delimiter-face) 11 14 (fontified t face font-lock-comment-face) 14 15 (fontified t face font-lock-comment-face) 15 18 (fontified t face font-lock-comment-face) 18 19 (fontified t face font-lock-comment-face) 19 21 (fontified t face font-lock-comment-face) 21 22 (fontified t face font-lock-comment-face) 22 23 (fontified t face font-lock-comment-face) 23 35 (fontified t face font-lock-comment-face) 35 43 (fontified t) 43 46 (fontified t face font-lock-comment-delimiter-face) 46 47 (fontified t face font-lock-comment-delimiter-face) 47 50 (fontified t face font-lock-comment-delimiter-face) 50 53 (fontified t face font-lock-comment-face) 53 54 (fontified t face font-lock-comment-face) 54 58 (fontified t face font-lock-comment-face) 58 59 (fontified t face font-lock-comment-face) 59 61 (fontified t face font-lock-comment-face) 61 68 (fontified t face font-lock-comment-face) 68 76 (fontified t) 76 79 (fontified t face font-lock-comment-delimiter-face) 79 87 (fontified t face font-lock-comment-delimiter-face) 87 93 (fontified t face font-lock-comment-face) 93 94 (fontified t face font-lock-comment-face) 94 95 (fontified t face font-lock-comment-face) 95 97 (fontified t face font-lock-comment-face) 97 98 (fontified t face font-lock-comment-face) 98 100 (fontified t face font-lock-comment-face) 100 102 (fontified t face font-lock-comment-face) 102 105 (fontified t face font-lock-comment-face) 105 118 (fontified t face font-lock-comment-face) 118 121 (fontified t face font-lock-comment-face) 121 124 (fontified t face font-lock-comment-face) 124 128 (fontified t face font-lock-comment-face) 128 131 (fontified t face font-lock-comment-face) 131 134 (fontified t face font-lock-comment-face) 134 139 (fontified t face font-lock-comment-face) 139 147 (fontified t) 147 150 (fontified t face font-lock-comment-delimiter-face) 150 154 (fontified t face font-lock-comment-delimiter-face) 154 156 (fontified t face font-lock-comment-face) 156 164 (fontified t) 164 167 (fontified t face font-lock-comment-delimiter-face) 167 171 (fontified t face font-lock-comment-delimiter-face) 171 179 (fontified t face font-lock-comment-face) 179 183 (fontified t face font-lock-comment-face) 183 191 (fontified t) 191 194 (fontified t face font-lock-comment-delimiter-face) 194 198 (fontified t face font-lock-comment-delimiter-face) 198 206 (fontified t face font-lock-comment-face) 206 210 (fontified t face font-lock-comment-face) 210 218 (fontified t) 218 221 (fontified t face font-lock-comment-delimiter-face) 221 223 (fontified t face font-lock-comment-face)) . 2695) (undo-tree-id1857 . -221) (undo-tree-id1858 . -221) (undo-tree-id1859 . -11) (undo-tree-id1860 . -222) (undo-tree-id1861 . -33) (undo-tree-id1862 . -33) (undo-tree-id1863 . -66) (undo-tree-id1864 . -66) (undo-tree-id1865 . -102) (undo-tree-id1866 . -102) (undo-tree-id1867 . -154) (undo-tree-id1868 . -154) (undo-tree-id1869 . -181) (undo-tree-id1870 . -181) (undo-tree-id1871 . -208) (undo-tree-id1872 . -208) (undo-tree-id1873 . -221) (undo-tree-id1874 . -221) (undo-tree-id1875 . -221) (undo-tree-id1876 . -221) (undo-tree-id1877 . -221) (undo-tree-id1878 . -221) (undo-tree-id1879 . -194) (undo-tree-id1880 . -194) (undo-tree-id1881 . -167) (undo-tree-id1882 . -167) (undo-tree-id1883 . -150) (undo-tree-id1884 . -150) (undo-tree-id1885 . -79) (undo-tree-id1886 . -79) (undo-tree-id1887 . -46) (undo-tree-id1888 . -46) (undo-tree-id1889 . -11) (undo-tree-id1890 . -11) (undo-tree-id1891 . -11) (undo-tree-id1892 . -11) (undo-tree-id1893 . -223) 2706 (t 25818 4819 941115 541000)) nil (25818 4957 888463 401000) 0 nil])
([nil nil ((1952 . 1956) (#("1" 0 1 (fontified t)) . -1952) (undo-tree-id1900 . -1) (undo-tree-id1901 . -1) (undo-tree-id1902 . -1) (undo-tree-id1903 . -1) (undo-tree-id1904 . -1) (undo-tree-id1905 . -1) (undo-tree-id1906 . -1) (undo-tree-id1907 . -1) (undo-tree-id1908 . -1) (undo-tree-id1909 . -1) (undo-tree-id1910 . -1) (undo-tree-id1911 . -1) (undo-tree-id1912 . -1) (undo-tree-id1913 . -1) (undo-tree-id1914 . -1) (undo-tree-id1915 . -1) (undo-tree-id1916 . -1) (undo-tree-id1917 . -1) (undo-tree-id1918 . -1) (undo-tree-id1919 . -1) (undo-tree-id1920 . -1) (undo-tree-id1921 . -1) (#("6" 0 1 (fontified t)) . -1953) (undo-tree-id1922 . -1) (undo-tree-id1923 . -1) (undo-tree-id1924 . -1) (undo-tree-id1925 . -1) (undo-tree-id1926 . -1) (undo-tree-id1927 . -1) 1954 (t 25818 4957 894449 537000)) nil (25818 5054 679463 633000) 0 nil])
([nil nil ((1958 . 1962) (#("1" 0 1 (fontified nil)) . -1958) (undo-tree-id1930 . -1) (undo-tree-id1931 . -1) (#("6" 0 1 (fontified t)) . -1959) (undo-tree-id1932 . -1) (undo-tree-id1933 . -1) 1960) nil (25818 5056 911076 665000) 0 nil] [nil nil ((1956 . 1960) (#("," 0 1 (fontified nil)) . -1956) (undo-tree-id1894 . 1) (undo-tree-id1895 . 1) (undo-tree-id1896 . -1) (undo-tree-id1897 . -1) (#(" " 0 1 (fontified t)) . -1957) (undo-tree-id1898 . -1) (undo-tree-id1899 . -1) 1958) ((1956 . 1958) (#("1000" 0 4 (fontified t)) . 1956) (undo-tree-id1928 . -3) (undo-tree-id1929 . -3)) (25818 5054 679267 933000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . 1961) (undo-tree-id1936 . -1) (undo-tree-id1937 . -1) (t 25818 5056 914450 8000)) nil (25818 5087 916493 29000) 0 nil])
nil
([nil nil ((#("0" 0 1 (fontified t)) . 1954) (undo-tree-id1934 . -1) (undo-tree-id1935 . -1)) nil (25818 5087 916486 851000) 0 nil])
([nil nil ((1952 . 1953) (#("10" 0 2 (fontified t)) . 1952) (undo-tree-id1941 . -1) (undo-tree-id1942 . -2) (undo-tree-id1943 . -2) (undo-tree-id1944 . -2) (undo-tree-id1945 . -2) (undo-tree-id1946 . -2) (undo-tree-id1947 . -2) (undo-tree-id1948 . -2) (undo-tree-id1949 . -2) (undo-tree-id1950 . -2) (undo-tree-id1951 . -2) (undo-tree-id1952 . -2) (undo-tree-id1953 . -2) (undo-tree-id1954 . -2) (undo-tree-id1955 . -2) (undo-tree-id1956 . -2) (undo-tree-id1957 . -2) (undo-tree-id1958 . -2) (t 25818 5087 921116 825000)) nil (25818 5379 393936 301000) 0 nil])
([nil nil ((1956 . 1957) (#("10" 0 2 (fontified t)) . 1956) (undo-tree-id1938 . -1) (undo-tree-id1939 . -2) (undo-tree-id1940 . -2)) nil (25818 5379 393920 296000) 0 nil])
([nil nil ((1952 . 7732) (#("50, 50);
    let current_cell = (0, 0);

    grid.grid[current_cell.0][current_cell.1].visited = true;
    grid.stack.push(current_cell);

    while !grid.stack.is_empty() {
        let current_cell = grid.stack.pop().unwrap();

        let neighbors = grid.check_neighbors(current_cell.0, current_cell.1);
        if !neighbors.is_empty() {
            grid.stack.push(current_cell);
            let (neighbor, wall) = neighbors[rng.gen_range(0..neighbors.len())];

            grid.grid[current_cell.0][current_cell.1].walls[wall.0 as usize] = false;
            grid.grid[neighbor.0][neighbor.1].walls[wall.1 as usize] = false;

            grid.grid[neighbor.0][neighbor.1].visited = true;
            grid.stack.push(neighbor);
        }
    }

    commands.spawn(grid);
}

fn display_grid(
    grid: Query<&Grid>,
    mut commands: Commands,
    mut meshes: ResMut<Assets<Mesh>>,
    mut materials: ResMut<Assets<StandardMaterial>>,
) {
    let grid = grid.single();
    // X
    commands.spawn(PbrBundle {
        mesh: meshes.add(Mesh::from(shape::Cube { size: 0.5 })),
        material: materials.add(Color::rgb(1.0, 0.0, 0.0).into()),
        transform: Transform::from_xyz(10.0, 0.0, 0.0),
        ..default()
    });
    // Y
    commands.spawn(PbrBundle {
        mesh: meshes.add(Mesh::from(shape::Cube { size: 0.5 })),
        material: materials.add(Color::rgb(0.0, 1.0, 0.0).into()),
        transform: Transform::from_xyz(0.0, 10.0, 0.0),
        ..default()
    });
    // Z
    commands.spawn(PbrBundle {
        mesh: meshes.add(Mesh::from(shape::Cube { size: 0.5 })),
        material: materials.add(Color::rgb(0.0, 0.0, 1.0).into()),
        transform: Transform::from_xyz(0.0, 0.0, 10.0),
        ..default()
    });

    for (row_i, row) in grid.grid.iter().enumerate() {
        // Room
        // for (col_i, cell) in row.iter().enumerate() {
        //     commands.spawn(PbrBundle {
        //         mesh: meshes.add(Mesh::from(shape::Cube { size: 1.0 })),
        //         material: materials.add(if cell.visited {
        //             Color::rgb(1.0, 1.0, 1.0).into()
        //         } else {
        //             Color::rgb(0.0, 0.0, 0.0).into()
        //         }),
        //         transform: Transform::from_xyz(
        //             row_i as f32 * 1.1 + 0.5,
        //             0.0,
        //             col_i as f32 * 1.1 + 0.5,
        //         ),
        //         ..default()
        //     });
        // }
        // North
        for (col_i, cell) in row.iter().enumerate() {
            if cell.walls[Walls::North as usize] {
                commands.spawn(PbrBundle {
                    mesh: meshes.add(Mesh::from(shape::Box::new(0.1, 1.1, 1.0))),
                    material: materials.add(Color::rgb(1.0, 0.0, 0.0).into()),
                    transform: Transform::from_xyz(
                        row_i as f32 * 1.1 + 1.05,
                        0.0,
                        col_i as f32 * 1.1 + 0.5,
                    ),
                    ..default()
                });
            }
        }
        // South
        for (col_i, cell) in row.iter().enumerate() {
            if cell.walls[Walls::South as usize] {
                commands.spawn(PbrBundle {
                    mesh: meshes.add(Mesh::from(shape::Box::new(0.1, 1.1, 1.0))),
                    material: materials.add(Color::rgb(1.0, 0.0, 0.0).into()),
                    transform: Transform::from_xyz(
                        row_i as f32 * 1.1 - 0.05,
                        0.0,
                        col_i as f32 * 1.1 + 0.5,
                    ),
                    ..default()
                });
            }
        }
        // West
        for (col_i, cell) in row.iter().enumerate() {
            if cell.walls[Walls::West as usize] {
                commands.spawn(PbrBundle {
                    mesh: meshes.add(Mesh::from(shape::Box::new(1.0, 1.1, 0.1))),
                    material: materials.add(Color::rgb(1.0, 0.0, 0.0).into()),
                    transform: Transform::from_xyz(
                        row_i as f32 * 1.1 + 0.5,
                        0.0,
                        col_i as f32 * 1.1 - 0.05,
                    ),
                    ..default()
                });
            }
        }
        // East
        for (col_i, cell) in row.iter().enumerate() {
            if cell.walls[Walls::East as usize] {
                commands.spawn(PbrBundle {
                    mesh: meshes.add(Mesh::from(shape::Box::new(1.0, 1.1, 0.1))),
                    material: materials.add(Color::rgb(1.0, 0.0, 0.0).into()),
                    transform: Transform::from_xyz(
                        row_i as f32 * 1.1 + 0.5,
                        0.0,
                        col_i as f32 * 1.1 + 1.05" 0 2 (fontified t) 2 3 (fontified t) 3 6 (fontified t) 6 9 (fontified t) 9 13 (fontified t) 13 16 (fontified t face font-lock-keyword-face) 16 17 (fontified t) 17 29 (fontified t face font-lock-variable-name-face) 29 40 (fontified t) 40 41 (fontified t) 41 97 (fontified t) 97 101 (fontified t face font-lock-keyword-face) 101 103 (fontified t) 103 137 (fontified t) 137 138 (fontified t) 138 139 (fontified t) 139 143 (fontified t) 143 148 (fontified t face font-lock-keyword-face) 148 172 (fontified t) 172 173 (fontified t) 173 174 (fontified t) 174 182 (fontified t) 182 185 (fontified t face font-lock-keyword-face) 185 186 (fontified t) 186 198 (fontified t face font-lock-variable-name-face) 198 228 (fontified t) 228 237 (fontified t) 237 240 (fontified t face font-lock-keyword-face) 240 241 (fontified t) 241 250 (fontified t face font-lock-variable-name-face) 250 315 (fontified t) 315 317 (fontified t face font-lock-keyword-face) 317 319 (fontified t) 319 342 (fontified t) 342 385 (fontified t) 385 397 (fontified t) 397 400 (fontified t face font-lock-keyword-face) 400 402 (fontified t) 402 417 (fontified t) 417 446 (fontified t) 446 465 (fontified t) 465 466 (fontified t) 466 467 (fontified t) 467 475 (fontified t) 475 489 (fontified t) 489 495 (fontified t) 495 505 (fontified t) 505 534 (fontified t) 534 536 (fontified t face font-lock-keyword-face) 536 537 (fontified t) 537 542 (fontified t face font-lock-type-face) 542 543 (fontified t) 543 546 (fontified t) 546 551 (fontified t face font-lock-keyword-face) 551 552 (fontified t) 552 553 (fontified t) 553 561 (fontified t) 561 564 (fontified t) 564 565 (rear-nonsticky t fontified t) 565 583 (fontified t) 583 595 (fontified t) 595 605 (fontified t) 605 609 (fontified t) 609 610 (fontified t) 610 612 (fontified t) 612 614 (fontified t face font-lock-keyword-face) 614 615 (fontified t) 615 620 (fontified t face font-lock-type-face) 620 624 (fontified t) 624 629 (fontified t face font-lock-keyword-face) 629 630 (fontified t) 630 631 (fontified t) 631 632 (fontified t) 632 633 (fontified t) 633 657 (fontified t) 657 688 (fontified t) 688 692 (fontified t face font-lock-keyword-face) 692 694 (fontified t) 694 742 (fontified t) 742 743 (fontified t) 743 749 (fontified t) 749 750 (fontified t) 750 771 (fontified t) 771 776 (fontified t) 776 779 (fontified t) 779 781 (fontified t face font-lock-keyword-face) 781 782 (fontified t) 782 794 (fontified t face font-lock-function-name-face) 794 796 (fontified t) 796 800 (fontified t) 800 804 (fontified t face font-lock-variable-name-face) 804 806 (fontified t) 806 811 (fontified t face font-lock-type-face) 811 812 (fontified t) 812 813 (fontified t face rust-ampersand-face) 813 817 (fontified t face font-lock-type-face) 817 818 (fontified t) 818 824 (fontified t) 824 827 (fontified t face font-lock-keyword-face) 827 828 (fontified t) 828 836 (fontified t face font-lock-variable-name-face) 836 837 (fontified t) 837 838 (fontified t) 838 846 (fontified t face font-lock-type-face) 846 848 (fontified t) 848 852 (fontified t) 852 854 (fontified t face font-lock-keyword-face) 854 855 (fontified t face font-lock-keyword-face) 855 856 (fontified t) 856 861 (fontified t face font-lock-variable-name-face) 861 862 (fontified t face font-lock-variable-name-face) 862 864 (fontified t) 864 870 (fontified t face font-lock-type-face) 870 871 (fontified t) 871 876 (fontified t face font-lock-type-face) 876 877 (fontified t face font-lock-type-face) 877 878 (fontified t) 878 882 (fontified t face font-lock-type-face) 882 883 (fontified t) 883 884 (fontified t) 884 886 (fontified t) 886 890 (fontified t) 890 893 (fontified t face font-lock-keyword-face) 893 894 (fontified t) 894 903 (fontified t face font-lock-variable-name-face) 903 905 (fontified t) 905 911 (fontified t face font-lock-type-face) 911 912 (fontified t) 912 918 (fontified t face font-lock-type-face) 918 919 (fontified t) 919 921 (fontified t face font-lock-type-face) 921 929 (fontified t face font-lock-type-face) 929 935 (fontified t face font-lock-type-face) 935 939 (fontified t) 939 947 (fontified t) 947 950 (fontified t face font-lock-keyword-face) 950 951 (fontified t) 951 955 (fontified t face font-lock-variable-name-face) 955 977 (fontified t) 977 980 (fontified t face font-lock-comment-delimiter-face) 980 982 (fontified t face font-lock-comment-face) 982 1001 (fontified t) 1001 1006 (fontified t face font-lock-type-face) 1006 1010 (fontified t face font-lock-type-face) 1010 1013 (fontified t) 1013 1021 (fontified t) 1021 1025 (fontified t face font-lock-variable-name-face) 1025 1032 (fontified t) 1032 1038 (fontified t) 1038 1042 (fontified t face font-lock-type-face) 1042 1043 (fontified t) 1043 1049 (fontified t) 1049 1054 (fontified t face font-lock-constant-face) 1054 1056 (fontified t) 1056 1060 (fontified t face font-lock-type-face) 1060 1063 (fontified t) 1063 1067 (fontified t face font-lock-variable-name-face) 1067 1078 (fontified t) 1078 1086 (fontified t) 1086 1089 (fontified t face font-lock-variable-name-face) 1089 1094 (fontified t face font-lock-variable-name-face) 1094 1110 (fontified t) 1110 1115 (fontified t face font-lock-type-face) 1115 1145 (fontified t) 1145 1153 (fontified t) 1153 1156 (fontified t face font-lock-variable-name-face) 1156 1162 (fontified t face font-lock-variable-name-face) 1162 1164 (fontified t) 1164 1165 (fontified t face font-lock-type-face) 1165 1173 (fontified t face font-lock-type-face) 1173 1183 (fontified t) 1183 1188 (fontified t) 1188 1189 (fontified t) 1189 1201 (fontified t) 1201 1233 (fontified t) 1233 1236 (fontified t face font-lock-comment-delimiter-face) 1236 1238 (fontified t face font-lock-comment-face) 1238 1257 (fontified t) 1257 1266 (fontified t face font-lock-type-face) 1266 1277 (fontified t) 1277 1278 (fontified t face font-lock-variable-name-face) 1278 1281 (fontified t face font-lock-variable-name-face) 1281 1286 (fontified t) 1286 1294 (fontified t) 1294 1298 (fontified t face font-lock-type-face) 1298 1305 (fontified t) 1305 1310 (fontified t face font-lock-constant-face) 1310 1312 (fontified t) 1312 1316 (fontified t face font-lock-type-face) 1316 1319 (fontified t) 1319 1323 (fontified t face font-lock-variable-name-face) 1323 1334 (fontified t) 1334 1335 (fontified t) 1335 1342 (fontified t) 1342 1350 (fontified t face font-lock-variable-name-face) 1350 1356 (fontified t) 1356 1366 (fontified t) 1366 1371 (fontified t face font-lock-type-face) 1371 1387 (fontified t) 1387 1401 (fontified t) 1401 1405 (fontified t) 1405 1409 (fontified t) 1409 1416 (fontified t face font-lock-variable-name-face) 1416 1418 (fontified t face font-lock-variable-name-face) 1418 1420 (fontified t) 1420 1429 (fontified t face font-lock-type-face) 1429 1433 (fontified t) 1433 1451 (fontified t) 1451 1457 (fontified t) 1457 1489 (fontified t) 1489 1492 (fontified t face font-lock-comment-delimiter-face) 1492 1494 (fontified t face font-lock-comment-face) 1494 1509 (fontified t) 1509 1513 (fontified t) 1513 1522 (face font-lock-type-face fontified t) 1522 1525 (fontified t) 1525 1533 (fontified t) 1533 1537 (fontified t face font-lock-variable-name-face) 1537 1550 (fontified t) 1550 1551 (fontified t face font-lock-type-face) 1551 1554 (fontified t face font-lock-type-face) 1554 1557 (fontified t) 1557 1561 (fontified t) 1561 1566 (fontified t face font-lock-constant-face) 1566 1568 (fontified t) 1568 1572 (fontified t face font-lock-type-face) 1572 1575 (fontified t) 1575 1579 (fontified t face font-lock-variable-name-face) 1579 1582 (fontified t) 1582 1590 (fontified t) 1590 1598 (fontified t) 1598 1604 (fontified t face font-lock-variable-name-face) 1604 1606 (fontified t face font-lock-variable-name-face) 1606 1616 (fontified t) 1616 1617 (fontified t) 1617 1620 (fontified t) 1620 1622 (fontified t) 1622 1627 (fontified t face font-lock-type-face) 1627 1657 (fontified t) 1657 1659 (fontified t) 1659 1665 (fontified t) 1665 1670 (fontified t face font-lock-variable-name-face) 1670 1674 (fontified t face font-lock-variable-name-face) 1674 1676 (fontified t) 1676 1685 (fontified t face font-lock-type-face) 1685 1686 (fontified t) 1686 1703 (fontified t) 1703 1704 (fontified t) 1704 1713 (fontified t) 1713 1732 (fontified t) 1732 1733 (fontified t) 1733 1743 (fontified t) 1743 1746 (fontified t) 1746 1749 (fontified t face font-lock-keyword-face) 1749 1761 (fontified t) 1761 1763 (fontified t) 1763 1765 (fontified t face font-lock-keyword-face) 1765 1785 (fontified t) 1785 1787 (fontified t) 1787 1794 (fontified t) 1794 1797 (fontified t) 1797 1805 (fontified t) 1805 1808 (fontified t face font-lock-comment-delimiter-face) 1808 1813 (fontified t face font-lock-comment-face) 1813 1821 (fontified t) 1821 1824 (fontified t face font-lock-comment-delimiter-face) 1824 1827 (fontified t face font-lock-comment-face) 1827 1833 (fontified t face font-lock-comment-face) 1833 1842 (fontified t face font-lock-comment-face) 1842 1844 (fontified t face font-lock-comment-face) 1844 1854 (fontified t face font-lock-comment-face) 1854 1870 (fontified t face font-lock-comment-face) 1870 1874 (fontified t) 1874 1878 (fontified t) 1878 1881 (fontified t face font-lock-comment-delimiter-face) 1881 1882 (fontified t face font-lock-comment-delimiter-face) 1882 1885 (fontified t face font-lock-comment-delimiter-face) 1885 1893 (fontified t face font-lock-comment-face) 1893 1896 (fontified t face font-lock-comment-face) 1896 1900 (fontified t face font-lock-comment-face) 1900 1903 (fontified t face font-lock-comment-face) 1903 1909 (fontified t face font-lock-comment-face) 1909 1912 (fontified t face font-lock-comment-face) 1912 1914 (fontified t) 1914 1915 (fontified t) 1915 1920 (fontified t) 1920 1923 (fontified t face font-lock-comment-delimiter-face) 1923 1931 (fontified t face font-lock-comment-delimiter-face) 1931 1935 (fontified t face font-lock-comment-face) 1935 1948 (fontified t face font-lock-comment-face) 1948 1952 (fontified t face font-lock-comment-face) 1952 1959 (fontified t face font-lock-comment-face) 1959 1964 (fontified t face font-lock-comment-face) 1964 1966 (fontified t face font-lock-comment-face) 1966 1970 (fontified t face font-lock-comment-face) 1970 1973 (fontified t face font-lock-comment-face) 1973 1977 (fontified t face font-lock-comment-face) 1977 1980 (fontified t face font-lock-comment-face) 1980 1988 (fontified t face font-lock-comment-face) 1988 1996 (fontified t) 1996 1999 (fontified t face font-lock-comment-delimiter-face) 1999 2007 (fontified t face font-lock-comment-delimiter-face) 2007 2015 (fontified t face font-lock-comment-face) 2015 2031 (fontified t face font-lock-comment-face) 2031 2032 (fontified t face font-lock-comment-face) 2032 2033 (fontified t face font-lock-comment-face) 2033 2049 (fontified t face font-lock-comment-face) 2049 2053 (fontified t) 2053 2057 (fontified t) 2057 2060 (fontified t face font-lock-comment-delimiter-face) 2060 2072 (fontified t face font-lock-comment-delimiter-face) 2072 2077 (fontified t face font-lock-comment-face) 2077 2105 (fontified t face font-lock-comment-face) 2105 2113 (fontified t) 2113 2116 (fontified t face font-lock-comment-delimiter-face) 2116 2124 (fontified t face font-lock-comment-delimiter-face) 2124 2126 (fontified t face font-lock-comment-face) 2126 2130 (fontified t face font-lock-comment-face) 2130 2133 (fontified t face font-lock-comment-face) 2133 2141 (fontified t) 2141 2144 (fontified t face font-lock-comment-delimiter-face) 2144 2156 (fontified t face font-lock-comment-delimiter-face) 2156 2161 (fontified t face font-lock-comment-face) 2161 2180 (fontified t face font-lock-comment-face) 2180 2183 (fontified t face font-lock-comment-face) 2183 2189 (fontified t face font-lock-comment-face) 2189 2197 (fontified t) 2197 2200 (fontified t face font-lock-comment-delimiter-face) 2200 2208 (fontified t face font-lock-comment-delimiter-face) 2208 2212 (fontified t face font-lock-comment-face) 2212 2220 (fontified t) 2220 2223 (fontified t face font-lock-comment-delimiter-face) 2223 2231 (fontified t face font-lock-comment-delimiter-face) 2231 2240 (fontified t face font-lock-comment-face) 2240 2242 (fontified t face font-lock-comment-face) 2242 2249 (fontified t face font-lock-comment-face) 2249 2251 (fontified t face font-lock-comment-face) 2251 2263 (fontified t face font-lock-comment-face) 2263 2271 (fontified t) 2271 2274 (fontified t face font-lock-comment-delimiter-face) 2274 2280 (fontified t face font-lock-comment-delimiter-face) 2280 2286 (fontified t face font-lock-comment-delimiter-face) 2286 2292 (fontified t face font-lock-comment-face) 2292 2294 (fontified t face font-lock-comment-face) 2294 2295 (fontified t face font-lock-comment-face) 2295 2298 (fontified t face font-lock-comment-face) 2298 2303 (fontified t face font-lock-comment-face) 2303 2309 (fontified t face font-lock-comment-face) 2309 2312 (fontified t face font-lock-comment-face) 2312 2320 (fontified t) 2320 2323 (fontified t face font-lock-comment-delimiter-face) 2323 2329 (fontified t face font-lock-comment-delimiter-face) 2329 2335 (fontified t face font-lock-comment-delimiter-face) 2335 2340 (fontified t face font-lock-comment-face) 2340 2348 (fontified t) 2348 2351 (fontified t face font-lock-comment-delimiter-face) 2351 2363 (fontified t face font-lock-comment-delimiter-face) 2363 2369 (fontified t face font-lock-comment-face) 2369 2371 (fontified t face font-lock-comment-face) 2371 2372 (fontified t face font-lock-comment-face) 2372 2375 (fontified t face font-lock-comment-face) 2375 2389 (fontified t face font-lock-comment-face) 2389 2397 (fontified t) 2397 2400 (fontified t face font-lock-comment-delimiter-face) 2400 2408 (fontified t face font-lock-comment-delimiter-face) 2408 2411 (fontified t face font-lock-comment-face) 2411 2419 (fontified t) 2419 2422 (fontified t face font-lock-comment-delimiter-face) 2422 2430 (fontified t face font-lock-comment-delimiter-face) 2430 2442 (fontified t face font-lock-comment-face) 2442 2450 (fontified t) 2450 2453 (fontified t face font-lock-comment-delimiter-face) 2453 2457 (fontified t face font-lock-comment-delimiter-face) 2457 2461 (fontified t face font-lock-comment-face) 2461 2469 (fontified t) 2469 2472 (fontified t face font-lock-comment-delimiter-face) 2472 2474 (fontified t face font-lock-comment-face) 2474 2482 (fontified t) 2482 2485 (fontified t face font-lock-comment-delimiter-face) 2485 2487 (fontified t face font-lock-comment-face) 2487 2491 (fontified t face font-lock-comment-face) 2491 2499 (fontified t) 2499 2502 (fontified t face font-lock-keyword-face) 2502 2517 (fontified t) 2517 2519 (fontified t face font-lock-keyword-face) 2519 2545 (fontified t) 2545 2557 (fontified t) 2557 2559 (fontified t face font-lock-keyword-face) 2559 2571 (fontified t) 2571 2576 (fontified t face font-lock-type-face) 2576 2578 (fontified t) 2578 2583 (fontified t face font-lock-type-face) 2583 2584 (fontified t) 2584 2586 (fontified t face font-lock-keyword-face) 2586 2587 (fontified t) 2587 2592 (fontified t face font-lock-type-face) 2592 2626 (fontified t) 2626 2627 (fontified t) 2627 2636 (fontified t face font-lock-type-face) 2636 2639 (fontified t) 2639 2659 (fontified t) 2659 2663 (fontified t face font-lock-variable-name-face) 2663 2676 (fontified t) 2676 2680 (fontified t face font-lock-type-face) 2680 2687 (fontified t) 2687 2692 (fontified t face font-lock-constant-face) 2692 2694 (fontified t) 2694 2697 (fontified t face font-lock-type-face) 2697 2741 (fontified t) 2741 2749 (fontified t face font-lock-variable-name-face) 2749 2765 (fontified t) 2765 2770 (fontified t face font-lock-type-face) 2770 2820 (fontified t) 2820 2829 (fontified t face font-lock-variable-name-face) 2829 2831 (fontified t) 2831 2834 (fontified t face font-lock-type-face) 2834 2840 (fontified t face font-lock-type-face) 2840 2852 (fontified t) 2852 2882 (fontified t) 2882 2884 (fontified t face font-lock-keyword-face) 2884 2885 (fontified t) 2885 2888 (fontified t face font-lock-type-face) 2888 2962 (fontified t) 2962 2964 (fontified t face font-lock-keyword-face) 2964 2965 (fontified t) 2965 2968 (fontified t face font-lock-type-face) 2968 3005 (fontified t) 3005 3025 (fontified t) 3025 3037 (fontified t) 3089 3092 (face font-lock-comment-delimiter-face) 3092 3098 (face font-lock-comment-face) 3106 3109 (face font-lock-keyword-face) 3124 3126 (face font-lock-keyword-face) 3164 3166 (face font-lock-keyword-face) 3178 3183 (face font-lock-type-face) 3185 3190 (face font-lock-type-face) 3191 3193 (face font-lock-keyword-face) 3194 3199 (face font-lock-type-face) 3234 3243 (face font-lock-type-face) 3266 3270 (face font-lock-variable-name-face) 3283 3287 (face font-lock-type-face) 3294 3299 (face font-lock-constant-face) 3301 3304 (face font-lock-type-face) 3348 3356 (face font-lock-variable-name-face) 3372 3377 (face font-lock-type-face) 3427 3436 (face font-lock-variable-name-face) 3438 3447 (face font-lock-type-face) 3489 3491 (face font-lock-keyword-face) 3492 3495 (face font-lock-type-face) 3569 3571 (face font-lock-keyword-face) 3572 3575 (face font-lock-type-face) 3696 3699 (face font-lock-comment-delimiter-face) 3699 3704 (face font-lock-comment-face) 3712 3715 (face font-lock-keyword-face) 3730 3732 (face font-lock-keyword-face) 3770 3772 (face font-lock-keyword-face) 3784 3789 (face font-lock-type-face) 3791 3795 (face font-lock-type-face) 3796 3798 (face font-lock-keyword-face) 3799 3804 (face font-lock-type-face) 3839 3848 (face font-lock-type-face) 3871 3875 (face font-lock-variable-name-face) 3888 3892 (face font-lock-type-face) 3899 3904 (face font-lock-constant-face) 3906 3909 (face font-lock-type-face) 3953 3961 (face font-lock-variable-name-face) 3977 3982 (face font-lock-type-face) 4032 4041 (face font-lock-variable-name-face) 4043 4045 (face font-lock-type-face) 4045 4052 (face font-lock-type-face) 4094 4096 (face font-lock-keyword-face) 4097 4100 (face font-lock-type-face) 4173 4175 (face font-lock-keyword-face) 4176 4179 (face font-lock-type-face) 4301 4304 (face font-lock-comment-delimiter-face) 4304 4309 (face font-lock-comment-face) 4317 4320 (face font-lock-keyword-face) 4335 4337 (face font-lock-keyword-face) 4375 4377 (face font-lock-keyword-face) 4389 4394 (face font-lock-type-face) 4396 4400 (face font-lock-type-face) 4401 4403 (face font-lock-keyword-face) 4404 4409 (face font-lock-type-face) 4444 4453 (face font-lock-type-face) 4476 4480 (face font-lock-variable-name-face) 4493 4497 (face font-lock-type-face) 4504 4505 (face font-lock-constant-face) 4505 4509 (face font-lock-constant-face) 4511 4514 (face font-lock-type-face) 4558 4566 (face font-lock-variable-name-face) 4582 4587 (face font-lock-type-face) 4637 4646 (face font-lock-variable-name-face) 4648 4657 (face font-lock-type-face) 4699 4701 (face font-lock-keyword-face) 4702 4705 (face font-lock-type-face) 4778 4780 (face font-lock-keyword-face) 4781 4784 (face font-lock-type-face)) . 1952) (undo-tree-id65 . 4795) (undo-tree-id66 . -4) (undo-tree-id67 . -4) (undo-tree-id68 . 4792) (undo-tree-id69 . -632) (undo-tree-id70 . -632) (undo-tree-id71 . -632) (undo-tree-id72 . -632) (undo-tree-id73 . -939) (undo-tree-id74 . -973) (undo-tree-id75 . -4) (undo-tree-id76 . -4) (undo-tree-id77 . -4) (undo-tree-id78 . -4) (undo-tree-id79 . -4) (undo-tree-id80 . -4) (undo-tree-id81 . -40) (undo-tree-id82 . -40) (undo-tree-id83 . -139) (undo-tree-id84 . -139) (undo-tree-id85 . -342) (undo-tree-id86 . -342) (undo-tree-id87 . -632) (undo-tree-id88 . -632) (undo-tree-id89 . -778) (undo-tree-id90 . -778) (undo-tree-id91 . -973) (undo-tree-id92 . -973) (undo-tree-id93 . -973) (undo-tree-id94 . -973) (undo-tree-id95 . -973) (undo-tree-id96 . -973) (undo-tree-id97 . -973) (undo-tree-id98 . -973) (undo-tree-id99 . -973) (undo-tree-id100 . -973) (undo-tree-id101 . -973) (undo-tree-id102 . -973) (t 25818 5379 397784 895000)) nil (25819 14630 771797 935000) 0 nil])
([nil nil ((#("    // X
    commands.spawn(PbrBundle {
        mesh: meshes.add(Mesh::from(shape::Cube { size: 0.5 })),
        material: materials.add(Color::rgb(1.0, 0.0, 0.0).into()),
        transform: Transform::from_xyz(10.0, 0.0, 0.0),
        ..default()
    });
    // Y
    commands.spawn(PbrBundle {
        mesh: meshes.add(Mesh::from(shape::Cube { size: 0.5 })),
        material: materials.add(Color::rgb(0.0, 1.0, 0.0).into()),
        transform: Transform::from_xyz(0.0, 10.0, 0.0),
        ..default()
    });
    // Z
    commands.spawn(PbrBundle {
        mesh: meshes.add(Mesh::from(shape::Cube { size: 0.5 })),
        material: materials.add(Color::rgb(0.0, 0.0, 1.0).into()),
        transform: Transform::from_xyz(0.0, 0.0, 10.0),
        ..default()
    });
" 0 4 (fontified t) 4 7 (fontified t face font-lock-comment-delimiter-face) 7 9 (fontified t face font-lock-comment-face) 9 28 (fontified t) 28 37 (fontified t face font-lock-type-face) 37 48 (fontified t) 48 52 (fontified t face font-lock-variable-name-face) 52 65 (fontified t) 65 69 (fontified t face font-lock-type-face) 69 76 (fontified t) 76 81 (fontified t face font-lock-constant-face) 81 83 (fontified t) 83 87 (fontified t face font-lock-type-face) 87 90 (fontified t) 90 94 (fontified t face font-lock-variable-name-face) 94 113 (fontified t) 113 121 (fontified t face font-lock-variable-name-face) 121 137 (fontified t) 137 142 (fontified t face font-lock-type-face) 142 180 (fontified t) 180 189 (fontified t face font-lock-variable-name-face) 189 191 (fontified t) 191 200 (fontified t face font-lock-type-face) 200 260 (fontified t) 260 263 (fontified t face font-lock-comment-delimiter-face) 263 265 (fontified t face font-lock-comment-face) 265 284 (fontified t) 284 293 (fontified t face font-lock-type-face) 293 304 (fontified t) 304 308 (fontified t face font-lock-variable-name-face) 308 321 (fontified t) 321 325 (fontified t face font-lock-type-face) 325 332 (fontified t) 332 337 (fontified t face font-lock-constant-face) 337 339 (fontified t) 339 343 (fontified t face font-lock-type-face) 343 346 (fontified t) 346 350 (fontified t face font-lock-variable-name-face) 350 369 (fontified t) 369 377 (fontified t face font-lock-variable-name-face) 377 393 (fontified t) 393 398 (fontified t face font-lock-type-face) 398 436 (fontified t) 436 445 (fontified t face font-lock-variable-name-face) 445 447 (fontified t) 447 456 (fontified t face font-lock-type-face) 456 516 (fontified t) 516 519 (fontified t face font-lock-comment-delimiter-face) 519 521 (fontified t face font-lock-comment-face) 521 540 (fontified t) 540 549 (fontified t face font-lock-type-face) 549 560 (fontified t) 560 564 (fontified t face font-lock-variable-name-face) 564 577 (fontified t) 577 581 (fontified t face font-lock-type-face) 581 588 (fontified t) 588 593 (fontified t face font-lock-constant-face) 593 595 (fontified t) 595 599 (fontified t face font-lock-type-face) 599 602 (fontified t) 602 606 (fontified t face font-lock-variable-name-face) 606 625 (fontified t) 625 633 (fontified t face font-lock-variable-name-face) 633 649 (fontified t) 649 654 (fontified t face font-lock-type-face) 654 692 (fontified t) 692 701 (fontified t face font-lock-variable-name-face) 701 703 (fontified t) 703 712 (fontified t face font-lock-type-face) 712 768 (fontified t)) . 2925) (undo-tree-id0 . -767) (undo-tree-id1 . -7) (undo-tree-id2 . -767) (undo-tree-id3 . -767) (undo-tree-id4 . -199) (undo-tree-id5 . -199) (undo-tree-id6 . -199) (undo-tree-id7 . -199) (undo-tree-id8 . -199) (undo-tree-id9 . -199) (undo-tree-id10 . -132) (undo-tree-id11 . -132) (undo-tree-id12 . -67) (undo-tree-id13 . -67) (undo-tree-id14 . -36) (undo-tree-id15 . -36) (undo-tree-id16 . -7) (undo-tree-id17 . -7) (undo-tree-id18 . -7) (undo-tree-id19 . -7) (undo-tree-id20 . -16) (undo-tree-id21 . -16) (undo-tree-id22 . -47) (undo-tree-id23 . -47) (undo-tree-id24 . -112) (undo-tree-id25 . -112) (undo-tree-id26 . -179) (undo-tree-id27 . -179) (undo-tree-id28 . -235) (undo-tree-id29 . -235) (undo-tree-id30 . -255) (undo-tree-id31 . -255) (undo-tree-id32 . -263) (undo-tree-id33 . -263) (undo-tree-id34 . -272) (undo-tree-id35 . -272) (undo-tree-id36 . -303) (undo-tree-id37 . -303) (undo-tree-id38 . -368) (undo-tree-id39 . -368) (undo-tree-id40 . -435) (undo-tree-id41 . -435) (undo-tree-id42 . -491) (undo-tree-id43 . -491) (undo-tree-id44 . -511) (undo-tree-id45 . -511) (undo-tree-id46 . -519) (undo-tree-id47 . -519) (undo-tree-id48 . -528) (undo-tree-id49 . -528) (undo-tree-id50 . -559) (undo-tree-id51 . -559) (undo-tree-id52 . -624) (undo-tree-id53 . -624) (undo-tree-id54 . -691) (undo-tree-id55 . -691) (undo-tree-id56 . -747) (undo-tree-id57 . -747) (undo-tree-id58 . -760) (undo-tree-id59 . -767) (undo-tree-id60 . -199) (undo-tree-id61 . -767) (undo-tree-id62 . -767) (undo-tree-id63 . -767) (undo-tree-id64 . -768) 3692 (t 25819 13571 274805 369000)) nil (25819 14630 771767 947000) 0 nil])
([nil nil ((4654 . 4655) (t 25819 37725 327443 906000)) nil (25819 38051 54271 637000) 0 nil])
([nil nil ((4030 . 4031)) nil (25819 38051 54270 375000) 0 nil])
([nil nil ((4716 . 4728) (4705 . 4716) (#("wall_he" 0 7 (fontified t)) . -4705) (undo-tree-id0 . -7) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -2) (undo-tree-id4 . -2) (undo-tree-id5 . -3) (undo-tree-id6 . -3) (undo-tree-id7 . -4) (undo-tree-id8 . -4) (undo-tree-id9 . -4) (undo-tree-id10 . -4) (undo-tree-id11 . -5) (undo-tree-id12 . -5) (undo-tree-id13 . -6) (undo-tree-id14 . -6) (undo-tree-id15 . -7) (undo-tree-id16 . -7) (undo-tree-id17 . -7) (undo-tree-id18 . -7) (undo-tree-id19 . -7) 4712 (4699 . 4712) (#("i" 0 1 (fontified t)) . -4699) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (4693 . 4700) (4690 . 4693) (#("i" 0 1 (fontified t)) . -4690) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (4684 . 4691) (4681 . 4684) (#("s" 0 1 (fontified t face font-lock-type-face)) . -4681) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (#("i" 0 1 (fontified t face font-lock-type-face)) . -4682) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (#("o" 0 1 (fontified t face font-lock-type-face)) . -4683) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (#("n" 0 1 (fontified t face font-lock-type-face)) . -4684) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) 4685 (4682 . 4685) (#("i" 0 1 (fontified t face font-lock-type-face)) . -4682) (undo-tree-id52 . -1) (4680 . 4683) (#("i" 0 1 (fontified t face font-lock-type-face)) . -4680) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (4674 . 4681) (4670 . 4674) (#("i" 0 1 (fontified t face font-lock-type-face)) . -4670) (undo-tree-id55 . -1) (4669 . 4671) (#("f" 0 1 (fontified t)) . -4669) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (#("i" 0 1 (fontified nil)) . -4670) (undo-tree-id62 . -1) 4671 (4670 . 4671) (#("i" 0 1 (fontified t)) . -4670) (undo-tree-id63 . -1) (4667 . 4671) (4658 . 4667) (#("Rigid" 0 5 (fontified t face font-lock-type-face)) . -4658) (undo-tree-id64 . -5) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -3) (undo-tree-id68 . -3) (undo-tree-id69 . -3) (undo-tree-id70 . -4) (undo-tree-id71 . -4) (undo-tree-id72 . -5) (undo-tree-id73 . -5) (undo-tree-id74 . -5) 4663 (4662 . 4663) (#("g" 0 1 (fontified t face font-lock-type-face)) . -4662) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) 4663 (4661 . 4663) (#("i" 0 1 (fontified t face font-lock-type-face)) . -4661) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (4659 . 4662) (#("i" 0 1 (fontified t face font-lock-type-face)) . -4659) (undo-tree-id81 . -1) (4656 . 4660)) nil (25819 38051 54257 621000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t)) . 4655) (undo-tree-id82 . 1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (t 25819 38051 57448 167000)) nil (25819 38069 711494 469000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4728 . 4729) (nil fontified nil 4728 . 4729) (4728 . 4729) 4727) nil (25819 38069 711479 411000) 0 nil])
([nil nil ((4729 . 4730) (t 25819 38069 717448 420000)) nil (25819 38092 632109 422000) 0 nil])
([nil nil ((4031 . 4052) (4043 . 4047) (4132 . 4136) (4144 . 4148) (4205 . 4209) (4217 . 4218) (4237 . 4240) (4242 . 4243) (4262 . 4265) (4321 . 4322) (4341 . 4344) (4373 . 4374) (4397 . 4400) (4469 . 4470) (4493 . 4496) (4498 . 4499) (4522 . 4525) (4583 . 4584) (4603 . 4606) (4606 . 4607) (4626 . 4629) (4638 . 4640) (4654 . 4656) (4656 . 4666) (4657 . 4667) (4674 . 4680) (4675 . 4689) (4728 . 4746) 4727) nil (25819 38140 358461 51000) 0 nil])
([nil nil ((nil rear-nonsticky nil 22 . 23) (#("
" 0 1 (fontified nil)) . -53) (22 . 54) 21) nil (25819 38156 363620 141000) 0 nil] [nil nil ((4759 . 4763) (t 25819 38092 634115 389000)) ((#("Type" 0 4 (fontified t face font-lock-type-face)) . 4759) (undo-tree-id86 . -3) (undo-tree-id87 . -3) (undo-tree-id88 . -3) (undo-tree-id89 . -3) (undo-tree-id90 . -3) (undo-tree-id91 . -4) (undo-tree-id92 . -3) (undo-tree-id93 . -3) (undo-tree-id94 . -3) (undo-tree-id95 . -3) (undo-tree-id96 . -3) (undo-tree-id97 . -3) (undo-tree-id98 . -3) (undo-tree-id99 . -3) (undo-tree-id100 . -3) (undo-tree-id101 . -3) (undo-tree-id102 . -3) (undo-tree-id103 . -3) (undo-tree-id104 . -3) (undo-tree-id105 . -3) (undo-tree-id106 . -3) (t 25819 38120 254115 742000)) (25819 38120 249815 168000) 0 nil])
([nil nil ((4851 . 4852) (#("*" 0 1 (fontified t)) . -4851) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) 4852 (4846 . 4852) (t 25819 38156 367449 542000)) nil (25819 38258 819300 819000) 0 nil])
nil
([nil nil ((4870 . 4871) (#("*" 0 1 (fontified nil)) . -4870) (undo-tree-id108 . -1) 4871 (4865 . 4871)) nil (25819 38258 819296 10000) 0 nil])
([nil nil ((4888 . 4889) (#("*" 0 1 (fontified nil)) . -4888) (undo-tree-id107 . -1) 4889 (4883 . 4889)) nil (25819 38258 819290 880000) 0 nil])
([nil nil ((5089 . 5090) (t 25819 38258 824117 555000)) nil (25819 38372 414409 874000) 0 nil])
([nil nil ((5703 . 5704)) nil (25819 38372 414408 873000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5725 . 5726) (#("
" 0 1 (fontified nil)) . -5836) (5705 . 5837) 5702) nil (25819 38372 414407 911000) 0 nil])
([nil nil ((#("));" 0 3 (fontified t)) . 5702) (undo-tree-id130 . 1) (undo-tree-id131 . -2) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -2) (undo-tree-id139 . -2) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -2) (undo-tree-id147 . -2) (undo-tree-id148 . 3) (undo-tree-id149 . -1) (undo-tree-id150 . -3) (undo-tree-id151 . -3)) nil (25819 38372 414405 586000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5835 . 5836) (nil fontified nil 5833 . 5836) (5833 . 5836) 5832) nil (25819 38372 414393 634000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . 5832) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1)) nil (25819 38372 414391 610000) 0 nil])
([nil nil ((5720 . 5721) (#("                    " 0 5 (fontified nil) 5 6 (fontified nil) 6 20 (fontified nil)) . 5720) (undo-tree-id113 . -16) (undo-tree-id114 . -16) (undo-tree-id115 . -16) (undo-tree-id116 . -16) (#("
" 0 1 (fontified t)) . -5720) (undo-tree-id117 . -1) (5702 . 5703) (#("                    " 0 9 (fontified nil) 9 10 (fontified nil) 10 19 (fontified nil) 19 20 (rear-nonsticky t fontified nil)) . 5702) (undo-tree-id118 . 20) (undo-tree-id119 . -20) (undo-tree-id120 . -20) (undo-tree-id121 . -16) (undo-tree-id122 . -16) (#("
" 0 1 (fontified t)) . -5702) (undo-tree-id123 . 1) (undo-tree-id124 . -1) 5701) nil (25819 38372 414384 136000) 0 nil])
([nil nil ((5702 . 5703) (t 25819 38372 417452 350000)) nil (25819 38378 472345 363000) 0 nil])
([nil nil ((5090 . 5111) (5102 . 5106) (5191 . 5195) (5203 . 5207) (5264 . 5268) (5276 . 5277) (5296 . 5299) (5301 . 5302) (5321 . 5324) (5380 . 5381) (5400 . 5403) (5432 . 5433) (5456 . 5459) (5516 . 5517) (5540 . 5543) (5545 . 5546) (5569 . 5572) (5630 . 5631) (5650 . 5653) (5653 . 5654) (5673 . 5676) (5685 . 5687) (5701 . 5703) (5703 . 5713) (5704 . 5714) (5721 . 5727) (5722 . 5736) (5793 . 5811) 5702) nil (25819 38378 472339 823000) 0 nil])
([nil nil ((nil rear-nonsticky nil 6827 . 6828) (nil fontified nil 6717 . 6828) (6717 . 6828) 6716 (t 25819 38378 474119 90000)) nil (25819 38459 731534 35000) 0 nil])
([nil nil ((6103 . 6104)) nil (25819 38459 731532 783000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t)) . 6716) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . 1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1)) nil (25819 38459 731531 170000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . 6716) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1)) nil (25819 38459 731318 972000) 0 nil])
([nil nil ((6716 . 6717)) nil (25819 38459 731316 497000) 0 nil])
([nil nil ((6717 . 6718)) nil (25819 38459 731315 906000) 0 nil])
([nil nil ((6735 . 6736) (#("                    " 0 20 (fontified nil)) . 6735) (undo-tree-id164 . -18) (undo-tree-id165 . -18) (undo-tree-id166 . -18) (undo-tree-id167 . -18) (#("
" 0 1 (fontified t)) . -6735) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) 6717) nil (25819 38459 731314 433000) 0 nil])
([nil nil ((6758 . 6763) (#("width" 0 5 (fontified t)) . 6758) (undo-tree-id161 . -4) (undo-tree-id162 . -5) (undo-tree-id163 . -5)) nil (25819 38459 731309 314000) 0 nil])
([nil nil ((6796 . 6800) (#("i" 0 1 (fontified t)) . -6796) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (6795 . 6797) (#("depth" 0 5 (fontified t)) . 6795) (undo-tree-id158 . -4) (undo-tree-id159 . -5) (undo-tree-id160 . -5)) nil (25819 38459 731305 657000) 0 nil])
([nil nil ((6807 . 6809) (#("," 0 1 (fontified t)) . -6807) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) 6808) nil (25819 38459 731293 574000) 0 nil])
([nil nil ((6807 . 6808) (t 25819 38459 734120 173000)) nil (25819 38474 152909 235000) 0 nil])
([nil nil ((6104 . 6125) (6116 . 6120) (6205 . 6209) (6217 . 6221) (6278 . 6282) (6290 . 6291) (6310 . 6313) (6315 . 6316) (6335 . 6338) (6394 . 6395) (6414 . 6417) (6446 . 6447) (6470 . 6473) (6531 . 6532) (6555 . 6558) (6560 . 6561) (6584 . 6587) (6644 . 6645) (6664 . 6667) (6667 . 6668) (6687 . 6690) (6699 . 6701) (6715 . 6717) (6717 . 6727) (6718 . 6728) (6735 . 6741) (6736 . 6750) (6807 . 6825) (#("
" 0 1 (rear-nonsticky t fontified t)) . 6810) 6807) nil (25819 38474 152903 975000) 0 nil])
([nil nil ((nil rear-nonsticky nil 7763 . 7764) (#("
" 0 1 (fontified nil)) . -7894) (7743 . 7895) 7742 (t 25819 38474 157453 691000)) nil (25819 38948 682686 448000) 0 nil])
([nil nil ((#(");" 0 2 (fontified t)) . 7741) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . 2) (undo-tree-id193 . -1) (undo-tree-id194 . -2) (undo-tree-id195 . -2)) nil (25819 38948 682683 653000) 0 nil])
([nil nil ((7741 . 7742)) nil (25819 38948 682666 701000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -7924) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (#("n" 0 1 (fontified t)) . -7925) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (#("n" 0 1 (fontified t)) . -7926) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (#("n" 0 1 (fontified t)) . -7927) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (#("n" 0 1 (fontified t)) . -7928) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (#("n" 0 1 (fontified t)) . -7929) (undo-tree-id217 . -1) (undo-tree-id218 . -1) 7930 (7924 . 7930) (t 25819 38948 684126 621000)) nil (25819 38962 371185 593000) 0 nil])
([nil nil ((7891 . 7893)) nil (25819 38962 371173 711000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t)) . 7892) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1)) nil (25819 38962 371170 445000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t)) . 7892) (undo-tree-id230 . 1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . 1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (t 25819 38962 374126 802000)) nil (25819 38973 689720 782000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t)) . 7891) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . 1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1)) nil (25819 38973 689713 819000) 0 nil])
([nil nil ((7117 . 7138) (7129 . 7132) (7149 . 7150) (7194 . 7197) (7218 . 7219) (7230 . 7234) (7267 . 7271) (7323 . 7327) (7328 . 7329) (7348 . 7351) (7407 . 7408) (7427 . 7430) (7459 . 7461) (7483 . 7485) (7544 . 7546) (7568 . 7570) (7573 . 7576) (7597 . 7598) (7669 . 7672) (7689 . 7690) (7692 . 7696) (7724 . 7728) 7891) nil (25819 38973 689695 325000) 0 nil])
([nil nil ((7964 . 7965) (t 25819 38973 694126 957000)) nil (25819 38981 897933 350000) 0 nil])
([nil current ((7117 . 7118)) nil (25819 38981 897928 100000) 0 nil])
nil
