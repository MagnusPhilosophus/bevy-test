(undo-tree-save-format-version . 1)
"e5ef30c98e4acf1ec3fc922449eb09ff022397fb"
[nil nil nil nil (25818 2187 457605 299000) 0 nil]
([nil nil ((#("            visited_cells: 0,
" 0 12 (fontified t) 12 25 (face font-lock-variable-name-face fontified t) 25 30 (fontified t)) . 724) (undo-tree-id91 . -15) (undo-tree-id92 . -15) (undo-tree-id93 . -15) (undo-tree-id94 . -15) (undo-tree-id95 . -15) (undo-tree-id96 . -15) (undo-tree-id97 . -15) (undo-tree-id98 . -15) (undo-tree-id99 . -15) (undo-tree-id100 . -15) (undo-tree-id101 . -30) (undo-tree-id102 . -29) 739 (t 25818 2022 57768 485000)) nil (25818 2187 457603 673000) 0 nil])
([nil nil ((#("    fn has_unvisited(&self) -> bool {
        self.visited_cells < self.width * self.height
    }
" 0 4 (fontified t) 4 6 (face font-lock-keyword-face fontified t) 6 7 (fontified t) 7 20 (face font-lock-function-name-face fontified t) 20 21 (fontified t) 21 22 (face rust-ampersand-face fontified t) 22 26 (face font-lock-keyword-face fontified t) 26 29 (fontified t) 29 30 (syntax-table (1) fontified t) 30 31 (fontified t) 31 35 (face font-lock-type-face fontified t) 35 46 (fontified t) 46 50 (face font-lock-keyword-face fontified t) 50 65 (fontified t) 65 66 (syntax-table (1) fontified t) 66 67 (fontified t) 67 71 (face font-lock-keyword-face fontified t) 71 80 (fontified t) 80 84 (face font-lock-keyword-face fontified t) 84 98 (fontified t)) . 1568) (undo-tree-id75 . -97) (undo-tree-id76 . -15) (undo-tree-id77 . -97) (undo-tree-id78 . -97) (undo-tree-id79 . -15) (undo-tree-id80 . -15) (undo-tree-id81 . -15) (undo-tree-id82 . -15) (undo-tree-id83 . -53) (undo-tree-id84 . -53) (undo-tree-id85 . -92) (undo-tree-id86 . -97) (undo-tree-id87 . -97) (undo-tree-id88 . -97) (undo-tree-id89 . -97) (undo-tree-id90 . -98) 1665) nil (25818 2187 457136 83000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1567) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1)) nil (25818 2187 457124 649000) 0 nil])
([nil nil ((#("    // println!(\"neighbors of (0, 0): {:?}\", grid.check_neighbors(1, 0));
    // println!(\"has unvisited {:?}\", grid.has_unvisited());
    // let neighbors = grid.check_neighbors(0, 0);
    //let neighbor = neighbors.choose(&mut rand::thread_rng()).unwrap();
    //grid.grid[neighbor.0][neighbor.1].visited = true;

    // generate_maze(&mut grid);
" 0 4 (fontified t) 4 7 (face font-lock-comment-delimiter-face fontified t) 7 74 (face font-lock-comment-face fontified t) 74 78 (fontified t) 78 81 (face font-lock-comment-delimiter-face fontified t) 81 135 (face font-lock-comment-face fontified t) 135 139 (fontified t) 139 142 (face font-lock-comment-delimiter-face fontified t) 142 186 (face font-lock-comment-face fontified t) 186 190 (fontified t) 190 192 (face font-lock-comment-delimiter-face fontified t) 192 259 (face font-lock-comment-face fontified t) 259 263 (fontified t) 263 265 (face font-lock-comment-delimiter-face fontified t) 265 315 (face font-lock-comment-face fontified t) 315 320 (fontified t) 320 323 (face font-lock-comment-delimiter-face fontified t) 323 349 (face font-lock-comment-face fontified t)) . 2458) (undo-tree-id13 . -316) (undo-tree-id14 . -316) (undo-tree-id15 . -348) (undo-tree-id16 . -74) (undo-tree-id17 . -74) (undo-tree-id18 . -135) (undo-tree-id19 . -135) (undo-tree-id20 . -186) (undo-tree-id21 . -186) (undo-tree-id22 . -259) (undo-tree-id23 . -259) (undo-tree-id24 . -315) (undo-tree-id25 . -315) (undo-tree-id26 . -316) (undo-tree-id27 . -316) (undo-tree-id28 . -349) (undo-tree-id29 . -349) (undo-tree-id30 . -349) (undo-tree-id31 . -349) (undo-tree-id32 . -316) (undo-tree-id33 . -316) (undo-tree-id34 . -315) (undo-tree-id35 . -315) (undo-tree-id36 . -259) (undo-tree-id37 . -259) (undo-tree-id38 . -186) (undo-tree-id39 . -186) (undo-tree-id40 . -135) (undo-tree-id41 . -135) (undo-tree-id42 . -74) (undo-tree-id43 . -74) (undo-tree-id44 . -74) (undo-tree-id45 . -74) (undo-tree-id46 . -135) (undo-tree-id47 . -135) (undo-tree-id48 . -186) (undo-tree-id49 . -186) (undo-tree-id50 . -259) (undo-tree-id51 . -259) (undo-tree-id52 . -315) (undo-tree-id53 . -315) (undo-tree-id54 . -316) (undo-tree-id55 . -316) (undo-tree-id56 . -316) (undo-tree-id57 . -316) (undo-tree-id58 . -316) (undo-tree-id59 . -349) 2774) nil (25818 2187 457110 341000) 0 nil])
([nil nil ((#("// fn generate_maze(mut grid: &mut Grid) {
//     grid.grid[3][3].visited = true;
// }

" 0 3 (face font-lock-comment-delimiter-face fontified t) 3 43 (face font-lock-comment-face fontified t) 43 47 (face font-lock-comment-delimiter-face fontified t) 47 50 (face font-lock-comment-delimiter-face fontified t) 50 82 (face font-lock-comment-face fontified t) 82 85 (face font-lock-comment-delimiter-face fontified t) 85 87 (face font-lock-comment-face fontified t) 87 88 (fontified t)) . 2487) (undo-tree-id0 . -87) (undo-tree-id1 . -87) (undo-tree-id2 . -87) (undo-tree-id3 . -43) (undo-tree-id4 . -43) (undo-tree-id5 . -82) (undo-tree-id6 . -82) (undo-tree-id7 . -87) (undo-tree-id8 . -87) (undo-tree-id9 . -87) (undo-tree-id10 . -87) (undo-tree-id11 . -87) (undo-tree-id12 . -88) 2574) nil (25818 2187 457077 278000) 0 nil])
([nil nil ((#("    visited_cells: usize,
" 0 4 (fontified t) 4 17 (face font-lock-variable-name-face fontified t) 17 19 (fontified t) 19 24 (face font-lock-type-face fontified t) 24 26 (fontified t)) . 448) (undo-tree-id103 . -25) (undo-tree-id104 . -26) (undo-tree-id105 . -26) (undo-tree-id106 . -26) (t 25818 2187 461102 633000)) nil (25818 2200 447278 248000) 0 nil])
([nil nil ((#("    path_width: usize,
" 0 4 (fontified t) 4 14 (face font-lock-variable-name-face fontified t) 14 16 (fontified t) 16 21 (face font-lock-type-face fontified t) 21 23 (fontified t)) . 448) (undo-tree-id117 . -22) (undo-tree-id118 . -23) (t 25818 2200 451102 704000)) nil (25818 2218 654706 295000) 0 nil])
([nil nil ((#("            path_width,
" 0 24 (fontified t)) . 675) (undo-tree-id115 . -23) (undo-tree-id116 . -24)) nil (25818 2218 654704 84000) 0 nil])
([nil nil ((#(", path_width: usize" 0 2 (fontified t) 2 12 (face font-lock-variable-name-face fontified t) 12 14 (fontified t) 14 19 (face font-lock-type-face fontified t)) . 501) (undo-tree-id113 . -18) (undo-tree-id114 . -19)) nil (25818 2218 654701 948000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . 1591) (undo-tree-id111 . -1) (undo-tree-id112 . -1)) nil (25818 2218 654699 347000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 1591) (undo-tree-id109 . -1) (undo-tree-id110 . -1)) nil (25818 2218 654696 472000) 0 nil])
([nil nil ((#("3" 0 1 (fontified t)) . 1591) (undo-tree-id107 . -1) (undo-tree-id108 . -1)) nil (25818 2218 654690 806000) 0 nil])
([nil nil ((apply -21 2154 2383 undo--wrap-and-run-primitive-undo 2154 2383 ((2372 . 2375) (2345 . 2348) (2318 . 2321) (2301 . 2304) (2230 . 2233) (2197 . 2200) (2162 . 2165) 2356))) nil (25818 2557 978240 411000) 0 nil])
([nil nil ((270 . 274) (#("false" 0 5 (face font-lock-keyword-face fontified t)) . 270) (undo-tree-id244 . -4) (undo-tree-id245 . -5) (undo-tree-id246 . -5)) nil (25818 2557 978239 784000) 0 nil])
([nil nil ((276 . 280) (#("false" 0 5 (face font-lock-keyword-face fontified t)) . 276) (undo-tree-id241 . -4) (undo-tree-id242 . -5) (undo-tree-id243 . -5)) nil (25818 2557 978237 154000) 0 nil])
([nil nil ((282 . 286) (#("false" 0 5 (face font-lock-keyword-face fontified t)) . 282) (undo-tree-id238 . -4) (undo-tree-id239 . -5) (undo-tree-id240 . -5)) nil (25818 2557 978234 314000) 0 nil])
([nil nil ((288 . 292) (#("false" 0 5 (face font-lock-keyword-face fontified t)) . 288) (undo-tree-id235 . -4) (undo-tree-id236 . -5) (undo-tree-id237 . -5)) nil (25818 2557 977846 610000) 0 nil])
([nil nil ((#("	    " 0 5 (fontified t)) . -2039) (undo-tree-id231 . -5) (undo-tree-id232 . -5) (undo-tree-id233 . -5) (undo-tree-id234 . -5) 2044 (2038 . 2044) 2007) nil (25818 2557 977843 955000) 0 nil])
([nil nil ((2060 . 2066) (2055 . 2060) (#("v" 0 1 (face font-lock-comment-face fontified t)) . -2055) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (#("a" 0 1 (face font-lock-comment-face fontified t)) . -2056) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (#("l" 0 1 (face font-lock-comment-face fontified t)) . -2057) (undo-tree-id225 . -1) (undo-tree-id226 . -1) 2058 (2045 . 2058) (2040 . 2045) (#("	    " 0 5 (fontified nil)) . 2039) (undo-tree-id227 . -5) (undo-tree-id228 . -5) (undo-tree-id229 . -5) (undo-tree-id230 . -5) (2044 . 2045) (2038 . 2044) 1966) nil (25818 2557 977839 599000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2074 . 2075) (#("
" 0 1 (fontified nil)) . -2127) (2066 . 2128) 2065) nil (25818 2557 977829 385000) 0 nil])
([nil nil ((#("        " 0 7 (fontified nil) 7 8 (rear-nonsticky t fontified nil)) . -2072) (undo-tree-id208 . -8) (undo-tree-id209 . -8) (undo-tree-id210 . -8) (undo-tree-id211 . -8) (undo-tree-id212 . -8) (undo-tree-id213 . -8) (undo-tree-id214 . -8) (undo-tree-id215 . -8) (undo-tree-id216 . -8) (2067 . 2072) 2075) nil (25818 2557 977828 91000) 0 nil])
([nil nil ((#("	    
" 0 5 (fontified t) 5 6 (fontified t)) . 2061) (undo-tree-id189 . -5) (undo-tree-id190 . -5) (undo-tree-id191 . -5) (undo-tree-id192 . -4) (undo-tree-id193 . -4) (undo-tree-id194 . -4) (undo-tree-id195 . -4) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -6) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -6) 2062) nil (25818 2557 977821 762000) 0 nil])
([nil nil ((2084 . 2085)) nil (25818 2557 977808 982000) 0 nil])
([nil nil ((2094 . 2105) (2092 . 2094)) nil (25818 2557 977808 369000) 0 nil])
([nil nil ((2107 . 2119) (2105 . 2107)) nil (25818 2557 977807 648000) 0 nil])
([nil nil ((2121 . 2122)) nil (25818 2557 977806 971000) 0 nil])
([nil nil ((2152 . 2155) (2148 . 2152) (2143 . 2148) (#("Wa" 0 2 (face font-lock-type-face fontified t)) . -2143) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -2) (undo-tree-id174 . -2) (undo-tree-id175 . -2) (undo-tree-id176 . -2) (undo-tree-id177 . -2) (undo-tree-id178 . -2) 2145 (2141 . 2145) (#(":" 0 1 (fontified t)) . -2141) (undo-tree-id179 . -1) (undo-tree-id180 . -1) 2142 (2135 . 2142) (2130 . 2135) (#("Wa" 0 2 (face font-lock-type-face fontified t)) . -2130) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -2) (undo-tree-id184 . -2) (undo-tree-id185 . -2) (undo-tree-id186 . -2) (undo-tree-id187 . -2) (undo-tree-id188 . -2) 2132 (2128 . 2132)) nil (25818 2557 977805 309000) 0 nil])
([nil nil ((2157 . 2158)) nil (25818 2557 977791 261000) 0 nil])
([nil nil ((2187 . 2195) (2182 . 2187) (#("Wal" 0 3 (face font-lock-type-face fontified t)) . -2182) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -2) (undo-tree-id156 . -2) (undo-tree-id157 . -3) (undo-tree-id158 . -3) (undo-tree-id159 . -3) (undo-tree-id160 . -3) (undo-tree-id161 . -3) (undo-tree-id162 . -3) 2185 (2179 . 2185) (2174 . 2179) (#("N" 0 1 (face font-lock-type-face fontified t)) . -2174) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) 2175 (2174 . 2175) (#("n" 0 1 (fontified t)) . -2174) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) 2175 (2174 . 2175) (2165 . 2174)) nil (25818 2557 977789 314000) 0 nil])
([nil nil ((2197 . 2198)) nil (25818 2557 977776 471000) 0 nil])
([nil nil ((2232 . 2233) (2227 . 2232) (#("Nor" 0 3 (face font-lock-type-face fontified t)) . -2227) (undo-tree-id125 . -3) (undo-tree-id126 . -2) (undo-tree-id127 . -3) (undo-tree-id128 . -3) 2230 (2225 . 2230) (2220 . 2225) (#("Wa" 0 2 (face font-lock-type-face fontified t)) . -2220) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -2) (undo-tree-id132 . -2) (undo-tree-id133 . -2) (undo-tree-id134 . -2) (undo-tree-id135 . -2) (undo-tree-id136 . -2) 2222 (2218 . 2222) (2213 . 2218) (#("So" 0 2 (face font-lock-type-face fontified t)) . -2213) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -2) (undo-tree-id142 . -2) (undo-tree-id143 . -2) (undo-tree-id144 . -2) (undo-tree-id145 . -2) (undo-tree-id146 . -2) 2215 (2211 . 2215) (2206 . 2211) (#("W" 0 1 (face font-lock-type-face fontified t)) . -2206) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) 2207 (2204 . 2207)) nil (25818 2557 977772 930000) 0 nil])
([nil nil ((2040 . 2046) (#("	" 0 1 (fontified t)) . 2040) (2045 . 2047) (2061 . 2064) (#("	" 0 1 (fontified t)) . 2061) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (2066 . 2071) (2084 . 2101) (2120 . 2134) (2121 . 2123) (2156 . 2167) (2157 . 2162) (#(" " 0 1 (fontified t)) . 2180) (2196 . 2202) (2197 . 2207) (2233 . 2247) 2232) nil (25818 2557 977276 891000) 0 nil])
([nil nil ((2358 . 2364) (#("i" 0 1 (fontified t)) . -2358) (undo-tree-id1115 . -1) (2353 . 2359) (#("i" 0 1 (fontified t)) . -2353) (undo-tree-id1116 . -1) (2348 . 2354) (#("i" 0 1 (fontified t)) . -2348) (undo-tree-id1117 . -1) (2347 . 2349) (#("s" 0 1 (face font-lock-variable-name-face fontified t)) . -2347) (undo-tree-id1118 . -1) (undo-tree-id1119 . -1) (undo-tree-id1120 . -1) (undo-tree-id1121 . -1) 2348 (2338 . 2348) (#("dir" 0 3 (face font-lock-variable-name-face fontified t)) . -2338) (undo-tree-id1122 . -1) (undo-tree-id1123 . -1) (undo-tree-id1124 . -3) (undo-tree-id1125 . -3) (undo-tree-id1126 . -3) (undo-tree-id1127 . -3) (undo-tree-id1128 . -3) (undo-tree-id1129 . -3) 2341 (2339 . 2341) (#("i" 0 1 (face font-lock-variable-name-face fontified t)) . -2339) (undo-tree-id1130 . -1) (2334 . 2340) (2329 . 2334) (#("	    " 0 5 (fontified nil)) . 2328) (undo-tree-id1131 . -5) (undo-tree-id1132 . -5) (undo-tree-id1133 . -5) (undo-tree-id1134 . -5) (2333 . 2334) (2327 . 2333) (t 25818 2557 981104 468000) 2326) nil (25818 2733 834915 825000) 0 nil])
([nil nil ((#("&" 0 1 (face rust-ampersand-face fontified t)) . 2351) (undo-tree-id1113 . -1) (undo-tree-id1114 . -1)) nil (25818 2733 834898 608000) 0 nil])
([nil nil ((#("	" 0 1 (fontified nil)) . -2402) (2402 . 2403) (#("	" 0 1 (fontified nil)) . 2402) (undo-tree-id1095 . -1) (undo-tree-id1096 . -1) (undo-tree-id1097 . -1) (undo-tree-id1098 . -1) (2398 . 2402) (2399 . 2400) (2396 . 2399) (#("    " 0 4 (fontified nil)) . -2395) (undo-tree-id1099 . -4) (undo-tree-id1100 . -4) (undo-tree-id1101 . -4) (undo-tree-id1102 . -4) (2399 . 2400) (2392 . 2399) (2390 . 2392) (2387 . 2390) (#("i" 0 1 (fontified t)) . -2387) (undo-tree-id1103 . -1) (2382 . 2388) (#("i" 0 1 (fontified t)) . -2382) (undo-tree-id1104 . -1) (2377 . 2383) (2374 . 2377) (#("o" 0 1 (fontified t)) . -2374) (undo-tree-id1105 . -1) (undo-tree-id1106 . -1) (undo-tree-id1107 . -1) (undo-tree-id1108 . -1) (#("r" 0 1 (fontified t)) . -2375) (undo-tree-id1109 . -1) (undo-tree-id1110 . -1) 2376 (2371 . 2376) (#("i" 0 1 (fontified t)) . -2371) (undo-tree-id1111 . -1) (2366 . 2372) (#("i" 0 1 (fontified t)) . -2366) (undo-tree-id1112 . -1) (2363 . 2367) 2351) nil (25818 2733 834894 726000) 0 nil])
([nil nil ((2411 . 2418) (2399 . 2411) (#("curr" 0 4 (fontified t)) . -2399) (undo-tree-id1085 . -1) (undo-tree-id1086 . -1) (undo-tree-id1087 . -2) (undo-tree-id1088 . -2) (undo-tree-id1089 . -3) (undo-tree-id1090 . -3) (undo-tree-id1091 . -4) (undo-tree-id1092 . -4) (undo-tree-id1093 . -4) (undo-tree-id1094 . -4) 2403 (2399 . 2403) (2392 . 2399) 2365) nil (25818 2733 834878 58000) 0 nil])
([nil nil ((2390 . 2391)) nil (25818 2733 834869 482000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -2361) (undo-tree-id658 . -1) (undo-tree-id659 . -1) (undo-tree-id660 . -1) (undo-tree-id661 . -1) (undo-tree-id662 . -1) (undo-tree-id663 . -1) (undo-tree-id664 . -1) (undo-tree-id665 . -1) (undo-tree-id666 . -1) (undo-tree-id667 . -1) (undo-tree-id668 . -1) (undo-tree-id669 . -1) (undo-tree-id670 . -1) (undo-tree-id671 . -1) (undo-tree-id672 . -1) (undo-tree-id673 . -1) (undo-tree-id674 . -1) (undo-tree-id675 . -1) (undo-tree-id676 . -1) (undo-tree-id677 . -1) (undo-tree-id678 . -1) (undo-tree-id679 . -1) (undo-tree-id680 . -1) (undo-tree-id681 . -1) (undo-tree-id682 . -1) (undo-tree-id683 . -1) (undo-tree-id684 . -1) (undo-tree-id685 . -1) (undo-tree-id686 . -1) (undo-tree-id687 . -1) (undo-tree-id688 . -1) (undo-tree-id689 . -1) (undo-tree-id690 . -1) (undo-tree-id691 . -1) (undo-tree-id692 . -1) (#("i" 0 1 (fontified t)) . -2362) (undo-tree-id693 . -1) (undo-tree-id694 . -1) (undo-tree-id695 . -1) (undo-tree-id696 . -1) (undo-tree-id697 . -1) (undo-tree-id698 . -1) (undo-tree-id699 . -1) (undo-tree-id700 . -1) (undo-tree-id701 . -1) (undo-tree-id702 . -1) (undo-tree-id703 . -1) (undo-tree-id704 . -1) (undo-tree-id705 . -1) (undo-tree-id706 . -1) (undo-tree-id707 . -1) (undo-tree-id708 . -1) (undo-tree-id709 . -1) (undo-tree-id710 . -1) (undo-tree-id711 . -1) (undo-tree-id712 . -1) (undo-tree-id713 . -1) (undo-tree-id714 . -1) (undo-tree-id715 . -1) (undo-tree-id716 . -1) (undo-tree-id717 . -1) (undo-tree-id718 . -1) (undo-tree-id719 . -1) (undo-tree-id720 . -1) (undo-tree-id721 . -1) (undo-tree-id722 . -1) (undo-tree-id723 . -1) (undo-tree-id724 . -1) (undo-tree-id725 . -1) (undo-tree-id726 . -1) (undo-tree-id727 . -1) (#("t" 0 1 (fontified t)) . -2363) (undo-tree-id728 . -1) (undo-tree-id729 . -1) (undo-tree-id730 . -1) (undo-tree-id731 . -1) (undo-tree-id732 . -1) (undo-tree-id733 . -1) (undo-tree-id734 . -1) (undo-tree-id735 . -1) (undo-tree-id736 . -1) (undo-tree-id737 . -1) (undo-tree-id738 . -1) (undo-tree-id739 . -1) (undo-tree-id740 . -1) (undo-tree-id741 . -1) (undo-tree-id742 . -1) (undo-tree-id743 . -1) (undo-tree-id744 . -1) (undo-tree-id745 . -1) (undo-tree-id746 . -1) (undo-tree-id747 . -1) (undo-tree-id748 . -1) (undo-tree-id749 . -1) (undo-tree-id750 . -1) (undo-tree-id751 . -1) (undo-tree-id752 . -1) (undo-tree-id753 . -1) (undo-tree-id754 . -1) (undo-tree-id755 . -1) (undo-tree-id756 . -1) (undo-tree-id757 . -1) (undo-tree-id758 . -1) (undo-tree-id759 . -1) (undo-tree-id760 . -1) (undo-tree-id761 . -1) (undo-tree-id762 . -1) (#("e" 0 1 (fontified t)) . -2364) (undo-tree-id763 . -1) (undo-tree-id764 . -1) (undo-tree-id765 . -1) (undo-tree-id766 . -1) (undo-tree-id767 . -1) (undo-tree-id768 . -1) (undo-tree-id769 . -1) (undo-tree-id770 . -1) (undo-tree-id771 . -1) (undo-tree-id772 . -1) (undo-tree-id773 . -1) (undo-tree-id774 . -1) (undo-tree-id775 . -1) (undo-tree-id776 . -1) (undo-tree-id777 . -1) (undo-tree-id778 . -1) (undo-tree-id779 . -1) (undo-tree-id780 . -1) (undo-tree-id781 . -1) (undo-tree-id782 . -1) (undo-tree-id783 . -1) (undo-tree-id784 . -1) (undo-tree-id785 . -1) (undo-tree-id786 . -1) (undo-tree-id787 . -1) (undo-tree-id788 . -1) (undo-tree-id789 . -1) (undo-tree-id790 . -1) (undo-tree-id791 . -1) (undo-tree-id792 . -1) (undo-tree-id793 . -1) (undo-tree-id794 . -1) (undo-tree-id795 . -1) (#("r" 0 1 (fontified t)) . -2365) (undo-tree-id796 . -1) (undo-tree-id797 . -1) (undo-tree-id798 . -1) (undo-tree-id799 . -1) (undo-tree-id800 . -1) (undo-tree-id801 . -1) (undo-tree-id802 . -1) (undo-tree-id803 . -1) (undo-tree-id804 . -1) (undo-tree-id805 . -1) (undo-tree-id806 . -1) (undo-tree-id807 . -1) (undo-tree-id808 . -1) (undo-tree-id809 . -1) (undo-tree-id810 . -1) (undo-tree-id811 . -1) (undo-tree-id812 . -1) (undo-tree-id813 . -1) (undo-tree-id814 . -1) (undo-tree-id815 . -1) (undo-tree-id816 . -1) (undo-tree-id817 . -1) (undo-tree-id818 . -1) (undo-tree-id819 . -1) (undo-tree-id820 . -1) (undo-tree-id821 . -1) (undo-tree-id822 . -1) (undo-tree-id823 . -1) (undo-tree-id824 . -1) (undo-tree-id825 . -1) (undo-tree-id826 . -1) (undo-tree-id827 . -1) (#("(" 0 1 (fontified t)) . -2366) (undo-tree-id828 . -1) (undo-tree-id829 . -1) (undo-tree-id830 . -1) (undo-tree-id831 . -1) (undo-tree-id832 . -1) (undo-tree-id833 . -1) (undo-tree-id834 . -1) (undo-tree-id835 . -1) (undo-tree-id836 . -1) (undo-tree-id837 . -1) (undo-tree-id838 . -1) (undo-tree-id839 . -1) (undo-tree-id840 . -1) (undo-tree-id841 . -1) (undo-tree-id842 . -1) (undo-tree-id843 . -1) (undo-tree-id844 . -1) (undo-tree-id845 . -1) (undo-tree-id846 . -1) (undo-tree-id847 . -1) (undo-tree-id848 . -1) (undo-tree-id849 . -1) (undo-tree-id850 . -1) (undo-tree-id851 . -1) (undo-tree-id852 . -1) (undo-tree-id853 . -1) (undo-tree-id854 . -1) (undo-tree-id855 . -1) (#(")" 0 1 (fontified t)) . -2367) (undo-tree-id856 . -1) (undo-tree-id857 . -1) (undo-tree-id858 . -1) (undo-tree-id859 . -1) (undo-tree-id860 . -1) (undo-tree-id861 . -1) (undo-tree-id862 . -1) (undo-tree-id863 . -1) (undo-tree-id864 . -1) (undo-tree-id865 . -1) (undo-tree-id866 . -1) (undo-tree-id867 . -1) (undo-tree-id868 . -1) (undo-tree-id869 . -1) (undo-tree-id870 . -1) (undo-tree-id871 . -1) (undo-tree-id872 . -1) (undo-tree-id873 . -1) (undo-tree-id874 . -1) (undo-tree-id875 . -1) (undo-tree-id876 . -1) (undo-tree-id877 . -1) (undo-tree-id878 . -1) (undo-tree-id879 . -1) (undo-tree-id880 . -1) (undo-tree-id881 . -1) (undo-tree-id882 . -1) (undo-tree-id883 . -1) (#("." 0 1 (fontified t)) . -2368) (undo-tree-id884 . -1) (undo-tree-id885 . -1) (undo-tree-id886 . -1) (undo-tree-id887 . -1) (undo-tree-id888 . -1) (undo-tree-id889 . -1) (undo-tree-id890 . -1) (undo-tree-id891 . -1) (undo-tree-id892 . -1) (undo-tree-id893 . -1) (undo-tree-id894 . -1) (undo-tree-id895 . -1) (undo-tree-id896 . -1) (undo-tree-id897 . -1) (undo-tree-id898 . -1) (undo-tree-id899 . -1) (undo-tree-id900 . -1) (undo-tree-id901 . -1) (undo-tree-id902 . -1) (undo-tree-id903 . -1) (undo-tree-id904 . -1) (undo-tree-id905 . -1) (undo-tree-id906 . -1) (undo-tree-id907 . -1) (undo-tree-id908 . -1) (undo-tree-id909 . -1) (#("e" 0 1 (fontified t)) . -2369) (undo-tree-id910 . -1) (undo-tree-id911 . -1) (undo-tree-id912 . -1) (undo-tree-id913 . -1) (undo-tree-id914 . -1) (undo-tree-id915 . -1) (undo-tree-id916 . -1) (undo-tree-id917 . -1) (undo-tree-id918 . -1) (undo-tree-id919 . -1) (undo-tree-id920 . -1) (undo-tree-id921 . -1) (undo-tree-id922 . -1) (undo-tree-id923 . -1) (undo-tree-id924 . -1) (undo-tree-id925 . -1) (undo-tree-id926 . -1) (undo-tree-id927 . -1) (undo-tree-id928 . -1) (undo-tree-id929 . -1) (undo-tree-id930 . -1) (undo-tree-id931 . -1) (undo-tree-id932 . -1) (undo-tree-id933 . -1) (undo-tree-id934 . -1) (undo-tree-id935 . -1) (#("n" 0 1 (fontified t)) . -2370) (undo-tree-id936 . -1) (undo-tree-id937 . -1) (undo-tree-id938 . -1) (undo-tree-id939 . -1) (undo-tree-id940 . -1) (undo-tree-id941 . -1) (undo-tree-id942 . -1) (undo-tree-id943 . -1) (undo-tree-id944 . -1) (undo-tree-id945 . -1) (undo-tree-id946 . -1) (undo-tree-id947 . -1) (undo-tree-id948 . -1) (undo-tree-id949 . -1) (undo-tree-id950 . -1) (undo-tree-id951 . -1) (undo-tree-id952 . -1) (undo-tree-id953 . -1) (undo-tree-id954 . -1) (undo-tree-id955 . -1) (undo-tree-id956 . -1) (undo-tree-id957 . -1) (undo-tree-id958 . -1) (undo-tree-id959 . -1) (#("u" 0 1 (fontified t)) . -2371) (undo-tree-id960 . -1) (undo-tree-id961 . -1) (undo-tree-id962 . -1) (undo-tree-id963 . -1) (undo-tree-id964 . -1) (undo-tree-id965 . -1) (undo-tree-id966 . -1) (undo-tree-id967 . -1) (undo-tree-id968 . -1) (undo-tree-id969 . -1) (undo-tree-id970 . -1) (undo-tree-id971 . -1) (undo-tree-id972 . -1) (undo-tree-id973 . -1) (undo-tree-id974 . -1) (undo-tree-id975 . -1) (undo-tree-id976 . -1) (undo-tree-id977 . -1) (undo-tree-id978 . -1) (undo-tree-id979 . -1) (undo-tree-id980 . -1) (undo-tree-id981 . -1) (#("m" 0 1 (face font-lock-keyword-face fontified t)) . -2372) (undo-tree-id982 . -1) (undo-tree-id983 . -1) (undo-tree-id984 . -1) (undo-tree-id985 . -1) (undo-tree-id986 . -1) (undo-tree-id987 . -1) (undo-tree-id988 . -1) (undo-tree-id989 . -1) (undo-tree-id990 . -1) (undo-tree-id991 . -1) (undo-tree-id992 . -1) (undo-tree-id993 . -1) (undo-tree-id994 . -1) (undo-tree-id995 . -1) (undo-tree-id996 . -1) (undo-tree-id997 . -1) (undo-tree-id998 . -1) (undo-tree-id999 . -1) (undo-tree-id1000 . -1) (undo-tree-id1001 . -1) (#("e" 0 1 (fontified t)) . -2373) (undo-tree-id1002 . -1) (undo-tree-id1003 . -1) (undo-tree-id1004 . -1) (undo-tree-id1005 . -1) (undo-tree-id1006 . -1) (undo-tree-id1007 . -1) (undo-tree-id1008 . -1) (undo-tree-id1009 . -1) (undo-tree-id1010 . -1) (undo-tree-id1011 . -1) (undo-tree-id1012 . -1) (undo-tree-id1013 . -1) (undo-tree-id1014 . -1) (undo-tree-id1015 . -1) (undo-tree-id1016 . -1) (undo-tree-id1017 . -1) (undo-tree-id1018 . -1) (undo-tree-id1019 . -1) (#("r" 0 1 (fontified t)) . -2374) (undo-tree-id1020 . -1) (undo-tree-id1021 . -1) (undo-tree-id1022 . -1) (undo-tree-id1023 . -1) (undo-tree-id1024 . -1) (undo-tree-id1025 . -1) (undo-tree-id1026 . -1) (undo-tree-id1027 . -1) (undo-tree-id1028 . -1) (undo-tree-id1029 . -1) (undo-tree-id1030 . -1) (undo-tree-id1031 . -1) (undo-tree-id1032 . -1) (undo-tree-id1033 . -1) (undo-tree-id1034 . -1) (undo-tree-id1035 . -1) (#("a" 0 1 (fontified t)) . -2375) (undo-tree-id1036 . -1) (undo-tree-id1037 . -1) (undo-tree-id1038 . -1) (undo-tree-id1039 . -1) (undo-tree-id1040 . -1) (undo-tree-id1041 . -1) (undo-tree-id1042 . -1) (undo-tree-id1043 . -1) (undo-tree-id1044 . -1) (undo-tree-id1045 . -1) (undo-tree-id1046 . -1) (undo-tree-id1047 . -1) (undo-tree-id1048 . -1) (undo-tree-id1049 . -1) (#("t" 0 1 (fontified t)) . -2376) (undo-tree-id1050 . -1) (undo-tree-id1051 . -1) (undo-tree-id1052 . -1) (undo-tree-id1053 . -1) (undo-tree-id1054 . -1) (undo-tree-id1055 . -1) (undo-tree-id1056 . -1) (undo-tree-id1057 . -1) (undo-tree-id1058 . -1) (undo-tree-id1059 . -1) (undo-tree-id1060 . -1) (undo-tree-id1061 . -1) (#("e" 0 1 (fontified t)) . -2377) (undo-tree-id1062 . -1) (undo-tree-id1063 . -1) (undo-tree-id1064 . -1) (undo-tree-id1065 . -1) (undo-tree-id1066 . -1) (undo-tree-id1067 . -1) (undo-tree-id1068 . -1) (undo-tree-id1069 . -1) (undo-tree-id1070 . -1) (undo-tree-id1071 . -1) (#("(" 0 1 (fontified t)) . -2378) (undo-tree-id1072 . -1) (undo-tree-id1073 . -1) (undo-tree-id1074 . -1) (undo-tree-id1075 . -1) (undo-tree-id1076 . -1) (undo-tree-id1077 . -1) (#(")" 0 1 (fontified t)) . -2379) (undo-tree-id1078 . -1) (undo-tree-id1079 . -1) (undo-tree-id1080 . -1) (undo-tree-id1081 . -1) (undo-tree-id1082 . -1) (undo-tree-id1083 . -1) 2380 (2362 . 2380) (#("i" 0 1 (fontified t)) . -2362) (undo-tree-id1084 . -1) (2361 . 2363)) nil (25818 2733 834854 752000) 0 nil])
([nil nil ((2391 . 2392)) nil (25818 2733 834569 575000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -2448) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (#("e" 0 1 (fontified t)) . -2449) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (#("i" 0 1 (fontified t)) . -2450) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (#("g" 0 1 (fontified t)) . -2451) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (undo-tree-id486 . -1) (#("h" 0 1 (fontified t)) . -2452) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (#("b" 0 1 (fontified t)) . -2453) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (undo-tree-id526 . -1) (#("o" 0 1 (fontified t)) . -2454) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (undo-tree-id535 . -1) (undo-tree-id536 . -1) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (undo-tree-id539 . -1) (undo-tree-id540 . -1) (undo-tree-id541 . -1) (undo-tree-id542 . -1) (undo-tree-id543 . -1) (undo-tree-id544 . -1) (undo-tree-id545 . -1) (undo-tree-id546 . -1) (#("r" 0 1 (fontified t)) . -2455) (undo-tree-id547 . -1) (undo-tree-id548 . -1) (undo-tree-id549 . -1) (undo-tree-id550 . -1) (undo-tree-id551 . -1) (undo-tree-id552 . -1) (undo-tree-id553 . -1) (undo-tree-id554 . -1) (undo-tree-id555 . -1) (undo-tree-id556 . -1) (undo-tree-id557 . -1) (undo-tree-id558 . -1) (undo-tree-id559 . -1) (undo-tree-id560 . -1) (undo-tree-id561 . -1) (undo-tree-id562 . -1) (undo-tree-id563 . -1) (undo-tree-id564 . -1) (undo-tree-id565 . -1) (undo-tree-id566 . -1) (#("." 0 1 (fontified t)) . -2456) (undo-tree-id567 . -1) (undo-tree-id568 . -1) (undo-tree-id569 . -1) (undo-tree-id570 . -1) (undo-tree-id571 . -1) (undo-tree-id572 . -1) (undo-tree-id573 . -1) (undo-tree-id574 . -1) (undo-tree-id575 . -1) (undo-tree-id576 . -1) (undo-tree-id577 . -1) (undo-tree-id578 . -1) (undo-tree-id579 . -1) (undo-tree-id580 . -1) (undo-tree-id581 . -1) (undo-tree-id582 . -1) (#("w" 0 1 (fontified t)) . -2457) (undo-tree-id583 . -1) (undo-tree-id584 . -1) (undo-tree-id585 . -1) (undo-tree-id586 . -1) (undo-tree-id587 . -1) (undo-tree-id588 . -1) (undo-tree-id589 . -1) (undo-tree-id590 . -1) (undo-tree-id591 . -1) (undo-tree-id592 . -1) (undo-tree-id593 . -1) (undo-tree-id594 . -1) (undo-tree-id595 . -1) (undo-tree-id596 . -1) (undo-tree-id597 . -1) (undo-tree-id598 . -1) (#("a" 0 1 (fontified t)) . -2458) (undo-tree-id599 . -1) (undo-tree-id600 . -1) (undo-tree-id601 . -1) (undo-tree-id602 . -1) (undo-tree-id603 . -1) (undo-tree-id604 . -1) (undo-tree-id605 . -1) (undo-tree-id606 . -1) (undo-tree-id607 . -1) (undo-tree-id608 . -1) (undo-tree-id609 . -1) (undo-tree-id610 . -1) (undo-tree-id611 . -1) (undo-tree-id612 . -1) (#("l" 0 1 (fontified t)) . -2459) (undo-tree-id613 . -1) (undo-tree-id614 . -1) (undo-tree-id615 . -1) (undo-tree-id616 . -1) (undo-tree-id617 . -1) (undo-tree-id618 . -1) (undo-tree-id619 . -1) (undo-tree-id620 . -1) (undo-tree-id621 . -1) (undo-tree-id622 . -1) (undo-tree-id623 . -1) (undo-tree-id624 . -1) (#("l" 0 1 (fontified t)) . -2460) (undo-tree-id625 . -1) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (undo-tree-id628 . -1) (undo-tree-id629 . -1) (undo-tree-id630 . -1) (undo-tree-id631 . -1) (undo-tree-id632 . -1) (undo-tree-id633 . -1) (undo-tree-id634 . -1) (#("s" 0 1 (fontified t)) . -2461) (undo-tree-id635 . -1) (undo-tree-id636 . -1) (undo-tree-id637 . -1) (undo-tree-id638 . -1) (undo-tree-id639 . -1) (undo-tree-id640 . -1) (undo-tree-id641 . -1) (undo-tree-id642 . -1) 2462 (2456 . 2462) (2448 . 2456) (#("neigh" 0 5 (fontified t)) . -2448) (undo-tree-id643 . -1) (undo-tree-id644 . -1) (undo-tree-id645 . -2) (undo-tree-id646 . -2) (undo-tree-id647 . -4) (undo-tree-id648 . -4) (undo-tree-id649 . -5) (undo-tree-id650 . -5) (undo-tree-id651 . -5) (undo-tree-id652 . -5) (undo-tree-id653 . -5) (undo-tree-id654 . -5) 2453 (2450 . 2453) (#("i" 0 1 (fontified t)) . -2450) (undo-tree-id655 . -1) (2448 . 2451) (2441 . 2448) (2426 . 2441) (#("i" 0 1 (fontified t)) . -2426) (undo-tree-id656 . -1) (2421 . 2427) (#("i" 0 1 (fontified t)) . -2421) (undo-tree-id657 . -1) (2420 . 2422)) nil (25818 2733 834559 560000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2453 . 2454) (#("
" 0 1 (fontified nil)) . -2503) (2441 . 2504) 2400) nil (25818 2733 833797 659000) 0 nil])
([nil nil ((#("		    
" 0 6 (fontified t) 6 7 (fontified t)) . 2504) (undo-tree-id359 . -6) (undo-tree-id360 . 1) (undo-tree-id361 . 1) (undo-tree-id362 . -6) (undo-tree-id363 . -6) (undo-tree-id364 . -6) (undo-tree-id365 . -6) (undo-tree-id366 . -6) (undo-tree-id367 . -6) (undo-tree-id368 . -6) (undo-tree-id369 . -6) (undo-tree-id370 . -6) (undo-tree-id371 . -6) (undo-tree-id372 . -6) (undo-tree-id373 . -6) (undo-tree-id374 . -6) (undo-tree-id375 . -6) (undo-tree-id376 . -6) (undo-tree-id377 . -6) (undo-tree-id378 . -6) (undo-tree-id379 . -6) (undo-tree-id380 . -6) (undo-tree-id381 . -6) (undo-tree-id382 . -6) (undo-tree-id383 . -6) (undo-tree-id384 . -6) (undo-tree-id385 . -6) (undo-tree-id386 . -6) (undo-tree-id387 . -6) (undo-tree-id388 . -6) (undo-tree-id389 . -6) (undo-tree-id390 . -6) (undo-tree-id391 . -6) (undo-tree-id392 . -5) (undo-tree-id393 . -5) (undo-tree-id394 . -5) (undo-tree-id395 . -5) (undo-tree-id396 . -5) (undo-tree-id397 . -5) (undo-tree-id398 . -5) (undo-tree-id399 . -5) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (undo-tree-id406 . -7) 2505) nil (25818 2733 833795 259000) 0 nil])
([nil nil ((#("            " 0 11 (fontified nil) 11 12 (rear-nonsticky t fontified nil)) . -2444) (undo-tree-id348 . -12) (undo-tree-id349 . -12) (undo-tree-id350 . -8) (undo-tree-id351 . -8) (undo-tree-id352 . -8) (undo-tree-id353 . -8) (undo-tree-id354 . -8) (undo-tree-id355 . -8) (undo-tree-id356 . -8) (undo-tree-id357 . -8) (undo-tree-id358 . -8) (2442 . 2444) 2450) nil (25818 2733 833763 553000) 0 nil])
([nil nil ((#("		" 0 2 (fontified nil)) . -2448) (undo-tree-id331 . -2) (undo-tree-id332 . -2) (undo-tree-id333 . -2) (undo-tree-id334 . -2) (undo-tree-id335 . -2) (undo-tree-id336 . -2) (undo-tree-id337 . -2) (undo-tree-id338 . -2) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (2442 . 2448) 2443) nil (25818 2733 833755 876000) 0 nil])
([nil nil ((2482 . 2487) (#("visited" 0 7 (fontified t)) . 2482) (undo-tree-id328 . -6) (undo-tree-id329 . -7) (undo-tree-id330 . -7)) nil (25818 2733 833745 128000) 0 nil])
([nil nil ((#(" = true;" 0 3 (fontified t) 3 7 (face font-lock-keyword-face fontified t) 7 8 (fontified t)) . 2487) (undo-tree-id323 . -8) (undo-tree-id324 . -7) (undo-tree-id325 . 8) (undo-tree-id326 . -8) (undo-tree-id327 . -8)) nil (25818 2733 833741 903000) 0 nil])
([nil nil ((2408 . 2411) (#("i" 0 1 (fontified t)) . -2408) (undo-tree-id318 . -1) (2407 . 2409) (2403 . 2407) (#("i" 0 1 (fontified t)) . -2403) (undo-tree-id319 . -1) (2401 . 2404) (#("current" 0 7 (fontified t)) . 2401) (undo-tree-id320 . -6) (undo-tree-id321 . -7) (undo-tree-id322 . -7)) nil (25818 2733 833738 163000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . 2411) (undo-tree-id315 . 1) (undo-tree-id316 . -1) (undo-tree-id317 . -1)) nil (25818 2733 833733 860000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t)) . 2411) (undo-tree-id312 . 1) (undo-tree-id313 . -1) (undo-tree-id314 . -1)) nil (25818 2733 833731 210000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . 2411) (undo-tree-id309 . 1) (undo-tree-id310 . -1) (undo-tree-id311 . -1)) nil (25818 2733 833728 761000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . 2411) (undo-tree-id306 . 1) (undo-tree-id307 . -1) (undo-tree-id308 . -1)) nil (25818 2733 833726 37000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . 2411) (undo-tree-id299 . 1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1)) nil (25818 2733 833722 428000) 0 nil])
([nil nil ((2439 . 2442) (2427 . 2439) (#("cur" 0 3 (fontified t)) . -2427) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -2) (undo-tree-id284 . -2) (undo-tree-id285 . -3) (undo-tree-id286 . -3) (undo-tree-id287 . -3) (undo-tree-id288 . -3) 2430 (2429 . 2430) (2423 . 2429) (2411 . 2423) (#("cur" 0 3 (fontified t)) . -2411) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -2) (undo-tree-id292 . -2) (undo-tree-id293 . -3) (undo-tree-id294 . -3) (undo-tree-id295 . -3) (undo-tree-id296 . -3) (undo-tree-id297 . -3) (undo-tree-id298 . -3) 2414 (2411 . 2414)) nil (25818 2733 833716 213000) 0 nil])
([nil nil ((2531 . 2538) (2526 . 2531) (2517 . 2526) (#("dire" 0 4 (fontified t)) . -2517) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -3) (undo-tree-id273 . -3) (undo-tree-id274 . -4) (undo-tree-id275 . -4) (undo-tree-id276 . -4) (undo-tree-id277 . -4) (undo-tree-id278 . -4) (undo-tree-id279 . -4) 2521 (2518 . 2521) (#("i" 0 1 (fontified t)) . -2518) (undo-tree-id280 . -1) (2516 . 2519)) nil (25818 2733 833702 193000) 0 nil])
([nil nil ((2329 . 2334) (#("	" 0 1 (fontified t)) . 2329) (2334 . 2337) (2364 . 2380) (#("		" 0 2 (fontified t)) . 2364) (undo-tree-id247 . -2) (undo-tree-id248 . -2) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (2395 . 2411) (#("		" 0 2 (fontified t)) . 2395) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (2471 . 2481) (#("		" 0 2 (fontified t)) . 2471) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (2477 . 2483) (2539 . 2555) (#("		" 0 2 (fontified t)) . 2539) (undo-tree-id257 . 2) (undo-tree-id258 . -2) (undo-tree-id259 . -2) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -2) (undo-tree-id265 . -2) (undo-tree-id266 . -2) (undo-tree-id267 . -2) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (2543 . 2551) (#("	" 0 1 (fontified t)) . 2543) 2537) nil (25818 2898 79058 345000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2130 . 2131) (nil fontified nil 2096 . 2131) (2096 . 2131) (2094 . 2096)) nil (25818 2943 467402 707000) 0 nil] [nil nil ((2112 . 2127) (2108 . 2112) (#("i" 0 1 (fontified t)) . -2108) (undo-tree-id1135 . -1) (2106 . 2109) (#("i" 0 1 (fontified t)) . -2106) (undo-tree-id1136 . -1) (2101 . 2107) (#("i" 0 1 (fontified t)) . -2101) (undo-tree-id1137 . -1) (2099 . 2102) (#("i" 0 1 (fontified t)) . -2099) (undo-tree-id1138 . -1) (2094 . 2100) (t 25818 2733 837771 987000)) ((#(": [((i" 0 5 (fontified nil) 5 6 (fontified nil)) . 2094) (undo-tree-id1139 . -5) (undo-tree-id1140 . -5) (undo-tree-id1141 . -5) (undo-tree-id1142 . -5) (undo-tree-id1143 . -5) (undo-tree-id1144 . -5) (undo-tree-id1145 . -5) (undo-tree-id1146 . -5) (undo-tree-id1147 . -5) (undo-tree-id1148 . -5) (undo-tree-id1149 . -6) (undo-tree-id1150 . -5) (undo-tree-id1151 . -5) (2099 . 2100) (#("isi" 0 2 (face font-lock-type-face fontified nil) 2 3 (fontified nil)) . 2099) (undo-tree-id1152 . -2) (undo-tree-id1153 . -2) (undo-tree-id1154 . -2) (undo-tree-id1155 . -2) (undo-tree-id1156 . -2) (undo-tree-id1157 . -2) (undo-tree-id1158 . -2) (undo-tree-id1159 . -2) (undo-tree-id1160 . -2) (undo-tree-id1161 . -2) (undo-tree-id1162 . -3) (undo-tree-id1163 . -2) (undo-tree-id1164 . -2) (2101 . 2102) (#("ize, i" 0 3 (face font-lock-type-face fontified nil) 3 5 (fontified nil) 5 6 (fontified nil)) . 2101) (undo-tree-id1165 . -5) (undo-tree-id1166 . -5) (undo-tree-id1167 . -5) (undo-tree-id1168 . -5) (undo-tree-id1169 . -5) (undo-tree-id1170 . -5) (undo-tree-id1171 . -5) (undo-tree-id1172 . -5) (undo-tree-id1173 . -5) (undo-tree-id1174 . -5) (undo-tree-id1175 . -6) (undo-tree-id1176 . -5) (undo-tree-id1177 . -5) (2106 . 2107) (#("isi" 0 2 (face font-lock-type-face fontified nil) 2 3 (fontified nil)) . 2106) (undo-tree-id1178 . -2) (undo-tree-id1179 . -2) (undo-tree-id1180 . -2) (undo-tree-id1181 . -2) (undo-tree-id1182 . -2) (undo-tree-id1183 . -2) (undo-tree-id1184 . -2) (undo-tree-id1185 . -2) (undo-tree-id1186 . -2) (undo-tree-id1187 . -2) (undo-tree-id1188 . -3) (undo-tree-id1189 . -2) (undo-tree-id1190 . -2) (2108 . 2109) (#("ize)" 0 3 (face font-lock-type-face fontified nil) 3 4 (fontified nil)) . 2108) (undo-tree-id1191 . -4) (undo-tree-id1192 . -4) (undo-tree-id1193 . -4) (undo-tree-id1194 . -4) (undo-tree-id1195 . -4) (undo-tree-id1196 . -4) (undo-tree-id1197 . -4) (undo-tree-id1198 . -4) (undo-tree-id1199 . -4) (undo-tree-id1200 . -4) (undo-tree-id1201 . -4) (undo-tree-id1202 . -4) (undo-tree-id1203 . -4) (#(", Walls, Walls)" 0 2 (fontified t) 2 7 (face font-lock-type-face fontified t) 7 9 (fontified t) 9 14 (face font-lock-type-face fontified t) 14 15 (fontified t)) . 2112) (undo-tree-id1204 . -15) (undo-tree-id1205 . -15) (undo-tree-id1206 . -15) (undo-tree-id1207 . -15) (undo-tree-id1208 . -15) (undo-tree-id1209 . -15) (undo-tree-id1210 . -15) (undo-tree-id1211 . -15) (undo-tree-id1212 . -15) (undo-tree-id1213 . -15) (undo-tree-id1214 . -15) (undo-tree-id1215 . -15) (undo-tree-id1216 . -15)) (25818 2897 726950 487000) 0 nil])
([nil nil ((2395 . 2396) (#("*" 0 1 (fontified t)) . -2395) (undo-tree-id1217 . -1) (undo-tree-id1218 . -1) (undo-tree-id1219 . -1) (undo-tree-id1220 . -1) (undo-tree-id1221 . -1) 2396 (2395 . 2396) (t 25818 2943 471106 379000)) nil (25818 2984 46497 599000) 0 nil])
([nil nil ((2127 . 2128)) ((#("]" 0 1 (fontified t)) . 2127) (t 25818 2892 831106 122000)) (25818 2892 827507 51000) 0 nil])
([nil nil ((2453 . 2455) (2441 . 2453) (#("cur" 0 3 (fontified t)) . -2441) (undo-tree-id1267 . -1) (undo-tree-id1268 . -1) (undo-tree-id1269 . -2) (undo-tree-id1270 . -2) (undo-tree-id1271 . -3) (undo-tree-id1272 . -3) (undo-tree-id1273 . -3) (undo-tree-id1274 . -3) (undo-tree-id1275 . -3) (undo-tree-id1276 . -3) 2444 (2436 . 2444) (t 25818 2984 47773 247000)) nil (25818 3128 527597 408000) 0 nil])
nil
([nil nil ((2514 . 2516) (2505 . 2514) (#("dir" 0 3 (fontified t)) . -2505) (undo-tree-id1222 . -1) (undo-tree-id1223 . -1) (undo-tree-id1224 . -3) (undo-tree-id1225 . -3) (undo-tree-id1226 . -3) (undo-tree-id1227 . -3) (undo-tree-id1228 . -3) (undo-tree-id1229 . -3) (undo-tree-id1230 . -3) (undo-tree-id1231 . -3) (undo-tree-id1232 . -3) (undo-tree-id1233 . -3) (undo-tree-id1234 . -3) (undo-tree-id1235 . -3) (undo-tree-id1236 . -3) (undo-tree-id1237 . -3) (undo-tree-id1238 . -3) (undo-tree-id1239 . -3) (undo-tree-id1240 . -3) (undo-tree-id1241 . -3) (undo-tree-id1242 . -3) (undo-tree-id1243 . -3) (undo-tree-id1244 . -3) (undo-tree-id1245 . -3) 2508 (2506 . 2508) (#("i" 0 1 (fontified t)) . -2506) (undo-tree-id1246 . -1) (2499 . 2507) (2487 . 2499) (#("cur" 0 3 (fontified t)) . -2487) (undo-tree-id1247 . -1) (undo-tree-id1248 . -1) (undo-tree-id1249 . -2) (undo-tree-id1250 . -2) (undo-tree-id1251 . -3) (undo-tree-id1252 . -3) (undo-tree-id1253 . -3) (undo-tree-id1254 . -3) (undo-tree-id1255 . -3) (undo-tree-id1256 . -3) (undo-tree-id1257 . -3) (undo-tree-id1258 . -3) 2490 (2482 . 2490) (2474 . 2482) (#("ne" 0 2 (fontified t)) . -2474) (undo-tree-id1259 . -1) (undo-tree-id1260 . -1) (undo-tree-id1261 . -2) (undo-tree-id1262 . -2) (undo-tree-id1263 . -2) (undo-tree-id1264 . -2) (undo-tree-id1265 . -2) (undo-tree-id1266 . -2) 2476 (2473 . 2476) (2470 . 2473)) nil (25818 3128 527586 520000) 0 nil])
([nil nil ((2470 . 2488) (2471 . 2473) (2516 . 2532) 2607) nil (25818 3128 527543 640000) 0 nil])
([nil nil ((2470 . 2472) (t 25818 3128 531107 270000)) nil (25818 3164 220683 460000) 0 nil])
([nil nil ((2537 . 2540) (#("1" 0 1 (fontified t)) . -2537) (undo-tree-id1277 . -1) (undo-tree-id1278 . -1) (undo-tree-id1279 . -1) (undo-tree-id1280 . -1) 2538) nil (25818 3164 220681 254000) 0 nil])
([nil nil ((2470 . 2471) (2538 . 2539) 2539) nil (25818 3164 220666 665000) 0 nil])
([nil nil ((2479 . 2482) (#("i" 0 1 (fontified t)) . -2479) (undo-tree-id1282 . -1) (2474 . 2480) (#("s" 0 1 (fontified t)) . -2474) (undo-tree-id1283 . -1) (undo-tree-id1284 . -1) (undo-tree-id1285 . -1) (undo-tree-id1286 . -1) 2475 (2473 . 2475) (t 25818 3164 224440 783000)) nil (25818 3178 272740 433000) 0 nil])
([nil nil ((2552 . 2560) (#("s" 0 1 (fontified nil)) . -2552) (undo-tree-id1281 . -1) 2553 (2551 . 2553)) nil (25818 3178 272731 400000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 2470) (undo-tree-id1289 . -1) (undo-tree-id1290 . -1) (t 25818 3178 277774 181000)) nil (25818 3188 254269 311000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 2547) (undo-tree-id1287 . -1) (undo-tree-id1288 . -1)) nil (25818 3188 254262 893000) 0 nil])
([nil nil ((2470 . 2471) (2547 . 2548)) nil (25818 3188 254233 49000) 0 nil])
([nil nil ((2664 . 2667) (#("i" 0 1 (fontified t)) . -2664) (undo-tree-id1293 . -1) (2658 . 2665) (#("e" 0 1 (fontified t)) . -2658) (undo-tree-id1294 . -1) (undo-tree-id1295 . -1) (undo-tree-id1296 . -1) (undo-tree-id1297 . -1) (undo-tree-id1298 . -1) (#(" " 0 1 (fontified t)) . -2659) (undo-tree-id1299 . -1) (undo-tree-id1300 . -1) (undo-tree-id1301 . -1) (undo-tree-id1302 . -1) 2660 (2658 . 2660) (t 25818 3188 257774 231000)) nil (25818 3245 455865 970000) 0 nil])
([nil nil ((2749 . 2758) (#("e" 0 1 (fontified nil)) . -2749) (undo-tree-id1291 . -1) (#(" " 0 1 (fontified nil)) . -2750) (undo-tree-id1292 . -1) 2751 (2749 . 2751)) nil (25818 3245 455853 989000) 0 nil])
([nil nil ((2663 . 2665) (#("size" 0 4 (face font-lock-type-face fontified t)) . 2663) (undo-tree-id1315 . -3) (undo-tree-id1316 . -4) (undo-tree-id1317 . -4) (t 25818 3245 457774 486000)) nil (25818 3255 132305 347000) 0 nil])
([nil nil ((2752 . 2754) (#("size" 0 4 (face font-lock-type-face fontified t)) . 2752) (undo-tree-id1303 . -3) (undo-tree-id1304 . -3) (undo-tree-id1305 . -3) (undo-tree-id1306 . -3) (undo-tree-id1307 . -3) (undo-tree-id1308 . -3) (undo-tree-id1309 . -3) (undo-tree-id1310 . -3) (undo-tree-id1311 . -3) (undo-tree-id1312 . -3) (undo-tree-id1313 . -4) (undo-tree-id1314 . -4)) nil (25818 3255 132298 915000) 0 nil])
([nil nil ((2664 . 2667) (#("i" 0 1 (fontified t)) . -2664) (undo-tree-id1340 . -1) (2663 . 2665) (#("3" 0 1 (fontified t)) . -2663) (undo-tree-id1341 . -1) (undo-tree-id1342 . -1) (undo-tree-id1343 . -1) (undo-tree-id1344 . -1) (undo-tree-id1345 . -1) (#("2" 0 1 (face font-lock-type-face fontified t)) . -2664) (undo-tree-id1346 . -1) (undo-tree-id1347 . -1) (undo-tree-id1348 . -1) (undo-tree-id1349 . -1) 2665 (t 25818 3255 137774 530000)) nil (25818 3310 109443 808000) 0 nil])
([nil nil ((2754 . 2758) (#("3" 0 1 (face font-lock-type-face fontified nil)) . -2754) (undo-tree-id1318 . -1) (undo-tree-id1319 . -1) (undo-tree-id1320 . -1) (undo-tree-id1321 . -1) (undo-tree-id1322 . -1) (undo-tree-id1323 . -1) (undo-tree-id1324 . -1) (undo-tree-id1325 . -1) (undo-tree-id1326 . -1) (undo-tree-id1327 . -1) (undo-tree-id1328 . -1) (undo-tree-id1329 . -1) (undo-tree-id1330 . -1) (undo-tree-id1331 . -1) (undo-tree-id1332 . -1) (undo-tree-id1333 . -1) (undo-tree-id1334 . -1) (undo-tree-id1335 . -1) (undo-tree-id1336 . -1) (undo-tree-id1337 . -1) (#("2" 0 1 (face font-lock-type-face fontified t)) . -2755) (undo-tree-id1338 . -1) (undo-tree-id1339 . -1) 2756) nil (25818 3345 806902 94000) 0 nil])
([nil nil ((40 . 41) (39 . 40) (38 . 39) (t 25818 3347 317775 5000) 38) nil (25818 3362 540581 295000) 0 nil] [nil nil ((2658 . 2666)) ((#(".clone()" 0 8 (fontified t)) . 2658)) (25818 3345 646996 72000) 0 nil] [nil nil ((2647 . 2648) (t 25818 3310 111108 133000)) ((#("&" 0 1 (face rust-ampersand-face fontified t)) . 2647)) (25818 3331 487323 263000) 0 nil])
([nil nil ((#("#
" 0 1 (fontified t) 1 2 (fontified t)) . 40) (undo-tree-id1382 . -1) (undo-tree-id1383 . 1) (undo-tree-id1384 . -1) (undo-tree-id1385 . -1) (undo-tree-id1386 . -2)) nil (25818 3362 540579 811000) 0 nil])
([nil nil ((2757 . 2765)) ((#(".clone()" 0 8 (fontified t)) . 2757) (undo-tree-id1362 . -7) (undo-tree-id1363 . -7) (undo-tree-id1364 . -7) (undo-tree-id1365 . -7) (undo-tree-id1366 . -7) (undo-tree-id1367 . -7) (undo-tree-id1368 . -7) (undo-tree-id1369 . -7) (undo-tree-id1370 . -7) (undo-tree-id1371 . -7)) (25818 3344 766902 405000) 0 nil])
([nil nil ((2739 . 2740)) ((#("&" 0 1 (face rust-ampersand-face fontified t)) . 2739) (t 25818 3324 767774 893000)) (25818 3324 764098 605000) 0 nil])
([nil nil ((nil rear-nonsticky nil 39 . 40) (#("
" 0 1 (fontified nil)) . -56) (39 . 57)) nil (25818 3362 540575 24000) 0 nil])
([nil nil ((2678 . 2702) 2764) ((#("
                       " 0 24 (fontified t)) . 2678) (t 25818 3338 491108 296000)) (25818 3338 489710 523000) 0 nil])
nil
([nil nil ((#("
" 0 1 (rear-nonsticky t fontified t)) . -39) (undo-tree-id1372 . -1) (undo-tree-id1373 . -1) (undo-tree-id1374 . -1) (undo-tree-id1375 . -1) (undo-tree-id1376 . -1) (undo-tree-id1377 . -1) (undo-tree-id1378 . -1) (undo-tree-id1379 . -1) (undo-tree-id1380 . -1) (undo-tree-id1381 . -1) 40) nil (25818 3362 540571 7000) 0 nil])
nil
([nil nil ((48 . 52) (#("Clone" 0 5 (face font-lock-preprocessor-face fontified t)) . 48) (undo-tree-id1387 . -4) (undo-tree-id1388 . -5) (undo-tree-id1389 . -5) (t 25818 3362 544441 742000)) nil (25818 3368 876388 992000) 0 nil])
([nil nil ((58 . 60) (52 . 58) (t 25818 3368 881108 443000)) nil (25818 3378 430046 295000) 0 nil])
([nil nil ((#(" " 0 1 (face font-lock-preprocessor-face fontified t)) . 54) 59) nil (25818 3378 430041 855000) 0 nil])
([nil nil ((#("            for direction in &directions {
                if neighbor.0 - current_cell.0 == direction.0 .0 as usize
                    && neighbor.1 - current_cell.1 == direction.0 .1 as usize
                {
                    grid.grid[current_cell.0][current_cell.1].walls[direction.1 as usize] = false;
                    grid.grid[neighbor.0][neighbor.1].walls[direction.2 as usize] = false;
                }
            }
" 0 5 (fontified t) 5 9 (fontified t) 9 12 (fontified t) 12 15 (face font-lock-keyword-face fontified t) 15 16 (fontified t) 16 25 (face font-lock-variable-name-face fontified t) 25 26 (fontified t) 26 28 (face font-lock-keyword-face fontified t) 28 29 (fontified t) 29 30 (face rust-ampersand-face fontified t) 30 40 (fontified t) 40 42 (fontified t) 42 43 (fontified t) 43 59 (fontified t) 59 61 (face font-lock-keyword-face fontified t) 61 75 (fontified t) 75 89 (fontified t) 89 104 (fontified t) 104 105 (fontified t) 105 108 (fontified t) 108 110 (face font-lock-keyword-face fontified t) 110 111 (fontified t) 111 116 (face font-lock-type-face fontified t) 116 117 (fontified t) 117 134 (fontified t) 134 135 (fontified t) 135 137 (fontified t) 137 140 (fontified t) 140 153 (fontified t) 153 171 (fontified t) 171 182 (fontified t) 182 183 (fontified t) 183 186 (fontified t) 186 188 (face font-lock-keyword-face fontified t) 188 189 (fontified t) 189 194 (face font-lock-type-face fontified t) 194 195 (fontified t) 195 210 (fontified t) 210 212 (fontified t) 212 213 (fontified t) 213 229 (fontified t) 229 243 (fontified t) 243 259 (fontified t) 259 274 (fontified t) 274 281 (fontified t) 281 292 (fontified t) 292 293 (fontified t) 293 295 (face font-lock-keyword-face fontified t) 295 296 (fontified t) 296 301 (face font-lock-type-face fontified t) 301 304 (fontified t) 304 305 (fontified t) 305 310 (face font-lock-keyword-face fontified t) 310 311 (fontified t) 311 312 (fontified t) 312 322 (fontified t) 322 326 (fontified t) 326 332 (fontified t) 332 372 (fontified t) 372 383 (fontified t) 383 384 (fontified t) 384 386 (face font-lock-keyword-face fontified t) 386 387 (fontified t) 387 392 (face font-lock-type-face fontified t) 392 396 (fontified t) 396 401 (face font-lock-keyword-face fontified t) 401 402 (fontified t) 402 403 (fontified t) 403 419 (fontified t) 419 421 (fontified t) 421 429 (fontified t) 429 434 (fontified t) 434 435 (fontified t)) . 2389) (undo-tree-id1415 . -434) (undo-tree-id1416 . -20) (undo-tree-id1417 . -434) (undo-tree-id1418 . -434) (undo-tree-id1419 . -371) (undo-tree-id1420 . -137) (undo-tree-id1421 . -137) (undo-tree-id1422 . -137) (undo-tree-id1423 . -137) (undo-tree-id1424 . -137) (undo-tree-id1425 . -137) (undo-tree-id1426 . -137) (undo-tree-id1427 . -137) (undo-tree-id1428 . -137) (undo-tree-id1429 . -137) (undo-tree-id1430 . -137) (undo-tree-id1431 . -137) (undo-tree-id1432 . -137) (undo-tree-id1433 . -63) (undo-tree-id1434 . -63) (undo-tree-id1435 . -20) (undo-tree-id1436 . -20) (undo-tree-id1437 . -20) (undo-tree-id1438 . -20) (undo-tree-id1439 . -63) (undo-tree-id1440 . -63) (undo-tree-id1441 . -137) (undo-tree-id1442 . -137) (undo-tree-id1443 . -212) (undo-tree-id1444 . -212) (undo-tree-id1445 . -233) (undo-tree-id1446 . -233) (undo-tree-id1447 . -332) (undo-tree-id1448 . -332) (undo-tree-id1449 . -420) (undo-tree-id1450 . -420) (undo-tree-id1451 . -421) (undo-tree-id1452 . -434) (undo-tree-id1453 . -137) (undo-tree-id1454 . -434) (undo-tree-id1455 . -434) (undo-tree-id1456 . -434) (undo-tree-id1457 . -435) 2823 (t 25818 3378 434441 820000)) nil (25818 3612 130963 294000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 2389) (undo-tree-id1413 . 1) (undo-tree-id1414 . -1)) nil (25818 3612 130935 238000) 0 nil])
([nil nil ((897 . 901) (#("W" 0 1 (face font-lock-type-face fontified t)) . -897) (undo-tree-id1409 . -1) (undo-tree-id1410 . -1) (undo-tree-id1411 . -1) (undo-tree-id1412 . -1) 898 (895 . 898)) nil (25818 3612 130933 167000) 0 nil])
([nil nil ((842 . 853) (840 . 842)) nil (25818 3612 130929 623000) 0 nil])
([nil nil ((861 . 874)) nil (25818 3612 130928 934000) 0 nil])
([nil nil ((883 . 896)) nil (25818 3612 130928 471000) 0 nil])
([nil nil ((904 . 917)) nil (25818 3612 130928 31000) 0 nil])
([nil nil ((870 . 874) (#("West" 0 4 (face font-lock-type-face fontified t)) . 870) (undo-tree-id1402 . -3) (undo-tree-id1403 . -3) (undo-tree-id1404 . -3) (undo-tree-id1405 . -3) (undo-tree-id1406 . -3) (undo-tree-id1407 . -4) (undo-tree-id1408 . -4)) nil (25818 3612 130927 197000) 0 nil])
([nil nil ((892 . 897) (#("West" 0 4 (face font-lock-type-face fontified t)) . 892) (undo-tree-id1397 . -3) (undo-tree-id1398 . -3) (undo-tree-id1399 . -3) (undo-tree-id1400 . -4) (undo-tree-id1401 . -4)) nil (25818 3612 130921 384000) 0 nil])
([nil nil ((914 . 919) (#("West" 0 4 (face font-lock-type-face fontified t)) . 914) (undo-tree-id1390 . -3) (undo-tree-id1391 . -3) (undo-tree-id1392 . -3) (undo-tree-id1393 . -2) (undo-tree-id1394 . -2) (undo-tree-id1395 . -4) (undo-tree-id1396 . -4)) nil (25818 3612 130916 506000) 0 nil])
([nil nil ((1465 . 1471)) nil (25818 3612 130903 960000) 0 nil])
([nil nil ((766 . 772)) nil (25818 3612 130903 478000) 0 nil])
([nil nil ((772 . 773)) nil (25818 3612 130903 35000) 0 nil])
([nil nil ((2078 . 2079)) nil (25818 3612 130902 527000) 0 nil])
([nil nil ((754 . 755)) nil (25818 3612 130901 963000) 0 nil])
([nil nil ((767 . 768)) nil (25818 3612 130901 327000) 0 nil])
([nil nil ((1474 . 1475)) nil (25818 3612 130899 577000) 0 nil])
([nil nil ((1448 . 1449)) nil (25818 3612 130896 80000) 0 nil])
([nil nil ((2095 . 2098) (2091 . 2095) (t 25818 3612 134442 996000)) nil (25818 3627 641662 993000) 0 nil])
([nil nil ((843 . 856) (864 . 866) (865 . 875) (885 . 890) (886 . 893) (908 . 916) (909 . 913) (929 . 939) 2097) nil (25818 3627 641658 831000) 0 nil])
([nil nil ((1543 . 1549) (#("o" 0 1 (fontified t)) . -1543) (undo-tree-id1458 . -1) (undo-tree-id1459 . -1) (undo-tree-id1460 . -1) (undo-tree-id1461 . -1) (undo-tree-id1462 . -1) (undo-tree-id1463 . -1) (undo-tree-id1464 . -1) (undo-tree-id1465 . -1) (#("p" 0 1 (fontified t)) . -1544) (undo-tree-id1466 . -1) (undo-tree-id1467 . -1) (undo-tree-id1468 . -1) (undo-tree-id1469 . -1) (undo-tree-id1470 . -1) (undo-tree-id1471 . -1) 1545 (1541 . 1545) (t 25818 3627 644443 70000)) nil (25818 3673 728929 590000) 0 nil])
([nil nil ((882 . 888) (877 . 882) (#("W" 0 1 (face font-lock-type-face fontified t)) . -877) (undo-tree-id1481 . -1) (undo-tree-id1482 . -1) (undo-tree-id1483 . -1) (undo-tree-id1484 . -1) (undo-tree-id1485 . -1) (undo-tree-id1486 . -1) 878 (875 . 878) (t 25818 3673 731109 957000)) nil (25818 3745 853135 927000) 0 nil])
([nil nil ((928 . 934) (923 . 928) (#("W" 0 1 (face font-lock-type-face fontified nil)) . 923) (921 . 924)) nil (25818 3745 853128 971000) 0 nil])
([nil nil ((976 . 982) (971 . 976) (#("W" 0 1 (face font-lock-type-face fontified nil)) . 971) (969 . 972)) nil (25818 3745 853127 634000) 0 nil])
([nil nil ((1023 . 1029) (1018 . 1023) (#("W" 0 1 (face font-lock-type-face fontified nil)) . 1018) (1016 . 1019)) nil (25818 3745 853126 192000) 0 nil])
([nil nil ((930 . 934) (#("East" 0 4 (face font-lock-type-face fontified t)) . 930) (undo-tree-id1474 . -3) (undo-tree-id1475 . -3) (undo-tree-id1476 . -3) (undo-tree-id1477 . -4) (undo-tree-id1478 . -4) (undo-tree-id1479 . -4) (undo-tree-id1480 . -4)) nil (25818 3745 853272 944000) 0 nil])
([nil nil ((978 . 983) (#("East" 0 4 (face font-lock-type-face fontified t)) . 978) (undo-tree-id1498 . -3) (undo-tree-id1499 . 4) (undo-tree-id1500 . -4) (undo-tree-id1501 . -4)) nil (25818 3780 828225 225000) 0 nil] [nil nil ((977 . 979) (#(":" 0 1 (fontified t)) . 977) (undo-tree-id1472 . -1) (undo-tree-id1473 . -1)) ((977 . 978) (#("So" 0 2 (face font-lock-type-face fontified t)) . 977) (undo-tree-id1487 . -1) (undo-tree-id1488 . -1)) (25818 3745 853111 603000) 0 nil])
([nil nil ((1026 . 1030) (#("East" 0 4 (face font-lock-type-face fontified t)) . 1026) (undo-tree-id1493 . -3) (undo-tree-id1494 . -4) (undo-tree-id1495 . -4) (undo-tree-id1496 . -4) (undo-tree-id1497 . -4)) nil (25818 3780 828220 150000) 0 nil])
nil
([nil nil ((1030 . 1031)) nil (25818 3780 828213 847000) 0 nil])
([nil nil ((770 . 771)) nil (25818 3780 828213 37000) 0 nil])
([nil nil ((776 . 784)) nil (25818 3781 695553 763000) 0 nil])
([nil nil ((1107 . 1109) (1103 . 1107) (#("i" 0 1 (fontified t)) . -1103) (undo-tree-id1538 . -1) (1086 . 1104)) nil (25818 3817 456239 448000) 0 nil] [nil nil ((873 . 874)) ((#("(" 0 1 (fontified t)) . 873)) (25818 3781 55500 168000) 0 nil])
([nil nil ((1623 . 1624)) nil (25818 3817 456237 433000) 0 nil])
([nil nil ((898 . 899)) ((#(")" 0 1 (fontified t)) . 898)) (25818 3780 828389 6000) 0 nil])
([nil nil ((1637 . 1638)) nil (25818 3817 456236 661000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t)) . -921) (undo-tree-id1489 . -1) (undo-tree-id1490 . -1) (undo-tree-id1491 . -1) (undo-tree-id1492 . -1) 922 (921 . 922)) ((#("u" 0 1 (fontified nil)) . 921) (undo-tree-id1502 . -1) (undo-tree-id1503 . -1) (921 . 922)) (25818 3780 828205 390000) 0 nil])
([nil nil ((1628 . 1631)) nil (25818 3817 456235 941000) 0 nil])
nil
([nil nil ((1624 . 1636) (#("wall_cur" 0 8 (fontified t)) . -1624) (undo-tree-id1520 . -4) (undo-tree-id1521 . -4) (undo-tree-id1522 . -5) (undo-tree-id1523 . -5) (undo-tree-id1524 . -6) (undo-tree-id1525 . -6) (undo-tree-id1526 . -7) (undo-tree-id1527 . -7) (undo-tree-id1528 . -7) (undo-tree-id1529 . -7) (undo-tree-id1530 . -6) (undo-tree-id1531 . -6) (undo-tree-id1532 . -6) (undo-tree-id1533 . -6) (undo-tree-id1534 . -7) (undo-tree-id1535 . -8) (undo-tree-id1536 . -7) (undo-tree-id1537 . -8) 1632 (1631 . 1632)) nil (25818 3817 456234 443000) 0 nil])
([nil nil ((1659 . 1661) (1646 . 1659) (#("wall" 0 4 (fontified t)) . -1646) (undo-tree-id1504 . -1) (undo-tree-id1505 . -1) (undo-tree-id1506 . -2) (undo-tree-id1507 . -2) (undo-tree-id1508 . -3) (undo-tree-id1509 . -3) (undo-tree-id1510 . -4) (undo-tree-id1511 . -4) (undo-tree-id1512 . -4) (undo-tree-id1513 . -4) (undo-tree-id1514 . -4) (undo-tree-id1515 . -4) (undo-tree-id1516 . -4) (undo-tree-id1517 . -4) (undo-tree-id1518 . -4) (undo-tree-id1519 . -4) 1650 (1644 . 1650)) nil (25818 3817 456219 621000) 0 nil])
([nil nil ((1593 . 1622) (1622 . 1635) (1623 . 1638) (1662 . 1688) 2354) nil (25818 3817 456196 796000) 0 nil])
([nil nil ((1716 . 1722) (t 25818 3817 461110 641000)) nil (25818 3833 516797 837000) 0 nil])
([nil nil ((#("            // remove walls
            let directions: [((isize, isize), Walls, Walls); 4] = [
                ((-1, 0), Walls::West, Walls::East),
                ((1, 0), Walls::East, Walls::West),
                ((0, -1), Walls::North, Walls::South),
                ((0, 1), Walls::South, Walls::North),
            ];
" 0 6 (fontified t) 6 10 (fontified t) 10 11 (fontified t) 11 12 (fontified t) 12 15 (face font-lock-comment-delimiter-face fontified t) 15 28 (face font-lock-comment-face fontified t) 28 31 (fontified t) 31 35 (fontified t) 35 40 (fontified t) 40 43 (face font-lock-keyword-face fontified t) 43 44 (fontified t) 44 54 (face font-lock-variable-name-face fontified t) 54 56 (fontified t) 56 59 (fontified t) 59 64 (face font-lock-type-face fontified t) 64 66 (fontified t) 66 71 (face font-lock-type-face fontified t) 71 74 (fontified t) 74 79 (face font-lock-type-face fontified t) 79 81 (fontified t) 81 86 (face font-lock-type-face fontified t) 86 90 (fontified t) 90 91 (fontified t rear-nonsticky t) 91 95 (fontified t) 95 96 (fontified t) 96 112 (fontified t) 112 122 (fontified t) 122 127 (face font-lock-type-face fontified t) 127 129 (fontified t) 129 132 (face font-lock-type-face fontified t) 132 133 (face font-lock-type-face fontified t) 133 135 (fontified t) 135 139 (face font-lock-type-face fontified t) 139 140 (face font-lock-type-face fontified t) 140 141 (fontified t) 141 142 (fontified t) 142 146 (face font-lock-type-face fontified t) 146 147 (fontified t) 147 148 (fontified t) 148 149 (fontified t) 149 162 (fontified t) 162 163 (fontified t) 163 165 (fontified t) 165 168 (fontified t) 168 170 (fontified t) 170 174 (fontified t) 174 179 (face font-lock-type-face fontified t) 179 181 (fontified t) 181 185 (face font-lock-type-face fontified t) 185 187 (fontified t) 187 192 (face font-lock-type-face fontified t) 192 194 (fontified t) 194 198 (face font-lock-type-face fontified t) 198 199 (fontified t) 199 200 (fontified t) 200 201 (fontified t) 201 211 (fontified t) 211 212 (fontified t) 212 217 (fontified t) 217 218 (fontified t) 218 227 (fontified t) 227 232 (face font-lock-type-face fontified t) 232 234 (fontified t) 234 239 (face font-lock-type-face fontified t) 239 241 (fontified t) 241 246 (face font-lock-type-face fontified t) 246 248 (fontified t) 248 253 (face font-lock-type-face fontified t) 253 254 (fontified t) 254 255 (fontified t) 255 256 (fontified t) 256 261 (fontified t) 261 262 (fontified t) 262 265 (fontified t) 265 272 (fontified t) 272 276 (fontified t) 276 281 (fontified t) 281 286 (face font-lock-type-face fontified t) 286 288 (fontified t) 288 293 (face font-lock-type-face fontified t) 293 295 (fontified t) 295 300 (face font-lock-type-face fontified t) 300 302 (fontified t) 302 307 (face font-lock-type-face fontified t) 307 308 (fontified t) 308 310 (fontified t) 310 322 (fontified t) 322 324 (fontified t) 324 325 (fontified t)) . 2417) (undo-tree-id1542 . -324) (undo-tree-id1543 . -26) (undo-tree-id1544 . -324) (undo-tree-id1545 . -324) (undo-tree-id1546 . -132) (undo-tree-id1547 . -114) (undo-tree-id1548 . -324) (undo-tree-id1549 . -26) (undo-tree-id1550 . -26) (undo-tree-id1551 . -94) (undo-tree-id1552 . -94) (undo-tree-id1553 . -94) (undo-tree-id1554 . -94) (undo-tree-id1555 . -94) (undo-tree-id1556 . -94) (undo-tree-id1557 . -94) (undo-tree-id1558 . -94) (undo-tree-id1559 . -94) (undo-tree-id1560 . -94) (undo-tree-id1561 . -147) (undo-tree-id1562 . -147) (undo-tree-id1563 . -147) (undo-tree-id1564 . -147) (undo-tree-id1565 . -79) (undo-tree-id1566 . -79) (undo-tree-id1567 . -26) (undo-tree-id1568 . -26) (undo-tree-id1569 . -26) (undo-tree-id1570 . -26) (undo-tree-id1571 . -54) (undo-tree-id1572 . -54) (undo-tree-id1573 . -122) (undo-tree-id1574 . -122) (undo-tree-id1575 . -175) (undo-tree-id1576 . -175) (undo-tree-id1577 . -227) (undo-tree-id1578 . -227) (undo-tree-id1579 . -282) (undo-tree-id1580 . -282) (undo-tree-id1581 . -310) (undo-tree-id1582 . -324) (undo-tree-id1583 . -147) (undo-tree-id1584 . -324) (undo-tree-id1585 . -324) (undo-tree-id1586 . -324) (undo-tree-id1587 . -325) 2741 (t 25818 3833 521110 723000)) nil (25818 3864 845682 54000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 2417) (undo-tree-id1539 . 1) (undo-tree-id1540 . -1) (undo-tree-id1541 . -1)) nil (25818 3864 845646 954000) 0 nil])
([nil nil ((2485 . 2486) (2484 . 2485) (2463 . 2484) (2460 . 2463) (2448 . 2460) (#("cu" 0 2 (fontified t)) . -2448) (undo-tree-id1598 . -1) (undo-tree-id1599 . -1) (undo-tree-id1600 . -2) (undo-tree-id1601 . -2) (undo-tree-id1602 . -2) (undo-tree-id1603 . -2) (undo-tree-id1604 . -2) (undo-tree-id1605 . -2) 2450 (2444 . 2450) (2432 . 2444) (#("cur" 0 3 (fontified t)) . -2432) (undo-tree-id1606 . -1) (undo-tree-id1607 . -1) (undo-tree-id1608 . -2) (undo-tree-id1609 . -2) (undo-tree-id1610 . -3) (undo-tree-id1611 . -3) (undo-tree-id1612 . -3) (undo-tree-id1613 . -3) (undo-tree-id1614 . -3) (undo-tree-id1615 . -3) 2435 (2429 . 2435) (#("i" 0 1 (fontified t)) . -2429) (undo-tree-id1616 . -1) (undo-tree-id1617 . -1) (2424 . 2430) (#("i" 0 1 (fontified t)) . -2424) (undo-tree-id1618 . -1) (undo-tree-id1619 . -1) (2422 . 2425) (2417 . 2422) (#("	    " 0 5 (fontified nil)) . 2416) (undo-tree-id1620 . -5) (undo-tree-id1621 . -5) (undo-tree-id1622 . -5) (undo-tree-id1623 . -5) (2421 . 2422) (2415 . 2421) (t 25818 3864 851110 867000) 2335) nil (25818 3917 917964 335000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2491 . 2492) (#("
" 0 1 (fontified nil)) . -2556) (2486 . 2557) 2485) nil (25818 3917 917931 38000) 0 nil])
([nil nil ((2504 . 2510) (#("i" 0 1 (fontified t)) . -2504) (undo-tree-id1594 . -1) (2502 . 2505) (#("current_cell" 0 12 (fontified t)) . 2502) (undo-tree-id1595 . -11) (undo-tree-id1596 . -12) (undo-tree-id1597 . -12)) nil (25818 3917 917929 7000) 0 nil])
([nil nil ((2514 . 2522) (#("current_cell" 0 12 (fontified t)) . 2514) (undo-tree-id1591 . -11) (undo-tree-id1592 . -12) (undo-tree-id1593 . -12)) nil (25818 3917 918113 486000) 0 nil])
([nil nil ((2537 . 2538) (#("0" 0 1 (fontified t)) . 2537) (undo-tree-id1626 . -1)) nil (25818 3921 291747 638000) 0 nil] [nil nil ((2532 . 2540) (#("wall" 0 4 (fontified t)) . 2532) (undo-tree-id1588 . -3) (undo-tree-id1589 . -4) (undo-tree-id1590 . -4)) ((2532 . 2536) (#("neighbor" 0 8 (fontified t)) . 2532) (undo-tree-id1624 . -7) (undo-tree-id1625 . -7)) (25818 3917 917915 340000) 0 nil])
([nil nil ((2417 . 2425) (#("	" 0 1 (fontified t)) . 2417) (2487 . 2495) (#("	" 0 1 (fontified t)) . 2487) 2537) nil (25818 3932 790 324000) 0 nil])
nil
([nil nil ((2483 . 2490) (t 25818 3921 294444 463000)) nil (25818 3936 975717 213000) 0 nil] [nil nil ((2489 . 2492) (#("i" 0 1 (fontified t)) . -2489) (undo-tree-id1627 . -1) (2485 . 2490) (2483 . 2485) (t 25818 3921 294444 463000)) ((#(" a" 0 1 (fontified nil) 1 2 (face font-lock-keyword-face fontified nil)) . 2483) (undo-tree-id1628 . -2) (undo-tree-id1629 . -2) (#("s usi" 0 1 (face font-lock-keyword-face fontified nil) 1 2 (fontified nil) 2 4 (face font-lock-type-face fontified nil) 4 5 (fontified nil)) . 2485) (undo-tree-id1630 . -5) (undo-tree-id1631 . -4) (2489 . 2490) (#("ize" 0 3 (face font-lock-type-face fontified t)) . 2489) (undo-tree-id1632 . -2) (undo-tree-id1633 . -2)) (25818 3932 303 136000) 0 nil])
([nil nil ((2559 . 2566)) nil (25818 3936 975712 976000) 0 nil])
nil
([nil nil ((2489 . 2492) (#("i" 0 1 (fontified t)) . -2489) (undo-tree-id1653 . -1) (2488 . 2490) (#("32" 0 2 (face font-lock-type-face fontified t)) . 2488) (undo-tree-id1654 . -1) (undo-tree-id1655 . -2) (undo-tree-id1656 . -2) (t 25818 3936 981111 218000)) nil (25818 3982 495399 613000) 0 nil])
([nil nil ((2566 . 2570) (#("32" 0 2 (face font-lock-type-face fontified t)) . 2566) (undo-tree-id1634 . -1) (undo-tree-id1635 . -1) (undo-tree-id1636 . -1) (undo-tree-id1637 . -1) (undo-tree-id1638 . -1) (undo-tree-id1639 . -1) (undo-tree-id1640 . -1) (undo-tree-id1641 . -1) (undo-tree-id1642 . -1) (undo-tree-id1643 . -1) (undo-tree-id1644 . -1) (undo-tree-id1645 . -1) (undo-tree-id1646 . -1) (undo-tree-id1647 . -1) (undo-tree-id1648 . -1) (undo-tree-id1649 . -1) (undo-tree-id1650 . -1) (undo-tree-id1651 . -2) (undo-tree-id1652 . -2)) nil (25818 3982 495384 132000) 0 nil])
([nil nil ((2131 . 2132) (#(" " 0 1 (fontified t)) . -2131) (undo-tree-id1681 . -1) (undo-tree-id1682 . -1) (undo-tree-id1683 . -1) (undo-tree-id1684 . -1) (#("2" 0 1 (fontified t)) . -2132) (undo-tree-id1685 . -1) (undo-tree-id1686 . -1) (undo-tree-id1687 . -1) (undo-tree-id1688 . -1) 2133 (2122 . 2133) (#(" " 0 1 (fontified t)) . -2122) (undo-tree-id1689 . -1) (undo-tree-id1690 . -1) (undo-tree-id1691 . -1) 2123 (2122 . 2123) (t 25818 3982 501111 454000)) nil (25818 4116 470236 385000) 0 nil])
([nil nil ((2104 . 2109) (#(" " 0 1 (fontified t)) . -2104) (undo-tree-id1661 . -1) (undo-tree-id1662 . -1) 2105 (2100 . 2105) (#("w" 0 1 (face font-lock-variable-name-face fontified t)) . -2100) (undo-tree-id1663 . -1) (undo-tree-id1664 . -1) (undo-tree-id1665 . -1) (undo-tree-id1666 . -1) (undo-tree-id1667 . -1) (undo-tree-id1668 . -1) (undo-tree-id1669 . -1) (undo-tree-id1670 . -1) (#("a" 0 1 (face font-lock-variable-name-face fontified t)) . -2101) (undo-tree-id1671 . -1) (undo-tree-id1672 . -1) (undo-tree-id1673 . -1) (undo-tree-id1674 . -1) (undo-tree-id1675 . -1) (undo-tree-id1676 . -1) (#("v" 0 1 (face font-lock-variable-name-face fontified t)) . -2102) (undo-tree-id1677 . -1) (undo-tree-id1678 . -1) (undo-tree-id1679 . -1) (undo-tree-id1680 . -1) 2103 (2092 . 2103) (2087 . 2092) 2086) nil (25818 4116 470226 79000) 0 nil])
([nil nil ((2160 . 2166) (#(" " 0 1 (fontified t)) . -2160) (undo-tree-id1659 . -1) (undo-tree-id1660 . -1) 2161 (2157 . 2161) (2155 . 2157) 2131) nil (25818 4116 470210 222000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 2106) (2154 . 2155) (2156 . 2164) (#("	" 0 1 (fontified t)) . 2156) (undo-tree-id1657 . -1) (undo-tree-id1658 . -1) 2165) nil (25818 4182 69963 393000) 0 nil])
([nil nil ((1292 . 1295) (1289 . 1292) (t 25818 4116 474445 464000) 1288) nil (25818 4577 829955 481000) 0 nil] [nil nil ((926 . 931) (#("East" 0 4 (face font-lock-type-face fontified t)) . 926) (undo-tree-id1692 . -3) (undo-tree-id1693 . -4) (undo-tree-id1694 . -4) (t 25818 4116 474445 464000)) ((926 . 930) (#("North" 0 5 (face font-lock-type-face fontified t)) . 926) (undo-tree-id1695 . -4) (undo-tree-id1696 . -4)) (25818 4182 69619 951000) 0 nil])
([nil nil ((#("		oaa
" 0 5 (fontified t) 5 6 (fontified t)) . 1290) (undo-tree-id1749 . -5) (undo-tree-id1750 . 1) (undo-tree-id1751 . -2) (undo-tree-id1752 . -2) (undo-tree-id1753 . -5) (undo-tree-id1754 . -5) (undo-tree-id1755 . -5) (undo-tree-id1756 . -5) (undo-tree-id1757 . -5) (undo-tree-id1758 . -5) (undo-tree-id1759 . -5) (undo-tree-id1760 . -5) (undo-tree-id1761 . -5) (undo-tree-id1762 . -5) (undo-tree-id1763 . -5) (undo-tree-id1764 . -5) (undo-tree-id1765 . -5) (undo-tree-id1766 . -5) (undo-tree-id1767 . -5) (undo-tree-id1768 . -5) (undo-tree-id1769 . -5) (undo-tree-id1770 . -4) (undo-tree-id1771 . -4) (undo-tree-id1772 . -4) (undo-tree-id1773 . -4) (undo-tree-id1774 . -4) (undo-tree-id1775 . -4) (undo-tree-id1776 . -5) (undo-tree-id1777 . -4) (undo-tree-id1778 . -4) (undo-tree-id1779 . -6) 1294) nil (25818 4577 829953 504000) 0 nil])
nil
([nil nil ((880 . 885) (#("West" 0 4 (face font-lock-type-face fontified t)) . 880) (undo-tree-id1746 . -3) (undo-tree-id1747 . -4) (undo-tree-id1748 . -4)) nil (25818 4577 829931 683000) 0 nil])
([nil nil ((894 . 899) (#("East" 0 4 (face font-lock-type-face fontified t)) . 894) (undo-tree-id1743 . -3) (undo-tree-id1744 . -4) (undo-tree-id1745 . -4)) nil (25818 4577 829928 434000) 0 nil])
([nil nil ((928 . 933) (#("East" 0 4 (face font-lock-type-face fontified t)) . 928) (undo-tree-id1740 . -3) (undo-tree-id1741 . -4) (undo-tree-id1742 . -4)) nil (25818 4577 829925 759000) 0 nil])
([nil nil ((942 . 947) (#("West" 0 4 (face font-lock-type-face fontified t)) . 942) (undo-tree-id1737 . -3) (undo-tree-id1738 . -4) (undo-tree-id1739 . -4)) nil (25818 4577 829923 28000) 0 nil])
([nil nil ((977 . 981) (#("North" 0 5 (face font-lock-type-face fontified t)) . 977) (undo-tree-id1734 . -4) (undo-tree-id1735 . -5) (undo-tree-id1736 . -5)) nil (25818 4577 829919 842000) 0 nil])
([nil nil ((990 . 994) (#("e" 0 1 (fontified t)) . -990) (undo-tree-id1717 . -1) (undo-tree-id1718 . -1) (undo-tree-id1719 . -1) (undo-tree-id1720 . -1) (undo-tree-id1721 . -1) (undo-tree-id1722 . -1) (#("s" 0 1 (fontified t)) . -991) (undo-tree-id1723 . -1) (undo-tree-id1724 . -1) (undo-tree-id1725 . -1) (undo-tree-id1726 . -1) 992 (990 . 992) (#("South" 0 5 (face font-lock-type-face fontified t)) . 990) (undo-tree-id1727 . -4) (undo-tree-id1728 . -3) (undo-tree-id1729 . -3) (undo-tree-id1730 . -3) (undo-tree-id1731 . -3) (undo-tree-id1732 . -5) (undo-tree-id1733 . -5)) nil (25818 4577 829916 16000) 0 nil])
([nil nil ((1023 . 1027) (#("e" 0 1 (fontified t)) . -1023) (undo-tree-id1704 . -1) (undo-tree-id1705 . -1) (undo-tree-id1706 . -1) (undo-tree-id1707 . -1) (undo-tree-id1708 . -1) (undo-tree-id1709 . -1) (#("a" 0 1 (fontified t)) . -1024) (undo-tree-id1710 . -1) (undo-tree-id1711 . -1) (undo-tree-id1712 . -1) (undo-tree-id1713 . -1) 1025 (1023 . 1025) (#("South" 0 5 (face font-lock-type-face fontified t)) . 1023) (undo-tree-id1714 . -4) (undo-tree-id1715 . -5) (undo-tree-id1716 . -5)) nil (25818 4577 829901 366000) 0 nil])
([nil nil ((1036 . 1040) (#("North" 0 5 (face font-lock-type-face fontified t)) . 1036) (undo-tree-id1697 . -4) (undo-tree-id1698 . -3) (undo-tree-id1699 . -3) (undo-tree-id1700 . -3) (undo-tree-id1701 . -3) (undo-tree-id1702 . -5) (undo-tree-id1703 . -5)) nil (25818 4577 829888 7000) 0 nil])
([nil nil ((2152 . 2153) (#("2" 0 1 (fontified t)) . 2152) (undo-tree-id1780 . -1) (t 25818 4577 834447 715000)) nil (25818 4601 536026 283000) 0 nil])
([nil nil ((#("&& " 0 3 (fontified t)) . 2143) (undo-tree-id1818 . -2) (undo-tree-id1819 . -3) (t 25818 4601 541114 491000)) nil (25818 4630 737042 445000) 0 nil])
([nil nil ((#("val " 0 4 (fontified t)) . 2143) (undo-tree-id1816 . -3) (undo-tree-id1817 . -4)) nil (25818 4630 737040 217000) 0 nil])
([nil nil ((#("< " 0 1 (syntax-table (1) fontified t) 1 2 (fontified t)) . 2143) (undo-tree-id1797 . -1) (undo-tree-id1798 . -2) (undo-tree-id1799 . -2) (undo-tree-id1800 . -2) (undo-tree-id1801 . -2) (undo-tree-id1802 . -2) (undo-tree-id1803 . -2) (undo-tree-id1804 . -2) (undo-tree-id1805 . -2) (undo-tree-id1806 . -2) (undo-tree-id1807 . -2) (undo-tree-id1808 . -2) (undo-tree-id1809 . -2) (undo-tree-id1810 . -2) (undo-tree-id1811 . -2) (undo-tree-id1812 . -2) (undo-tree-id1813 . -2) (undo-tree-id1814 . -2) (undo-tree-id1815 . -2)) nil (25818 4630 737037 803000) 0 nil])
([nil nil ((#("5 " 0 1 (fontified t) 1 2 (fontified t)) . 2143) (undo-tree-id1795 . -1) (undo-tree-id1796 . -2)) nil (25818 4630 737024 560000) 0 nil])
([nil nil ((#("    let mut val = 0;
" 0 4 (fontified t) 4 7 (face font-lock-keyword-face fontified t) 7 8 (fontified t) 8 11 (face font-lock-keyword-face fontified t) 11 12 (fontified t) 12 15 (face font-lock-variable-name-face fontified t) 15 20 (fontified t) 20 21 (fontified t)) . 2088) (undo-tree-id1783 . -20) (undo-tree-id1784 . -21) (undo-tree-id1785 . -21) (undo-tree-id1786 . -21) (undo-tree-id1787 . -21) (undo-tree-id1788 . -19) (undo-tree-id1789 . -19) (undo-tree-id1790 . -19) (undo-tree-id1791 . -19) (undo-tree-id1792 . -19) (undo-tree-id1793 . -19) (undo-tree-id1794 . -21) 2107) nil (25818 4630 737021 789000) 0 nil])
([nil nil ((#("        val += 1;
" 0 8 (fontified t) 8 17 (fontified t) 17 18 (fontified t)) . 2124) (undo-tree-id1781 . -17) (undo-tree-id1782 . -18)) nil (25818 4630 737011 247000) 0 nil])
([nil nil ((apply -48 3986 4664 undo--wrap-and-run-primitive-undo 3986 4664 ((4642 . 4645) (4623 . 4626) (4592 . 4595) (4570 . 4573) (4521 . 4524) (4493 . 4496) (4444 . 4447) (4393 . 4396) (4370 . 4373) (4314 . 4317) (4286 . 4289) (4230 . 4233) (4169 . 4172) (4093 . 4096) (4051 . 4054) (3994 . 3997) 4599))) nil (25818 4630 736999 210000) 0 nil])
([nil nil ((1952 . 1954) (#("5" 0 1 (fontified t)) . -1952) (undo-tree-id1824 . -1) (undo-tree-id1825 . -1) (undo-tree-id1826 . -1) (undo-tree-id1827 . -1) 1953 (1952 . 1953) (#("1" 0 1 (fontified t)) . -1952) (undo-tree-id1828 . -1) (undo-tree-id1829 . -1) (undo-tree-id1830 . -1) (undo-tree-id1831 . -1) 1953 (1952 . 1953) (#("4" 0 1 (fontified t)) . -1952) (undo-tree-id1832 . -1) (undo-tree-id1833 . -1) (undo-tree-id1834 . -1) (undo-tree-id1835 . -1) 1953 (t 25818 4630 741114 637000)) nil (25818 4667 118533 770000) 0 nil])
([nil nil ((1956 . 1958) (#("5" 0 1 (fontified nil)) . -1956) (undo-tree-id1820 . -1) 1957 (1956 . 1957) (#("1" 0 1 (fontified nil)) . -1956) (undo-tree-id1821 . -1) 1957 (1956 . 1957) (#("4" 0 1 (fontified t)) . -1956) (undo-tree-id1822 . -1) (undo-tree-id1823 . -1) 1957) nil (25818 4667 118375 188000) 0 nil])
([nil nil ((1952 . 1954) (#("32" 0 2 (fontified t)) . 1952) (undo-tree-id1854 . -1) (undo-tree-id1855 . -2) (undo-tree-id1856 . -2) (t 25818 4667 124448 134000)) nil (25818 4819 935180 647000) 0 nil])
([nil nil ((1956 . 1958) (#("32" 0 2 (fontified t)) . 1956) (undo-tree-id1836 . -1) (undo-tree-id1837 . -1) (undo-tree-id1838 . -1) (undo-tree-id1839 . -1) (undo-tree-id1840 . -1) (undo-tree-id1841 . -1) (undo-tree-id1842 . -1) (undo-tree-id1843 . -1) (undo-tree-id1844 . -1) (undo-tree-id1845 . -1) (undo-tree-id1846 . -1) (undo-tree-id1847 . -1) (undo-tree-id1848 . -1) (undo-tree-id1849 . -1) (undo-tree-id1850 . -1) (undo-tree-id1851 . -1) (undo-tree-id1852 . -2) (undo-tree-id1853 . -2)) nil (25818 4819 935173 848000) 0 nil])
([nil current ((#("        // for row in &grid.grid {
        //     for cell in row {
        //         print!(\"{}\", if cell.visited { \"X\" } else { \"#\" });
        //     }
        //     println!();
        //     println!();
        // }
" 0 8 (fontified t) 8 11 (face font-lock-comment-delimiter-face fontified t) 11 14 (face font-lock-comment-face fontified t) 14 15 (face font-lock-comment-face fontified t) 15 18 (face font-lock-comment-face fontified t) 18 19 (face font-lock-comment-face fontified t) 19 21 (face font-lock-comment-face fontified t) 21 22 (face font-lock-comment-face fontified t) 22 23 (face font-lock-comment-face fontified t) 23 35 (face font-lock-comment-face fontified t) 35 43 (fontified t) 43 46 (face font-lock-comment-delimiter-face fontified t) 46 47 (face font-lock-comment-delimiter-face fontified t) 47 50 (face font-lock-comment-delimiter-face fontified t) 50 53 (face font-lock-comment-face fontified t) 53 54 (face font-lock-comment-face fontified t) 54 58 (face font-lock-comment-face fontified t) 58 59 (face font-lock-comment-face fontified t) 59 61 (face font-lock-comment-face fontified t) 61 68 (face font-lock-comment-face fontified t) 68 76 (fontified t) 76 79 (face font-lock-comment-delimiter-face fontified t) 79 87 (face font-lock-comment-delimiter-face fontified t) 87 93 (face font-lock-comment-face fontified t) 93 94 (face font-lock-comment-face fontified t) 94 95 (face font-lock-comment-face fontified t) 95 97 (face font-lock-comment-face fontified t) 97 98 (face font-lock-comment-face fontified t) 98 100 (face font-lock-comment-face fontified t) 100 102 (face font-lock-comment-face fontified t) 102 105 (face font-lock-comment-face fontified t) 105 118 (face font-lock-comment-face fontified t) 118 121 (face font-lock-comment-face fontified t) 121 124 (face font-lock-comment-face fontified t) 124 128 (face font-lock-comment-face fontified t) 128 131 (face font-lock-comment-face fontified t) 131 134 (face font-lock-comment-face fontified t) 134 139 (face font-lock-comment-face fontified t) 139 147 (fontified t) 147 150 (face font-lock-comment-delimiter-face fontified t) 150 154 (face font-lock-comment-delimiter-face fontified t) 154 156 (face font-lock-comment-face fontified t) 156 164 (fontified t) 164 167 (face font-lock-comment-delimiter-face fontified t) 167 171 (face font-lock-comment-delimiter-face fontified t) 171 179 (face font-lock-comment-face fontified t) 179 183 (face font-lock-comment-face fontified t) 183 191 (fontified t) 191 194 (face font-lock-comment-delimiter-face fontified t) 194 198 (face font-lock-comment-delimiter-face fontified t) 198 206 (face font-lock-comment-face fontified t) 206 210 (face font-lock-comment-face fontified t) 210 218 (fontified t) 218 221 (face font-lock-comment-delimiter-face fontified t) 221 223 (face font-lock-comment-face fontified t)) . 2695) (undo-tree-id1857 . -221) (undo-tree-id1858 . -221) (undo-tree-id1859 . -11) (undo-tree-id1860 . -222) (undo-tree-id1861 . -33) (undo-tree-id1862 . -33) (undo-tree-id1863 . -66) (undo-tree-id1864 . -66) (undo-tree-id1865 . -102) (undo-tree-id1866 . -102) (undo-tree-id1867 . -154) (undo-tree-id1868 . -154) (undo-tree-id1869 . -181) (undo-tree-id1870 . -181) (undo-tree-id1871 . -208) (undo-tree-id1872 . -208) (undo-tree-id1873 . -221) (undo-tree-id1874 . -221) (undo-tree-id1875 . -221) (undo-tree-id1876 . -221) (undo-tree-id1877 . -221) (undo-tree-id1878 . -221) (undo-tree-id1879 . -194) (undo-tree-id1880 . -194) (undo-tree-id1881 . -167) (undo-tree-id1882 . -167) (undo-tree-id1883 . -150) (undo-tree-id1884 . -150) (undo-tree-id1885 . -79) (undo-tree-id1886 . -79) (undo-tree-id1887 . -46) (undo-tree-id1888 . -46) (undo-tree-id1889 . -11) (undo-tree-id1890 . -11) (undo-tree-id1891 . -11) (undo-tree-id1892 . -11) (undo-tree-id1893 . -223) 2706 (t 25818 4819 941115 541000)) nil (25818 4957 888463 401000) 0 nil])
nil
