(undo-tree-save-format-version . 1)
"c33ac4e374c9125820822ade3bb5ee29cba41db3"
[nil nil nil nil (25825 959 643621 108000) 0 nil]
([nil nil ((apply 48 5899 6598 undo--wrap-and-run-primitive-undo 5899 6598 ((#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -6596) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -6580) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -6552) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -6533) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -6454) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -6415) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -6336) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -6288) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -6268) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -6215) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -6190) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -6137) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -6079) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -6000) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -5961) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -5907) 6646))) nil (25825 959 643619 152000) 0 nil])
([nil nil ((#("        for (col_i, cell) in row.iter().enumerate() {
" 0 8 (fontified t) 8 11 (face font-lock-keyword-face fontified t) 11 26 (fontified t) 26 28 (face font-lock-keyword-face fontified t) 28 54 (fontified t)) . 5899) (undo-tree-id388 . -54) (undo-tree-id389 . -54) (undo-tree-id390 . -54) (undo-tree-id391 . -54) (undo-tree-id392 . -54) (undo-tree-id393 . -54) (undo-tree-id394 . -54) (undo-tree-id395 . -53)) nil (25825 959 643617 267000) 0 nil])
([nil nil ((#("        }
" 0 8 (fontified t) 8 10 (fontified t)) . 6534) (undo-tree-id382 . -10) (undo-tree-id383 . -10) (undo-tree-id384 . -9) (undo-tree-id385 . -10) (undo-tree-id386 . -10) (undo-tree-id387 . -10)) nil (25825 959 643611 959000) 0 nil])
([nil nil ((#("            commands.spawn(PbrBundle {
                mesh: meshes.add(Mesh::from(shape::Cube { size: room_size })),
                material: materials.add(if cell.visited {
                    Color::rgb(1.0, 1.0, 1.0).into()
                } else {
                    Color::rgb(0.0, 0.0, 0.0).into()
                }),
                transform: Transform::from_xyz(
                    col_i as f32 * (room_size + wall_width) + room_size / 2.0,
                    wall_height / 2.0,
                    row_i as f32 * (room_size + wall_width) + room_size / 2.0,
                ),
                ..default()
            });
" 0 8 (fontified t) 8 12 (fontified t) 12 27 (fontified t) 27 36 (face font-lock-type-face fontified t) 36 39 (fontified t) 39 47 (fontified t) 47 55 (fontified t) 55 59 (face font-lock-variable-name-face fontified t) 59 72 (fontified t) 72 76 (face font-lock-type-face fontified t) 76 83 (fontified t) 83 88 (face font-lock-constant-face fontified t) 88 90 (fontified t) 90 94 (face font-lock-type-face fontified t) 94 97 (fontified t) 97 101 (face font-lock-variable-name-face fontified t) 101 107 (fontified t) 107 118 (fontified t) 118 126 (fontified t) 126 134 (fontified t) 134 142 (face font-lock-variable-name-face fontified t) 142 158 (fontified t) 158 160 (face font-lock-keyword-face fontified t) 160 176 (fontified t) 176 184 (fontified t) 184 196 (fontified t) 196 201 (face font-lock-type-face fontified t) 201 229 (fontified t) 229 237 (fontified t) 237 245 (fontified t) 245 247 (fontified t) 247 251 (face font-lock-keyword-face fontified t) 251 254 (fontified t) 254 262 (fontified t) 262 274 (fontified t) 274 279 (face font-lock-type-face fontified t) 279 307 (fontified t) 307 315 (fontified t) 315 323 (fontified t) 323 327 (fontified t) 327 335 (fontified t) 335 343 (fontified t) 343 352 (face font-lock-variable-name-face fontified t) 352 354 (fontified t) 354 363 (face font-lock-type-face fontified t) 363 375 (fontified t) 375 383 (fontified t) 383 395 (fontified t) 395 401 (fontified t) 401 403 (face font-lock-keyword-face fontified t) 403 404 (fontified t) 404 407 (face font-lock-type-face fontified t) 407 454 (fontified t) 454 462 (fontified t) 462 474 (fontified t) 474 493 (fontified t) 493 501 (fontified t) 501 513 (fontified t) 513 519 (fontified t) 519 521 (face font-lock-keyword-face fontified t) 521 522 (fontified t) 522 525 (face font-lock-type-face fontified t) 525 572 (fontified t) 572 580 (fontified t) 580 588 (fontified t) 588 591 (fontified t) 591 599 (fontified t) 599 607 (fontified t) 607 619 (fontified t) 619 627 (fontified t) 627 631 (fontified t) 631 635 (fontified t)) . 5899) (undo-tree-id220 . -39) (undo-tree-id221 . -39) (undo-tree-id222 . -307) (undo-tree-id223 . -307) (undo-tree-id224 . -591) (undo-tree-id225 . -591) (undo-tree-id226 . -635) (undo-tree-id227 . -635) (undo-tree-id228 . -635) (undo-tree-id229 . -635) (undo-tree-id230 . -619) (undo-tree-id231 . -619) (undo-tree-id232 . -591) (undo-tree-id233 . -591) (undo-tree-id234 . -572) (undo-tree-id235 . -572) (undo-tree-id236 . -493) (undo-tree-id237 . -493) (undo-tree-id238 . -454) (undo-tree-id239 . -454) (undo-tree-id240 . -375) (undo-tree-id241 . -375) (undo-tree-id242 . -327) (undo-tree-id243 . -327) (undo-tree-id244 . -307) (undo-tree-id245 . -307) (undo-tree-id246 . -254) (undo-tree-id247 . -254) (undo-tree-id248 . -229) (undo-tree-id249 . -229) (undo-tree-id250 . -176) (undo-tree-id251 . -176) (undo-tree-id252 . -118) (undo-tree-id253 . -118) (undo-tree-id254 . -39) (undo-tree-id255 . -39) (undo-tree-id256 . -619) (undo-tree-id257 . -619) (undo-tree-id258 . -39) (undo-tree-id259 . -39) (undo-tree-id260 . -118) (undo-tree-id261 . -118) (undo-tree-id262 . -176) (undo-tree-id263 . -176) (undo-tree-id264 . -229) (undo-tree-id265 . -229) (undo-tree-id266 . -254) (undo-tree-id267 . -254) (undo-tree-id268 . -307) (undo-tree-id269 . -307) (undo-tree-id270 . -327) (undo-tree-id271 . -327) (undo-tree-id272 . -375) (undo-tree-id273 . -375) (undo-tree-id274 . -454) (undo-tree-id275 . -454) (undo-tree-id276 . -493) (undo-tree-id277 . -493) (undo-tree-id278 . -572) (undo-tree-id279 . -572) (undo-tree-id280 . -591) (undo-tree-id281 . -591) (undo-tree-id282 . -619) (undo-tree-id283 . -619) (undo-tree-id284 . -635) (undo-tree-id285 . -635) (undo-tree-id286 . -635) (undo-tree-id287 . -635) (undo-tree-id288 . -619) (undo-tree-id289 . -619) (undo-tree-id290 . -591) (undo-tree-id291 . -591) (undo-tree-id292 . -572) (undo-tree-id293 . -572) (undo-tree-id294 . -493) (undo-tree-id295 . -493) (undo-tree-id296 . -454) (undo-tree-id297 . -454) (undo-tree-id298 . -375) (undo-tree-id299 . -375) (undo-tree-id300 . -327) (undo-tree-id301 . -327) (undo-tree-id302 . -307) (undo-tree-id303 . -307) (undo-tree-id304 . -254) (undo-tree-id305 . -254) (undo-tree-id306 . -229) (undo-tree-id307 . -229) (undo-tree-id308 . -176) (undo-tree-id309 . -176) (undo-tree-id310 . -118) (undo-tree-id311 . -118) (undo-tree-id312 . -39) (undo-tree-id313 . -39) (undo-tree-id314 . -634) (undo-tree-id315 . -39) (undo-tree-id316 . -39) (undo-tree-id317 . -118) (undo-tree-id318 . -118) (undo-tree-id319 . -176) (undo-tree-id320 . -176) (undo-tree-id321 . -229) (undo-tree-id322 . -229) (undo-tree-id323 . -254) (undo-tree-id324 . -254) (undo-tree-id325 . -307) (undo-tree-id326 . -307) (undo-tree-id327 . -327) (undo-tree-id328 . -327) (undo-tree-id329 . -375) (undo-tree-id330 . -375) (undo-tree-id331 . -454) (undo-tree-id332 . -454) (undo-tree-id333 . -493) (undo-tree-id334 . -493) (undo-tree-id335 . -572) (undo-tree-id336 . -572) (undo-tree-id337 . -591) (undo-tree-id338 . -591) (undo-tree-id339 . -619) (undo-tree-id340 . -619) (undo-tree-id341 . -635) (undo-tree-id342 . -635) (undo-tree-id343 . -635) (undo-tree-id344 . -635) (undo-tree-id345 . -635) (undo-tree-id346 . -635) (undo-tree-id347 . -635) (undo-tree-id348 . -635) (undo-tree-id349 . -635) (undo-tree-id350 . -635) (undo-tree-id351 . -619) (undo-tree-id352 . -619) (undo-tree-id353 . -619) (undo-tree-id354 . -619) (undo-tree-id355 . -619) (undo-tree-id356 . -619) (undo-tree-id357 . -591) (undo-tree-id358 . -591) (undo-tree-id359 . -572) (undo-tree-id360 . -572) (undo-tree-id361 . -493) (undo-tree-id362 . -493) (undo-tree-id363 . -454) (undo-tree-id364 . -454) (undo-tree-id365 . -375) (undo-tree-id366 . -375) (undo-tree-id367 . -327) (undo-tree-id368 . -327) (undo-tree-id369 . -307) (undo-tree-id370 . -307) (undo-tree-id371 . -254) (undo-tree-id372 . -254) (undo-tree-id373 . -229) (undo-tree-id374 . -229) (undo-tree-id375 . -176) (undo-tree-id376 . -176) (undo-tree-id377 . -118) (undo-tree-id378 . -118) (undo-tree-id379 . -39) (undo-tree-id380 . -39) (undo-tree-id381 . -635)) nil (25825 959 643604 276000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5965 . 5966) (#("
" 0 1 (fontified nil)) . -6588) (5953 . 6589) 5900) nil (25825 959 643536 111000) 0 nil])
([nil nil ((#("        // Room
" 0 8 (fontified t) 8 11 (face font-lock-comment-delimiter-face fontified t) 11 16 (face font-lock-comment-face fontified t)) . 5883) (undo-tree-id27 . -16) (undo-tree-id28 . -16) (undo-tree-id29 . -16) (undo-tree-id30 . -16) (undo-tree-id31 . -16) (undo-tree-id32 . -16) (undo-tree-id33 . -16) (undo-tree-id34 . -16) (undo-tree-id35 . -16) (undo-tree-id36 . -16) (undo-tree-id37 . -16) (undo-tree-id38 . -16) (undo-tree-id39 . -16) (undo-tree-id40 . -16) (undo-tree-id41 . -16) (undo-tree-id42 . -16) (undo-tree-id43 . -16) (undo-tree-id44 . -16) (undo-tree-id45 . -16) (undo-tree-id46 . -16) (undo-tree-id47 . -16) (undo-tree-id48 . -16) (undo-tree-id49 . -16) (undo-tree-id50 . -16) (undo-tree-id51 . -16) (undo-tree-id52 . -16) (undo-tree-id53 . -16) (undo-tree-id54 . -16) (undo-tree-id55 . -16) (undo-tree-id56 . -16) (undo-tree-id57 . -16) (undo-tree-id58 . -16) (undo-tree-id59 . -16) (undo-tree-id60 . -16) (undo-tree-id61 . -16) (undo-tree-id62 . -16) (undo-tree-id63 . -16) (undo-tree-id64 . -16) (undo-tree-id65 . -16) (undo-tree-id66 . -16) (undo-tree-id67 . -16) (undo-tree-id68 . -16) (undo-tree-id69 . -16) (undo-tree-id70 . -16) (undo-tree-id71 . -16) (undo-tree-id72 . -16) (undo-tree-id73 . -16) (undo-tree-id74 . -16) (undo-tree-id75 . -16) (undo-tree-id76 . -16) (undo-tree-id77 . -16) (undo-tree-id78 . -16) (undo-tree-id79 . -16) (undo-tree-id80 . -16) (undo-tree-id81 . -16) (undo-tree-id82 . -16) (undo-tree-id83 . -16) (undo-tree-id84 . -16) (undo-tree-id85 . -16) (undo-tree-id86 . -16) (undo-tree-id87 . -16) (undo-tree-id88 . -16) (undo-tree-id89 . -16) (undo-tree-id90 . -16) (undo-tree-id91 . -16) (undo-tree-id92 . -16) (undo-tree-id93 . -16) (undo-tree-id94 . -16) (undo-tree-id95 . -16) (undo-tree-id96 . -16) (undo-tree-id97 . -16) (undo-tree-id98 . -16) (undo-tree-id99 . -16) (undo-tree-id100 . -16) (undo-tree-id101 . -16) (undo-tree-id102 . -16) (undo-tree-id103 . -16) (undo-tree-id104 . -16) (undo-tree-id105 . -16) (undo-tree-id106 . -16) (undo-tree-id107 . -16) (undo-tree-id108 . -16) (undo-tree-id109 . -16) (undo-tree-id110 . -16) (undo-tree-id111 . -16) (undo-tree-id112 . -16) (undo-tree-id113 . -16) (undo-tree-id114 . -16) (undo-tree-id115 . -16) (undo-tree-id116 . -16) (undo-tree-id117 . -16) (undo-tree-id118 . -16) (undo-tree-id119 . -16) (undo-tree-id120 . -16) (undo-tree-id121 . -16) (undo-tree-id122 . -16) (undo-tree-id123 . -16) (undo-tree-id124 . -16) (undo-tree-id125 . -16) (undo-tree-id126 . -16) (undo-tree-id127 . -16) (undo-tree-id128 . -16) (undo-tree-id129 . -16) (undo-tree-id130 . -16) (undo-tree-id131 . -16) (undo-tree-id132 . -16) (undo-tree-id133 . -16) (undo-tree-id134 . -16) (undo-tree-id135 . -16) (undo-tree-id136 . -16) (undo-tree-id137 . -16) (undo-tree-id138 . -15) (undo-tree-id139 . -16) (undo-tree-id140 . -16) (undo-tree-id141 . -16) (undo-tree-id142 . -16) (undo-tree-id143 . -16) (undo-tree-id144 . -16) (undo-tree-id145 . -16) (undo-tree-id146 . -16) (undo-tree-id147 . -16) (undo-tree-id148 . -16) (undo-tree-id149 . -16) (undo-tree-id150 . -16) (undo-tree-id151 . -16) (undo-tree-id152 . -16) (undo-tree-id153 . -16) (undo-tree-id154 . -16) (undo-tree-id155 . -16) (undo-tree-id156 . -16) (undo-tree-id157 . -16) (undo-tree-id158 . -16) (undo-tree-id159 . -16) (undo-tree-id160 . -16) (undo-tree-id161 . -16) (undo-tree-id162 . -16) (undo-tree-id163 . -16) (undo-tree-id164 . -16) (undo-tree-id165 . -16) (undo-tree-id166 . -16) (undo-tree-id167 . -16) (undo-tree-id168 . -16) (undo-tree-id169 . -16) (undo-tree-id170 . -16) (undo-tree-id171 . -16) (undo-tree-id172 . -16) (undo-tree-id173 . -16) (undo-tree-id174 . -16) (undo-tree-id175 . -16) (undo-tree-id176 . -16) (undo-tree-id177 . -16) (undo-tree-id178 . -16) (undo-tree-id179 . -16) (undo-tree-id180 . -16) (undo-tree-id181 . -16) (undo-tree-id182 . -16) (undo-tree-id183 . -16) (undo-tree-id184 . -16) (undo-tree-id185 . -16) (undo-tree-id186 . -16) (undo-tree-id187 . -16) (undo-tree-id188 . -16) (undo-tree-id189 . -16) (undo-tree-id190 . -16) (undo-tree-id191 . -16) (undo-tree-id192 . -16) (undo-tree-id193 . -16) (undo-tree-id194 . -16) (undo-tree-id195 . -16) (undo-tree-id196 . -16) (undo-tree-id197 . -16) (undo-tree-id198 . -16) (undo-tree-id199 . -16) (undo-tree-id200 . -16) (undo-tree-id201 . -16) (undo-tree-id202 . -16) (undo-tree-id203 . -16) (undo-tree-id204 . -16) (undo-tree-id205 . -16) (undo-tree-id206 . -16) (undo-tree-id207 . -16) (undo-tree-id208 . -16) (undo-tree-id209 . -16) (undo-tree-id210 . -16) (undo-tree-id211 . -16) (undo-tree-id212 . -16) (undo-tree-id213 . -12) (undo-tree-id214 . -12) (undo-tree-id215 . -12) (undo-tree-id216 . -12) (undo-tree-id217 . -12) (undo-tree-id218 . -12) (undo-tree-id219 . -16) 5895) nil (25825 959 643529 616000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5945 . 5946) (#("
" 0 1 (fontified nil face font-lock-comment-face)) . -5953) (5937 . 5954) 5884) nil (25825 959 643059 724000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 5883) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . 1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1)) nil (25825 959 643057 349000) 0 nil])
([nil nil ((#("        " 0 7 (fontified nil) 7 8 (rear-nonsticky t fontified nil)) . -5942) (undo-tree-id13 . -8) (undo-tree-id14 . -8) (5937 . 5942)) nil (25825 959 643049 736000) 0 nil])
([nil nil ((apply -42 5950 6648 undo--wrap-and-run-primitive-undo 5950 6648 ((6620 . 6623) (6589 . 6592) (6567 . 6570) (6485 . 6488) (6443 . 6446) (6361 . 6364) (6310 . 6313) (6287 . 6290) (6231 . 6234) (6203 . 6206) (6147 . 6150) (6086 . 6089) (6004 . 6007) (5962 . 5965) 6585))) nil (25825 959 643046 943000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4240 . 4241) (#("
" 0 1 (fontified nil)) . -4398) (4236 . 4399) 4229) nil (25825 959 643045 57000) 0 nil])
([nil nil ((apply -6 4237 4406 undo--wrap-and-run-primitive-undo 4237 4406 ((4324 . 4327) (4241 . 4244) 4399))) nil (25825 959 643043 590000) 0 nil])
([nil nil ((4539 . 4543) (#("i" 0 1 (fontified t)) . -4539) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (4533 . 4540) (#("(room_size + wall_width) * grid.width as f32 + wall_width" 0 38 (fontified t) 38 40 (face font-lock-keyword-face fontified t) 40 41 (fontified t) 41 44 (face font-lock-type-face fontified t) 44 57 (fontified t)) . 4533) (undo-tree-id10 . -56) (undo-tree-id11 . -57) (undo-tree-id12 . -57)) nil (25825 959 643041 216000) 0 nil])
([nil nil ((#("(room_size + wall_width) * grid.height as f32 + wall_width" 0 39 (fontified t) 39 41 (face font-lock-keyword-face fontified t) 41 42 (fontified t) 42 45 (face font-lock-type-face fontified t) 45 58 (fontified t)) . 5336) (undo-tree-id2 . -57) (undo-tree-id3 . -9) (undo-tree-id4 . -9) (undo-tree-id5 . -9) (undo-tree-id6 . -9) (undo-tree-id7 . -58)) nil (25825 959 643036 397000) 0 nil])
([nil nil ((5343 . 5347) (#("i" 0 1 (fontified t)) . -5343) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (5336 . 5344)) nil (25825 959 643030 111000) 0 nil])
([nil nil ((6011 . 6019) (#("	" 0 1 (fontified t)) . 6011) 5346) nil (25825 959 643006 854000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . 1575) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (t 25825 959 643567 330000)) nil (25825 974 785827 7000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . 1578) (undo-tree-id396 . -1) (undo-tree-id397 . -1)) nil (25825 974 785821 210000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . 4793) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (t 25825 974 786817 566000)) nil (25825 1022 243156 840000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 4793) (undo-tree-id412 . 1) (undo-tree-id413 . -1) (undo-tree-id414 . -1)) nil (25825 1022 243153 558000) 0 nil])
([nil nil ((#("2" 0 1 (fontified t)) . 4793) (undo-tree-id409 . 1) (undo-tree-id410 . -1) (undo-tree-id411 . -1)) nil (25825 1022 243149 716000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . 4793) (undo-tree-id406 . 1) (undo-tree-id407 . -1) (undo-tree-id408 . -1)) nil (25825 1022 243146 364000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . 4793) (undo-tree-id403 . 1) (undo-tree-id404 . -1) (undo-tree-id405 . -1)) nil (25825 1022 243141 964000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 4793) (undo-tree-id400 . 1) (undo-tree-id401 . -1) (undo-tree-id402 . -1)) nil (25825 1088 354257 382000) 0 nil])
([nil nil ((4805 . 4806)) ((#(")" 0 1 (fontified t)) . 4805) (undo-tree-id516 . -1)) (25825 1089 135042 448000) 0 nil])
([nil nil ((4748 . 4749)) ((#("(" 0 1 (fontified t)) . 4748) (t 25825 1069 912962 233000)) (25825 1089 305143 274000) 0 nil])
([nil nil ((4754 . 4759) (#("i" 0 1 (fontified nil)) . 4754) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (4748 . 4755) (#("((room_size + wall_width) * grid.width as f32 - wall_width) " 0 1 (fontified t) 1 39 (fontified t) 39 41 (face font-lock-keyword-face fontified t) 41 42 (fontified t) 42 45 (face font-lock-type-face fontified t) 45 58 (fontified t) 58 59 (fontified t) 59 60 (fontified t)) . 4748) (undo-tree-id519 . -46) (undo-tree-id520 . -46) (undo-tree-id521 . 14) (undo-tree-id522 . -46) (undo-tree-id523 . -46) (undo-tree-id524 . -59) (undo-tree-id525 . 59) (undo-tree-id526 . -58) (undo-tree-id527 . -58) (t 25825 1069 912962 233000)) ((4748 . 4808) (#("maze_wi" 0 6 (fontified nil) 6 7 (fontified nil)) . 4748) (undo-tree-id479 . -7) (undo-tree-id480 . -6) (undo-tree-id481 . -6) (undo-tree-id482 . -6) (undo-tree-id483 . -6) (undo-tree-id484 . -6) (undo-tree-id485 . -6) (undo-tree-id486 . -6) (undo-tree-id487 . -6) (undo-tree-id488 . -6) (undo-tree-id489 . -6) (undo-tree-id490 . -6) (undo-tree-id491 . -6) (undo-tree-id492 . -6) (undo-tree-id493 . -6) (undo-tree-id494 . -6) (undo-tree-id495 . -7) (undo-tree-id496 . -6) (undo-tree-id497 . -6) (4754 . 4755) (#("idth " 0 5 (fontified t)) . 4754) (undo-tree-id498 . -4) (undo-tree-id499 . -4) (undo-tree-id500 . -4) (undo-tree-id501 . -4) (undo-tree-id502 . -4) (undo-tree-id503 . -4) (undo-tree-id504 . -4) (undo-tree-id505 . -4) (undo-tree-id506 . -4) (undo-tree-id507 . -4) (undo-tree-id508 . -4) (undo-tree-id509 . -4) (undo-tree-id510 . -4) (undo-tree-id511 . -4) (undo-tree-id512 . -4) (undo-tree-id513 . -4) (undo-tree-id514 . -4) (undo-tree-id515 . -4)) (25825 1089 614412 430000) 0 nil])
([nil nil ((4773 . 4777) (#("i" 0 1 (fontified t)) . -4773) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (4764 . 4774)) nil (25825 1100 49323 286000) 0 nil] [nil nil ((#("
                " 0 1 (fontified t) 1 17 (fontified t)) . 4731) (undo-tree-id417 . -17) (undo-tree-id418 . -17) (undo-tree-id419 . -17) (undo-tree-id420 . -17) (undo-tree-id421 . -17) (undo-tree-id422 . -17) (undo-tree-id423 . -17) (undo-tree-id424 . -17) (undo-tree-id425 . -17) (undo-tree-id426 . -17) (undo-tree-id427 . -17) (undo-tree-id428 . -17) (undo-tree-id429 . -17) (undo-tree-id430 . -17) (undo-tree-id431 . -17) (undo-tree-id432 . -17) (undo-tree-id433 . -17) (undo-tree-id434 . -17) (undo-tree-id435 . -17) (undo-tree-id436 . -17) (undo-tree-id437 . -17) (undo-tree-id438 . -17) (undo-tree-id439 . -17) (undo-tree-id440 . -17) (undo-tree-id441 . -17) (undo-tree-id442 . -17) (undo-tree-id443 . -17) (undo-tree-id444 . -17) (undo-tree-id445 . -17) (undo-tree-id446 . -17) (undo-tree-id447 . -17) (undo-tree-id448 . -17) (undo-tree-id449 . -17) (undo-tree-id450 . -1) (undo-tree-id451 . -17) (#("
              " 0 1 (fontified t) 1 15 (fontified t)) . 4765) (#(" " 0 1 (fontified t)) . 4781) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (#("
              " 0 1 (fontified t) 1 15 (fontified t)) . 4800) (#(" " 0 1 (fontified t)) . 4816) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (#(",
            " 0 2 (fontified t) 2 14 (fontified t)) . 4834) 4758) ((4834 . 4848) (4816 . 4817) (4800 . 4815) (4781 . 4782) (4765 . 4780) (4731 . 4748) (t 25825 1045 706428 398000)) (25825 1045 706082 404000) 0 nil])
([nil nil ((4969 . 4973) (#("i" 0 1 (fontified t)) . -4969) (undo-tree-id541 . -1) (undo-tree-id542 . -1) (4963 . 4970) (#("((room_size + wall_width) * grid.width as f32 + wall_width)" 0 39 (fontified t) 39 41 (face font-lock-keyword-face fontified t) 41 42 (fontified t) 42 45 (face font-lock-type-face fontified t) 45 59 (fontified t)) . 4963) (undo-tree-id543 . -58) (undo-tree-id544 . -32) (undo-tree-id545 . -32) (undo-tree-id546 . -59) (undo-tree-id547 . -59) (t 25825 1100 52796 842000)) nil (25825 1170 459157 57000) 0 nil])
nil
([nil nil ((#("
            " 0 1 (fontified t) 1 13 (fontified t)) . 4950) (undo-tree-id530 . -13) (undo-tree-id531 . -13) (undo-tree-id532 . -13) (undo-tree-id533 . -13) (undo-tree-id534 . -13) (undo-tree-id535 . -13) (undo-tree-id536 . -13) (undo-tree-id537 . -13) (undo-tree-id538 . -13) (undo-tree-id539 . -13) (undo-tree-id540 . -1) (#("
          " 0 1 (fontified t) 1 11 (fontified t)) . 4980) (#(" " 0 1 (fontified t)) . 4992) (#("
          " 0 11 (fontified t)) . 5011) (#(" " 0 1 (fontified t)) . 5023) (#(",
        " 0 10 (fontified t)) . 5040) 4972) nil (25825 1170 459149 374000) 0 nil])
([nil nil ((#("    // let maze_width = (room_size + wall_width) * grid.width as f32 + wall_width;
    // let maze_height = (room_size + wall_width) * grid.height as f32 + wall_width;
" 0 3 (fontified t) 3 4 (fontified t rear-nonsticky t) 4 7 (face font-lock-comment-delimiter-face fontified t) 7 10 (face font-lock-comment-face fontified t) 10 11 (face font-lock-comment-face fontified t) 11 21 (face font-lock-comment-face fontified t) 21 62 (face font-lock-comment-face fontified t) 62 64 (face font-lock-comment-face fontified t) 64 65 (face font-lock-comment-face fontified t) 65 68 (face font-lock-comment-face fontified t) 68 83 (face font-lock-comment-face fontified t) 83 87 (fontified t) 87 90 (face font-lock-comment-delimiter-face fontified t) 90 93 (face font-lock-comment-face fontified t) 93 94 (face font-lock-comment-face fontified t) 94 105 (face font-lock-comment-face fontified t) 105 147 (face font-lock-comment-face fontified t) 147 149 (face font-lock-comment-face fontified t) 149 150 (face font-lock-comment-face fontified t) 150 153 (face font-lock-comment-face fontified t) 153 167 (face font-lock-comment-face fontified t) 167 168 (face font-lock-comment-face fontified t)) . 4235) (undo-tree-id572 . -117) (undo-tree-id573 . -34) (undo-tree-id574 . -117) (undo-tree-id575 . -167) (undo-tree-id576 . -168) (undo-tree-id577 . -168) (undo-tree-id578 . -168) (undo-tree-id579 . -117) (undo-tree-id580 . -117) (undo-tree-id581 . -34) (undo-tree-id582 . -34) (undo-tree-id583 . -34) (undo-tree-id584 . -34) (undo-tree-id585 . -83) (undo-tree-id586 . -117) (undo-tree-id587 . -168) (undo-tree-id588 . -117) (undo-tree-id589 . -117) (undo-tree-id590 . -117) (undo-tree-id591 . -168) 4352 (t 25825 1170 465743 788000)) nil (25825 1235 730383 452000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil face font-lock-comment-face)) . -5014) (4846 . 5015)) nil (25825 1235 730373 954000) 0 nil])
([nil nil ((#("(room_size + wall_width) * grid.height as f32 / 2.0 - wall_width / 2.0" 0 39 (fontified t) 39 41 (face font-lock-keyword-face fontified t) 41 42 (fontified t) 42 45 (face font-lock-type-face fontified t) 45 70 (fontified t)) . 5429) (undo-tree-id570 . -69) (undo-tree-id571 . -70)) nil (25825 1235 730371 579000) 0 nil])
([nil nil ((5450 . 5453) (5449 . 5450) (#("i" 0 1 (fontified t)) . -5449) (undo-tree-id566 . -1) (undo-tree-id567 . -1) (5436 . 5450) (#("i" 0 1 (fontified t)) . -5436) (undo-tree-id568 . -1) (undo-tree-id569 . -1) (5429 . 5437)) nil (25825 1235 730368 227000) 0 nil])
([nil nil ((5440 . 5446)) nil (25825 1235 730364 385000) 0 nil])
([nil nil ((5643 . 5647) (#("i" 0 1 (fontified t)) . -5643) (undo-tree-id559 . -1) (undo-tree-id560 . -1) (5636 . 5644) (#("((room_size + wall_width) * grid.height as f32 + wall_width)" 0 11 (fontified t) 11 40 (fontified t) 40 42 (face font-lock-keyword-face fontified t) 42 43 (fontified t) 43 46 (face font-lock-type-face fontified t) 46 60 (fontified t)) . 5636) (undo-tree-id561 . -59) (undo-tree-id562 . -20) (undo-tree-id563 . -20) (undo-tree-id564 . -60) (undo-tree-id565 . -60)) nil (25825 1235 730361 452000) 0 nil])
([nil nil ((#("
            " 0 13 (fontified t)) . 5562) (#("
          " 0 11 (fontified t)) . 5592) (#(" " 0 1 (fontified t)) . 5604) (#("
          " 0 1 (fontified t) 1 10 (fontified t) 10 11 (fontified t)) . 5623) (undo-tree-id548 . -1) (#(" " 0 1 (fontified t)) . 5635) (undo-tree-id549 . -1) (undo-tree-id550 . -1) (undo-tree-id551 . -1) (undo-tree-id552 . -1) (undo-tree-id553 . -1) (undo-tree-id554 . -1) (undo-tree-id555 . -1) (undo-tree-id556 . -1) (undo-tree-id557 . -1) (undo-tree-id558 . -1) (#(",
        " 0 2 (fontified t) 2 10 (fontified t)) . 5653) 5646) nil (25825 1235 730353 839000) 0 nil])
([nil nil ((#("    // let maze_width = (room_size + wall_width) * grid.width as f32 + wall_width;
    // let maze_height = (room_size + wall_width) * grid.height as f32 + wall_width;
" 0 3 (fontified t) 3 4 (fontified t rear-nonsticky t) 4 7 (face font-lock-comment-delimiter-face fontified t) 7 10 (face font-lock-comment-face fontified t) 10 11 (face font-lock-comment-face fontified t) 11 21 (face font-lock-comment-face fontified t) 21 62 (face font-lock-comment-face fontified t) 62 64 (face font-lock-comment-face fontified t) 64 65 (face font-lock-comment-face fontified t) 65 68 (face font-lock-comment-face fontified t) 68 83 (face font-lock-comment-face fontified t) 83 87 (fontified t) 87 90 (face font-lock-comment-delimiter-face fontified t) 90 93 (face font-lock-comment-face fontified t) 93 94 (face font-lock-comment-face fontified t) 94 105 (face font-lock-comment-face fontified t) 105 147 (face font-lock-comment-face fontified t) 147 149 (face font-lock-comment-face fontified t) 149 150 (face font-lock-comment-face fontified t) 150 153 (face font-lock-comment-face fontified t) 153 167 (face font-lock-comment-face fontified t) 167 168 (face font-lock-comment-face fontified t)) . 4847) (undo-tree-id663 . -155) (undo-tree-id664 . -72) (undo-tree-id665 . -155) (undo-tree-id666 . -167) (undo-tree-id667 . -155) (undo-tree-id668 . -155) (undo-tree-id669 . -72) (undo-tree-id670 . -72) (undo-tree-id671 . -72) (undo-tree-id672 . -72) (undo-tree-id673 . -72) (undo-tree-id674 . -72) (undo-tree-id675 . -83) (undo-tree-id676 . -155) (undo-tree-id677 . -155) (undo-tree-id678 . -155) (undo-tree-id679 . -155) (undo-tree-id680 . -168) 5002 (t 25825 1235 735385 625000)) nil (25825 1607 688318 956000) 0 nil])
([nil nil ((3861 . 3867) (#("Camera" 0 6 (face font-lock-comment-face fontified t)) . 3861) (undo-tree-id650 . -5) (undo-tree-id651 . -3) (undo-tree-id652 . -3) (undo-tree-id653 . -3) (undo-tree-id654 . -3) (undo-tree-id655 . -3) (undo-tree-id656 . -3) (undo-tree-id657 . -3) (undo-tree-id658 . -3) (undo-tree-id659 . -3) (undo-tree-id660 . -3) (undo-tree-id661 . -6) (undo-tree-id662 . -6)) nil (25825 1607 688309 527000) 0 nil])
([nil nil ((3887 . 3888)) nil (25825 1607 688298 912000) 0 nil])
([nil nil ((4234 . 4235)) nil (25825 1607 688296 537000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -4234) (undo-tree-id642 . -1) (undo-tree-id643 . -1) (undo-tree-id644 . -1) (undo-tree-id645 . -1) (#(" " 0 1 (fontified t)) . -4235) (undo-tree-id646 . -1) (undo-tree-id647 . -1) (undo-tree-id648 . -1) (undo-tree-id649 . -1) 4236 (4234 . 4236)) nil (25825 1607 688294 162000) 0 nil])
([nil nil ((4330 . 4334) (4309 . 4330) (#("t" 0 1 (face font-lock-type-face fontified t)) . -4309) (undo-tree-id592 . -1) (undo-tree-id593 . -1) 4310 (4302 . 4310) (#("i" 0 1 (face font-lock-type-face fontified t)) . -4302) (undo-tree-id594 . -1) (undo-tree-id595 . -1) (4301 . 4303) (4296 . 4301) (#("i" 0 1 (face font-lock-type-face fontified t)) . -4296) (undo-tree-id596 . -1) (4287 . 4297) (4279 . 4287) (#(" " 0 1 (fontified t)) . -4279) (undo-tree-id597 . -1) (undo-tree-id598 . -1) 4280 (4274 . 4280) (#("i" 0 1 (face font-lock-type-face fontified t)) . -4274) (undo-tree-id599 . -1) (undo-tree-id600 . -1) (4270 . 4275) (#("c" 0 1 (fontified t)) . -4270) (undo-tree-id601 . -1) (undo-tree-id602 . -1) (undo-tree-id603 . -1) (undo-tree-id604 . -1) (undo-tree-id605 . -1) (undo-tree-id606 . -1) (undo-tree-id607 . -1) (undo-tree-id608 . -1) (#("o" 0 1 (fontified t)) . -4271) (undo-tree-id609 . -1) (undo-tree-id610 . -1) (undo-tree-id611 . -1) (undo-tree-id612 . -1) 4272 (4268 . 4272) (4265 . 4268) (4260 . 4265) (#("i" 0 1 (face font-lock-type-face fontified t)) . -4260) (undo-tree-id613 . -1) (4258 . 4261) (#("i" 0 1 (face font-lock-type-face fontified t)) . -4258) (undo-tree-id614 . -1) (4253 . 4259) (#("i" 0 1 (face font-lock-type-face fontified t)) . -4253) (undo-tree-id615 . -1) (4247 . 4254) (#("i" 0 1 (face font-lock-type-face fontified t)) . -4247) (undo-tree-id616 . -1) (undo-tree-id617 . -1) (4244 . 4248) (4235 . 4244) (#("Rigid" 0 5 (face font-lock-type-face fontified t)) . -4235) (undo-tree-id618 . -1) (undo-tree-id619 . -1) (undo-tree-id620 . -2) (undo-tree-id621 . -2) (undo-tree-id622 . -2) (undo-tree-id623 . -2) (undo-tree-id624 . -3) (undo-tree-id625 . -5) (undo-tree-id626 . -5) (undo-tree-id627 . -5) (undo-tree-id628 . -5) (undo-tree-id629 . -5) (undo-tree-id630 . -5) 4240 (4238 . 4240) (#("i" 0 1 (face font-lock-type-face fontified t)) . -4238) (undo-tree-id631 . -1) (undo-tree-id632 . -1) (4237 . 4239) (#("d" 0 1 (face font-lock-type-face fontified t)) . -4237) (undo-tree-id633 . -1) (undo-tree-id634 . -1) (undo-tree-id635 . -1) (undo-tree-id636 . -1) (undo-tree-id637 . -1) (undo-tree-id638 . -1) (#("i" 0 1 (face font-lock-type-face fontified nil)) . -4238) (undo-tree-id639 . -1) 4239 (4238 . 4239) (#("i" 0 1 (face font-lock-type-face fontified t)) . -4238) (undo-tree-id640 . -1) (4236 . 4239) (#("i" 0 1 (face font-lock-type-face fontified t)) . -4236) (undo-tree-id641 . -1) (4235 . 4237) (4233 . 4235)) nil (25825 1607 688281 800000) 0 nil])
([nil nil ((3888 . 3897) (3900 . 3902) (3908 . 3910) (3926 . 3930) (3971 . 3975) (3985 . 3986) (4001 . 4004) (4013 . 4016) (4025 . 4026) (4027 . 4031) (4063 . 4067) (4074 . 4076) (4082 . 4084) (4085 . 4088) (4093 . 4094) (4152 . 4154) (4160 . 4162) (4208 . 4209) (4216 . 4219) (4228 . 4230) (4232 . 4234) (4234 . 4238) (4235 . 4239) (4269 . 4270) (4270 . 4277) (4294 . 4298) (4295 . 4299) (4334 . 4340) 4333) nil (25825 1607 688247 508000) 0 nil])
([nil nil ((4361 . 4362) (t 25825 1607 690011 210000)) nil (25825 1670 850140 524000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -4361) (undo-tree-id705 . -1) (undo-tree-id706 . -1) (undo-tree-id707 . -1) (undo-tree-id708 . -1) (undo-tree-id709 . -1) 4362) nil (25825 1670 850138 568000) 0 nil])
([nil nil ((4361 . 4367)) nil (25825 1670 850134 727000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -4364) (undo-tree-id693 . -1) (undo-tree-id694 . -1) (undo-tree-id695 . -1) (undo-tree-id696 . -1) (#(":" 0 1 (fontified t)) . -4365) (undo-tree-id697 . -1) (undo-tree-id698 . -1) (undo-tree-id699 . -1) (undo-tree-id700 . -1) (#("Z" 0 1 (face font-lock-type-face fontified t)) . -4366) (undo-tree-id701 . -1) (undo-tree-id702 . -1) (undo-tree-id703 . -1) (undo-tree-id704 . -1) 4367) nil (25825 1670 850131 864000) 0 nil])
([nil nil ((4364 . 4373)) nil (25825 1670 850003 565000) 0 nil])
([nil nil ((4373 . 4377)) nil (25825 1670 850002 168000) 0 nil])
([nil nil ((#("E" 0 1 (face font-lock-type-face fontified t)) . -4374) (undo-tree-id687 . -1) (undo-tree-id688 . -1) (#("C" 0 1 (face font-lock-type-face fontified t)) . -4375) (undo-tree-id689 . -1) (undo-tree-id690 . -1) (#("3" 0 1 (face font-lock-type-face fontified t)) . -4376) (undo-tree-id691 . -1) (undo-tree-id692 . -1) 4377) nil (25825 1670 850000 283000) 0 nil])
([nil nil ((4374 . 4387)) nil (25825 1670 849995 463000) 0 nil])
([nil nil ((#("I" 0 1 (face font-lock-type-face fontified t)) . -4386) (undo-tree-id685 . -1) (undo-tree-id686 . -1) 4387) nil (25825 1670 849993 578000) 0 nil])
([nil nil ((4386 . 4389)) nil (25825 1670 849990 295000) 0 nil])
([nil nil ((#("<" 0 1 (fontified t)) . -4387) (undo-tree-id681 . -1) (undo-tree-id682 . -1) (#(" " 0 1 (fontified t)) . -4388) (undo-tree-id683 . -1) (undo-tree-id684 . -1) 4389) nil (25825 1670 849986 943000) 0 nil])
([nil nil ((4387 . 4389)) nil (25825 1670 849974 441000) 0 nil])
([nil nil ((#("I" 0 1 (face font-lock-type-face fontified t)) . -4379) (undo-tree-id710 . -1) (undo-tree-id711 . -1) (undo-tree-id712 . -1) (undo-tree-id713 . -1) (undo-tree-id714 . -1) (undo-tree-id715 . -1) (undo-tree-id716 . -1) (undo-tree-id717 . -1) (undo-tree-id718 . -1) (undo-tree-id719 . -1) (undo-tree-id720 . -1) (undo-tree-id721 . -1) (#("D" 0 1 (face font-lock-type-face fontified t)) . -4380) (undo-tree-id722 . -1) (undo-tree-id723 . -1) (undo-tree-id724 . -1) (undo-tree-id725 . -1) (undo-tree-id726 . -1) (undo-tree-id727 . -1) (undo-tree-id728 . -1) (undo-tree-id729 . -1) (undo-tree-id730 . -1) (undo-tree-id731 . -1) (undo-tree-id732 . -1) (undo-tree-id733 . -1) (#("E" 0 1 (face font-lock-type-face fontified t)) . -4381) (undo-tree-id734 . -1) (undo-tree-id735 . -1) (undo-tree-id736 . -1) (undo-tree-id737 . -1) (undo-tree-id738 . -1) (undo-tree-id739 . -1) (undo-tree-id740 . -1) (undo-tree-id741 . -1) (undo-tree-id742 . -1) (undo-tree-id743 . -1) (undo-tree-id744 . -1) (undo-tree-id745 . -1) (#("N" 0 1 (face font-lock-type-face fontified t)) . -4382) (undo-tree-id746 . -1) (undo-tree-id747 . -1) (undo-tree-id748 . -1) (undo-tree-id749 . -1) (undo-tree-id750 . -1) (undo-tree-id751 . -1) (undo-tree-id752 . -1) (undo-tree-id753 . -1) (undo-tree-id754 . -1) (undo-tree-id755 . -1) (undo-tree-id756 . -1) (undo-tree-id757 . -1) (#("T" 0 1 (face font-lock-type-face fontified t)) . -4383) (undo-tree-id758 . -1) (undo-tree-id759 . -1) (undo-tree-id760 . -1) (undo-tree-id761 . -1) (undo-tree-id762 . -1) (undo-tree-id763 . -1) (undo-tree-id764 . -1) (undo-tree-id765 . -1) (undo-tree-id766 . -1) (undo-tree-id767 . -1) (undo-tree-id768 . -1) (undo-tree-id769 . -1) (#("I" 0 1 (face font-lock-type-face fontified t)) . -4384) (undo-tree-id770 . -1) (undo-tree-id771 . -1) (undo-tree-id772 . -1) (undo-tree-id773 . -1) (undo-tree-id774 . -1) (undo-tree-id775 . -1) (undo-tree-id776 . -1) (undo-tree-id777 . -1) (undo-tree-id778 . -1) (undo-tree-id779 . -1) (undo-tree-id780 . -1) (undo-tree-id781 . -1) (#("T" 0 1 (face font-lock-type-face fontified t)) . -4385) (undo-tree-id782 . -1) (undo-tree-id783 . -1) (undo-tree-id784 . -1) (undo-tree-id785 . -1) (undo-tree-id786 . -1) (undo-tree-id787 . -1) (undo-tree-id788 . -1) (undo-tree-id789 . -1) (undo-tree-id790 . -1) (undo-tree-id791 . -1) (undo-tree-id792 . -1) (undo-tree-id793 . -1) (#("Y" 0 1 (face font-lock-type-face fontified t)) . -4386) (undo-tree-id794 . -1) (undo-tree-id795 . -1) (undo-tree-id796 . -1) (undo-tree-id797 . -1) (undo-tree-id798 . -1) (undo-tree-id799 . -1) (undo-tree-id800 . -1) (undo-tree-id801 . -1) (undo-tree-id802 . -1) (undo-tree-id803 . -1) (undo-tree-id804 . -1) (undo-tree-id805 . -1) (#("," 0 1 (fontified t)) . -4387) (undo-tree-id806 . -1) (undo-tree-id807 . -1) (undo-tree-id808 . -1) (undo-tree-id809 . -1) (undo-tree-id810 . -1) (undo-tree-id811 . -1) (undo-tree-id812 . -1) (undo-tree-id813 . -1) (undo-tree-id814 . -1) (undo-tree-id815 . -1) (undo-tree-id816 . -1) (undo-tree-id817 . -1) (#(" " 0 1 (fontified t)) . -4388) (undo-tree-id818 . -1) (undo-tree-id819 . -1) (undo-tree-id820 . -1) (undo-tree-id821 . -1) (undo-tree-id822 . -1) (undo-tree-id823 . -1) (undo-tree-id824 . -1) (undo-tree-id825 . -1) (undo-tree-id826 . -1) (undo-tree-id827 . -1) (undo-tree-id828 . -1) 4389 (t 25825 1670 849664 625000)) nil (25825 1679 152966 154000) 0 nil])
([nil nil ((4379 . 4384)) nil (25825 1679 152907 696000) 0 nil])
([nil nil ((4388 . 4397) (#("1" 0 1 (fontified t)) . -4388) (undo-tree-id829 . -1) (undo-tree-id830 . -1) 4389 (4388 . 4389) (#("1" 0 1 (fontified t)) . -4388) (undo-tree-id831 . -1) (undo-tree-id832 . -1) (#("e" 0 1 (fontified t)) . -4389) (undo-tree-id833 . -1) (undo-tree-id834 . -1) 4390 (4383 . 4390) (#("\"" 0 1 (face font-lock-string-face fontified t)) . -4383) (undo-tree-id835 . -1) (undo-tree-id836 . -1) (undo-tree-id837 . -1) (undo-tree-id838 . -1) 4384 (4377 . 4384) (#("(" 0 1 (fontified t)) . -4377) (undo-tree-id839 . -1) (undo-tree-id840 . -1) (undo-tree-id841 . -1) (undo-tree-id842 . -1) 4378 (4377 . 4378) (#(":" 0 1 (fontified t)) . -4377) (undo-tree-id843 . -1) (undo-tree-id844 . -1) (undo-tree-id845 . -1) (undo-tree-id846 . -1) (undo-tree-id847 . -1) (undo-tree-id848 . -1) (undo-tree-id849 . -1) (undo-tree-id850 . -1) (undo-tree-id851 . -1) (undo-tree-id852 . -1) (undo-tree-id853 . -1) (undo-tree-id854 . -1) (undo-tree-id855 . -1) (undo-tree-id856 . -1) (undo-tree-id857 . -1) (undo-tree-id858 . -1) (undo-tree-id859 . -1) (undo-tree-id860 . -1) (#(":" 0 1 (fontified t)) . -4378) (undo-tree-id861 . -1) (undo-tree-id862 . -1) (undo-tree-id863 . -1) (undo-tree-id864 . -1) (undo-tree-id865 . -1) (undo-tree-id866 . -1) (undo-tree-id867 . -1) (undo-tree-id868 . -1) (undo-tree-id869 . -1) (undo-tree-id870 . -1) (undo-tree-id871 . -1) (undo-tree-id872 . -1) (undo-tree-id873 . -1) (undo-tree-id874 . -1) (undo-tree-id875 . -1) (undo-tree-id876 . -1) (undo-tree-id877 . -1) (undo-tree-id878 . -1) (#("(" 0 1 (fontified t)) . -4379) (undo-tree-id879 . -1) (undo-tree-id880 . -1) (undo-tree-id881 . -1) (undo-tree-id882 . -1) 4380 (4379 . 4380) (#("O" 0 1 (face font-lock-type-face fontified t)) . -4379) (undo-tree-id883 . -1) (undo-tree-id884 . -1) (undo-tree-id885 . -1) (undo-tree-id886 . -1) (undo-tree-id887 . -1) (#("N" 0 1 (face font-lock-type-face fontified t)) . -4380) (undo-tree-id888 . -1) (undo-tree-id889 . -1) (undo-tree-id890 . -1) (undo-tree-id891 . -1) (undo-tree-id892 . -1) (#("E" 0 1 (face font-lock-type-face fontified t)) . -4381) (undo-tree-id893 . -1) (undo-tree-id894 . -1) (undo-tree-id895 . -1) (undo-tree-id896 . -1) 4382 (t 25825 1679 156285 710000)) nil (25825 1773 350956 381000) 0 nil])
([nil nil ((4012 . 4023) (4005 . 4012) (t 25825 1773 355768 795000) 3997) nil (25825 1906 720665 503000) 0 nil])
([nil nil ((4006 . 4022) (#("		" 0 2 (fontified t)) . 4006) 4022) nil (25825 1964 436817 524000) 0 nil])
([nil nil ((#("2" 0 1 (fontified t)) . 4279) (undo-tree-id897 . -1) (undo-tree-id898 . -1)) nil (25825 1974 372453 771000) 0 nil] [nil nil ((4035 . 4036) (t 25825 1906 725036 938000)) ((#("2" 0 1 (fontified t)) . 4035) (t 25825 1954 144776 725000)) (25825 1954 141537 207000) 0 nil])
([nil nil ((4410 . 4414) (#("." 0 1 (fontified t)) . -4410) (undo-tree-id899 . -1) (undo-tree-id900 . -1) (undo-tree-id901 . -1) (undo-tree-id902 . -1) 4411 (4409 . 4411) (#(";" 0 1 (fontified t)) . -4409) (undo-tree-id903 . -1) (undo-tree-id904 . -1) (#(" " 0 1 (fontified t)) . -4410) (undo-tree-id905 . -1) (undo-tree-id906 . -1) 4411 (4408 . 4411) (#("3" 0 1 (fontified t)) . -4408) (undo-tree-id907 . -1) (undo-tree-id908 . -1) 4409 (4407 . 4409) (#("7" 0 1 (fontified t)) . -4407) (undo-tree-id909 . -1) (undo-tree-id910 . -1) (#("5" 0 1 (fontified t)) . -4408) (undo-tree-id911 . -1) (undo-tree-id912 . -1) 4409 (4398 . 4409) (#("ZERO" 0 4 (face font-lock-type-face fontified t)) . 4398) (undo-tree-id913 . -3) (undo-tree-id914 . -1) (undo-tree-id915 . -1) (undo-tree-id916 . -1) (undo-tree-id917 . -1) (undo-tree-id918 . -1) (undo-tree-id919 . -1) (undo-tree-id920 . -4) (undo-tree-id921 . -4) (t 25825 1974 371332 400000)) nil (25825 2013 302274 578000) 0 nil])
nil
([nil nil ((4413 . 4414) (t 25825 2013 304452 90000)) nil (25825 2017 978774 922000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t)) . 4413) (undo-tree-id922 . -1) (undo-tree-id923 . -1) (t 25825 2017 981093 93000)) nil (25825 2036 658880 683000) 0 nil])
([nil nil ((4398 . 4401)) nil (25825 2036 658869 369000) 0 nil])
([nil nil ((4410 . 4411) (t 25825 2036 657657 273000)) nil (25825 2054 377263 490000) 0 nil])
([nil nil ((4437 . 4438)) nil (25825 2054 377258 741000) 0 nil])
([nil nil ((#("    // Player
    commands.spawn((
        PbrBundle {
            mesh: meshes.add(
                shape::Capsule {
                    radius: 0.25,
                    depth: 0.5,
                    ..default()
                }
                .try_into()
                .unwrap(),
            ),
            material: materials.add(Color::rgb(0.2, 0.5, 0.5).into()),
            transform: Transform::from_xyz(0.5, 0.5, 0.5),
            ..default()
        },
        RigidBody::KinematicPositionBased,
        Collider::capsule(Vec3::new(0.0, -0.25, 0.0), Vec3::new(0.0, 0.25, 0.0), 0.25),
        KinematicCharacterController::default(),
    ));
" 0 4 (fontified t) 4 7 (face font-lock-comment-delimiter-face fontified t) 7 13 (face font-lock-comment-face fontified t) 13 14 (face font-lock-comment-face fontified t) 14 34 (fontified t) 34 35 (fontified t) 35 43 (fontified t) 43 52 (face font-lock-type-face fontified t) 52 55 (fontified t) 55 57 (fontified t) 57 65 (fontified t) 65 67 (fontified t) 67 71 (face font-lock-variable-name-face fontified t) 71 85 (fontified t) 85 89 (fontified t) 89 101 (fontified t) 101 106 (face font-lock-constant-face fontified t) 106 108 (fontified t) 108 115 (face font-lock-type-face fontified t) 115 118 (fontified t) 118 134 (fontified t) 134 138 (fontified t) 138 144 (face font-lock-variable-name-face fontified t) 144 151 (fontified t) 151 152 (fontified t) 152 168 (fontified t) 168 172 (fontified t) 172 177 (face font-lock-variable-name-face fontified t) 177 183 (fontified t) 183 184 (fontified t) 184 185 (fontified t) 185 201 (fontified t) 201 204 (fontified t) 204 216 (fontified t) 216 219 (fontified t) 219 231 (fontified t) 231 232 (fontified t) 232 234 (fontified t) 234 238 (fontified t) 238 262 (fontified t) 262 274 (fontified t) 274 278 (fontified t) 278 289 (fontified t) 289 291 (fontified t) 291 299 (fontified t) 299 301 (fontified t) 301 304 (fontified t) 304 307 (fontified t) 307 315 (fontified t) 315 316 (fontified t) 316 324 (face font-lock-variable-name-face fontified t) 324 340 (fontified t) 340 345 (face font-lock-type-face fontified t) 345 375 (fontified t) 375 377 (fontified t) 377 385 (fontified t) 385 387 (fontified t) 387 396 (face font-lock-variable-name-face fontified t) 396 398 (fontified t) 398 407 (face font-lock-type-face fontified t) 407 434 (fontified t) 434 435 (fontified t) 435 443 (fontified t) 443 446 (fontified t) 446 458 (fontified t) 458 460 (fontified t) 460 464 (fontified t) 464 466 (fontified t) 466 468 (fontified t) 468 472 (fontified t) 472 473 (fontified t) 473 477 (fontified t) 477 486 (face font-lock-type-face fontified t) 486 488 (fontified t) 488 510 (face font-lock-type-face fontified t) 510 511 (fontified t) 511 512 (fontified t) 512 513 (fontified t) 513 520 (fontified t) 520 528 (face font-lock-type-face fontified t) 528 538 (fontified t) 538 542 (face font-lock-type-face fontified t) 542 564 (fontified t) 564 566 (fontified t) 566 570 (face font-lock-type-face fontified t) 570 591 (fontified t) 591 593 (fontified t) 593 594 (fontified t) 594 599 (fontified t) 599 600 (fontified t) 600 603 (fontified t) 603 604 (fontified t) 604 608 (fontified t) 608 636 (face font-lock-type-face fontified t) 636 647 (fontified t) 647 653 (fontified t) 653 656 (fontified t) 656 657 (fontified t)) . 3854) (undo-tree-id924 . -656) (undo-tree-id925 . -12) (undo-tree-id926 . -656) (undo-tree-id927 . -656) (undo-tree-id928 . 73) (undo-tree-id929 . -657) (undo-tree-id930 . -656) 4510 (t 25825 2054 380893 351000)) nil (25825 2164 199047 199000) 0 nil])
([nil nil ((1574 . 1577) (#("5" 0 1 (fontified t)) . -1574) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) 1575 (t 25825 2164 200290 723000)) nil (25825 20402 83488 699000) 0 nil])
([nil nil ((1579 . 1582) (#("5" 0 1 (fontified t)) . -1579) (undo-tree-id0 . -1) (undo-tree-id1 . -1) 1580) nil (25825 20402 83484 141000) 0 nil])
([nil nil ((#("1" 0 1 (fontified t)) . 1579) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (t 25825 20402 97922 598000)) nil (25825 20668 10587 83000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . 1579) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1)) nil (25825 20668 10585 460000) 0 nil])
([nil nil ((1579 . 1580)) nil (25825 20668 10579 168000) 0 nil])
([nil nil ((1579 . 1580) (#("3" 0 1 (fontified t)) . 1579) (undo-tree-id10 . -1)) nil (25825 20668 10578 557000) 0 nil])
([nil nil ((#("1" 0 1 (fontified t)) . 1574) (undo-tree-id8 . -1) (undo-tree-id9 . -1)) nil (25825 20668 10577 505000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . 1574) (undo-tree-id6 . -1) (undo-tree-id7 . -1)) nil (25825 20668 10575 90000) 0 nil])
([nil nil ((1574 . 1575)) nil (25825 20668 10564 741000) 0 nil])
([nil nil ((1574 . 1575) (#("5" 0 1 (fontified t)) . 1574) (undo-tree-id31 . -1) (t 25825 20668 14594 82000)) nil (25825 20849 411505 451000) 0 nil])
([nil nil ((1578 . 1579) (#("5" 0 1 (fontified t)) . 1578) (undo-tree-id30 . -1)) nil (25825 20849 411501 955000) 0 nil])
([nil nil ((1574 . 1575) (#("2" 0 1 (fontified t)) . 1574) (undo-tree-id36 . -1) (t 25825 20849 414597 364000)) nil (25825 22166 371785 936000) 0 nil])
([nil nil ((1575 . 1576)) nil (25825 22166 371784 143000) 0 nil])
([nil nil ((1579 . 1581) (#("2" 0 1 (fontified t)) . -1579) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) 1580) nil (25825 22178 266687 917000) 0 nil])
([nil nil ((1574 . 1575) (#("10" 0 2 (fontified t)) . 1574) (undo-tree-id77 . -1) (undo-tree-id78 . -2) (undo-tree-id79 . -2) (t 25825 22166 374621 380000)) nil (25825 22183 177050 201000) 0 nil] [nil nil ((1574 . 1575) (#("100, 100);
    let current_cell = (0, 0);" 0 2 (fontified t) 2 7 (fontified t) 7 11 (fontified t) 11 15 (fontified t) 15 18 (face font-lock-keyword-face fontified t) 18 19 (fontified t) 19 31 (face font-lock-variable-name-face fontified t) 31 41 (fontified t)) . 1574) (undo-tree-id37 . 34) (undo-tree-id38 . -40) (undo-tree-id39 . -5) (undo-tree-id40 . -5) (undo-tree-id41 . -5) (undo-tree-id42 . -5) (undo-tree-id43 . -6) (undo-tree-id44 . -6) (undo-tree-id45 . -6) (undo-tree-id46 . -6) (undo-tree-id47 . -6) (undo-tree-id48 . -6) (undo-tree-id49 . -6) (undo-tree-id50 . -6) (undo-tree-id51 . -6) (undo-tree-id52 . -6) (undo-tree-id53 . -6) (undo-tree-id54 . -6) (undo-tree-id55 . -6) (undo-tree-id56 . -6) (undo-tree-id57 . -6) (undo-tree-id58 . -41) (undo-tree-id59 . -41) (t 25825 22166 374621 380000)) ((1574 . 1615) (#("u" 0 1 (fontified t)) . 1574)) (25825 22178 266416 988000) 0 nil])
([nil nil ((1578 . 1579) (#("10" 0 2 (fontified t)) . 1578) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -2) (undo-tree-id76 . -2)) nil (25825 22183 177045 692000) 0 nil])
nil
([nil nil ((1578 . 1579) (#("5" 0 1 (fontified t)) . 1578) (undo-tree-id83 . -1) (t 25825 22183 181288 363000)) nil (25825 22266 119765 279000) 0 nil])
([nil current ((1574 . 1575) (#("5" 0 1 (fontified t)) . 1574) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1)) nil (25825 22266 119762 263000) 0 nil])
nil
