(undo-tree-save-format-version . 1)
"52a4b15e15469df74b2922f40037829d36ac8550"
[nil nil nil nil (25819 64687 539402 132000) 0 nil]
([nil nil ((nil rear-nonsticky nil 1 . 2) (#("
" 0 1 (fontified nil)) . -8197) (1 . 8198) (t 25819 64442 837602 830000)) nil (25819 64687 539401 171000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t rear-nonsticky t)) . 1) (undo-tree-id573 . -1) (undo-tree-id574 . -1) (undo-tree-id575 . -1) (undo-tree-id576 . -1)) nil (25819 64687 539399 968000) 0 nil])
([nil nil ((23 . 25)) nil (25819 64687 539397 554000) 0 nil])
([nil nil ((221 . 222) (#("4" 0 1 (fontified t)) . 221) (undo-tree-id572 . -1)) nil (25819 64687 539396 702000) 0 nil])
([nil nil ((#(", true, true" 0 2 (fontified t) 2 6 (fontified t face font-lock-keyword-face) 6 8 (fontified t) 8 12 (fontified t face font-lock-keyword-face)) . 336) (undo-tree-id570 . -11) (undo-tree-id571 . -12)) nil (25819 64687 539395 480000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . 789) (undo-tree-id568 . -1) (undo-tree-id569 . -1)) nil (25819 64687 539393 817000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 789) (undo-tree-id566 . -1) (undo-tree-id567 . -1)) nil (25819 64687 539392 294000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t)) . 789) (undo-tree-id564 . -1) (undo-tree-id565 . -1)) nil (25819 64687 539390 461000) 0 nil])
([nil nil ((#("W" 0 1 (fontified t face font-lock-type-face)) . 789) (undo-tree-id562 . -1) (undo-tree-id563 . -1)) nil (25819 64687 539388 537000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . 789) (undo-tree-id560 . -1) (undo-tree-id561 . -1)) nil (25819 64687 539386 964000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . 789) (undo-tree-id558 . -1) (undo-tree-id559 . -1)) nil (25819 64687 539384 840000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . 789) (undo-tree-id556 . -1) (undo-tree-id557 . -1)) nil (25819 64687 539383 277000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . 789) (undo-tree-id554 . -1) (undo-tree-id555 . -1)) nil (25819 64687 539381 414000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . 789) (undo-tree-id552 . -1) (undo-tree-id553 . -1)) nil (25819 64687 539379 941000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 789) (undo-tree-id550 . -1) (undo-tree-id551 . -1)) nil (25819 64687 539378 137000) 0 nil])
([nil nil ((#("W" 0 1 (fontified t face font-lock-type-face)) . 789) (undo-tree-id548 . -1) (undo-tree-id549 . -1)) nil (25819 64687 539376 615000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . 789) (undo-tree-id546 . -1) (undo-tree-id547 . -1)) nil (25819 64687 539375 162000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . 789) (undo-tree-id544 . -1) (undo-tree-id545 . -1)) nil (25819 64687 539373 649000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . 789) (undo-tree-id542 . -1) (undo-tree-id543 . -1)) nil (25819 64687 539371 796000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . 789) (undo-tree-id540 . -1) (undo-tree-id541 . -1)) nil (25819 64687 539370 313000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t)) . 789) (undo-tree-id536 . 1) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (undo-tree-id539 . -1)) nil (25819 64687 539368 700000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t)) . 788) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (undo-tree-id526 . -1) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (undo-tree-id532 . 1) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (undo-tree-id535 . -1)) nil (25819 64687 539365 133000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t)) . 775) (undo-tree-id506 . 1) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (undo-tree-id509 . -1)) nil (25819 64687 539353 90000) 0 nil])
([nil nil ((#(", Walls::South, Walls::North" 0 2 (fontified t) 2 7 (fontified t face font-lock-type-face) 7 9 (fontified t) 9 14 (fontified t face font-lock-type-face) 14 16 (fontified t) 16 21 (fontified t face font-lock-type-face) 21 23 (fontified t) 23 28 (fontified t face font-lock-type-face)) . 874) (undo-tree-id500 . -27) (undo-tree-id501 . -12) (undo-tree-id502 . -12) (undo-tree-id503 . -12) (undo-tree-id504 . -12) (undo-tree-id505 . -28)) nil (25819 64687 539350 315000) 0 nil])
([nil nil ((#(", Walls::North, Walls::South" 0 2 (fontified t) 2 7 (fontified t face font-lock-type-face) 7 9 (fontified t) 9 14 (fontified t face font-lock-type-face) 14 16 (fontified t) 16 21 (fontified t face font-lock-type-face) 21 23 (fontified t) 23 28 (fontified t face font-lock-type-face)) . 894) (undo-tree-id490 . -27) (undo-tree-id491 . -13) (undo-tree-id492 . -13) (undo-tree-id493 . -13) (undo-tree-id494 . -13) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (undo-tree-id499 . -28)) nil (25819 64687 539346 428000) 0 nil])
([nil nil ((#(", Walls::West, Walls::East" 0 2 (fontified t) 2 7 (fontified t face font-lock-type-face) 7 9 (fontified t) 9 13 (fontified t face font-lock-type-face) 13 15 (fontified t) 15 20 (fontified t face font-lock-type-face) 20 22 (fontified t) 22 26 (fontified t face font-lock-type-face)) . 915) (undo-tree-id484 . -25) (undo-tree-id485 . -12) (undo-tree-id486 . -12) (undo-tree-id487 . -12) (undo-tree-id488 . -12) (undo-tree-id489 . -26)) nil (25819 64687 539340 697000) 0 nil])
([nil nil ((#(", Walls::East, Walls::West" 0 2 (fontified t) 2 7 (fontified t face font-lock-type-face) 7 9 (fontified t) 9 13 (fontified t face font-lock-type-face) 13 15 (fontified t) 15 20 (fontified t face font-lock-type-face) 20 22 (fontified t) 22 26 (fontified t face font-lock-type-face)) . 935) (undo-tree-id476 . -25) (undo-tree-id477 . -13) (undo-tree-id478 . -13) (undo-tree-id479 . -13) (undo-tree-id480 . -13) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (undo-tree-id483 . -26)) nil (25819 64687 539332 963000) 0 nil])
([nil nil ((#(", wall_current, wall_neighbor" 0 29 (fontified t)) . 975) (undo-tree-id470 . -28) (undo-tree-id471 . -5) (undo-tree-id472 . -5) (undo-tree-id473 . -5) (undo-tree-id474 . -5) (undo-tree-id475 . -29)) nil (25819 64687 539328 454000) 0 nil])
([nil nil ((#("                            (wall_current.clone(), wall_neighbor.clone()),
" 0 18 (fontified t) 18 40 (fontified t) 40 75 (fontified t)) . 1518) (undo-tree-id460 . -25) (undo-tree-id461 . -74) (undo-tree-id462 . -30) (undo-tree-id463 . -30) (undo-tree-id464 . -25) (undo-tree-id465 . -25) (undo-tree-id466 . -25) (undo-tree-id467 . -25) (undo-tree-id468 . -25) (undo-tree-id469 . -75) 1543) nil (25819 64687 539324 998000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . 1516) (undo-tree-id458 . -1) (undo-tree-id459 . -1)) nil (25819 64687 539319 808000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t)) . 1458) (undo-tree-id454 . 1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1)) nil (25819 64687 539318 135000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t)) . 1540) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . 1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1)) nil (25819 64687 539315 39000) 0 nil])
([nil nil ((#("                        " 0 24 (fontified nil)) . 1486) (undo-tree-id427 . -24) (undo-tree-id428 . -24) (undo-tree-id429 . -24) (#("
" 0 1 (fontified t)) . -1486) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (#("                            " 0 28 (fontified nil)) . 1458) (undo-tree-id437 . -25) (undo-tree-id438 . -25) (undo-tree-id439 . -25) (undo-tree-id440 . -25) (undo-tree-id441 . -25) (undo-tree-id442 . -25) (undo-tree-id443 . -25) (undo-tree-id444 . -25) (undo-tree-id445 . -24) (undo-tree-id446 . -24) (#("
" 0 1 (fontified t)) . -1458) (undo-tree-id447 . -1) 1446) nil (25819 64687 539310 501000) 0 nil])
([nil nil ((#("        // North
        for (col_i, cell) in row.iter().enumerate() {
            if cell.walls[Walls::North as usize] {
                commands.spawn((
                    PbrBundle {
                        mesh: meshes.add(Mesh::from(shape::Box::new(
                            wall_width,
                            wall_height,
                            wall_depth,
                        ))),
                        material: materials.add(Color::rgb(1.0, 0.0, 0.0).into()),
                        transform: Transform::from_xyz(
                            row_i as f32 * (room_size + wall_width) + room_size + wall_width / 2.0,
                            0.0,
                            col_i as f32 * (room_size + wall_width) + (room_size / 2.0),
                        ),
                        ..default()
                    },
                    RigidBody::Fixed,
                    Collider::cuboid(wall_width / 2.0, wall_height / 2.0, wall_depth / 2.0),
                ));
            }
        }
" 0 8 (fontified t) 8 11 (fontified t face font-lock-comment-delimiter-face) 11 17 (fontified t face font-lock-comment-face) 17 25 (fontified t) 25 28 (fontified t face font-lock-keyword-face) 28 43 (fontified t) 43 45 (fontified t face font-lock-keyword-face) 45 83 (fontified t) 83 85 (fontified t face font-lock-keyword-face) 85 97 (fontified t) 97 102 (fontified t face font-lock-type-face) 102 104 (fontified t) 104 109 (fontified t face font-lock-type-face) 109 110 (fontified t) 110 112 (fontified t face font-lock-keyword-face) 112 113 (fontified t) 113 118 (fontified t face font-lock-type-face) 118 175 (fontified t) 175 184 (fontified t face font-lock-type-face) 184 211 (fontified t) 211 215 (fontified t face font-lock-variable-name-face) 215 228 (fontified t) 228 232 (fontified t face font-lock-type-face) 232 239 (fontified t) 239 244 (fontified t face font-lock-constant-face) 244 246 (fontified t) 246 249 (fontified t face font-lock-type-face) 249 430 (fontified t) 430 438 (fontified t face font-lock-variable-name-face) 438 454 (fontified t) 454 459 (fontified t face font-lock-type-face) 459 513 (fontified t) 513 522 (fontified t face font-lock-variable-name-face) 522 524 (fontified t) 524 533 (fontified t face font-lock-type-face) 533 579 (fontified t) 579 581 (fontified t face font-lock-keyword-face) 581 582 (fontified t) 582 585 (fontified t face font-lock-type-face) 585 633 (fontified t) 633 645 (fontified t) 645 712 (fontified t) 712 714 (fontified t face font-lock-keyword-face) 714 715 (fontified t) 715 718 (fontified t face font-lock-type-face) 718 873 (fontified t) 873 882 (fontified t face font-lock-type-face) 882 884 (fontified t) 884 889 (fontified t face font-lock-type-face) 889 911 (fontified t) 911 919 (fontified t face font-lock-type-face) 919 947 (fontified t) 947 984 (fontified t) 984 1028 (fontified t)) . 3611) (undo-tree-id276 . -1027) (undo-tree-id277 . -1027) (undo-tree-id278 . -1027) (undo-tree-id279 . -15) (undo-tree-id280 . -15) (undo-tree-id281 . -69) (undo-tree-id282 . -69) (undo-tree-id283 . -120) (undo-tree-id284 . -120) (undo-tree-id285 . -153) (undo-tree-id286 . -153) (undo-tree-id287 . -185) (undo-tree-id288 . -185) (undo-tree-id289 . -251) (undo-tree-id290 . -251) (undo-tree-id291 . -294) (undo-tree-id292 . -294) (undo-tree-id293 . -335) (undo-tree-id294 . -335) (undo-tree-id295 . -375) (undo-tree-id296 . -375) (undo-tree-id297 . -404) (undo-tree-id298 . -404) (undo-tree-id299 . -470) (undo-tree-id300 . -470) (undo-tree-id301 . -543) (undo-tree-id302 . -543) (undo-tree-id303 . -609) (undo-tree-id304 . -609) (undo-tree-id305 . -676) (undo-tree-id306 . -676) (undo-tree-id307 . -742) (undo-tree-id308 . -742) (undo-tree-id309 . -792) (undo-tree-id310 . -792) (undo-tree-id311 . -828) (undo-tree-id312 . -828) (undo-tree-id313 . -851) (undo-tree-id314 . -851) (undo-tree-id315 . -889) (undo-tree-id316 . -889) (undo-tree-id317 . -955) (undo-tree-id318 . -955) (undo-tree-id319 . -1002) (undo-tree-id320 . -1002) (undo-tree-id321 . -1016) (undo-tree-id322 . -1016) (undo-tree-id323 . -1026) (undo-tree-id324 . -1026) (undo-tree-id325 . -1026) (undo-tree-id326 . -1026) (undo-tree-id327 . -1016) (undo-tree-id328 . -1016) (undo-tree-id329 . -1002) (undo-tree-id330 . -1002) (undo-tree-id331 . -955) (undo-tree-id332 . -955) (undo-tree-id333 . -889) (undo-tree-id334 . -889) (undo-tree-id335 . -851) (undo-tree-id336 . -851) (undo-tree-id337 . -828) (undo-tree-id338 . -828) (undo-tree-id339 . -792) (undo-tree-id340 . -792) (undo-tree-id341 . -742) (undo-tree-id342 . -742) (undo-tree-id343 . -676) (undo-tree-id344 . -676) (undo-tree-id345 . -609) (undo-tree-id346 . -609) (undo-tree-id347 . -543) (undo-tree-id348 . -543) (undo-tree-id349 . -470) (undo-tree-id350 . -470) (undo-tree-id351 . -404) (undo-tree-id352 . -404) (undo-tree-id353 . -375) (undo-tree-id354 . -375) (undo-tree-id355 . -335) (undo-tree-id356 . -335) (undo-tree-id357 . -294) (undo-tree-id358 . -294) (undo-tree-id359 . -251) (undo-tree-id360 . -251) (undo-tree-id361 . -185) (undo-tree-id362 . -185) (undo-tree-id363 . -153) (undo-tree-id364 . -153) (undo-tree-id365 . -120) (undo-tree-id366 . -120) (undo-tree-id367 . -69) (undo-tree-id368 . -69) (undo-tree-id369 . -15) (undo-tree-id370 . -15) (undo-tree-id371 . -15) (undo-tree-id372 . -15) (undo-tree-id373 . -15) (undo-tree-id374 . -1027) (undo-tree-id375 . -1028) (undo-tree-id376 . -15) (undo-tree-id377 . -1027) (undo-tree-id378 . -15) (undo-tree-id379 . -15) (undo-tree-id380 . -32) (undo-tree-id381 . -32) (undo-tree-id382 . -86) (undo-tree-id383 . -86) (undo-tree-id384 . -137) (undo-tree-id385 . -137) (undo-tree-id386 . -170) (undo-tree-id387 . -170) (undo-tree-id388 . -202) (undo-tree-id389 . -202) (undo-tree-id390 . -271) (undo-tree-id391 . -271) (undo-tree-id392 . -311) (undo-tree-id393 . -311) (undo-tree-id394 . -352) (undo-tree-id395 . -352) (undo-tree-id396 . -392) (undo-tree-id397 . -392) (undo-tree-id398 . -421) (undo-tree-id399 . -421) (undo-tree-id400 . -504) (undo-tree-id401 . -504) (undo-tree-id402 . -560) (undo-tree-id403 . -560) (undo-tree-id404 . -660) (undo-tree-id405 . -660) (undo-tree-id406 . -693) (undo-tree-id407 . -693) (undo-tree-id408 . -782) (undo-tree-id409 . -782) (undo-tree-id410 . -809) (undo-tree-id411 . -809) (undo-tree-id412 . -845) (undo-tree-id413 . -845) (undo-tree-id414 . -868) (undo-tree-id415 . -868) (undo-tree-id416 . -906) (undo-tree-id417 . -906) (undo-tree-id418 . -999) (undo-tree-id419 . -999) (undo-tree-id420 . -1017) (undo-tree-id421 . -1017) (undo-tree-id422 . -1018) (undo-tree-id423 . -1027) (undo-tree-id424 . -1027) (undo-tree-id425 . -1027) (undo-tree-id426 . -1028) 4638) nil (25819 64687 539294 991000) 0 nil])
([nil nil ((#("        // West
        for (col_i, cell) in row.iter().enumerate() {
            if cell.walls[Walls::West as usize] {
                commands.spawn((
                    PbrBundle {
                        mesh: meshes.add(Mesh::from(shape::Box::new(
                            wall_depth,
                            wall_height,
                            wall_width,
                        ))),
                        material: materials.add(Color::rgb(1.0, 0.0, 0.0).into()),
                        transform: Transform::from_xyz(
                            row_i as f32 * (room_size + wall_width) + (room_size / 2.0),
                            0.0,
                            col_i as f32 * (room_size + wall_width) - wall_width / 2.0,
                        ),
                        ..default()
                    },
                    RigidBody::Fixed,
                    Collider::cuboid(wall_depth / 2.0, wall_height / 2.0, wall_width / 2.0),
                ));
            }
        }
" 0 8 (fontified t) 8 11 (fontified t face font-lock-comment-delimiter-face) 11 16 (fontified t face font-lock-comment-face) 16 24 (fontified t) 24 27 (fontified t face font-lock-keyword-face) 27 42 (fontified t) 42 44 (fontified t face font-lock-keyword-face) 44 82 (fontified t) 82 84 (fontified t face font-lock-keyword-face) 84 96 (fontified t) 96 101 (fontified t face font-lock-type-face) 101 103 (fontified t) 103 107 (fontified t face font-lock-type-face) 107 108 (fontified t) 108 110 (fontified t face font-lock-keyword-face) 110 111 (fontified t) 111 116 (fontified t face font-lock-type-face) 116 120 (fontified t) 120 173 (fontified t) 173 182 (fontified t face font-lock-type-face) 182 209 (fontified t) 209 213 (fontified t face font-lock-variable-name-face) 213 226 (fontified t) 226 230 (fontified t face font-lock-type-face) 230 237 (fontified t) 237 242 (fontified t face font-lock-constant-face) 242 244 (fontified t) 244 247 (fontified t face font-lock-type-face) 247 428 (fontified t) 428 436 (fontified t face font-lock-variable-name-face) 436 440 (fontified t) 440 452 (fontified t) 452 457 (fontified t face font-lock-type-face) 457 487 (fontified t) 487 501 (fontified t) 501 511 (fontified t) 511 520 (face font-lock-variable-name-face fontified t) 520 522 (fontified t) 522 531 (face font-lock-type-face fontified t) 531 543 (fontified t) 543 577 (fontified t) 577 579 (fontified t face font-lock-keyword-face) 579 580 (fontified t) 580 583 (fontified t face font-lock-type-face) 583 699 (fontified t) 699 701 (fontified t face font-lock-keyword-face) 701 702 (fontified t) 702 705 (fontified t face font-lock-type-face) 705 859 (fontified t) 859 868 (fontified t face font-lock-type-face) 868 870 (fontified t) 870 875 (fontified t face font-lock-type-face) 875 897 (fontified t) 897 905 (fontified t face font-lock-type-face) 905 1014 (fontified t)) . 4627) (undo-tree-id137 . -1013) (undo-tree-id138 . -1013) (undo-tree-id139 . -1013) (undo-tree-id140 . -9) (undo-tree-id141 . -1013) (undo-tree-id142 . -9) (undo-tree-id143 . -9) (undo-tree-id144 . -25) (undo-tree-id145 . -25) (undo-tree-id146 . -79) (undo-tree-id147 . -79) (undo-tree-id148 . -129) (undo-tree-id149 . -129) (undo-tree-id150 . -162) (undo-tree-id151 . -162) (undo-tree-id152 . -194) (undo-tree-id153 . -194) (undo-tree-id154 . -263) (undo-tree-id155 . -263) (undo-tree-id156 . -303) (undo-tree-id157 . -303) (undo-tree-id158 . -344) (undo-tree-id159 . -344) (undo-tree-id160 . -384) (undo-tree-id161 . -384) (undo-tree-id162 . -413) (undo-tree-id163 . -413) (undo-tree-id164 . -496) (undo-tree-id165 . -496) (undo-tree-id166 . -552) (undo-tree-id167 . -552) (undo-tree-id168 . -641) (undo-tree-id169 . -641) (undo-tree-id170 . -674) (undo-tree-id171 . -674) (undo-tree-id172 . -762) (undo-tree-id173 . -762) (undo-tree-id174 . -789) (undo-tree-id175 . -789) (undo-tree-id176 . -825) (undo-tree-id177 . -825) (undo-tree-id178 . -848) (undo-tree-id179 . -848) (undo-tree-id180 . -886) (undo-tree-id181 . -886) (undo-tree-id182 . -979) (undo-tree-id183 . -979) (undo-tree-id184 . -886) (undo-tree-id185 . -886) (undo-tree-id186 . -848) (undo-tree-id187 . -848) (undo-tree-id188 . -825) (undo-tree-id189 . -825) (undo-tree-id190 . -789) (undo-tree-id191 . -789) (undo-tree-id192 . -762) (undo-tree-id193 . -762) (undo-tree-id194 . -674) (undo-tree-id195 . -674) (undo-tree-id196 . -641) (undo-tree-id197 . -641) (undo-tree-id198 . -552) (undo-tree-id199 . -552) (undo-tree-id200 . -496) (undo-tree-id201 . -496) (undo-tree-id202 . -413) (undo-tree-id203 . -413) (undo-tree-id204 . -384) (undo-tree-id205 . -384) (undo-tree-id206 . -344) (undo-tree-id207 . -344) (undo-tree-id208 . -303) (undo-tree-id209 . -303) (undo-tree-id210 . -263) (undo-tree-id211 . -263) (undo-tree-id212 . -194) (undo-tree-id213 . -194) (undo-tree-id214 . -162) (undo-tree-id215 . -162) (undo-tree-id216 . -129) (undo-tree-id217 . -129) (undo-tree-id218 . -79) (undo-tree-id219 . -79) (undo-tree-id220 . -25) (undo-tree-id221 . -25) (undo-tree-id222 . -9) (undo-tree-id223 . -9) (undo-tree-id224 . -1014) (undo-tree-id225 . -9) (undo-tree-id226 . -1013) (undo-tree-id227 . -9) (undo-tree-id228 . -9) (undo-tree-id229 . -25) (undo-tree-id230 . -25) (undo-tree-id231 . -79) (undo-tree-id232 . -79) (undo-tree-id233 . -129) (undo-tree-id234 . -129) (undo-tree-id235 . -162) (undo-tree-id236 . -162) (undo-tree-id237 . -194) (undo-tree-id238 . -194) (undo-tree-id239 . -263) (undo-tree-id240 . -263) (undo-tree-id241 . -303) (undo-tree-id242 . -303) (undo-tree-id243 . -344) (undo-tree-id244 . -344) (undo-tree-id245 . -384) (undo-tree-id246 . -384) (undo-tree-id247 . -413) (undo-tree-id248 . -413) (undo-tree-id249 . -496) (undo-tree-id250 . -496) (undo-tree-id251 . -552) (undo-tree-id252 . -552) (undo-tree-id253 . -641) (undo-tree-id254 . -641) (undo-tree-id255 . -674) (undo-tree-id256 . -674) (undo-tree-id257 . -762) (undo-tree-id258 . -762) (undo-tree-id259 . -789) (undo-tree-id260 . -789) (undo-tree-id261 . -825) (undo-tree-id262 . -825) (undo-tree-id263 . -848) (undo-tree-id264 . -848) (undo-tree-id265 . -886) (undo-tree-id266 . -886) (undo-tree-id267 . -979) (undo-tree-id268 . -979) (undo-tree-id269 . -999) (undo-tree-id270 . -999) (undo-tree-id271 . -1004) (undo-tree-id272 . -1013) (undo-tree-id273 . -1013) (undo-tree-id274 . -1013) (undo-tree-id275 . -1014) 5640) nil (25819 64687 539219 600000) 0 nil])
([nil nil ((#("W" 0 1 (fontified t face font-lock-type-face)) . 3708) (undo-tree-id135 . -1) (undo-tree-id136 . -1)) nil (25819 64687 539040 314000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t face font-lock-constant-face)) . 3708) (undo-tree-id133 . -1) (undo-tree-id134 . -1)) nil (25819 64687 539038 701000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t face font-lock-constant-face)) . 3708) (undo-tree-id131 . -1) (undo-tree-id132 . -1)) nil (25819 64687 539037 198000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t face font-lock-constant-face)) . 3708) (undo-tree-id129 . -1) (undo-tree-id130 . -1)) nil (25819 64687 539035 555000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t face font-lock-constant-face)) . 3708) (undo-tree-id127 . -1) (undo-tree-id128 . -1)) nil (25819 64687 539034 82000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . 3708) (undo-tree-id125 . -1) (undo-tree-id126 . -1)) nil (25819 64687 539032 359000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . 3708) (undo-tree-id123 . -1) (undo-tree-id124 . -1)) nil (25819 64687 539030 696000) 0 nil])
([nil nil ((#("S" 0 1 (fontified t face font-lock-type-face)) . 3708) (undo-tree-id121 . -1) (undo-tree-id122 . -1)) nil (25819 64687 539029 83000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . 3708) (undo-tree-id119 . -1) (undo-tree-id120 . -1)) nil (25819 64687 539027 460000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t)) . 3708) (undo-tree-id117 . -1) (undo-tree-id118 . -1)) nil (25819 64687 539025 266000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . 3708) (undo-tree-id115 . -1) (undo-tree-id116 . -1)) nil (25819 64687 539023 422000) 0 nil])
([nil nil ((#("h" 0 1 (fontified t)) . 3708) (undo-tree-id113 . -1) (undo-tree-id114 . -1)) nil (25819 64687 539021 709000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 3708) (undo-tree-id111 . -1) (undo-tree-id112 . -1)) nil (25819 64695 158692 380000) 0 nil])
([nil nil ((#("as usize" 0 1 (fontified t face font-lock-keyword-face) 1 2 (fontified t face font-lock-keyword-face) 2 3 (fontified t) 3 4 (fontified t face font-lock-type-face) 4 5 (fontified t face font-lock-type-face) 5 6 (fontified t face font-lock-type-face) 6 7 (fontified t face font-lock-type-face) 7 8 (fontified t face font-lock-type-face)) . 3708) (undo-tree-id579 . -1) (undo-tree-id580 . -7) 3709) nil (25819 64720 240762 818000) 0 nil] [nil nil ((#("a" 0 1 (fontified t face font-lock-keyword-face)) . 3708) (undo-tree-id109 . -1) (undo-tree-id110 . -1)) ((3708 . 3709)) (25819 64695 35951 220000) 0 nil])
([nil nil ((3708 . 3709)) nil (25819 64720 240760 274000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . 3708) (undo-tree-id107 . -1) (undo-tree-id108 . -1)) ((3708 . 3709)) (25819 64694 889051 602000) 0 nil])
([nil nil ((4703 . 4704) (#("Walls::East as usize" 0 1 (fontified t face font-lock-type-face) 1 2 (fontified t face font-lock-type-face) 2 3 (fontified t face font-lock-type-face) 3 4 (fontified t face font-lock-type-face) 4 5 (fontified t face font-lock-type-face) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t face font-lock-type-face) 8 9 (fontified t face font-lock-type-face) 9 10 (fontified t face font-lock-type-face) 10 11 (fontified t face font-lock-type-face) 11 12 (fontified t) 12 13 (fontified t face font-lock-keyword-face) 13 14 (fontified t face font-lock-keyword-face) 14 15 (fontified t) 15 16 (fontified t face font-lock-type-face) 16 17 (fontified t face font-lock-type-face) 17 18 (fontified t face font-lock-type-face) 18 19 (fontified t face font-lock-type-face) 19 20 (fontified t face font-lock-type-face)) . 4703) (undo-tree-id577 . -1) (undo-tree-id578 . -19) 4704) nil (25819 64720 240758 811000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 3708) (undo-tree-id105 . -1) (undo-tree-id106 . -1)) ((3708 . 3709)) (25819 64694 742027 744000) 0 nil])
([nil nil ((5818 . 5819)) nil (25819 64720 240749 173000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t face font-lock-type-face)) . 3708) (undo-tree-id103 . -1) (undo-tree-id104 . -1)) ((3708 . 3709)) (25819 64694 595318 791000) 0 nil])
([nil nil ((#("
            " 0 1 (fontified t) 1 13 (fontified t)) . 855) (#("
 " 0 1 (fontified t) 1 2 (fontified t)) . 876) (#("          " 0 10 (fontified t)) . 879) (#("
    " 0 1 (fontified t) 1 5 (fontified t)) . 896) (#("       " 0 7 (fontified t)) . 902) (#("
       " 0 1 (fontified t) 1 8 (fontified t)) . 917) (#("    " 0 4 (fontified t)) . 926) (#(",
        " 0 2 (fontified t) 2 10 (fontified t)) . 936) 2686) nil (25819 64720 240740 366000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . 3708) (undo-tree-id101 . -1) (undo-tree-id102 . -1)) ((3708 . 3709)) (25819 64694 448980 354000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t face font-lock-comment-delimiter-face)) . 23) (undo-tree-id583 . -1) (undo-tree-id584 . -1) (t 25819 64720 240941 646000)) nil (25819 64755 986279 837000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . 3708) (undo-tree-id99 . -1) (undo-tree-id100 . -1)) ((3708 . 3709)) (25819 64694 301975 872000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . 23) (undo-tree-id581 . -1) (undo-tree-id582 . -1)) nil (25819 64755 986273 675000) 0 nil])
([nil nil ((#("z" 0 1 (fontified t)) . 3708) (undo-tree-id97 . -1) (undo-tree-id98 . -1)) ((3708 . 3709)) (25819 64694 132006 219000) 0 nil])
([nil nil ((2104 . 2106) (t 25819 64755 987609 81000)) nil (25819 64815 900981 347000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . 3708) (undo-tree-id95 . -1) (undo-tree-id96 . -1)) ((3708 . 3709)) (25819 64693 477133 87000) 0 nil])
([nil nil ((2192 . 2194)) nil (25819 64815 900976 608000) 0 nil])
([nil nil ((3707 . 3709) (#("[" 0 1 (fontified t)) . -3707) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (#("]" 0 1 (fontified t)) . -3708) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . 1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) 3709) ((3707 . 3709) (#(".0" 0 2 (fontified t)) . 3707)) (25819 64693 307047 523000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . 2035) (undo-tree-id607 . -1) (undo-tree-id608 . -1) (t 25819 64815 904277 76000)) nil (25819 64843 160332 735000) 0 nil])
([nil nil ((#("[" 0 1 (fontified t)) . 4701) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . 1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1)) ((4701 . 4702)) (25819 64693 160042 194000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 2035) (undo-tree-id605 . -1) (undo-tree-id606 . -1)) nil (25819 64843 160330 881000) 0 nil])
([nil nil ((#("W" 0 1 (fontified t face font-lock-type-face)) . 4701) (undo-tree-id48 . -1) (undo-tree-id49 . -1)) ((4701 . 4702)) (25819 64692 944353 912000) 0 nil])
([nil nil ((#("w" 0 1 (fontified t)) . 2035) (undo-tree-id603 . -1) (undo-tree-id604 . -1)) nil (25819 64843 160329 18000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t face font-lock-constant-face)) . 4701) (undo-tree-id46 . -1) (undo-tree-id47 . -1)) ((4701 . 4702)) (25819 64692 474743 173000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . 2035) (undo-tree-id601 . -1) (undo-tree-id602 . -1)) nil (25819 64843 160327 335000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t face font-lock-constant-face)) . 4701) (undo-tree-id44 . -1) (undo-tree-id45 . -1)) ((4701 . 4702)) (25819 64692 396787 380000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . 2035) (undo-tree-id599 . -1) (undo-tree-id600 . -1)) nil (25819 64843 160325 742000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t face font-lock-constant-face)) . 4701) (undo-tree-id42 . -1) (undo-tree-id43 . -1)) ((4701 . 4702)) (25819 64692 227997 542000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . 2035) (undo-tree-id593 . -1) (undo-tree-id594 . -1) (undo-tree-id595 . -1) (undo-tree-id596 . -1) (undo-tree-id597 . -1) (undo-tree-id598 . -1)) nil (25819 64843 160323 738000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t face font-lock-constant-face)) . 4701) (undo-tree-id40 . -1) (undo-tree-id41 . -1)) ((4701 . 4702)) (25819 64692 103984 317000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t)) . 2035) (undo-tree-id589 . 1) (undo-tree-id590 . -1) (undo-tree-id591 . -1) (undo-tree-id592 . -1)) nil (25819 64843 160318 638000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . 4701) (undo-tree-id38 . -1) (undo-tree-id39 . -1)) ((4701 . 4702)) (25819 64691 957018 385000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t)) . 2026) (undo-tree-id585 . 1) (undo-tree-id586 . -1) (undo-tree-id587 . -1) (undo-tree-id588 . -1)) nil (25819 64843 160312 927000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . 4701) (undo-tree-id36 . -1) (undo-tree-id37 . -1)) ((4701 . 4702)) (25819 64691 833003 808000) 0 nil])
([nil nil ((2161 . 2165) (2153 . 2161) (#("ne" 0 2 (fontified t)) . -2153) (undo-tree-id609 . -2) (undo-tree-id610 . -1) (undo-tree-id611 . -1) (undo-tree-id612 . -2) (undo-tree-id613 . -2) (undo-tree-id614 . -2) (undo-tree-id615 . -2) (undo-tree-id616 . -2) 2155 (2148 . 2155) (2136 . 2148) (#("cur" 0 3 (fontified t)) . -2136) (undo-tree-id617 . -3) (undo-tree-id618 . -1) (undo-tree-id619 . -1) (undo-tree-id620 . -2) (undo-tree-id621 . -2) (undo-tree-id622 . -3) (undo-tree-id623 . -3) (undo-tree-id624 . -3) (undo-tree-id625 . -3) (undo-tree-id626 . -3) 2139 (2136 . 2139) (2132 . 2136) (2124 . 2132) (#("ne" 0 2 (fontified t)) . -2124) (undo-tree-id627 . -2) (undo-tree-id628 . -1) (undo-tree-id629 . -1) (undo-tree-id630 . -2) (undo-tree-id631 . -2) (undo-tree-id632 . -2) (undo-tree-id633 . -2) (undo-tree-id634 . -2) 2126 (2124 . 2126) (#("e" 0 1 (fontified t)) . -2124) (undo-tree-id635 . -1) (undo-tree-id636 . -1) (undo-tree-id637 . -1) (undo-tree-id638 . -1) (undo-tree-id639 . -1) (undo-tree-id640 . -1) 2125 (2124 . 2125) (#("n" 0 1 (fontified t)) . -2124) (undo-tree-id641 . -1) (undo-tree-id642 . -1) (undo-tree-id643 . -1) (undo-tree-id644 . -1) 2125 (2119 . 2125) (2107 . 2119) (#("cur" 0 3 (fontified t)) . -2107) (undo-tree-id645 . -3) (undo-tree-id646 . -1) (undo-tree-id647 . -1) (undo-tree-id648 . -2) (undo-tree-id649 . -2) (undo-tree-id650 . -3) (undo-tree-id651 . -3) (undo-tree-id652 . -3) (undo-tree-id653 . -3) (undo-tree-id654 . -3) 2110 (2105 . 2110) (2096 . 2105) (#("(" 0 1 (fontified t)) . -2096) (undo-tree-id655 . -1) (undo-tree-id656 . -1) 2097 (2091 . 2097) (#("i" 0 1 (fontified t)) . -2091) (undo-tree-id657 . -1) (undo-tree-id658 . -1) (2089 . 2092) (2083 . 2089) (t 25819 64843 160944 345000) 2083) nil (25819 65040 794011 112000) 0 nil])
([nil nil ((#("E" 0 1 (fontified t)) . 4701) (undo-tree-id34 . -1) (undo-tree-id35 . -1)) ((4701 . 4702)) (25819 64691 687003 435000) 0 nil])
([nil nil ((2084 . 2092) (#("	" 0 1 (fontified t)) . 2084) (2098 . 2115) (2106 . 2116) (2107 . 2113) (2135 . 2147) (2136 . 2140) (2163 . 2176) 2164) nil (25819 65040 793958 493000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . 4701) (undo-tree-id32 . -1) (undo-tree-id33 . -1)) ((4701 . 4702)) (25819 64691 563375 974000) 0 nil])
([nil nil ((2162 . 2163) (#("-" 0 1 (fontified t)) . 2162) (undo-tree-id660 . -1) (t 25819 65040 797614 757000)) nil (25819 65081 122023 27000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . 4701) (undo-tree-id30 . -1) (undo-tree-id31 . -1)) ((4701 . 4702)) (25819 64691 416006 98000) 0 nil])
([nil nil ((2207 . 2208) (#("-" 0 1 (fontified t)) . 2207) (undo-tree-id659 . -1)) nil (25819 65081 122017 917000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . 4701) (undo-tree-id28 . -1) (undo-tree-id29 . -1)) ((4701 . 4702)) (25819 64691 268880 610000) 0 nil])
([nil nil ((2162 . 2163) (#("+" 0 1 (fontified t)) . 2162) (undo-tree-id662 . -1) (t 25819 65081 124282 257000)) nil (25819 65125 380057 342000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 4701) (undo-tree-id26 . -1) (undo-tree-id27 . -1)) ((4701 . 4702)) (25819 64691 122000 283000) 0 nil])
([nil nil ((2207 . 2208) (#("+" 0 1 (fontified t)) . 2207) (undo-tree-id661 . -1)) nil (25819 65143 144218 993000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . 4701) (undo-tree-id24 . -1) (undo-tree-id25 . -1)) ((4701 . 4702)) (25819 64690 975613 856000) 0 nil])
([nil nil ((2167 . 2171) (#("i" 0 1 (fontified t)) . -2167) (undo-tree-id706 . -1) (2165 . 2168) (#("i" 0 1 (fontified t)) . -2165) (undo-tree-id707 . -1) (2162 . 2166) (t 25819 65125 384283 178000)) nil (25819 65149 196485 108000) 0 nil] [nil nil ((2167 . 2170) (#("i" 0 1 (fontified t)) . -2167) (undo-tree-id663 . -1) (2165 . 2168) (#("i" 0 1 (fontified t)) . -2165) (undo-tree-id664 . -1) (undo-tree-id665 . -1) (undo-tree-id666 . -1) (2162 . 2166) (#(" " 0 1 (fontified t)) . -2162) (undo-tree-id667 . -1) (undo-tree-id668 . -1) (undo-tree-id669 . -1) (undo-tree-id670 . -1) (undo-tree-id671 . -1) (undo-tree-id672 . -1) (undo-tree-id673 . -1) (undo-tree-id674 . -1) (undo-tree-id675 . -1) (#("a" 0 1 (fontified t)) . -2163) (undo-tree-id676 . -1) (undo-tree-id677 . -1) (undo-tree-id678 . -1) (undo-tree-id679 . -1) (undo-tree-id680 . -1) (undo-tree-id681 . -1) (undo-tree-id682 . -1) (undo-tree-id683 . -1) (#("s" 0 1 (fontified t face font-lock-keyword-face)) . -2164) (undo-tree-id684 . -1) (undo-tree-id685 . -1) (undo-tree-id686 . -1) (undo-tree-id687 . -1) (undo-tree-id688 . -1) (undo-tree-id689 . -1) 2165 (2162 . 2165) (t 25819 65125 384283 178000)) ((#(" as" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil face font-lock-keyword-face)) . 2162) (undo-tree-id690 . -3) (undo-tree-id691 . -1) (undo-tree-id692 . -2) (undo-tree-id693 . -2) (undo-tree-id694 . -3) (undo-tree-id695 . -3) (undo-tree-id696 . -3) (undo-tree-id697 . -3) (2162 . 2165) (#("as i" 0 2 (fontified nil face font-lock-keyword-face) 2 3 (fontified nil) 3 4 (fontified nil)) . 2162) (undo-tree-id698 . -4) (undo-tree-id699 . -4) (undo-tree-id700 . -4) (undo-tree-id701 . -3) (2165 . 2166) (#("isi" 0 2 (fontified nil face font-lock-type-face) 2 3 (fontified nil)) . 2165) (undo-tree-id702 . -3) (undo-tree-id703 . -2) (2167 . 2168) (#("ize" 0 3 (fontified t face font-lock-type-face)) . 2167) (undo-tree-id704 . -3) (undo-tree-id705 . -3)) (25819 65142 740133 822000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . 4701) (undo-tree-id22 . -1) (undo-tree-id23 . -1)) ((4701 . 4702)) (25819 64690 737092 771000) 0 nil])
([nil nil ((2183 . 2192)) nil (25819 65149 196559 978000) 0 nil])
([nil nil ((2170 . 2171)) ((#("u" 0 1 (fontified t)) . 2170)) (25819 65142 740033 264000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 4701) (undo-tree-id20 . -1) (undo-tree-id21 . -1)) ((4701 . 4702)) (25819 64690 567371 363000) 0 nil])
([nil nil ((2224 . 2233)) nil (25819 65162 257792 732000) 0 nil] [nil nil ((2236 . 2245)) ((#("as isize " 0 2 (fontified t face font-lock-keyword-face) 2 3 (fontified t) 3 8 (fontified t face font-lock-type-face) 8 9 (fontified t)) . 2236) (undo-tree-id708 . -8) (undo-tree-id709 . -8)) (25819 65149 196471 933000) 0 nil])
nil
([nil nil ((#("u" 0 1 (fontified t)) . 4701) (undo-tree-id18 . -1) (undo-tree-id19 . -1)) ((4701 . 4702)) (25819 64690 420035 282000) 0 nil])
([nil nil ((2224 . 2225)) nil (25819 65162 257792 31000) 0 nil])
nil
([nil nil ((#("s" 0 1 (fontified t)) . 4701) (undo-tree-id16 . -1) (undo-tree-id17 . -1)) ((4701 . 4702)) (25819 64690 273006 681000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2254 . 2255) (nil fontified nil 2247 . 2255) (2247 . 2255) 2246) nil (25819 65162 257790 979000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . 4701) (undo-tree-id14 . -1) (undo-tree-id15 . -1)) ((4701 . 4702)) (25819 64690 103011 931000) 0 nil])
([nil nil ((2247 . 2248)) nil (25819 65162 257789 827000) 0 nil])
([nil nil ((#("z" 0 1 (fontified t)) . 4701) (undo-tree-id12 . -1) (undo-tree-id13 . -1)) ((4701 . 4702)) (25819 64689 932751 272000) 0 nil])
([nil nil ((2183 . 2184)) nil (25819 65162 257789 125000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . 4701) (undo-tree-id10 . -1) (undo-tree-id11 . -1)) ((4701 . 4702)) (25819 64689 648050 164000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 2192) (undo-tree-id710 . -1) (undo-tree-id711 . -1)) nil (25819 65162 257787 783000) 0 nil])
([nil nil ((#("]" 0 1 (fontified t)) . 4701) (undo-tree-id6 . 1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1)) ((4701 . 4702)) (25819 64688 832045 122000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 2234) 2192) nil (25819 65162 257774 428000) 0 nil])
([nil nil ((4701 . 4703)) ((".1" . 4701)) (25819 64687 623164 846000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2278 . 2279) (#("
" 0 1 (fontified nil)) . -2331) (2270 . 2332) 2269 (t 25819 65162 260950 602000)) nil (25819 65198 122554 109000) 0 nil])
([nil nil ((325 . 326) (#("[" 0 1 (fontified t)) . 325) (undo-tree-id3 . 1) (undo-tree-id4 . -1) (undo-tree-id5 . -1)) ((325 . 326) (#("(" 0 1 (fontified t)) . 325)) (25819 64687 539495 998000) 0 nil])
([nil nil ((2276 . 2283) (2270 . 2276) 2264) nil (25819 65198 122852 789000) 0 nil])
([nil nil ((336 . 337) (#("]" 0 1 (fontified t)) . 336) (undo-tree-id0 . 1) (undo-tree-id1 . -1) (undo-tree-id2 . -1)) ((336 . 337) (#(")" 0 1 (fontified t)) . 336)) (25819 64687 538771 810000) 0 nil])
([nil nil ((#("                current_cell.0 as isize - neighbor.0 as isize,
                current_cell.1 as isize - neighbor.1 as isize
" 0 9 (fontified t) 9 10 (fontified t) 10 16 (fontified t) 16 31 (fontified t) 31 33 (fontified t face font-lock-keyword-face) 33 34 (fontified t) 34 39 (fontified t face font-lock-type-face) 39 40 (fontified t) 40 41 (fontified t) 41 42 (fontified t) 42 53 (fontified t) 53 55 (fontified t face font-lock-keyword-face) 55 56 (fontified t) 56 61 (fontified t face font-lock-type-face) 61 62 (fontified t) 62 63 (fontified t) 63 74 (fontified t) 74 75 (fontified t) 75 79 (fontified t) 79 94 (fontified t) 94 96 (fontified t face font-lock-keyword-face) 96 97 (fontified t) 97 102 (fontified t face font-lock-type-face) 102 103 (fontified t) 103 104 (fontified t) 104 105 (fontified t) 105 114 (fontified t) 114 116 (fontified t) 116 118 (fontified t face font-lock-keyword-face) 118 119 (fontified t) 119 123 (fontified t face font-lock-type-face) 123 124 (rear-nonsticky t fontified t face font-lock-type-face) 124 125 (fontified t)) . 2131) (undo-tree-id846 . -79) (undo-tree-id847 . -124) (undo-tree-id848 . -16) (undo-tree-id849 . -79) (undo-tree-id850 . -79) (undo-tree-id851 . -101) (undo-tree-id852 . -115) (undo-tree-id853 . -61) (undo-tree-id854 . -61) (undo-tree-id855 . -61) (undo-tree-id856 . -79) (undo-tree-id857 . -61) (undo-tree-id858 . -61) (undo-tree-id859 . -61) (undo-tree-id860 . -61) (undo-tree-id861 . -61) (undo-tree-id862 . -61) (undo-tree-id863 . -61) (undo-tree-id864 . -61) (undo-tree-id865 . -61) (undo-tree-id866 . -61) (undo-tree-id867 . -61) (undo-tree-id868 . -61) (undo-tree-id869 . -61) (undo-tree-id870 . -61) (undo-tree-id871 . -61) (undo-tree-id872 . -61) (undo-tree-id873 . -61) (undo-tree-id874 . -61) (undo-tree-id875 . -61) (undo-tree-id876 . -61) (undo-tree-id877 . -61) (undo-tree-id878 . -61) (undo-tree-id879 . -61) (undo-tree-id880 . -61) (undo-tree-id881 . -61) (undo-tree-id882 . -61) (undo-tree-id883 . -61) (undo-tree-id884 . -61) (undo-tree-id885 . -61) (undo-tree-id886 . -61) (undo-tree-id887 . -61) (undo-tree-id888 . -61) (undo-tree-id889 . -61) (undo-tree-id890 . -61) (undo-tree-id891 . -61) (undo-tree-id892 . -61) (undo-tree-id893 . -61) (undo-tree-id894 . -61) (undo-tree-id895 . -61) (undo-tree-id896 . -61) (undo-tree-id897 . -61) (undo-tree-id898 . -61) (undo-tree-id899 . -61) (undo-tree-id900 . -61) (undo-tree-id901 . -61) (undo-tree-id902 . -61) (undo-tree-id903 . -61) (undo-tree-id904 . -61) (undo-tree-id905 . -61) (undo-tree-id906 . -61) (undo-tree-id907 . -61) (undo-tree-id908 . -61) (undo-tree-id909 . -61) (undo-tree-id910 . -61) (undo-tree-id911 . -61) (undo-tree-id912 . -61) (undo-tree-id913 . -61) (undo-tree-id914 . -61) (undo-tree-id915 . -61) (undo-tree-id916 . -61) (undo-tree-id917 . -61) (undo-tree-id918 . -61) (undo-tree-id919 . -61) (undo-tree-id920 . -61) (undo-tree-id921 . -61) (undo-tree-id922 . -61) (undo-tree-id923 . -61) (undo-tree-id924 . -61) (undo-tree-id925 . -61) (undo-tree-id926 . -61) (undo-tree-id927 . -61) (undo-tree-id928 . -61) (undo-tree-id929 . -61) (undo-tree-id930 . -61) (undo-tree-id931 . -61) (undo-tree-id932 . -61) (undo-tree-id933 . -61) (undo-tree-id934 . -61) (undo-tree-id935 . -61) (undo-tree-id936 . -61) (undo-tree-id937 . -61) (undo-tree-id938 . -61) (undo-tree-id939 . -61) (undo-tree-id940 . -61) (undo-tree-id941 . -61) (undo-tree-id942 . -61) (undo-tree-id943 . -61) (undo-tree-id944 . -61) (undo-tree-id945 . -61) (undo-tree-id946 . -61) (undo-tree-id947 . -61) (undo-tree-id948 . -61) (undo-tree-id949 . -61) (undo-tree-id950 . -61) (undo-tree-id951 . -61) (undo-tree-id952 . -61) (undo-tree-id953 . -61) (undo-tree-id954 . -61) (undo-tree-id955 . -61) (undo-tree-id956 . -61) (undo-tree-id957 . -61) (undo-tree-id958 . -61) (undo-tree-id959 . -61) (undo-tree-id960 . -61) (undo-tree-id961 . -61) (undo-tree-id962 . -61) (undo-tree-id963 . -61) (undo-tree-id964 . -61) (undo-tree-id965 . -61) (undo-tree-id966 . -59) (undo-tree-id967 . -59) (undo-tree-id968 . -18) (undo-tree-id969 . -18) (undo-tree-id970 . -125) (undo-tree-id971 . -16) (undo-tree-id972 . -79) (undo-tree-id973 . -16) (undo-tree-id974 . -16) (undo-tree-id975 . -16) (undo-tree-id976 . -16) (undo-tree-id977 . -63) (undo-tree-id978 . -79) (undo-tree-id979 . -79) (undo-tree-id980 . -79) (undo-tree-id981 . -125) 2210) nil (25819 65216 392390 674000) 0 nil] [nil nil ((#("current_cell.0 as isize - neighbor.0 as isize," 0 15 (fontified t) 15 17 (fontified t face font-lock-keyword-face) 17 18 (fontified t) 18 23 (fontified t face font-lock-type-face) 23 24 (fontified t) 24 25 (fontified t) 25 26 (fontified t) 26 37 (fontified t) 37 39 (fontified t face font-lock-keyword-face) 39 40 (fontified t) 40 45 (fontified t face font-lock-type-face) 45 46 (fontified t)) . 2147) (undo-tree-id712 . -45) (undo-tree-id713 . -45) (undo-tree-id714 . -45) (undo-tree-id715 . -45) (undo-tree-id716 . -45) (undo-tree-id717 . -45) (undo-tree-id718 . -45) (undo-tree-id719 . -45) (undo-tree-id720 . -45) (undo-tree-id721 . -45) (undo-tree-id722 . -45) (undo-tree-id723 . -45) (undo-tree-id724 . -45) (undo-tree-id725 . -45) (undo-tree-id726 . -45) (undo-tree-id727 . -45) (undo-tree-id728 . -45) (undo-tree-id729 . -45) (undo-tree-id730 . -45) (undo-tree-id731 . -45) (undo-tree-id732 . -45) (undo-tree-id733 . -45) (undo-tree-id734 . -45) (undo-tree-id735 . -45) (undo-tree-id736 . -45) (undo-tree-id737 . -45) (undo-tree-id738 . -45) (undo-tree-id739 . -45) (undo-tree-id740 . -45) (undo-tree-id741 . -45) (undo-tree-id742 . -45) (undo-tree-id743 . -45) (undo-tree-id744 . -45) (undo-tree-id745 . -45) (undo-tree-id746 . -45) (undo-tree-id747 . -45) (undo-tree-id748 . -45) (undo-tree-id749 . -45) (undo-tree-id750 . -45) (undo-tree-id751 . -45) (undo-tree-id752 . -45) (undo-tree-id753 . -45) (undo-tree-id754 . -45) (undo-tree-id755 . -45) (undo-tree-id756 . -45) (undo-tree-id757 . -45) (undo-tree-id758 . -45) (undo-tree-id759 . -45) (undo-tree-id760 . -45) (undo-tree-id761 . -45) (undo-tree-id762 . -45) (undo-tree-id763 . -45) (undo-tree-id764 . -45) (undo-tree-id765 . -45) (undo-tree-id766 . -45) (undo-tree-id767 . -45) (undo-tree-id768 . -45) (undo-tree-id769 . -45) (undo-tree-id770 . -45) (undo-tree-id771 . -45) (undo-tree-id772 . -45) (undo-tree-id773 . -45) (undo-tree-id774 . -45) (undo-tree-id775 . -45) (undo-tree-id776 . -45) (undo-tree-id777 . -45) (undo-tree-id778 . -45) (undo-tree-id779 . -45) (undo-tree-id780 . -45) (undo-tree-id781 . -45) (undo-tree-id782 . -45) (undo-tree-id783 . -45) (undo-tree-id784 . -45) (undo-tree-id785 . -45) (undo-tree-id786 . -45) (undo-tree-id787 . -45) (undo-tree-id788 . -45) (undo-tree-id789 . -45) (undo-tree-id790 . -45) (undo-tree-id791 . -45) (undo-tree-id792 . -45) (undo-tree-id793 . -45) (undo-tree-id794 . -45) (undo-tree-id795 . -45) (undo-tree-id796 . -45) (undo-tree-id797 . -45) (undo-tree-id798 . -45) (undo-tree-id799 . -45) (undo-tree-id800 . -45) (undo-tree-id801 . -45) (undo-tree-id802 . -45) (undo-tree-id803 . -45) (undo-tree-id804 . -45) (undo-tree-id805 . -45) (undo-tree-id806 . -45) (undo-tree-id807 . -45) (undo-tree-id808 . -45) (undo-tree-id809 . -45) (undo-tree-id810 . -45) (undo-tree-id811 . -45) (undo-tree-id812 . -45) (undo-tree-id813 . -45) (undo-tree-id814 . -45) (undo-tree-id815 . -45) (undo-tree-id816 . -45) (undo-tree-id817 . -45) (undo-tree-id818 . -45) (undo-tree-id819 . -45) (undo-tree-id820 . -45) (undo-tree-id821 . -45) (undo-tree-id822 . -45) (undo-tree-id823 . -45) (undo-tree-id824 . -45) (undo-tree-id825 . -43) (undo-tree-id826 . -43) (undo-tree-id827 . -2) (undo-tree-id828 . -2) (undo-tree-id829 . -46) (undo-tree-id830 . -46)) ((2147 . 2193)) (25819 65198 122544 361000) 0 nil])
nil
([nil nil ((nil rear-nonsticky nil 2174 . 2175) (#("
" 0 1 (fontified nil)) . -2283) (2158 . 2284) 2157) nil (25819 65216 392324 921000) 0 nil])
nil
([nil nil ((2204 . 2205) (#("                " 0 11 (fontified nil) 11 12 (fontified nil) 12 16 (fontified nil)) . 2204) (#("
" 0 1 (fontified t)) . -2204) (undo-tree-id841 . -1) (#("                " 0 9 (fontified nil) 9 10 (fontified nil) 10 15 (fontified nil) 15 16 (fontified nil rear-nonsticky t)) . 2158) (undo-tree-id842 . -16) (undo-tree-id843 . -16) (#("
" 0 1 (fontified t)) . -2158) (undo-tree-id844 . -1) (undo-tree-id845 . -1) 2155) nil (25819 65216 392323 27000) 0 nil])
([nil nil ((#("	" 0 1 (fontified nil)) . -2259) (2259 . 2260) (#("	" 0 1 (fontified nil)) . 2259) (undo-tree-id837 . -1) (undo-tree-id838 . -1) (undo-tree-id839 . -1) (undo-tree-id840 . -1) (2255 . 2259) (2256 . 2257) (2253 . 2256) (2250 . 2253)) nil (25819 65216 392318 469000) 0 nil])
([nil nil ((#("(-1, 0), (1, 0), (0, -1), (0, 1)" 0 6 (fontified t) 6 8 (fontified t) 8 14 (fontified t) 14 16 (fontified t) 16 23 (fontified t) 23 25 (fontified t) 25 31 (fontified t) 31 32 (fontified t)) . 2287) (undo-tree-id831 . -31) (undo-tree-id832 . -5) (undo-tree-id833 . -5) (undo-tree-id834 . -5) (undo-tree-id835 . -5) (undo-tree-id836 . -32) 2292) nil (25819 65216 392491 644000) 0 nil])
([nil nil ((#("		" 0 2 (fontified t)) . -2254) (undo-tree-id1059 . -2) (undo-tree-id1060 . -2) (undo-tree-id1061 . -2) (undo-tree-id1062 . -2) 2256 (2253 . 2256) 2165) nil (25819 65271 148821 318000) 0 nil] [nil nil ((nil rear-nonsticky nil 2197 . 2198) (nil fontified nil 2166 . 2198) (2166 . 2198) 2165) ((#("(-1, 0), (1, 0), (0, -1), (0, 1)" 0 31 (fontified nil) 31 32 (fontified nil rear-nonsticky nil)) . 2166) (undo-tree-id982 . -31) (undo-tree-id983 . -31) (undo-tree-id984 . 1) (undo-tree-id985 . -32) (undo-tree-id986 . 6) (undo-tree-id987 . -27) (undo-tree-id988 . -31) (nil rear-nonsticky t 2197 . 2198)) (25819 65216 392297 990000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2285 . 2286) (nil fontified nil 2254 . 2286) (2254 . 2286)) nil (25819 65271 148817 801000) 0 nil])
nil
([nil nil ((2264 . 2270) (#(" " 0 1 (fontified nil)) . 2264) (2254 . 2256) (2261 . 2262) (#("," 0 1 (fontified t)) . -2261) (undo-tree-id1055 . -1) (undo-tree-id1056 . -1) (undo-tree-id1057 . -1) (undo-tree-id1058 . -1) 2262) nil (25819 65271 148816 368000) 0 nil])
([nil nil ((2277 . 2283) (#(" " 0 1 (fontified nil)) . 2277) (2276 . 2277) (#("," 0 1 (fontified t)) . -2276) (undo-tree-id1051 . -1) (undo-tree-id1052 . -1) (undo-tree-id1053 . -1) (undo-tree-id1054 . -1) 2277) nil (25819 65271 148812 621000) 0 nil])
([nil nil ((2291 . 2297) (#(" " 0 1 (fontified nil)) . 2291) (2290 . 2291) (#("," 0 1 (fontified t)) . -2290) (undo-tree-id1047 . -1) (undo-tree-id1048 . -1) (undo-tree-id1049 . -1) (undo-tree-id1050 . -1) 2291) nil (25819 65271 148808 774000) 0 nil])
([nil nil ((#("		    " 0 6 (fontified nil)) . -2266) (undo-tree-id1035 . -5) (undo-tree-id1036 . -6) (undo-tree-id1037 . -6) (undo-tree-id1038 . -5) (undo-tree-id1039 . -5) (undo-tree-id1040 . -5) (undo-tree-id1041 . -5) (undo-tree-id1042 . -5) (undo-tree-id1043 . -5) (undo-tree-id1044 . -5) (undo-tree-id1045 . -5) (undo-tree-id1046 . -5) (2264 . 2266) 2269) nil (25819 65271 148805 137000) 0 nil])
([nil nil ((#("		    " 0 6 (fontified nil)) . -2275) (undo-tree-id1019 . -5) (undo-tree-id1020 . -6) (undo-tree-id1021 . -6) (undo-tree-id1022 . -5) (undo-tree-id1023 . -5) (undo-tree-id1024 . -5) (undo-tree-id1025 . -5) (undo-tree-id1026 . -5) (undo-tree-id1027 . -5) (undo-tree-id1028 . -5) (undo-tree-id1029 . -5) (undo-tree-id1030 . -5) (undo-tree-id1031 . -5) (undo-tree-id1032 . -5) (undo-tree-id1033 . -5) (undo-tree-id1034 . -5) (2273 . 2275) 2278) nil (25819 65271 148796 391000) 0 nil])
([nil nil ((#("		    " 0 6 (fontified nil)) . -2285) (undo-tree-id1005 . -5) (undo-tree-id1006 . -6) (undo-tree-id1007 . -6) (undo-tree-id1008 . -5) (undo-tree-id1009 . -5) (undo-tree-id1010 . -5) (undo-tree-id1011 . -5) (undo-tree-id1012 . -5) (undo-tree-id1013 . -5) (undo-tree-id1014 . -5) (undo-tree-id1015 . -5) (undo-tree-id1016 . -5) (undo-tree-id1017 . -5) (undo-tree-id1018 . -5) (2283 . 2285) 2288) nil (25819 65271 148785 360000) 0 nil])
([nil nil ((2268 . 2269)) nil (25819 65271 148718 785000) 0 nil])
([nil nil ((2278 . 2279)) nil (25819 65271 148718 304000) 0 nil])
([nil nil ((2289 . 2290)) nil (25819 65271 148717 783000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -2271) (undo-tree-id1001 . -1) (undo-tree-id1002 . -1) (undo-tree-id1003 . -1) (undo-tree-id1004 . -1) 2272 (2270 . 2272)) nil (25819 65271 148716 741000) 0 nil])
([nil nil ((#("n" 0 1 (fontified nil)) . -2261) (undo-tree-id1000 . -1) 2262 (2260 . 2262)) nil (25819 65271 148713 35000) 0 nil])
([nil nil ((2293 . 2294)) nil (25819 65271 148710 700000) 0 nil])
([nil nil ((apply -34 2146 2368 undo--wrap-and-run-primitive-undo 2146 2368 ((2334 . 2337) (2316 . 2319) (2316 . 2317) (#("	" 0 1 (fontified t)) . 2316) (#<marker at 2473 in maze2.rs> . -1) (#<marker at 2473 in maze2.rs> . -1) (#<marker at 2473 in maze2.rs> . -1) (#<marker at 2473 in maze2.rs> . -1) (#<marker at 2473 in maze2.rs> . -1) (#<marker at 2473 in maze2.rs> . -1) (#<marker at 2473 in maze2.rs> . -1) (#<marker at 2473 in maze2.rs> . -1) (#<marker at 2473 in maze2.rs> . -1) (#<marker at 2473 in maze2.rs> . -1) (#<marker at 2473 in maze2.rs> . -1) (#<marker at 2473 in maze2.rs> . -1) (2312 . 2316) (2298 . 2301) (2298 . 2299) (#("	" 0 1 (fontified t)) . 2298) (#<marker at 2386 in maze2.rs> . -1) (#<marker at 2386 in maze2.rs> . -1) (#<marker at 2386 in maze2.rs> . -1) (#<marker at 2386 in maze2.rs> . -1) (#<marker at 2386 in maze2.rs> . -1) (#<marker at 2386 in maze2.rs> . -1) (#<marker at 2386 in maze2.rs> . -1) (#<marker at 2386 in maze2.rs> . -1) (#<marker at 2386 in maze2.rs> . -1) (#<marker at 2386 in maze2.rs> . -1) (#<marker at 2386 in maze2.rs> . -1) (#<marker at 2386 in maze2.rs> . -1) (#<marker at 2386 in maze2.rs> . -1) (#<marker at 2386 in maze2.rs> . -1) (2294 . 2298) (2280 . 2283) (2280 . 2281) (#("	" 0 1 (fontified t)) . 2280) (#<marker at 2291 in maze2.rs> . -1) (#<marker at 2291 in maze2.rs> . -1) (#<marker at 2291 in maze2.rs> . -1) (#<marker at 2291 in maze2.rs> . -1) (#<marker at 2291 in maze2.rs> . -1) (#<marker at 2291 in maze2.rs> . -1) (#<marker at 2291 in maze2.rs> . -1) (#<marker at 2291 in maze2.rs> . -1) (#<marker at 2291 in maze2.rs> . -1) (#<marker at 2291 in maze2.rs> . -1) (2276 . 2280) (2262 . 2265) (2262 . 2263) (#("	" 0 1 (fontified t)) . 2262) (2258 . 2262) (2151 . 2154) 2305))) nil (25819 65271 148921 335000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2221 . 2222) (nil fontified nil 2130 . 2222) (2130 . 2222) 2129) nil (25819 65283 170094 392000) 0 nil] [nil nil ((#("        let directions = [];
" 0 7 (fontified t) 7 8 (rear-nonsticky t fontified t) 8 11 (fontified t face font-lock-keyword-face) 11 12 (fontified t) 12 22 (fontified t face font-lock-variable-name-face) 22 26 (fontified t) 26 28 (fontified t) 28 29 (fontified t)) . 2339) (undo-tree-id989 . -28) (undo-tree-id990 . 29) (undo-tree-id991 . -15) (undo-tree-id992 . -26) (undo-tree-id993 . -26) (undo-tree-id994 . -15) (undo-tree-id995 . -15) (undo-tree-id996 . -15) (undo-tree-id997 . -15) (undo-tree-id998 . -15) (undo-tree-id999 . -29) 2354) ((2339 . 2368)) (25819 65271 148705 991000) 0 nil])
([nil nil ((2130 . 2147) (2176 . 2182) (2177 . 2187) (2238 . 2239) (#("	" 0 1 (fontified t)) . 2238) (undo-tree-id1063 . 1) (2243 . 2250) (2349 . 2352) (#("	" 0 1 (fontified t)) . 2349) (2354 . 2359) (2367 . 2373) (#("	" 0 1 (fontified t)) . 2367) (2372 . 2374) (2385 . 2393) (#("	" 0 1 (fontified t)) . 2385) (2403 . 2408) (#("	" 0 1 (fontified t)) . 2403) (2408 . 2411) (2421 . 2422) (#("	" 0 1 (fontified t)) . 2421) (2426 . 2433) (2431 . 2435) 2221) nil (25819 65283 170088 821000) 0 nil])
nil
([nil nil ((#("            let directions = [];
" 0 4 (fontified t) 4 11 (fontified t) 11 12 (rear-nonsticky t fontified t) 12 15 (fontified t face font-lock-keyword-face) 15 16 (fontified t) 16 26 (fontified t face font-lock-variable-name-face) 26 30 (fontified t) 30 32 (fontified t) 32 33 (fontified t)) . 2506) (undo-tree-id1064 . -32) (undo-tree-id1065 . -31) (undo-tree-id1066 . -29) (undo-tree-id1067 . -31) (undo-tree-id1068 . -16) (undo-tree-id1069 . -26) (undo-tree-id1070 . -26) (undo-tree-id1071 . -27) (undo-tree-id1072 . -31) (undo-tree-id1073 . -31) (undo-tree-id1074 . -31) (undo-tree-id1075 . -31) (undo-tree-id1076 . -31) (undo-tree-id1077 . -31) (undo-tree-id1078 . -31) (undo-tree-id1079 . -33) 2537 (t 25819 65283 174286 365000)) nil (25819 65413 535027 817000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . 2192) (undo-tree-id1153 . -1) (undo-tree-id1154 . -1) (t 25819 65287 974286 466000)) nil (25819 65429 631343 281000) 0 nil] [nil nil ((#("e" 0 1 (fontified t face font-lock-type-face)) . 2191) (undo-tree-id1080 . -1) (undo-tree-id1081 . -1) (undo-tree-id1082 . -1) (undo-tree-id1083 . -1) (undo-tree-id1084 . -1) (undo-tree-id1085 . -1) (undo-tree-id1086 . -1) 2192 (t 25819 65287 974286 466000)) ((2191 . 2192)) (25819 65413 534779 321000) 0 nil])
([nil nil ((#("neighbor.0 as isize" 0 11 (fontified t) 11 13 (fontified t face font-lock-keyword-face) 13 14 (fontified t) 14 18 (fontified t face font-lock-type-face) 18 19 (fontified t face font-lock-type-face)) . 2173) (undo-tree-id1135 . -18) (undo-tree-id1136 . -19) (undo-tree-id1137 . -19) (undo-tree-id1138 . -19) (undo-tree-id1139 . -19) (undo-tree-id1140 . -19) (undo-tree-id1141 . -19) (undo-tree-id1142 . -19) (undo-tree-id1143 . -19) (undo-tree-id1144 . -19) (undo-tree-id1145 . -19) (undo-tree-id1146 . -19) (undo-tree-id1147 . -18) (undo-tree-id1148 . -18) (undo-tree-id1149 . -17) (undo-tree-id1150 . -17) (undo-tree-id1151 . -19) (undo-tree-id1152 . -19)) nil (25819 65429 631340 756000) 0 nil])
nil
([nil nil ((nil rear-nonsticky nil 2164 . 2165) (nil fontified nil 2146 . 2165) (2146 . 2165) 2145) nil (25819 65429 631330 697000) 0 nil])
([nil nil ((2166 . 2168) (#(" " 0 1 (fontified t)) . -2166) (undo-tree-id1131 . -1) (undo-tree-id1132 . -1) (#("-" 0 1 (fontified t)) . -2167) (undo-tree-id1133 . -1) (undo-tree-id1134 . -1) 2168 (2166 . 2168)) nil (25819 65429 631329 245000) 0 nil])
([nil nil ((2191 . 2192) (#(" " 0 1 (fontified t)) . -2191) (undo-tree-id1115 . -1) (undo-tree-id1116 . -1) (undo-tree-id1117 . -1) (undo-tree-id1118 . -1) (undo-tree-id1119 . -1) (undo-tree-id1120 . -1) (undo-tree-id1121 . -1) (undo-tree-id1122 . -1) (#("-" 0 1 (fontified t)) . -2192) (undo-tree-id1123 . -1) (undo-tree-id1124 . -1) (undo-tree-id1125 . -1) (undo-tree-id1126 . -1) (undo-tree-id1127 . -1) (undo-tree-id1128 . -1) (undo-tree-id1129 . -1) (undo-tree-id1130 . -1) 2193) nil (25819 65429 631325 77000) 0 nil])
([nil nil ((#("                current_cell.1 as isize - neighbor.1 as isize
" 0 5 (fontified t) 5 6 (fontified t) 6 16 (fontified t) 16 31 (fontified t) 31 33 (fontified t face font-lock-keyword-face) 33 34 (fontified t) 34 39 (fontified t face font-lock-type-face) 39 53 (fontified t) 53 55 (fontified t face font-lock-keyword-face) 55 56 (fontified t) 56 60 (fontified t face font-lock-type-face) 60 61 (rear-nonsticky t fontified t face font-lock-type-face) 61 62 (fontified t)) . 2194) (undo-tree-id1106 . -61) (undo-tree-id1107 . -62) (undo-tree-id1108 . -42) (undo-tree-id1109 . -60) (undo-tree-id1110 . -60) (undo-tree-id1111 . -42) (undo-tree-id1112 . -42) (undo-tree-id1113 . -42) (undo-tree-id1114 . -62) 2236) nil (25819 65429 631315 900000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2208 . 2209) (#("
" 0 1 (fontified nil)) . -2256) (2193 . 2257) 2144) nil (25819 65429 631310 299000) 0 nil])
([nil nil ((2218 . 2219) (#("0" 0 1 (fontified t)) . 2218) (undo-tree-id1105 . -1)) nil (25819 65429 631308 937000) 0 nil])
([nil nil ((2244 . 2245) (#("0" 0 1 (fontified t)) . 2244) (undo-tree-id1104 . -1)) nil (25819 65429 631306 933000) 0 nil])
([nil nil ((2146 . 2147) (#(" " 0 1 (fontified t)) . 2192) (undo-tree-id1087 . 1) (undo-tree-id1088 . -1) (undo-tree-id1089 . -1) (undo-tree-id1090 . -1) (undo-tree-id1091 . -1) (undo-tree-id1092 . -1) (undo-tree-id1093 . -1) (undo-tree-id1094 . -1) (undo-tree-id1095 . -1) (undo-tree-id1096 . -1) (undo-tree-id1097 . -1) (undo-tree-id1098 . -1) (undo-tree-id1099 . -1) (undo-tree-id1100 . -1) (undo-tree-id1101 . -1) (undo-tree-id1102 . -1) (2209 . 2210) (#(" " 0 1 (fontified t)) . 2255) (undo-tree-id1103 . -1) 2244) nil (25819 65429 631301 322000) 0 nil])
([nil nil ((#("." 0 1 (fontified t face font-lock-comment-face)) . 2328) (undo-tree-id1320 . -1) (undo-tree-id1321 . -1) (t 25819 65429 634288 914000)) nil (25820 28 290712 927000) 0 nil])
([nil nil ((2328 . 2329)) nil (25820 28 290711 43000) 0 nil])
([nil nil ((#("0 as isize, current_cell.1 as isize - neighbor.1 as isize" 0 2 (fontified t face font-lock-comment-face) 2 4 (fontified t face font-lock-comment-face) 4 5 (fontified t face font-lock-comment-face) 5 10 (fontified t face font-lock-comment-face) 10 11 (fontified t face font-lock-comment-face) 11 12 (fontified t face font-lock-comment-face) 12 27 (fontified t face font-lock-comment-face) 27 29 (fontified t face font-lock-comment-face) 29 30 (fontified t face font-lock-comment-face) 30 35 (fontified t face font-lock-comment-face) 35 36 (fontified t face font-lock-comment-face) 36 37 (fontified t face font-lock-comment-face) 37 38 (fontified t face font-lock-comment-face) 38 47 (fontified t face font-lock-comment-face) 47 49 (fontified t face font-lock-comment-face) 49 51 (fontified t face font-lock-comment-face) 51 52 (fontified t face font-lock-comment-face) 52 56 (fontified t face font-lock-comment-face) 56 57 (rear-nonsticky t fontified t face font-lock-comment-face)) . 2329) (undo-tree-id1315 . -56) (undo-tree-id1316 . 57) (undo-tree-id1317 . 57) (undo-tree-id1318 . -57) (undo-tree-id1319 . -57) 2328) nil (25820 28 290709 761000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t face font-lock-comment-face)) . 2328) (undo-tree-id1306 . -1) (undo-tree-id1307 . 1) (undo-tree-id1308 . -1) (undo-tree-id1309 . -1) (undo-tree-id1310 . -1) (undo-tree-id1311 . -1) (undo-tree-id1312 . -1) (undo-tree-id1313 . -1) (undo-tree-id1314 . -1)) nil (25820 28 290705 813000) 0 nil])
([nil nil ((#("current_cell.0 as isize - neighbor" 0 8 (fontified t face font-lock-comment-face) 8 15 (fontified t face font-lock-comment-face) 15 17 (fontified t face font-lock-comment-face) 17 18 (fontified t face font-lock-comment-face) 18 23 (fontified t face font-lock-comment-face) 23 24 (fontified t face font-lock-comment-face) 24 25 (fontified t face font-lock-comment-face) 25 26 (fontified t face font-lock-comment-face) 26 34 (fontified t face font-lock-comment-face)) . 2294) (undo-tree-id1266 . -34) (undo-tree-id1267 . -33) (undo-tree-id1268 . -34) (undo-tree-id1269 . -34) (undo-tree-id1270 . -34) (undo-tree-id1271 . -34) (undo-tree-id1272 . -8) (undo-tree-id1273 . -34) (undo-tree-id1274 . -33) (undo-tree-id1275 . -34) (undo-tree-id1276 . -34) (undo-tree-id1277 . -34) (undo-tree-id1278 . -34) (undo-tree-id1279 . -34) (undo-tree-id1280 . -34) (undo-tree-id1281 . -34) (undo-tree-id1282 . -34) (undo-tree-id1283 . -34) (undo-tree-id1284 . -34) (undo-tree-id1285 . -34) (undo-tree-id1286 . -34) (undo-tree-id1287 . -34) (undo-tree-id1288 . -34) (undo-tree-id1289 . -34) (undo-tree-id1290 . -34) (undo-tree-id1291 . -34) (undo-tree-id1292 . -34) (undo-tree-id1293 . -34) (undo-tree-id1294 . -34) (undo-tree-id1295 . -34) (undo-tree-id1296 . -34) (undo-tree-id1297 . -34) (undo-tree-id1298 . -34) (undo-tree-id1299 . -34) (undo-tree-id1300 . -33) (undo-tree-id1301 . -33) (undo-tree-id1302 . -33) (undo-tree-id1303 . -33) (undo-tree-id1304 . -33) (undo-tree-id1305 . -34) 2327) nil (25820 28 290699 251000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2313 . 2314) (#("
" 0 1 (fontified nil)) . -2423) (2297 . 2424) 2294) nil (25820 28 290680 225000) 0 nil])
([nil nil ((2360 . 2361) (#("                " 0 14 (fontified nil) 14 15 (rear-nonsticky t fontified nil) 15 16 (fontified nil)) . 2360) (undo-tree-id1258 . -16) (undo-tree-id1259 . -16) (undo-tree-id1260 . -16) (undo-tree-id1261 . -16) (undo-tree-id1262 . -16) (undo-tree-id1263 . -16) (undo-tree-id1264 . -16) (#("
" 0 1 (fontified t)) . -2360) (undo-tree-id1265 . -1) 2377) nil (25820 28 290678 502000) 0 nil])
([nil nil ((#("neighbor.0 as isize - current_cell.0 as isize, neighbor.1 as isize - current_cell.1 as isize," 0 11 (fontified t) 11 13 (fontified t face font-lock-keyword-face) 13 14 (fontified t) 14 18 (fontified t face font-lock-type-face) 18 19 (rear-nonsticky t fontified t face font-lock-type-face) 19 22 (fontified t) 22 37 (fontified t) 37 39 (fontified t face font-lock-keyword-face) 39 40 (fontified t) 40 45 (fontified t face font-lock-type-face) 45 46 (fontified t) 46 47 (fontified t) 47 56 (fontified t) 56 57 (fontified t) 57 58 (fontified t) 58 60 (fontified t face font-lock-keyword-face) 60 61 (fontified t) 61 65 (fontified t face font-lock-type-face) 65 66 (rear-nonsticky t fontified t face font-lock-type-face) 66 69 (fontified t) 69 82 (fontified t) 82 83 (fontified t) 83 84 (fontified t) 84 86 (fontified t face font-lock-keyword-face) 86 87 (fontified t) 87 92 (fontified t face font-lock-type-face) 92 93 (fontified t)) . 2314) (undo-tree-id1247 . -46) (undo-tree-id1248 . -92) (undo-tree-id1249 . -46) (undo-tree-id1250 . -46) (undo-tree-id1251 . -46) (undo-tree-id1252 . -46) (undo-tree-id1253 . -46) (undo-tree-id1254 . -46) (undo-tree-id1255 . -46) (undo-tree-id1256 . -93) (undo-tree-id1257 . -93)) nil (25820 28 290671 419000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2386 . 2387) (nil fontified nil 2294 . 2387) (2294 . 2387) 2293) nil (25820 28 290092 613000) 0 nil])
([nil nil ((#("                
" 0 15 (fontified t) 15 16 (rear-nonsticky t fontified t) 16 17 (fontified t)) . 2391) (undo-tree-id1224 . -16) (undo-tree-id1225 . -16) (undo-tree-id1226 . -16) (undo-tree-id1227 . -15) (undo-tree-id1228 . -16) (undo-tree-id1229 . -16) (undo-tree-id1230 . -16) (undo-tree-id1231 . -16) (undo-tree-id1232 . -16) (undo-tree-id1233 . -16) (undo-tree-id1234 . -16) (undo-tree-id1235 . -16) (undo-tree-id1236 . -16) (undo-tree-id1237 . -16) (undo-tree-id1238 . -15) (undo-tree-id1239 . -15) (undo-tree-id1240 . -16) (undo-tree-id1241 . -15) (undo-tree-id1242 . -15) (undo-tree-id1243 . -15) (undo-tree-id1244 . -15) (undo-tree-id1245 . -15) (undo-tree-id1246 . -17) 2406) nil (25820 28 290090 529000) 0 nil])
([nil nil ((#("," 0 1 (fontified t rear-nonsticky t face font-lock-comment-face)) . 2386) (undo-tree-id1222 . -1) (undo-tree-id1223 . -1)) nil (25820 28 290078 166000) 0 nil])
([nil nil ((apply 34 2272 2473 undo--wrap-and-run-primitive-undo 2272 2473 ((#("// " 0 3 (fontified t face font-lock-comment-delimiter-face)) . -2471) (#("    " 0 1 (fontified t) 1 4 (fontified t)) . 2449) (#<marker at 2473 in maze2.rs> . -1) (#<marker at 2473 in maze2.rs> . -1) (#<marker at 2473 in maze2.rs> . -1) (#<marker at 2473 in maze2.rs> . -1) (#<marker at 2473 in maze2.rs> . -1) (#<marker at 2473 in maze2.rs> . -1) (#<marker at 2473 in maze2.rs> . -1) (#<marker at 2473 in maze2.rs> . -1) (#<marker at 2473 in maze2.rs> . -1) (#<marker at 2473 in maze2.rs> . -1) (#<marker at 2473 in maze2.rs> . -1) (#<marker at 2473 in maze2.rs> . -1) (#("// " 0 3 (fontified t face font-lock-comment-delimiter-face)) . -2453) (#("    " 0 4 (fontified t)) . 2431) (#<marker at 2386 in maze2.rs> . -4) (#<marker at 2386 in maze2.rs> . -4) (#<marker at 2386 in maze2.rs> . -4) (#<marker at 2386 in maze2.rs> . -4) (#<marker at 2386 in maze2.rs> . -4) (#<marker at 2386 in maze2.rs> . -4) (#<marker at 2386 in maze2.rs> . -4) (#<marker at 2386 in maze2.rs> . -4) (#<marker at 2386 in maze2.rs> . -4) (#<marker at 2386 in maze2.rs> . -4) (#<marker at 2386 in maze2.rs> . -4) (#<marker at 2386 in maze2.rs> . -4) (#<marker at 2386 in maze2.rs> . -4) (#<marker at 2386 in maze2.rs> . -4) (#("// " 0 3 (fontified t face font-lock-comment-delimiter-face)) . -2435) (#("    " 0 2 (fontified t) 2 4 (fontified t)) . 2413) (#<marker at 2291 in maze2.rs> . -2) (#<marker at 2291 in maze2.rs> . -2) (#<marker at 2291 in maze2.rs> . -2) (#<marker at 2291 in maze2.rs> . -2) (#<marker at 2291 in maze2.rs> . -2) (#<marker at 2291 in maze2.rs> . -2) (#<marker at 2291 in maze2.rs> . -2) (#<marker at 2291 in maze2.rs> . -2) (#<marker at 2291 in maze2.rs> . -2) (#<marker at 2291 in maze2.rs> . -2) (#("// " 0 3 (fontified t face font-lock-comment-delimiter-face)) . -2417) (#("    " 0 4 (fontified t)) . 2395) (#<marker at 2203 in maze2.rs> . -4) (#<marker at 2203 in maze2.rs> . -4) (#("// " 0 3 (fontified t face font-lock-comment-delimiter-face)) . -2399) (#<marker at 2203 in maze2.rs> . -3) (#<marker at 2203 in maze2.rs> . -3) (#("// " 0 3 (fontified t face font-lock-comment-delimiter-face)) . -2284) (#<marker at 2045 in maze2.rs> . -3) (#<marker at 2045 in maze2.rs> . -3) (#<marker at 2045 in maze2.rs> . -3) (#<marker at 2045 in maze2.rs> . -3) 2507))) nil (25820 28 290076 32000) 0 nil])
([nil nil ((2422 . 2430)) nil (25820 28 290075 381000) 0 nil])
([nil nil ((2404 . 2412)) nil (25820 28 290074 830000) 0 nil])
([nil nil ((2477 . 2482) (2474 . 2477)) nil (25820 28 290073 447000) 0 nil])
([nil nil ((2459 . 2464) (#("s" 0 1 (fontified t face font-lock-comment-face)) . -2459) (undo-tree-id1198 . -1) (undo-tree-id1199 . -1) (undo-tree-id1200 . -1) (undo-tree-id1201 . -1) (undo-tree-id1202 . -1) (undo-tree-id1203 . -1) (undo-tree-id1204 . -1) (undo-tree-id1205 . -1) (undo-tree-id1206 . -1) (undo-tree-id1207 . -1) (undo-tree-id1208 . -1) (undo-tree-id1209 . -1) (#("o" 0 1 (fontified t face font-lock-comment-face)) . -2460) (undo-tree-id1210 . -1) (undo-tree-id1211 . -1) (undo-tree-id1212 . -1) (undo-tree-id1213 . -1) (undo-tree-id1214 . -1) (undo-tree-id1215 . -1) (undo-tree-id1216 . -1) (undo-tree-id1217 . -1) (#("u" 0 1 (fontified t face font-lock-comment-face)) . -2461) (undo-tree-id1218 . -1) (undo-tree-id1219 . -1) (undo-tree-id1220 . -1) (undo-tree-id1221 . -1) 2462 (2456 . 2462)) nil (25820 28 290071 83000) 0 nil])
([nil nil ((2404 . 2408)) nil (25820 28 290056 586000) 0 nil])
([nil nil ((#("=" 0 1 (fontified t)) . 2405) (undo-tree-id1196 . -1) (undo-tree-id1197 . -1)) nil (25820 28 290055 273000) 0 nil])
([nil nil ((#(">" 0 1 (fontified t syntax-table (1))) . 2405) (undo-tree-id1184 . -1) (undo-tree-id1185 . -1) (undo-tree-id1186 . -1) (undo-tree-id1187 . -1) (undo-tree-id1188 . -1) (undo-tree-id1189 . -1) (undo-tree-id1190 . -1) (undo-tree-id1191 . -1) (undo-tree-id1192 . -1) (undo-tree-id1193 . -1) (undo-tree-id1194 . -1) (undo-tree-id1195 . -1)) nil (25820 28 290052 17000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 2405) (undo-tree-id1180 . -1) (undo-tree-id1181 . -1) (undo-tree-id1182 . -1) (undo-tree-id1183 . -1)) nil (25820 28 290042 920000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 2405) (undo-tree-id1177 . 1) (undo-tree-id1178 . -1) (undo-tree-id1179 . -1)) nil (25820 28 290039 163000) 0 nil])
([nil nil ((2483 . 2490) (#("f" 0 1 (fontified t)) . -2483) (undo-tree-id1155 . -1) (undo-tree-id1156 . -1) (#(" " 0 1 (fontified t)) . -2484) (undo-tree-id1157 . -1) (undo-tree-id1158 . -1) 2485 (2472 . 2485) (2460 . 2472) (#("current" 0 7 (fontified t)) . -2460) (undo-tree-id1159 . -7) (undo-tree-id1160 . -1) (undo-tree-id1161 . -1) (undo-tree-id1162 . -2) (undo-tree-id1163 . -2) (undo-tree-id1164 . -3) (undo-tree-id1165 . -3) (undo-tree-id1166 . -4) (undo-tree-id1167 . -4) (undo-tree-id1168 . -5) (undo-tree-id1169 . -5) (undo-tree-id1170 . -6) (undo-tree-id1171 . -6) (undo-tree-id1172 . -7) (undo-tree-id1173 . -7) (undo-tree-id1174 . -7) (undo-tree-id1175 . -7) (undo-tree-id1176 . -7) 2467 (2460 . 2467) (2457 . 2460)) nil (25820 28 290033 302000) 0 nil])
([nil nil ((2490 . 2491)) nil (25820 28 290806 783000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2550 . 2551) (nil fontified nil 2516 . 2551) (2516 . 2551) 2515) nil (25820 34 66029 714000) 0 nil] [nil nil ((nil rear-nonsticky nil 2551 . 2552) (nil fontified nil 2517 . 2552) (2517 . 2552) 2516) ((#(" => current_cell.walls[0] = false; " 0 2 (fontified nil) 2 3 (fontified nil syntax-table (1)) 3 28 (fontified nil) 28 33 (fontified nil face font-lock-keyword-face) 33 34 (fontified nil) 34 35 (fontified nil rear-nonsticky nil)) . 2517) (undo-tree-id1322 . -34) (undo-tree-id1323 . -34) (undo-tree-id1324 . -34) (nil rear-nonsticky t 2551 . 2552)) (25820 28 290006 201000) 0 nil])
([nil nil ((2539 . 2540) (#("0" 0 1 (fontified t)) . 2539) (undo-tree-id1325 . -1)) nil (25820 34 66025 16000) 0 nil])
nil
([nil nil ((2405 . 2410) (t 25820 34 70958 519000)) nil (25820 62 225180 615000) 0 nil])
([nil nil ((2436 . 2441)) nil (25820 63 708675 752000) 0 nil] [nil nil ((2435 . 2440)) ((#("=> ()" 0 1 (fontified t) 1 2 (fontified t syntax-table (1)) 2 5 (fontified t)) . 2435) (undo-tree-id1326 . -4) (undo-tree-id1327 . 1) (undo-tree-id1328 . -5) (undo-tree-id1329 . 2) (undo-tree-id1330 . -4) (undo-tree-id1331 . -4)) (25820 62 225090 155000) 0 nil])
([nil nil ((2410 . 2411) (t 25820 63 707625 809000)) nil (25820 71 7685 937000) 0 nil])
nil
([nil nil ((2442 . 2443)) nil (25820 71 7685 45000) 0 nil])
([nil nil ((2501 . 2502) (#(";" 0 1 (fontified t)) . 2501) (undo-tree-id1341 . -1)) nil (25820 71 7684 94000) 0 nil])
([nil nil ((2561 . 2562) (#(";" 0 1 (fontified t)) . 2561) (undo-tree-id1340 . -1)) nil (25820 71 7682 100000) 0 nil])
([nil nil ((2291 . 2308) (2337 . 2339) (2338 . 2352) (2383 . 2397) (2395 . 2403) (#("	" 0 1 (fontified t)) . 2395) (undo-tree-id1332 . -1) (#(" " 0 1 (fontified t)) . 2400) (2411 . 2439) (2427 . 2435) (#("	" 0 1 (fontified t)) . 2427) (undo-tree-id1333 . -1) (undo-tree-id1334 . -1) (undo-tree-id1335 . -1) (undo-tree-id1336 . -1) (undo-tree-id1337 . -1) (#(" " 0 1 (fontified t)) . 2430) (#(" " 0 1 (fontified t)) . 2433) (2443 . 2472) (2459 . 2467) (#("	" 0 1 (fontified t)) . 2459) (undo-tree-id1338 . -1) (#(" " 0 1 (fontified t)) . 2462) (2519 . 2527) (#("	" 0 1 (fontified t)) . 2519) (undo-tree-id1339 . -1) (#(" " 0 1 (fontified t)) . 2522) (#(" " 0 1 (fontified t)) . 2524) 2561) nil (25820 71 7675 447000) 0 nil])
([nil nil ((2695 . 2698) (#("[" 0 1 (fontified t)) . -2695) (undo-tree-id1349 . -1) (undo-tree-id1350 . -1) 2696 (2695 . 2696) (2683 . 2695) (#("cur" 0 3 (fontified t)) . -2683) (undo-tree-id1351 . -3) (undo-tree-id1352 . -1) (undo-tree-id1353 . -1) (undo-tree-id1354 . -2) (undo-tree-id1355 . -2) (undo-tree-id1356 . -3) (undo-tree-id1357 . -3) (undo-tree-id1358 . -3) (undo-tree-id1359 . -3) (undo-tree-id1360 . -3) 2686 (2680 . 2686) (2668 . 2680) (#("cu" 0 2 (fontified t)) . -2668) (undo-tree-id1361 . -2) (undo-tree-id1362 . -1) (undo-tree-id1363 . -1) (undo-tree-id1364 . -2) (undo-tree-id1365 . -2) (undo-tree-id1366 . -2) (undo-tree-id1367 . -2) (undo-tree-id1368 . -2) (undo-tree-id1369 . -2) (undo-tree-id1370 . -2) 2670 (2665 . 2670) (#("i" 0 1 (fontified t)) . -2665) (undo-tree-id1371 . -1) (2660 . 2666) (#("i" 0 1 (fontified t)) . -2660) (undo-tree-id1372 . -1) (2658 . 2661) (#("c" 0 1 (fontified t)) . -2658) (undo-tree-id1373 . -1) (undo-tree-id1374 . -1) (undo-tree-id1375 . -1) (undo-tree-id1376 . -1) (undo-tree-id1377 . -1) 2659 (#("u" 0 1 (fontified t)) . -2659) (undo-tree-id1378 . -1) (undo-tree-id1379 . -1) (undo-tree-id1380 . -1) (undo-tree-id1381 . -1) (undo-tree-id1382 . -1) (#("r" 0 1 (fontified t)) . -2660) (undo-tree-id1383 . -1) (undo-tree-id1384 . -1) (undo-tree-id1385 . -1) (undo-tree-id1386 . -1) (undo-tree-id1387 . -1) (#("r" 0 1 (fontified t)) . -2661) (undo-tree-id1388 . -1) (undo-tree-id1389 . -1) (undo-tree-id1390 . -1) (undo-tree-id1391 . -1) (undo-tree-id1392 . -1) (#("e" 0 1 (fontified t)) . -2662) (undo-tree-id1393 . -1) (undo-tree-id1394 . -1) (undo-tree-id1395 . -1) (undo-tree-id1396 . -1) (undo-tree-id1397 . -1) (#("n" 0 1 (fontified t)) . -2663) (undo-tree-id1398 . -1) (undo-tree-id1399 . -1) (undo-tree-id1400 . -1) (undo-tree-id1401 . -1) (undo-tree-id1402 . -1) (#("t" 0 1 (fontified t)) . -2664) (undo-tree-id1403 . -1) (undo-tree-id1404 . -1) (undo-tree-id1405 . -1) (undo-tree-id1406 . -1) (undo-tree-id1407 . -1) (#("_" 0 1 (fontified t)) . -2665) (undo-tree-id1408 . -1) (undo-tree-id1409 . -1) (undo-tree-id1410 . -1) (undo-tree-id1411 . -1) (undo-tree-id1412 . -1) (#("c" 0 1 (fontified t)) . -2666) (undo-tree-id1413 . -1) (undo-tree-id1414 . -1) (undo-tree-id1415 . -1) (undo-tree-id1416 . -1) (undo-tree-id1417 . -1) (#("e" 0 1 (fontified t)) . -2667) (undo-tree-id1418 . -1) (undo-tree-id1419 . -1) (undo-tree-id1420 . -1) (undo-tree-id1421 . -1) (undo-tree-id1422 . -1) (#("l" 0 1 (fontified t)) . -2668) (undo-tree-id1423 . -1) (undo-tree-id1424 . -1) (undo-tree-id1425 . -1) (undo-tree-id1426 . -1) (undo-tree-id1427 . -1) (#("l" 0 1 (fontified t)) . -2669) (undo-tree-id1428 . -1) (undo-tree-id1429 . -1) (undo-tree-id1430 . -1) (undo-tree-id1431 . -1) 2670 (t 25820 71 7625 948000)) nil (25820 111 144958 577000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2652 . 2653) (nil fontified nil 2593 . 2653) (2593 . 2653) 2592) nil (25820 111 144779 331000) 0 nil])
([nil nil ((#("  current_cell.walls[0] = false" 0 1 (fontified t) 1 2 (fontified t rear-nonsticky t) 2 26 (fontified t) 26 31 (fontified t face font-lock-keyword-face)) . 2651) (undo-tree-id1345 . -30) (undo-tree-id1346 . -1) (undo-tree-id1347 . -1) (undo-tree-id1348 . -31)) nil (25820 111 144777 488000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . 2651) (undo-tree-id1343 . -1) (undo-tree-id1344 . -1)) nil (25820 111 144772 889000) 0 nil])
([nil nil ((2640 . 2641) (#("1" 0 1 (fontified t)) . 2640) (undo-tree-id1342 . -1)) nil (25820 111 144769 122000) 0 nil])
([nil nil ((2492 . 2520) (2529 . 2557) 2640) nil (25820 111 144758 61000) 0 nil])
([nil nil ((2764 . 2765) (t 25820 111 147626 716000)) nil (25820 117 308702 544000) 0 nil])
([nil nil ((2671 . 2672)) nil (25820 117 308700 982000) 0 nil])
([nil nil ((2520 . 2521) (2557 . 2558) 2671) nil (25820 117 308695 952000) 0 nil])
([nil nil ((2816 . 2823) (2813 . 2816) (t 25820 117 314293 504000) 2768) nil (25820 127 147633 896000) 0 nil])
([nil nil ((2814 . 2830) (#("		" 0 2 (fontified t)) . 2814) (undo-tree-id1432 . -2) (undo-tree-id1433 . -2) (2823 . 2824) 2822) nil (25820 127 147629 317000) 0 nil])
([nil nil ((#("=" 0 1 (fontified t)) . 2458) (undo-tree-id1472 . -1) (undo-tree-id1473 . -1) (t 25820 127 150960 362000)) nil (25820 282 307076 39000) 0 nil])
([nil nil ((#(">" 0 1 (fontified t syntax-table (1))) . 2458) (undo-tree-id1470 . -1) (undo-tree-id1471 . -1)) nil (25820 282 307074 15000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 2458) (undo-tree-id1468 . -1) (undo-tree-id1469 . -1)) nil (25820 282 307072 252000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t)) . 2458) (undo-tree-id1464 . 1) (undo-tree-id1465 . -1) (undo-tree-id1466 . -1) (undo-tree-id1467 . -1)) nil (25820 282 307070 469000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t)) . 2458) (undo-tree-id1460 . 1) (undo-tree-id1461 . -1) (undo-tree-id1462 . -1) (undo-tree-id1463 . -1)) nil (25820 282 307067 613000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . 2458) (undo-tree-id1458 . -1) (undo-tree-id1459 . -1)) nil (25820 282 307064 798000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 2457) (undo-tree-id1445 . -1) (undo-tree-id1446 . -1) (undo-tree-id1447 . -1) (undo-tree-id1448 . -1) (undo-tree-id1449 . -1) (undo-tree-id1450 . -1) (undo-tree-id1451 . -1) (undo-tree-id1452 . -1) (undo-tree-id1453 . -1) (undo-tree-id1454 . -1) (undo-tree-id1455 . -1) (undo-tree-id1456 . -1) (undo-tree-id1457 . -1)) nil (25820 282 307062 183000) 0 nil])
([nil nil ((#("                                                         " 0 28 (fontified t) 28 56 (fontified t) 56 57 (fontified t)) . 2457) (undo-tree-id1443 . -56) (undo-tree-id1444 . -57)) nil (25820 283 438754 957000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2550 . 2551) (nil fontified nil 2487 . 2551) (2487 . 2551) 2486) nil (25820 380 15299 882000) 0 nil] [nil nil ((#(" => grid.grid[current_cell.0][current_cell.1].walls[0] = false, " 0 2 (fontified t) 2 3 (syntax-table (1) fontified t) 3 4 (fontified t) 4 52 (fontified t) 52 53 (fontified t) 53 57 (fontified t) 57 62 (fontified t face font-lock-keyword-face) 62 63 (fontified t) 63 64 (fontified t)) . 2583) (undo-tree-id1437 . -4) (undo-tree-id1438 . -63) (undo-tree-id1439 . -4) (undo-tree-id1440 . -19) (undo-tree-id1441 . -19) (undo-tree-id1442 . -64)) ((2583 . 2647)) (25820 282 737163 431000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2520 . 2521) (nil fontified nil 2457 . 2521) (2457 . 2521) 2456) nil (25820 380 15297 849000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2520 . 2521) (nil fontified nil 2457 . 2521) (2457 . 2521) 2456) ((#(" => grid.grid[current_cell.0][current_cell.1].walls[0] = false, " 0 2 (fontified nil) 2 3 (fontified nil syntax-table (1)) 3 57 (fontified nil) 57 62 (fontified nil face font-lock-keyword-face) 62 63 (fontified nil) 63 64 (fontified nil rear-nonsticky nil)) . 2457) (nil rear-nonsticky t 2520 . 2521)) (25820 282 307176 458000) 0 nil])
([nil nil ((#("  => (),                                                          " 0 1 (rear-nonsticky t fontified t) 1 3 (fontified t) 3 4 (syntax-table (1) fontified t) 4 8 (fontified t) 8 9 (fontified t) 9 37 (fontified t) 37 66 (fontified t)) . 2614) (undo-tree-id1499 . -65) (undo-tree-id1500 . -2) (undo-tree-id1501 . -2) (undo-tree-id1502 . -1) (undo-tree-id1503 . -1) (undo-tree-id1504 . -66)) nil (25820 380 15296 316000) 0 nil])
([nil nil ((2524 . 2528) (#("West" 0 4 (fontified t face font-lock-comment-face)) . 2524) (undo-tree-id1434 . -3) (undo-tree-id1435 . -4) (undo-tree-id1436 . -4)) ((2524 . 2528) (#("East" 0 4 (fontified t face font-lock-comment-face)) . 2524) (undo-tree-id1474 . -3) (undo-tree-id1475 . -3)) (25820 282 307039 491000) 0 nil])
([nil nil ((2614 . 2615)) nil (25820 380 15292 559000) 0 nil])
nil
([nil nil ((2603 . 2604) (#("0" 0 1 (fontified t)) . 2603) (undo-tree-id1498 . -1)) nil (25820 380 15291 707000) 0 nil])
([nil nil ((2473 . 2479) (#("i" 0 1 (fontified t)) . -2473) (undo-tree-id1494 . -1) (2471 . 2474) (#("current_cell" 0 12 (fontified t)) . 2471) (undo-tree-id1495 . -11) (undo-tree-id1496 . -12) (undo-tree-id1497 . -12)) nil (25820 380 15289 653000) 0 nil])
([nil nil ((2483 . 2491) (#("current_cell" 0 12 (fontified t)) . 2483) (undo-tree-id1491 . -11) (undo-tree-id1492 . -12) (undo-tree-id1493 . -12)) nil (25820 380 15284 874000) 0 nil])
([nil nil ((2762 . 2770) (#("current_cell" 0 12 (fontified t)) . 2762) (undo-tree-id1486 . -11) (undo-tree-id1487 . -4) (undo-tree-id1488 . -4) (undo-tree-id1489 . -12) (undo-tree-id1490 . -12)) nil (25820 380 15282 239000) 0 nil])
([nil nil ((2746 . 2754) (#("current_cell" 0 12 (fontified t)) . 2746) (undo-tree-id1481 . -11) (undo-tree-id1482 . -7) (undo-tree-id1483 . -7) (undo-tree-id1484 . -12) (undo-tree-id1485 . -12)) nil (25820 380 15277 551000) 0 nil])
([nil nil ((2501 . 2502) (#("0" 0 1 (fontified t)) . 2501) (undo-tree-id1480 . -1)) nil (25820 380 15272 691000) 0 nil])
([nil nil ((2776 . 2777) (#("2" 0 1 (fontified t)) . 2776) (undo-tree-id1476 . -1) (2776 . 2777) (#("1" 0 1 (fontified t)) . 2776) (undo-tree-id1477 . -1) (undo-tree-id1478 . -1) (undo-tree-id1479 . -1)) nil (25820 380 15267 782000) 0 nil])
([nil nil ((4309 . 4314) (#("South" 0 5 (fontified t face font-lock-comment-face)) . 4309) (undo-tree-id1509 . -4) (undo-tree-id1510 . -5) (undo-tree-id1511 . -5) (t 25820 380 20965 243000)) nil (25820 480 478969 497000) 0 nil])
([nil nil ((apply -30 2272 2954 undo--wrap-and-run-primitive-undo 2272 2954 ((2861 . 2864) (2833 . 2836) (2743 . 2746) (2645 . 2648) (2548 . 2551) (2458 . 2461) (2439 . 2442) (2373 . 2376) (2307 . 2310) (2284 . 2287) 2836))) nil (25820 480 478965 510000) 0 nil])
([nil nil ((#("	    " 0 5 (fontified t)) . -2866) (undo-tree-id1505 . -5) (undo-tree-id1506 . -5) (undo-tree-id1507 . -5) (undo-tree-id1508 . -5) 2871 (2865 . 2871) 2864) nil (25820 480 478961 442000) 0 nil])
([nil nil ((#("        // North
        for (col_i, cell) in row.iter().enumerate() {
            if cell.walls[0] {
                commands.spawn((
                    PbrBundle {
                        mesh: meshes.add(Mesh::from(shape::Box::new(
                            wall_width,
                            wall_height,
                            wall_depth,
                        ))),
                        material: materials.add(Color::rgb(1.0, 0.0, 0.0).into()),
                        transform: Transform::from_xyz(
                            row_i as f32 * (room_size + wall_width) - wall_width / 2.0,
                            0.0,
                            col_i as f32 * (room_size + wall_width) + (room_size / 2.0),
                        ),
                        ..default()
                    },
                    RigidBody::Fixed,
                    Collider::cuboid(wall_width / 2.0, wall_height / 2.0, wall_depth / 2.0),
                ));
            }
        }
" 0 2 (fontified t) 2 5 (fontified t) 5 8 (fontified t) 8 9 (fontified t face font-lock-comment-delimiter-face) 9 11 (fontified t face font-lock-comment-delimiter-face) 11 16 (fontified t face font-lock-comment-face) 16 17 (fontified t face font-lock-comment-face) 17 20 (fontified t) 20 23 (fontified t) 23 24 (fontified t) 24 25 (fontified t) 25 28 (fontified t face font-lock-keyword-face) 28 37 (fontified t) 37 38 (fontified t) 38 41 (fontified t) 41 43 (fontified t) 43 45 (face font-lock-keyword-face fontified t) 45 69 (fontified t) 69 71 (fontified t) 71 83 (fontified t) 83 85 (fontified t face font-lock-keyword-face) 85 96 (fontified t) 96 98 (fontified t) 98 99 (fontified t) 99 102 (fontified t) 102 126 (fontified t) 126 135 (fontified t) 135 155 (fontified t) 155 164 (fontified t face font-lock-type-face) 164 191 (fontified t) 191 195 (fontified t face font-lock-variable-name-face) 195 206 (fontified t) 206 208 (fontified t) 208 212 (fontified t face font-lock-type-face) 212 219 (fontified t) 219 224 (fontified t face font-lock-constant-face) 224 226 (fontified t) 226 229 (fontified t face font-lock-type-face) 229 236 (fontified t) 236 410 (fontified t) 410 418 (fontified t face font-lock-variable-name-face) 418 434 (fontified t) 434 439 (fontified t face font-lock-type-face) 439 493 (fontified t) 493 502 (fontified t face font-lock-variable-name-face) 502 504 (fontified t) 504 513 (fontified t face font-lock-type-face) 513 548 (fontified t) 548 559 (fontified t) 559 561 (fontified t face font-lock-keyword-face) 561 562 (fontified t) 562 565 (fontified t face font-lock-type-face) 565 613 (fontified t) 613 680 (fontified t) 680 682 (fontified t face font-lock-keyword-face) 682 683 (fontified t) 683 686 (fontified t face font-lock-type-face) 686 819 (fontified t) 819 841 (fontified t) 841 850 (fontified t face font-lock-type-face) 850 852 (fontified t) 852 857 (fontified t face font-lock-type-face) 857 879 (fontified t) 879 887 (fontified t face font-lock-type-face) 887 947 (fontified t) 947 952 (fontified t) 952 996 (fontified t)) . 4329) (undo-tree-id1519 . -986) (undo-tree-id1520 . -995) (undo-tree-id1521 . -986) (undo-tree-id1522 . -841) (undo-tree-id1523 . -986) (undo-tree-id1524 . -17) (undo-tree-id1525 . -17) (undo-tree-id1526 . -71) (undo-tree-id1527 . -71) (undo-tree-id1528 . -102) (undo-tree-id1529 . -102) (undo-tree-id1530 . -135) (undo-tree-id1531 . -135) (undo-tree-id1532 . -167) (undo-tree-id1533 . -167) (undo-tree-id1534 . -236) (undo-tree-id1535 . -236) (undo-tree-id1536 . -276) (undo-tree-id1537 . -276) (undo-tree-id1538 . -317) (undo-tree-id1539 . -317) (undo-tree-id1540 . -357) (undo-tree-id1541 . -357) (undo-tree-id1542 . -386) (undo-tree-id1543 . -386) (undo-tree-id1544 . -469) (undo-tree-id1545 . -469) (undo-tree-id1546 . -525) (undo-tree-id1547 . -525) (undo-tree-id1548 . -613) (undo-tree-id1549 . -613) (undo-tree-id1550 . -646) (undo-tree-id1551 . -646) (undo-tree-id1552 . -735) (undo-tree-id1553 . -735) (undo-tree-id1554 . -762) (undo-tree-id1555 . -762) (undo-tree-id1556 . -798) (undo-tree-id1557 . -798) (undo-tree-id1558 . -821) (undo-tree-id1559 . -821) (undo-tree-id1560 . -859) (undo-tree-id1561 . -859) (undo-tree-id1562 . -821) (undo-tree-id1563 . -821) (undo-tree-id1564 . -798) (undo-tree-id1565 . -798) (undo-tree-id1566 . -762) (undo-tree-id1567 . -762) (undo-tree-id1568 . -735) (undo-tree-id1569 . -735) (undo-tree-id1570 . -646) (undo-tree-id1571 . -646) (undo-tree-id1572 . -613) (undo-tree-id1573 . -613) (undo-tree-id1574 . -525) (undo-tree-id1575 . -525) (undo-tree-id1576 . -469) (undo-tree-id1577 . -469) (undo-tree-id1578 . -386) (undo-tree-id1579 . -386) (undo-tree-id1580 . -357) (undo-tree-id1581 . -357) (undo-tree-id1582 . -317) (undo-tree-id1583 . -317) (undo-tree-id1584 . -276) (undo-tree-id1585 . -276) (undo-tree-id1586 . -236) (undo-tree-id1587 . -236) (undo-tree-id1588 . -167) (undo-tree-id1589 . -167) (undo-tree-id1590 . -135) (undo-tree-id1591 . -135) (undo-tree-id1592 . -102) (undo-tree-id1593 . -102) (undo-tree-id1594 . -71) (undo-tree-id1595 . -71) (undo-tree-id1596 . -17) (undo-tree-id1597 . -17) (undo-tree-id1598 . -996) (undo-tree-id1599 . -986) (undo-tree-id1600 . -17) (undo-tree-id1601 . -17) (undo-tree-id1602 . -71) (undo-tree-id1603 . -71) (undo-tree-id1604 . -102) (undo-tree-id1605 . -102) (undo-tree-id1606 . -135) (undo-tree-id1607 . -135) (undo-tree-id1608 . -167) (undo-tree-id1609 . -167) (undo-tree-id1610 . -236) (undo-tree-id1611 . -236) (undo-tree-id1612 . -276) (undo-tree-id1613 . -276) (undo-tree-id1614 . -317) (undo-tree-id1615 . -317) (undo-tree-id1616 . -357) (undo-tree-id1617 . -357) (undo-tree-id1618 . -386) (undo-tree-id1619 . -386) (undo-tree-id1620 . -469) (undo-tree-id1621 . -469) (undo-tree-id1622 . -525) (undo-tree-id1623 . -525) (undo-tree-id1624 . -613) (undo-tree-id1625 . -613) (undo-tree-id1626 . -646) (undo-tree-id1627 . -646) (undo-tree-id1628 . -735) (undo-tree-id1629 . -735) (undo-tree-id1630 . -762) (undo-tree-id1631 . -762) (undo-tree-id1632 . -798) (undo-tree-id1633 . -798) (undo-tree-id1634 . -821) (undo-tree-id1635 . -821) (undo-tree-id1636 . -859) (undo-tree-id1637 . -859) (undo-tree-id1638 . -952) (undo-tree-id1639 . -952) (undo-tree-id1640 . -972) (undo-tree-id1641 . -972) (undo-tree-id1642 . -986) (undo-tree-id1643 . -986) (undo-tree-id1644 . -986) (undo-tree-id1645 . -986) (undo-tree-id1646 . -996) 5315 (t 25820 480 484300 352000)) nil (25820 567 842407 746000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4336 . 4337) (#("
" 0 1 (fontified nil)) . -5342) (4328 . 5343)) nil (25820 567 842143 210000) 0 nil])
([nil nil ((4425 . 4426) (#("Walls::West as usize" 0 5 (fontified t face font-lock-type-face) 5 7 (fontified t) 7 11 (fontified t face font-lock-type-face) 11 12 (fontified t) 12 14 (fontified t face font-lock-keyword-face) 14 15 (fontified t) 15 20 (fontified t face font-lock-type-face)) . 4425) (undo-tree-id1512 . -19) (undo-tree-id1513 . -7) (undo-tree-id1514 . -7) (undo-tree-id1515 . -7) (undo-tree-id1516 . -7) (undo-tree-id1517 . -20) (undo-tree-id1518 . -20) 4432) nil (25820 567 842138 992000) 0 nil])
([nil nil ((#("        // West
        for (col_i, cell) in row.iter().enumerate() {
            if cell.walls[0] {
                commands.spawn((
                    PbrBundle {
                        mesh: meshes.add(Mesh::from(shape::Box::new(
                            wall_depth,
                            wall_height,
                            wall_width,
                        ))),
                        material: materials.add(Color::rgb(1.0, 0.0, 0.0).into()),
                        transform: Transform::from_xyz(
                            row_i as f32 * (room_size + wall_width) + (room_size / 2.0),
                            0.0,
                            col_i as f32 * (room_size + wall_width) - wall_width / 2.0,
                        ),
                        ..default()
                    },
                    RigidBody::Fixed,
                    Collider::cuboid(wall_depth / 2.0, wall_height / 2.0, wall_width / 2.0),
                ));
            }
        }
" 0 7 (fontified t) 7 8 (fontified t rear-nonsticky t) 8 11 (fontified t face font-lock-comment-delimiter-face) 11 16 (fontified t face font-lock-comment-face) 16 24 (fontified t) 24 27 (fontified t face font-lock-keyword-face) 27 42 (fontified t) 42 44 (fontified t face font-lock-keyword-face) 44 70 (fontified t) 70 82 (fontified t) 82 84 (fontified t face font-lock-keyword-face) 84 97 (fontified t) 97 101 (fontified t) 101 154 (fontified t) 154 163 (fontified t face font-lock-type-face) 163 190 (fontified t) 190 194 (fontified t face font-lock-variable-name-face) 194 207 (fontified t) 207 211 (fontified t face font-lock-type-face) 211 218 (fontified t) 218 223 (fontified t face font-lock-constant-face) 223 225 (fontified t) 225 228 (fontified t face font-lock-type-face) 228 409 (fontified t) 409 417 (fontified t face font-lock-variable-name-face) 417 433 (fontified t) 433 438 (fontified t face font-lock-type-face) 438 492 (fontified t) 492 501 (fontified t face font-lock-variable-name-face) 501 503 (fontified t) 503 512 (fontified t face font-lock-type-face) 512 558 (fontified t) 558 560 (fontified t face font-lock-keyword-face) 560 561 (fontified t) 561 564 (fontified t face font-lock-type-face) 564 680 (fontified t) 680 682 (fontified t face font-lock-keyword-face) 682 683 (fontified t) 683 686 (fontified t face font-lock-type-face) 686 840 (fontified t) 840 849 (fontified t face font-lock-type-face) 849 851 (fontified t) 851 856 (fontified t face font-lock-type-face) 856 878 (fontified t) 878 886 (fontified t face font-lock-type-face) 886 994 (fontified t) 994 995 (fontified t)) . 4329) (undo-tree-id1650 . -994) (undo-tree-id1651 . -994) (undo-tree-id1652 . 898) (undo-tree-id1653 . -14) (undo-tree-id1654 . -994) (undo-tree-id1655 . -995) (undo-tree-id1656 . -995) (undo-tree-id1657 . -995) (undo-tree-id1658 . -995) (undo-tree-id1659 . -995) (undo-tree-id1660 . -995) (undo-tree-id1661 . -995) (undo-tree-id1662 . -995) (undo-tree-id1663 . -995) (undo-tree-id1664 . -995) (undo-tree-id1665 . -995) (undo-tree-id1666 . -995) (undo-tree-id1667 . -995) (undo-tree-id1668 . -995) (undo-tree-id1669 . -995) (undo-tree-id1670 . -995) (undo-tree-id1671 . -995) (undo-tree-id1672 . -995) (undo-tree-id1673 . -995) (undo-tree-id1674 . -995) (undo-tree-id1675 . -995) (undo-tree-id1676 . -995) (undo-tree-id1677 . -995) (undo-tree-id1678 . -995) (undo-tree-id1679 . -995) (undo-tree-id1680 . -995) (undo-tree-id1681 . -995) (undo-tree-id1682 . -995) (undo-tree-id1683 . -995) (undo-tree-id1684 . -995) (undo-tree-id1685 . -995) (undo-tree-id1686 . -995) (undo-tree-id1687 . -995) (undo-tree-id1688 . -995) (undo-tree-id1689 . -995) (undo-tree-id1690 . -995) (undo-tree-id1691 . -995) (undo-tree-id1692 . -995) (undo-tree-id1693 . -995) (undo-tree-id1694 . -995) (undo-tree-id1695 . -995) (undo-tree-id1696 . -995) (undo-tree-id1697 . -995) (undo-tree-id1698 . -995) (undo-tree-id1699 . -995) (undo-tree-id1700 . -995) (undo-tree-id1701 . -995) (undo-tree-id1702 . -995) (undo-tree-id1703 . -995) (undo-tree-id1704 . -995) (undo-tree-id1705 . -995) (undo-tree-id1706 . -995) (undo-tree-id1707 . -995) (undo-tree-id1708 . -995) (undo-tree-id1709 . -995) (undo-tree-id1710 . -995) (undo-tree-id1711 . -995) (undo-tree-id1712 . -995) (undo-tree-id1713 . -995) (undo-tree-id1714 . -995) (undo-tree-id1715 . -995) (undo-tree-id1716 . -995) (undo-tree-id1717 . -995) (undo-tree-id1718 . -995) (undo-tree-id1719 . -995) (undo-tree-id1720 . -995) (undo-tree-id1721 . -995) (undo-tree-id1722 . -995) (undo-tree-id1723 . -995) (undo-tree-id1724 . -995) (undo-tree-id1725 . -995) (undo-tree-id1726 . -995) (undo-tree-id1727 . -995) (undo-tree-id1728 . -995) (undo-tree-id1729 . -995) (undo-tree-id1730 . -995) (undo-tree-id1731 . -995) (undo-tree-id1732 . -995) (undo-tree-id1733 . -995) (undo-tree-id1734 . -995) (undo-tree-id1735 . -995) (undo-tree-id1736 . -995) (undo-tree-id1737 . -995) (undo-tree-id1738 . -995) (undo-tree-id1739 . -995) (undo-tree-id1740 . -995) (undo-tree-id1741 . -995) (undo-tree-id1742 . -995) (undo-tree-id1743 . -995) (undo-tree-id1744 . -995) (undo-tree-id1745 . -995) (undo-tree-id1746 . -995) (undo-tree-id1747 . -995) (undo-tree-id1748 . -995) (undo-tree-id1749 . -995) (undo-tree-id1750 . -995) (undo-tree-id1751 . -995) (undo-tree-id1752 . -995) (undo-tree-id1753 . -995) (undo-tree-id1754 . -995) (undo-tree-id1755 . -995) (undo-tree-id1756 . -995) (undo-tree-id1757 . -995) (undo-tree-id1758 . -995) (undo-tree-id1759 . -995) (undo-tree-id1760 . -995) (undo-tree-id1761 . -995) (undo-tree-id1762 . -995) (undo-tree-id1763 . -995) (undo-tree-id1764 . -995) (undo-tree-id1765 . -995) (undo-tree-id1766 . -995) (undo-tree-id1767 . -995) (undo-tree-id1768 . -995) (undo-tree-id1769 . -995) (undo-tree-id1770 . -995) (undo-tree-id1771 . -995) (undo-tree-id1772 . -995) (undo-tree-id1773 . -995) (undo-tree-id1774 . -995) (undo-tree-id1775 . -96) (undo-tree-id1776 . -96) (undo-tree-id1777 . -96) (undo-tree-id1778 . -96) (undo-tree-id1779 . -96) (undo-tree-id1780 . -994) (undo-tree-id1781 . -96) (undo-tree-id1782 . -96) (undo-tree-id1783 . -96) (undo-tree-id1784 . -96) (undo-tree-id1785 . -96) (undo-tree-id1786 . -96) (undo-tree-id1787 . -96) (undo-tree-id1788 . -96) (undo-tree-id1789 . -96) (undo-tree-id1790 . -96) (undo-tree-id1791 . -96) (undo-tree-id1792 . -96) (undo-tree-id1793 . -96) (undo-tree-id1794 . -42) (undo-tree-id1795 . -42) (undo-tree-id1796 . -14) (undo-tree-id1797 . -14) (undo-tree-id1798 . -995) (undo-tree-id1799 . -14) (undo-tree-id1800 . -994) (undo-tree-id1801 . -14) (undo-tree-id1802 . -14) (undo-tree-id1803 . -30) (undo-tree-id1804 . -30) (undo-tree-id1805 . -84) (undo-tree-id1806 . -84) (undo-tree-id1807 . -115) (undo-tree-id1808 . -115) (undo-tree-id1809 . -148) (undo-tree-id1810 . -148) (undo-tree-id1811 . -180) (undo-tree-id1812 . -180) (undo-tree-id1813 . -249) (undo-tree-id1814 . -249) (undo-tree-id1815 . -289) (undo-tree-id1816 . -289) (undo-tree-id1817 . -330) (undo-tree-id1818 . -330) (undo-tree-id1819 . -370) (undo-tree-id1820 . -370) (undo-tree-id1821 . -399) (undo-tree-id1822 . -399) (undo-tree-id1823 . -482) (undo-tree-id1824 . -482) (undo-tree-id1825 . -538) (undo-tree-id1826 . -538) (undo-tree-id1827 . -627) (undo-tree-id1828 . -627) (undo-tree-id1829 . -660) (undo-tree-id1830 . -660) (undo-tree-id1831 . -748) (undo-tree-id1832 . -748) (undo-tree-id1833 . -775) (undo-tree-id1834 . -775) (undo-tree-id1835 . -811) (undo-tree-id1836 . -811) (undo-tree-id1837 . -834) (undo-tree-id1838 . -834) (undo-tree-id1839 . -872) (undo-tree-id1840 . -872) (undo-tree-id1841 . -965) (undo-tree-id1842 . -965) (undo-tree-id1843 . -984) (undo-tree-id1844 . -984) (undo-tree-id1845 . -985) (undo-tree-id1846 . -994) (undo-tree-id1847 . -994) (undo-tree-id1848 . -994) (undo-tree-id1849 . -995) 5323 (t 25820 567 847635 138000)) nil (25820 598 568953 601000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4336 . 4337) (#("
" 0 1 (fontified nil)) . -5356) (4328 . 5357)) nil (25820 598 568778 723000) 0 nil])
([nil nil ((4426 . 4427) (#("Walls::North as usize" 0 5 (fontified t face font-lock-type-face) 5 7 (fontified t) 7 12 (fontified t face font-lock-type-face) 12 13 (fontified t) 13 15 (fontified t face font-lock-keyword-face) 15 16 (fontified t) 16 21 (fontified t face font-lock-type-face)) . 4426) (undo-tree-id1647 . -20) (undo-tree-id1648 . -21) (undo-tree-id1649 . -21)) nil (25820 598 568774 695000) 0 nil])
([nil nil ((222 . 237) (t 25820 598 570969 32000)) nil (25820 650 580847 922000) 0 nil])
([nil nil ((351 . 366)) nil (25820 650 580846 379000) 0 nil])
([nil nil ((apply 30 2302 2866 undo--wrap-and-run-primitive-undo 2302 2866 ((#("// " 0 3 (fontified t face font-lock-comment-delimiter-face)) . -2864) (#<marker at 2596 in maze2.rs> . -3) (#<marker at 2596 in maze2.rs> . -3) (#<marker at 2596 in maze2.rs> . -3) (#<marker at 2596 in maze2.rs> . -3) (#<marker at 2596 in maze2.rs> . -3) (#<marker at 2596 in maze2.rs> . -3) (#("// " 0 3 (fontified t face font-lock-comment-delimiter-face)) . -2839) (#("// " 0 3 (fontified t face font-lock-comment-delimiter-face)) . -2752) (#("// " 0 3 (fontified t face font-lock-comment-delimiter-face)) . -2657) (#("// " 0 3 (fontified t face font-lock-comment-delimiter-face)) . -2563) (#("// " 0 3 (fontified t face font-lock-comment-delimiter-face)) . -2476) (#("// " 0 3 (fontified t face font-lock-comment-delimiter-face)) . -2460) (#("// " 0 3 (fontified t face font-lock-comment-delimiter-face)) . -2397) (#("// " 0 3 (fontified t face font-lock-comment-delimiter-face)) . -2334) (#("// " 0 3 (fontified t face font-lock-comment-delimiter-face)) . -2314) 2896))) nil (25820 650 580845 728000) 0 nil])
([nil nil ((#("grid.grid[neighbor.0][neighbor.1].walls[1] = false, " 0 40 (fontified t) 40 41 (fontified t) 41 45 (fontified t) 45 50 (fontified t face font-lock-keyword-face) 50 51 (fontified t) 51 52 (rear-nonsticky t fontified t)) . 2491) (undo-tree-id1897 . -51) (undo-tree-id1898 . -16) (undo-tree-id1899 . -16) (undo-tree-id1900 . -16) (undo-tree-id1901 . -16) (undo-tree-id1902 . -52)) nil (25820 650 580844 406000) 0 nil])
([nil nil ((#("grid.grid[current_cell.0][current_cell.1].walls[1] = false, " 0 48 (fontified t) 48 49 (fontified t) 49 53 (fontified t) 53 58 (fontified t face font-lock-keyword-face) 58 60 (fontified t)) . 2525) (undo-tree-id1883 . -59) (undo-tree-id1884 . -59) (undo-tree-id1885 . -59) (undo-tree-id1886 . -59) (undo-tree-id1887 . -59) (undo-tree-id1888 . -17) (undo-tree-id1889 . -17) (undo-tree-id1890 . -17) (undo-tree-id1891 . -17) (undo-tree-id1892 . -1) (undo-tree-id1893 . -1) (undo-tree-id1894 . -1) (undo-tree-id1895 . -1) (undo-tree-id1896 . -60)) nil (25820 650 580837 312000) 0 nil])
([nil nil ((#("grid.grid[current_cell.0][current_cell.1].walls[0] = false, " 0 48 (fontified t) 48 49 (fontified t) 49 53 (fontified t) 53 58 (fontified t face font-lock-keyword-face) 58 59 (fontified t) 59 60 (fontified t)) . 2560) (undo-tree-id1877 . -59) (undo-tree-id1878 . -16) (undo-tree-id1879 . -16) (undo-tree-id1880 . -16) (undo-tree-id1881 . -16) (undo-tree-id1882 . -60)) nil (25820 650 580824 679000) 0 nil])
([nil nil ((#("grid.grid[neighbor.0][neighbor.1].walls[0] = false,  " 0 18 (fontified t) 18 30 (fontified t) 30 33 (fontified t) 33 40 (fontified t) 40 41 (fontified t) 41 45 (fontified t) 45 50 (fontified t face font-lock-keyword-face) 50 51 (fontified t) 51 52 (rear-nonsticky t fontified t) 52 53 (fontified t)) . 2594) (undo-tree-id1866 . -52) (undo-tree-id1867 . -53) (undo-tree-id1868 . -22) (undo-tree-id1869 . -22) (undo-tree-id1870 . -17) (undo-tree-id1871 . -17) (undo-tree-id1872 . -17) (undo-tree-id1873 . -17) (undo-tree-id1874 . -1) (undo-tree-id1875 . -1) (undo-tree-id1876 . -53)) nil (25820 650 580820 290000) 0 nil])
([nil nil ((2492 . 2494) (#("y" 0 1 (fontified t)) . -2492) (undo-tree-id1856 . -1) (undo-tree-id1857 . -1) (undo-tree-id1858 . -1) (undo-tree-id1859 . -1) (#(")" 0 1 (fontified t)) . -2493) (undo-tree-id1860 . -1) (undo-tree-id1861 . -1) (undo-tree-id1862 . -1) (undo-tree-id1863 . 1) (undo-tree-id1864 . -1) (undo-tree-id1865 . -1) 2494 (2491 . 2494)) nil (25820 650 580812 947000) 0 nil])
([nil nil ((2529 . 2531) (#("y" 0 1 (fontified nil)) . -2529) (undo-tree-id1854 . -1) (#(")" 0 1 (fontified nil)) . -2530) (undo-tree-id1855 . -1) 2531 (2528 . 2531)) nil (25820 650 580804 811000) 0 nil])
([nil nil ((2567 . 2569) (#("y" 0 1 (fontified nil)) . -2567) (undo-tree-id1852 . -1) (#(")" 0 1 (fontified nil)) . -2568) (undo-tree-id1853 . -1) 2569 (2566 . 2569)) nil (25820 650 580801 455000) 0 nil])
([nil nil ((2604 . 2606) (#("y" 0 1 (fontified nil)) . -2604) (undo-tree-id1850 . -1) (#(")" 0 1 (fontified nil)) . -2605) (undo-tree-id1851 . -1) 2606 (2603 . 2606)) nil (25820 650 580797 367000) 0 nil])
([nil nil ((2494 . 2495) (2531 . 2533) (2569 . 2570) (2606 . 2608) 2605) nil (25820 650 580784 353000) 0 nil])
([nil nil ((2498 . 2503) (#("West" 0 4 (fontified t face font-lock-comment-face)) . 2498) (undo-tree-id1962 . -3) (undo-tree-id1963 . -4) (undo-tree-id1964 . -4) (t 25820 650 584303 329000)) nil (25820 718 869308 593000) 0 nil])
([nil nil ((2538 . 2543) (#("East" 0 4 (fontified t face font-lock-comment-face)) . 2538) (undo-tree-id1955 . -3) (undo-tree-id1956 . -3) (undo-tree-id1957 . -3) (undo-tree-id1958 . -3) (undo-tree-id1959 . -3) (undo-tree-id1960 . -4) (undo-tree-id1961 . -4)) nil (25820 718 869305 898000) 0 nil])
([nil nil ((2577 . 2582) (#("South" 0 5 (fontified t face font-lock-comment-face)) . 2577) (undo-tree-id1950 . -4) (undo-tree-id1951 . -4) (undo-tree-id1952 . -4) (undo-tree-id1953 . -5) (undo-tree-id1954 . -5)) nil (25820 718 869300 448000) 0 nil])
([nil nil ((2616 . 2621) (#("North" 0 5 (fontified t face font-lock-comment-face)) . 2616) (undo-tree-id1943 . -4) (undo-tree-id1944 . -4) (undo-tree-id1945 . -4) (undo-tree-id1946 . -4) (undo-tree-id1947 . -4) (undo-tree-id1948 . -5) (undo-tree-id1949 . -5)) nil (25820 718 869296 451000) 0 nil])
([nil nil ((2581 . 2588) (#(" " 0 1 (fontified t)) . -2581) (undo-tree-id1903 . -1) (undo-tree-id1904 . -1) 2582 (2580 . 2582) (2571 . 2580) (2568 . 2571) (2556 . 2568) (#("cur" 0 3 (fontified t)) . -2556) (undo-tree-id1905 . -3) (undo-tree-id1906 . -1) (undo-tree-id1907 . -1) (undo-tree-id1908 . -2) (undo-tree-id1909 . -2) (undo-tree-id1910 . -3) (undo-tree-id1911 . -3) (undo-tree-id1912 . -3) (undo-tree-id1913 . -3) (undo-tree-id1914 . -3) 2559 (2552 . 2559) (2540 . 2552) (#("curr" 0 4 (fontified t)) . -2540) (undo-tree-id1915 . -4) (undo-tree-id1916 . -1) (undo-tree-id1917 . -1) (undo-tree-id1918 . -2) (undo-tree-id1919 . -2) (undo-tree-id1920 . -3) (undo-tree-id1921 . -3) (undo-tree-id1922 . -4) (undo-tree-id1923 . -4) (undo-tree-id1924 . -4) (undo-tree-id1925 . -4) (undo-tree-id1926 . -4) 2544 (2537 . 2544) (#("i" 0 1 (fontified t)) . -2537) (undo-tree-id1927 . -1) (2532 . 2538) (#("i" 0 1 (fontified t)) . -2532) (undo-tree-id1928 . -1) (2530 . 2533) (#("(" 0 1 (fontified t)) . -2530) (undo-tree-id1929 . -1) (undo-tree-id1930 . -1) (undo-tree-id1931 . -1) (undo-tree-id1932 . -1) (undo-tree-id1933 . -1) (undo-tree-id1934 . -1) (#(")" 0 1 (fontified t)) . -2531) (undo-tree-id1935 . -1) (undo-tree-id1936 . -1) (undo-tree-id1937 . -1) (undo-tree-id1938 . -1) (undo-tree-id1939 . -1) (undo-tree-id1940 . 1) (undo-tree-id1941 . -1) (undo-tree-id1942 . -1) 2532) nil (25820 718 869286 742000) 0 nil])
([nil nil ((2495 . 2550) (#(" " 0 1 (fontified t)) . 2589) (2630 . 2657) (2631 . 2659) (2668 . 2723) 2587) nil (25820 718 869250 424000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2550 . 2551) (nil fontified nil 2491 . 2551) (2491 . 2551) 2490 (t 25820 718 870971 339000)) nil (25820 764 473834 862000) 0 nil])
([nil nil ((#(" (),                                                        " 0 1 (fontified t rear-nonsticky t) 1 4 (fontified t) 4 5 (fontified t) 5 60 (fontified t)) . 2550) (undo-tree-id1972 . -59) (undo-tree-id1973 . -2) (undo-tree-id1974 . -2) (undo-tree-id1975 . -60)) nil (25820 764 473833 440000) 0 nil])
([nil nil ((2550 . 2551)) nil (25820 764 473829 843000) 0 nil])
([nil nil ((2503 . 2509) (#("i" 0 1 (fontified t)) . -2503) (undo-tree-id1968 . -1) (2501 . 2504) (#("current_cell" 0 12 (fontified t)) . 2501) (undo-tree-id1969 . -11) (undo-tree-id1970 . -12) (undo-tree-id1971 . -12)) nil (25820 764 473828 340000) 0 nil])
([nil nil ((2513 . 2521) (#("current_cell" 0 12 (fontified t)) . 2513) (undo-tree-id1965 . -11) (undo-tree-id1966 . -12) (undo-tree-id1967 . -12)) nil (25820 764 473823 641000) 0 nil])
([nil nil ((#("       " 0 7 (fontified t)) . 2726) (#("       " 0 7 (fontified t)) . 2770) 2520) nil (25820 787 102128 374000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2819 . 2820) (nil fontified nil 2760 . 2820) (2760 . 2820) 2759 (t 25820 764 477638 796000)) nil (25820 809 240812 282000) 0 nil] [nil nil ((nil rear-nonsticky nil 2820 . 2821) (nil fontified nil 2761 . 2821) (2761 . 2821) 2760 (t 25820 764 477638 796000)) ((#("grid.grid[current_cell.0][current_cell.1].walls[0] = false, " 0 53 (fontified nil) 53 58 (fontified nil face font-lock-keyword-face) 58 59 (fontified nil) 59 60 (rear-nonsticky nil fontified nil)) . 2761) (undo-tree-id1982 . -59) (undo-tree-id1983 . -59) (undo-tree-id1984 . -59) (nil rear-nonsticky t 2820 . 2821)) (25820 787 101890 67000) 0 nil] [nil nil ((#("grid.grid[current_cell.0][current_cell.1].walls[0] = false, " 0 10 (fontified t) 10 26 (fontified t) 26 53 (fontified t) 53 58 (fontified t face font-lock-keyword-face) 58 59 (fontified t) 59 60 (fontified t)) . 2578) (undo-tree-id1979 . -59) (undo-tree-id1980 . -60) (undo-tree-id1981 . -60) (t 25820 764 477638 796000)) ((2578 . 2638)) (25820 785 492582 416000) 0 nil] [nil nil ((nil rear-nonsticky nil 2771 . 2772) (nil fontified nil 2760 . 2772) (2760 . 2772) 2759 (t 25820 764 477638 796000)) ((#("current_cell" 0 11 (fontified nil) 11 12 (fontified nil rear-nonsticky nil)) . 2760) (undo-tree-id1976 . -11) (undo-tree-id1977 . -11) (undo-tree-id1978 . -11) (nil rear-nonsticky t 2771 . 2772)) (25820 779 212324 477000) 0 nil])
([nil nil ((#("(),                                                  " 0 1 (fontified t) 1 3 (fontified t) 3 51 (fontified t) 51 53 (fontified t)) . 2820) (undo-tree-id1999 . -52) (undo-tree-id2000 . -1) (undo-tree-id2001 . -1) (undo-tree-id2002 . 53) (undo-tree-id2003 . -1) (undo-tree-id2004 . 52) (undo-tree-id2005 . -2) (undo-tree-id2006 . -53)) nil (25820 809 240810 609000) 0 nil])
nil
nil
nil
([nil nil ((2808 . 2809) (#("0" 0 1 (fontified t)) . 2808) (undo-tree-id1998 . -1)) nil (25820 809 240805 199000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2733 . 2734) (nil fontified nil 2674 . 2734) (2674 . 2734) 2673) nil (25820 809 240803 506000) 0 nil])
([nil nil ((#("(),                                                 " 0 3 (fontified t) 3 30 (fontified t) 30 31 (fontified t) 31 52 (fontified t)) . 2734) (undo-tree-id1992 . -51) (undo-tree-id1993 . 52) (undo-tree-id1994 . -1) (undo-tree-id1995 . 51) (undo-tree-id1996 . -2) (undo-tree-id1997 . -52)) nil (25820 809 240801 592000) 0 nil])
([nil nil ((2686 . 2692) (#("i" 0 1 (fontified t)) . -2686) (undo-tree-id1988 . -1) (2684 . 2687) (#("current_cell" 0 12 (fontified t)) . 2684) (undo-tree-id1989 . -11) (undo-tree-id1990 . -12) (undo-tree-id1991 . -12)) nil (25820 809 240795 641000) 0 nil])
([nil nil ((2696 . 2704) (#("current_cell" 0 12 (fontified t)) . 2696) (undo-tree-id1985 . -11) (undo-tree-id1986 . -12) (undo-tree-id1987 . -12)) nil (25820 809 240788 788000) 0 nil])
([nil nil ((#("            println!(
                \"{} {}\",
                neighbor.0 as isize - current_cell.0 as isize,
                neighbor.1 as isize - current_cell.1 as isize,
            );
" 0 8 (fontified t) 8 12 (fontified t) 12 20 (fontified t face rust-builtin-formatting-macro) 20 21 (fontified t) 21 22 (fontified t) 22 38 (fontified t) 38 39 (fontified t face font-lock-string-face) 39 41 (fontified t face rust-string-interpolation) 41 42 (fontified t face font-lock-string-face) 42 44 (fontified t face rust-string-interpolation) 44 45 (fontified t face font-lock-string-face) 45 46 (fontified t) 46 47 (fontified t) 47 62 (fontified t) 62 63 (fontified t) 63 74 (fontified t) 74 76 (fontified t face font-lock-keyword-face) 76 77 (fontified t) 77 81 (fontified t face font-lock-type-face) 81 82 (rear-nonsticky t fontified t face font-lock-type-face) 82 85 (fontified t) 85 100 (fontified t) 100 102 (fontified t face font-lock-keyword-face) 102 103 (fontified t) 103 108 (fontified t face font-lock-type-face) 108 109 (fontified t) 109 110 (fontified t) 110 124 (fontified t) 124 125 (rear-nonsticky t fontified t) 125 126 (fontified t) 126 135 (fontified t) 135 136 (fontified t) 136 137 (fontified t) 137 139 (fontified t face font-lock-keyword-face) 139 140 (fontified t) 140 144 (fontified t face font-lock-type-face) 144 145 (rear-nonsticky t fontified t face font-lock-type-face) 145 148 (fontified t) 148 161 (fontified t) 161 162 (fontified t) 162 163 (fontified t) 163 165 (fontified t face font-lock-keyword-face) 165 166 (fontified t) 166 171 (fontified t face font-lock-type-face) 171 172 (fontified t) 172 173 (fontified t) 173 185 (fontified t) 185 187 (fontified t) 187 188 (fontified t)) . 2114) (undo-tree-id2025 . -187) (undo-tree-id2026 . -187) (undo-tree-id2027 . -20) (undo-tree-id2028 . -187) (undo-tree-id2029 . -173) (undo-tree-id2030 . -186) (undo-tree-id2031 . -46) (undo-tree-id2032 . -187) (undo-tree-id2033 . -186) (undo-tree-id2034 . -186) (undo-tree-id2035 . -146) (undo-tree-id2036 . -146) (undo-tree-id2037 . -83) (undo-tree-id2038 . -83) (undo-tree-id2039 . -45) (undo-tree-id2040 . -45) (undo-tree-id2041 . -20) (undo-tree-id2042 . -20) (undo-tree-id2043 . -188) (undo-tree-id2044 . -20) (undo-tree-id2045 . -187) (undo-tree-id2046 . -20) (undo-tree-id2047 . -20) (undo-tree-id2048 . -42) (undo-tree-id2049 . -42) (undo-tree-id2050 . -67) (undo-tree-id2051 . -67) (undo-tree-id2052 . -130) (undo-tree-id2053 . -130) (undo-tree-id2054 . -173) (undo-tree-id2055 . -187) (undo-tree-id2056 . -187) (undo-tree-id2057 . -187) (undo-tree-id2058 . -188) 2301 (t 25820 809 244306 278000)) nil (25820 2908 464243 768000) 0 nil])
([nil nil ((#("
#[derive(Copy, Clone)]
enum Walls {
    North,
    South,
    West,
    East,
}
" 0 1 (fontified t) 1 23 (fontified t face font-lock-preprocessor-face) 23 24 (fontified t) 24 28 (fontified t face font-lock-keyword-face) 28 29 (fontified t) 29 34 (fontified t face font-lock-type-face) 34 41 (fontified t) 41 46 (fontified t face font-lock-type-face) 46 52 (fontified t) 52 57 (fontified t face font-lock-type-face) 57 63 (fontified t) 63 67 (fontified t face font-lock-type-face) 67 69 (fontified t) 69 73 (fontified t) 73 77 (fontified t face font-lock-type-face) 77 79 (fontified t) 79 81 (fontified t)) . 69) (undo-tree-id2007 . -80) (undo-tree-id2008 . -81) (undo-tree-id2009 . -81) (undo-tree-id2010 . -79) (undo-tree-id2011 . -79) (undo-tree-id2012 . -77) (undo-tree-id2013 . -77) (undo-tree-id2014 . -67) (undo-tree-id2015 . -67) (undo-tree-id2016 . -57) (undo-tree-id2017 . -57) (undo-tree-id2018 . -46) (undo-tree-id2019 . -46) (undo-tree-id2020 . -35) (undo-tree-id2021 . -35) (undo-tree-id2022 . -15) (undo-tree-id2023 . -15) (undo-tree-id2024 . -81)) nil (25820 2974 669111 359000) 0 nil])
([nil nil ((apply -6 4894 5051 undo--wrap-and-run-primitive-undo 4894 5051 ((4955 . 4958) (4914 . 4917) 5025)) (t 25820 2908 471005 771000)) nil (25820 3002 969936 778000) 0 nil] [nil nil ((69 . 86) (t 25820 2908 471005 771000)) ((#("aaaaaaaaaaaaaaaaa" 0 17 (fontified t)) . 69) (undo-tree-id2059 . -17)) (25820 2974 668794 214000) 0 nil])
([nil current ((apply -6 5907 6064 undo--wrap-and-run-primitive-undo 5907 6064 ((5968 . 5971) (5927 . 5930) 6038))) nil (25820 3002 969931 307000) 0 nil])
nil
nil
