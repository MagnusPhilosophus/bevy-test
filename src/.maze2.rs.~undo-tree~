(undo-tree-save-format-version . 1)
"a8be8c4b008550ccaf96dd228432d4e4073bcd6b"
[nil nil nil nil (25825 959 643621 108000) 0 nil]
([nil nil ((apply 48 5899 6598 undo--wrap-and-run-primitive-undo 5899 6598 ((#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -6596) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -6580) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -6552) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -6533) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -6454) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -6415) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -6336) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -6288) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -6268) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -6215) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -6190) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -6137) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -6079) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -6000) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -5961) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -5907) 6646))) nil (25825 959 643619 152000) 0 nil])
([nil nil ((#("        for (col_i, cell) in row.iter().enumerate() {
" 0 8 (fontified t) 8 11 (face font-lock-keyword-face fontified t) 11 26 (fontified t) 26 28 (face font-lock-keyword-face fontified t) 28 54 (fontified t)) . 5899) (undo-tree-id388 . -54) (undo-tree-id389 . -54) (undo-tree-id390 . -54) (undo-tree-id391 . -54) (undo-tree-id392 . -54) (undo-tree-id393 . -54) (undo-tree-id394 . -54) (undo-tree-id395 . -53)) nil (25825 959 643617 267000) 0 nil])
([nil nil ((#("        }
" 0 8 (fontified t) 8 10 (fontified t)) . 6534) (undo-tree-id382 . -10) (undo-tree-id383 . -10) (undo-tree-id384 . -9) (undo-tree-id385 . -10) (undo-tree-id386 . -10) (undo-tree-id387 . -10)) nil (25825 959 643611 959000) 0 nil])
([nil nil ((#("            commands.spawn(PbrBundle {
                mesh: meshes.add(Mesh::from(shape::Cube { size: room_size })),
                material: materials.add(if cell.visited {
                    Color::rgb(1.0, 1.0, 1.0).into()
                } else {
                    Color::rgb(0.0, 0.0, 0.0).into()
                }),
                transform: Transform::from_xyz(
                    col_i as f32 * (room_size + wall_width) + room_size / 2.0,
                    wall_height / 2.0,
                    row_i as f32 * (room_size + wall_width) + room_size / 2.0,
                ),
                ..default()
            });
" 0 8 (fontified t) 8 12 (fontified t) 12 27 (fontified t) 27 36 (face font-lock-type-face fontified t) 36 39 (fontified t) 39 47 (fontified t) 47 55 (fontified t) 55 59 (face font-lock-variable-name-face fontified t) 59 72 (fontified t) 72 76 (face font-lock-type-face fontified t) 76 83 (fontified t) 83 88 (face font-lock-constant-face fontified t) 88 90 (fontified t) 90 94 (face font-lock-type-face fontified t) 94 97 (fontified t) 97 101 (face font-lock-variable-name-face fontified t) 101 107 (fontified t) 107 118 (fontified t) 118 126 (fontified t) 126 134 (fontified t) 134 142 (face font-lock-variable-name-face fontified t) 142 158 (fontified t) 158 160 (face font-lock-keyword-face fontified t) 160 176 (fontified t) 176 184 (fontified t) 184 196 (fontified t) 196 201 (face font-lock-type-face fontified t) 201 229 (fontified t) 229 237 (fontified t) 237 245 (fontified t) 245 247 (fontified t) 247 251 (face font-lock-keyword-face fontified t) 251 254 (fontified t) 254 262 (fontified t) 262 274 (fontified t) 274 279 (face font-lock-type-face fontified t) 279 307 (fontified t) 307 315 (fontified t) 315 323 (fontified t) 323 327 (fontified t) 327 335 (fontified t) 335 343 (fontified t) 343 352 (face font-lock-variable-name-face fontified t) 352 354 (fontified t) 354 363 (face font-lock-type-face fontified t) 363 375 (fontified t) 375 383 (fontified t) 383 395 (fontified t) 395 401 (fontified t) 401 403 (face font-lock-keyword-face fontified t) 403 404 (fontified t) 404 407 (face font-lock-type-face fontified t) 407 454 (fontified t) 454 462 (fontified t) 462 474 (fontified t) 474 493 (fontified t) 493 501 (fontified t) 501 513 (fontified t) 513 519 (fontified t) 519 521 (face font-lock-keyword-face fontified t) 521 522 (fontified t) 522 525 (face font-lock-type-face fontified t) 525 572 (fontified t) 572 580 (fontified t) 580 588 (fontified t) 588 591 (fontified t) 591 599 (fontified t) 599 607 (fontified t) 607 619 (fontified t) 619 627 (fontified t) 627 631 (fontified t) 631 635 (fontified t)) . 5899) (undo-tree-id220 . -39) (undo-tree-id221 . -39) (undo-tree-id222 . -307) (undo-tree-id223 . -307) (undo-tree-id224 . -591) (undo-tree-id225 . -591) (undo-tree-id226 . -635) (undo-tree-id227 . -635) (undo-tree-id228 . -635) (undo-tree-id229 . -635) (undo-tree-id230 . -619) (undo-tree-id231 . -619) (undo-tree-id232 . -591) (undo-tree-id233 . -591) (undo-tree-id234 . -572) (undo-tree-id235 . -572) (undo-tree-id236 . -493) (undo-tree-id237 . -493) (undo-tree-id238 . -454) (undo-tree-id239 . -454) (undo-tree-id240 . -375) (undo-tree-id241 . -375) (undo-tree-id242 . -327) (undo-tree-id243 . -327) (undo-tree-id244 . -307) (undo-tree-id245 . -307) (undo-tree-id246 . -254) (undo-tree-id247 . -254) (undo-tree-id248 . -229) (undo-tree-id249 . -229) (undo-tree-id250 . -176) (undo-tree-id251 . -176) (undo-tree-id252 . -118) (undo-tree-id253 . -118) (undo-tree-id254 . -39) (undo-tree-id255 . -39) (undo-tree-id256 . -619) (undo-tree-id257 . -619) (undo-tree-id258 . -39) (undo-tree-id259 . -39) (undo-tree-id260 . -118) (undo-tree-id261 . -118) (undo-tree-id262 . -176) (undo-tree-id263 . -176) (undo-tree-id264 . -229) (undo-tree-id265 . -229) (undo-tree-id266 . -254) (undo-tree-id267 . -254) (undo-tree-id268 . -307) (undo-tree-id269 . -307) (undo-tree-id270 . -327) (undo-tree-id271 . -327) (undo-tree-id272 . -375) (undo-tree-id273 . -375) (undo-tree-id274 . -454) (undo-tree-id275 . -454) (undo-tree-id276 . -493) (undo-tree-id277 . -493) (undo-tree-id278 . -572) (undo-tree-id279 . -572) (undo-tree-id280 . -591) (undo-tree-id281 . -591) (undo-tree-id282 . -619) (undo-tree-id283 . -619) (undo-tree-id284 . -635) (undo-tree-id285 . -635) (undo-tree-id286 . -635) (undo-tree-id287 . -635) (undo-tree-id288 . -619) (undo-tree-id289 . -619) (undo-tree-id290 . -591) (undo-tree-id291 . -591) (undo-tree-id292 . -572) (undo-tree-id293 . -572) (undo-tree-id294 . -493) (undo-tree-id295 . -493) (undo-tree-id296 . -454) (undo-tree-id297 . -454) (undo-tree-id298 . -375) (undo-tree-id299 . -375) (undo-tree-id300 . -327) (undo-tree-id301 . -327) (undo-tree-id302 . -307) (undo-tree-id303 . -307) (undo-tree-id304 . -254) (undo-tree-id305 . -254) (undo-tree-id306 . -229) (undo-tree-id307 . -229) (undo-tree-id308 . -176) (undo-tree-id309 . -176) (undo-tree-id310 . -118) (undo-tree-id311 . -118) (undo-tree-id312 . -39) (undo-tree-id313 . -39) (undo-tree-id314 . -634) (undo-tree-id315 . -39) (undo-tree-id316 . -39) (undo-tree-id317 . -118) (undo-tree-id318 . -118) (undo-tree-id319 . -176) (undo-tree-id320 . -176) (undo-tree-id321 . -229) (undo-tree-id322 . -229) (undo-tree-id323 . -254) (undo-tree-id324 . -254) (undo-tree-id325 . -307) (undo-tree-id326 . -307) (undo-tree-id327 . -327) (undo-tree-id328 . -327) (undo-tree-id329 . -375) (undo-tree-id330 . -375) (undo-tree-id331 . -454) (undo-tree-id332 . -454) (undo-tree-id333 . -493) (undo-tree-id334 . -493) (undo-tree-id335 . -572) (undo-tree-id336 . -572) (undo-tree-id337 . -591) (undo-tree-id338 . -591) (undo-tree-id339 . -619) (undo-tree-id340 . -619) (undo-tree-id341 . -635) (undo-tree-id342 . -635) (undo-tree-id343 . -635) (undo-tree-id344 . -635) (undo-tree-id345 . -635) (undo-tree-id346 . -635) (undo-tree-id347 . -635) (undo-tree-id348 . -635) (undo-tree-id349 . -635) (undo-tree-id350 . -635) (undo-tree-id351 . -619) (undo-tree-id352 . -619) (undo-tree-id353 . -619) (undo-tree-id354 . -619) (undo-tree-id355 . -619) (undo-tree-id356 . -619) (undo-tree-id357 . -591) (undo-tree-id358 . -591) (undo-tree-id359 . -572) (undo-tree-id360 . -572) (undo-tree-id361 . -493) (undo-tree-id362 . -493) (undo-tree-id363 . -454) (undo-tree-id364 . -454) (undo-tree-id365 . -375) (undo-tree-id366 . -375) (undo-tree-id367 . -327) (undo-tree-id368 . -327) (undo-tree-id369 . -307) (undo-tree-id370 . -307) (undo-tree-id371 . -254) (undo-tree-id372 . -254) (undo-tree-id373 . -229) (undo-tree-id374 . -229) (undo-tree-id375 . -176) (undo-tree-id376 . -176) (undo-tree-id377 . -118) (undo-tree-id378 . -118) (undo-tree-id379 . -39) (undo-tree-id380 . -39) (undo-tree-id381 . -635)) nil (25825 959 643604 276000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5965 . 5966) (#("
" 0 1 (fontified nil)) . -6588) (5953 . 6589) 5900) nil (25825 959 643536 111000) 0 nil])
([nil nil ((#("        // Room
" 0 8 (fontified t) 8 11 (face font-lock-comment-delimiter-face fontified t) 11 16 (face font-lock-comment-face fontified t)) . 5883) (undo-tree-id27 . -16) (undo-tree-id28 . -16) (undo-tree-id29 . -16) (undo-tree-id30 . -16) (undo-tree-id31 . -16) (undo-tree-id32 . -16) (undo-tree-id33 . -16) (undo-tree-id34 . -16) (undo-tree-id35 . -16) (undo-tree-id36 . -16) (undo-tree-id37 . -16) (undo-tree-id38 . -16) (undo-tree-id39 . -16) (undo-tree-id40 . -16) (undo-tree-id41 . -16) (undo-tree-id42 . -16) (undo-tree-id43 . -16) (undo-tree-id44 . -16) (undo-tree-id45 . -16) (undo-tree-id46 . -16) (undo-tree-id47 . -16) (undo-tree-id48 . -16) (undo-tree-id49 . -16) (undo-tree-id50 . -16) (undo-tree-id51 . -16) (undo-tree-id52 . -16) (undo-tree-id53 . -16) (undo-tree-id54 . -16) (undo-tree-id55 . -16) (undo-tree-id56 . -16) (undo-tree-id57 . -16) (undo-tree-id58 . -16) (undo-tree-id59 . -16) (undo-tree-id60 . -16) (undo-tree-id61 . -16) (undo-tree-id62 . -16) (undo-tree-id63 . -16) (undo-tree-id64 . -16) (undo-tree-id65 . -16) (undo-tree-id66 . -16) (undo-tree-id67 . -16) (undo-tree-id68 . -16) (undo-tree-id69 . -16) (undo-tree-id70 . -16) (undo-tree-id71 . -16) (undo-tree-id72 . -16) (undo-tree-id73 . -16) (undo-tree-id74 . -16) (undo-tree-id75 . -16) (undo-tree-id76 . -16) (undo-tree-id77 . -16) (undo-tree-id78 . -16) (undo-tree-id79 . -16) (undo-tree-id80 . -16) (undo-tree-id81 . -16) (undo-tree-id82 . -16) (undo-tree-id83 . -16) (undo-tree-id84 . -16) (undo-tree-id85 . -16) (undo-tree-id86 . -16) (undo-tree-id87 . -16) (undo-tree-id88 . -16) (undo-tree-id89 . -16) (undo-tree-id90 . -16) (undo-tree-id91 . -16) (undo-tree-id92 . -16) (undo-tree-id93 . -16) (undo-tree-id94 . -16) (undo-tree-id95 . -16) (undo-tree-id96 . -16) (undo-tree-id97 . -16) (undo-tree-id98 . -16) (undo-tree-id99 . -16) (undo-tree-id100 . -16) (undo-tree-id101 . -16) (undo-tree-id102 . -16) (undo-tree-id103 . -16) (undo-tree-id104 . -16) (undo-tree-id105 . -16) (undo-tree-id106 . -16) (undo-tree-id107 . -16) (undo-tree-id108 . -16) (undo-tree-id109 . -16) (undo-tree-id110 . -16) (undo-tree-id111 . -16) (undo-tree-id112 . -16) (undo-tree-id113 . -16) (undo-tree-id114 . -16) (undo-tree-id115 . -16) (undo-tree-id116 . -16) (undo-tree-id117 . -16) (undo-tree-id118 . -16) (undo-tree-id119 . -16) (undo-tree-id120 . -16) (undo-tree-id121 . -16) (undo-tree-id122 . -16) (undo-tree-id123 . -16) (undo-tree-id124 . -16) (undo-tree-id125 . -16) (undo-tree-id126 . -16) (undo-tree-id127 . -16) (undo-tree-id128 . -16) (undo-tree-id129 . -16) (undo-tree-id130 . -16) (undo-tree-id131 . -16) (undo-tree-id132 . -16) (undo-tree-id133 . -16) (undo-tree-id134 . -16) (undo-tree-id135 . -16) (undo-tree-id136 . -16) (undo-tree-id137 . -16) (undo-tree-id138 . -15) (undo-tree-id139 . -16) (undo-tree-id140 . -16) (undo-tree-id141 . -16) (undo-tree-id142 . -16) (undo-tree-id143 . -16) (undo-tree-id144 . -16) (undo-tree-id145 . -16) (undo-tree-id146 . -16) (undo-tree-id147 . -16) (undo-tree-id148 . -16) (undo-tree-id149 . -16) (undo-tree-id150 . -16) (undo-tree-id151 . -16) (undo-tree-id152 . -16) (undo-tree-id153 . -16) (undo-tree-id154 . -16) (undo-tree-id155 . -16) (undo-tree-id156 . -16) (undo-tree-id157 . -16) (undo-tree-id158 . -16) (undo-tree-id159 . -16) (undo-tree-id160 . -16) (undo-tree-id161 . -16) (undo-tree-id162 . -16) (undo-tree-id163 . -16) (undo-tree-id164 . -16) (undo-tree-id165 . -16) (undo-tree-id166 . -16) (undo-tree-id167 . -16) (undo-tree-id168 . -16) (undo-tree-id169 . -16) (undo-tree-id170 . -16) (undo-tree-id171 . -16) (undo-tree-id172 . -16) (undo-tree-id173 . -16) (undo-tree-id174 . -16) (undo-tree-id175 . -16) (undo-tree-id176 . -16) (undo-tree-id177 . -16) (undo-tree-id178 . -16) (undo-tree-id179 . -16) (undo-tree-id180 . -16) (undo-tree-id181 . -16) (undo-tree-id182 . -16) (undo-tree-id183 . -16) (undo-tree-id184 . -16) (undo-tree-id185 . -16) (undo-tree-id186 . -16) (undo-tree-id187 . -16) (undo-tree-id188 . -16) (undo-tree-id189 . -16) (undo-tree-id190 . -16) (undo-tree-id191 . -16) (undo-tree-id192 . -16) (undo-tree-id193 . -16) (undo-tree-id194 . -16) (undo-tree-id195 . -16) (undo-tree-id196 . -16) (undo-tree-id197 . -16) (undo-tree-id198 . -16) (undo-tree-id199 . -16) (undo-tree-id200 . -16) (undo-tree-id201 . -16) (undo-tree-id202 . -16) (undo-tree-id203 . -16) (undo-tree-id204 . -16) (undo-tree-id205 . -16) (undo-tree-id206 . -16) (undo-tree-id207 . -16) (undo-tree-id208 . -16) (undo-tree-id209 . -16) (undo-tree-id210 . -16) (undo-tree-id211 . -16) (undo-tree-id212 . -16) (undo-tree-id213 . -12) (undo-tree-id214 . -12) (undo-tree-id215 . -12) (undo-tree-id216 . -12) (undo-tree-id217 . -12) (undo-tree-id218 . -12) (undo-tree-id219 . -16) 5895) nil (25825 959 643529 616000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5945 . 5946) (#("
" 0 1 (fontified nil face font-lock-comment-face)) . -5953) (5937 . 5954) 5884) nil (25825 959 643059 724000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 5883) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . 1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1)) nil (25825 959 643057 349000) 0 nil])
([nil nil ((#("        " 0 7 (fontified nil) 7 8 (rear-nonsticky t fontified nil)) . -5942) (undo-tree-id13 . -8) (undo-tree-id14 . -8) (5937 . 5942)) nil (25825 959 643049 736000) 0 nil])
([nil nil ((apply -42 5950 6648 undo--wrap-and-run-primitive-undo 5950 6648 ((6620 . 6623) (6589 . 6592) (6567 . 6570) (6485 . 6488) (6443 . 6446) (6361 . 6364) (6310 . 6313) (6287 . 6290) (6231 . 6234) (6203 . 6206) (6147 . 6150) (6086 . 6089) (6004 . 6007) (5962 . 5965) 6585))) nil (25825 959 643046 943000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4240 . 4241) (#("
" 0 1 (fontified nil)) . -4398) (4236 . 4399) 4229) nil (25825 959 643045 57000) 0 nil])
([nil nil ((apply -6 4237 4406 undo--wrap-and-run-primitive-undo 4237 4406 ((4324 . 4327) (4241 . 4244) 4399))) nil (25825 959 643043 590000) 0 nil])
([nil nil ((4539 . 4543) (#("i" 0 1 (fontified t)) . -4539) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (4533 . 4540) (#("(room_size + wall_width) * grid.width as f32 + wall_width" 0 38 (fontified t) 38 40 (face font-lock-keyword-face fontified t) 40 41 (fontified t) 41 44 (face font-lock-type-face fontified t) 44 57 (fontified t)) . 4533) (undo-tree-id10 . -56) (undo-tree-id11 . -57) (undo-tree-id12 . -57)) nil (25825 959 643041 216000) 0 nil])
([nil nil ((#("(room_size + wall_width) * grid.height as f32 + wall_width" 0 39 (fontified t) 39 41 (face font-lock-keyword-face fontified t) 41 42 (fontified t) 42 45 (face font-lock-type-face fontified t) 45 58 (fontified t)) . 5336) (undo-tree-id2 . -57) (undo-tree-id3 . -9) (undo-tree-id4 . -9) (undo-tree-id5 . -9) (undo-tree-id6 . -9) (undo-tree-id7 . -58)) nil (25825 959 643036 397000) 0 nil])
([nil nil ((5343 . 5347) (#("i" 0 1 (fontified t)) . -5343) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (5336 . 5344)) nil (25825 959 643030 111000) 0 nil])
([nil nil ((6011 . 6019) (#("	" 0 1 (fontified t)) . 6011) 5346) nil (25825 959 643006 854000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . 1575) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (t 25825 959 643567 330000)) nil (25825 974 785827 7000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . 1578) (undo-tree-id396 . -1) (undo-tree-id397 . -1)) nil (25825 974 785821 210000) 0 nil])
([nil nil ((#("/" 0 1 (fontified t)) . 4793) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (t 25825 974 786817 566000)) nil (25825 1022 243156 840000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 4793) (undo-tree-id412 . 1) (undo-tree-id413 . -1) (undo-tree-id414 . -1)) nil (25825 1022 243153 558000) 0 nil])
([nil nil ((#("2" 0 1 (fontified t)) . 4793) (undo-tree-id409 . 1) (undo-tree-id410 . -1) (undo-tree-id411 . -1)) nil (25825 1022 243149 716000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . 4793) (undo-tree-id406 . 1) (undo-tree-id407 . -1) (undo-tree-id408 . -1)) nil (25825 1022 243146 364000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . 4793) (undo-tree-id403 . 1) (undo-tree-id404 . -1) (undo-tree-id405 . -1)) nil (25825 1022 243141 964000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 4793) (undo-tree-id400 . 1) (undo-tree-id401 . -1) (undo-tree-id402 . -1)) nil (25825 1088 354257 382000) 0 nil])
([nil nil ((4805 . 4806)) ((#(")" 0 1 (fontified t)) . 4805) (undo-tree-id516 . -1)) (25825 1089 135042 448000) 0 nil])
([nil nil ((4748 . 4749)) ((#("(" 0 1 (fontified t)) . 4748) (t 25825 1069 912962 233000)) (25825 1089 305143 274000) 0 nil])
([nil nil ((4754 . 4759) (#("i" 0 1 (fontified nil)) . 4754) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (4748 . 4755) (#("((room_size + wall_width) * grid.width as f32 - wall_width) " 0 1 (fontified t) 1 39 (fontified t) 39 41 (face font-lock-keyword-face fontified t) 41 42 (fontified t) 42 45 (face font-lock-type-face fontified t) 45 58 (fontified t) 58 59 (fontified t) 59 60 (fontified t)) . 4748) (undo-tree-id519 . -46) (undo-tree-id520 . -46) (undo-tree-id521 . 14) (undo-tree-id522 . -46) (undo-tree-id523 . -46) (undo-tree-id524 . -59) (undo-tree-id525 . 59) (undo-tree-id526 . -58) (undo-tree-id527 . -58) (t 25825 1069 912962 233000)) ((4748 . 4808) (#("maze_wi" 0 6 (fontified nil) 6 7 (fontified nil)) . 4748) (undo-tree-id479 . -7) (undo-tree-id480 . -6) (undo-tree-id481 . -6) (undo-tree-id482 . -6) (undo-tree-id483 . -6) (undo-tree-id484 . -6) (undo-tree-id485 . -6) (undo-tree-id486 . -6) (undo-tree-id487 . -6) (undo-tree-id488 . -6) (undo-tree-id489 . -6) (undo-tree-id490 . -6) (undo-tree-id491 . -6) (undo-tree-id492 . -6) (undo-tree-id493 . -6) (undo-tree-id494 . -6) (undo-tree-id495 . -7) (undo-tree-id496 . -6) (undo-tree-id497 . -6) (4754 . 4755) (#("idth " 0 5 (fontified t)) . 4754) (undo-tree-id498 . -4) (undo-tree-id499 . -4) (undo-tree-id500 . -4) (undo-tree-id501 . -4) (undo-tree-id502 . -4) (undo-tree-id503 . -4) (undo-tree-id504 . -4) (undo-tree-id505 . -4) (undo-tree-id506 . -4) (undo-tree-id507 . -4) (undo-tree-id508 . -4) (undo-tree-id509 . -4) (undo-tree-id510 . -4) (undo-tree-id511 . -4) (undo-tree-id512 . -4) (undo-tree-id513 . -4) (undo-tree-id514 . -4) (undo-tree-id515 . -4)) (25825 1089 614412 430000) 0 nil])
([nil nil ((4773 . 4777) (#("i" 0 1 (fontified t)) . -4773) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (4764 . 4774)) nil (25825 1100 49323 286000) 0 nil] [nil nil ((#("
                " 0 1 (fontified t) 1 17 (fontified t)) . 4731) (undo-tree-id417 . -17) (undo-tree-id418 . -17) (undo-tree-id419 . -17) (undo-tree-id420 . -17) (undo-tree-id421 . -17) (undo-tree-id422 . -17) (undo-tree-id423 . -17) (undo-tree-id424 . -17) (undo-tree-id425 . -17) (undo-tree-id426 . -17) (undo-tree-id427 . -17) (undo-tree-id428 . -17) (undo-tree-id429 . -17) (undo-tree-id430 . -17) (undo-tree-id431 . -17) (undo-tree-id432 . -17) (undo-tree-id433 . -17) (undo-tree-id434 . -17) (undo-tree-id435 . -17) (undo-tree-id436 . -17) (undo-tree-id437 . -17) (undo-tree-id438 . -17) (undo-tree-id439 . -17) (undo-tree-id440 . -17) (undo-tree-id441 . -17) (undo-tree-id442 . -17) (undo-tree-id443 . -17) (undo-tree-id444 . -17) (undo-tree-id445 . -17) (undo-tree-id446 . -17) (undo-tree-id447 . -17) (undo-tree-id448 . -17) (undo-tree-id449 . -17) (undo-tree-id450 . -1) (undo-tree-id451 . -17) (#("
              " 0 1 (fontified t) 1 15 (fontified t)) . 4765) (#(" " 0 1 (fontified t)) . 4781) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (#("
              " 0 1 (fontified t) 1 15 (fontified t)) . 4800) (#(" " 0 1 (fontified t)) . 4816) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (#(",
            " 0 2 (fontified t) 2 14 (fontified t)) . 4834) 4758) ((4834 . 4848) (4816 . 4817) (4800 . 4815) (4781 . 4782) (4765 . 4780) (4731 . 4748) (t 25825 1045 706428 398000)) (25825 1045 706082 404000) 0 nil])
([nil nil ((4969 . 4973) (#("i" 0 1 (fontified t)) . -4969) (undo-tree-id541 . -1) (undo-tree-id542 . -1) (4963 . 4970) (#("((room_size + wall_width) * grid.width as f32 + wall_width)" 0 39 (fontified t) 39 41 (face font-lock-keyword-face fontified t) 41 42 (fontified t) 42 45 (face font-lock-type-face fontified t) 45 59 (fontified t)) . 4963) (undo-tree-id543 . -58) (undo-tree-id544 . -32) (undo-tree-id545 . -32) (undo-tree-id546 . -59) (undo-tree-id547 . -59) (t 25825 1100 52796 842000)) nil (25825 1170 459157 57000) 0 nil])
nil
([nil nil ((#("
            " 0 1 (fontified t) 1 13 (fontified t)) . 4950) (undo-tree-id530 . -13) (undo-tree-id531 . -13) (undo-tree-id532 . -13) (undo-tree-id533 . -13) (undo-tree-id534 . -13) (undo-tree-id535 . -13) (undo-tree-id536 . -13) (undo-tree-id537 . -13) (undo-tree-id538 . -13) (undo-tree-id539 . -13) (undo-tree-id540 . -1) (#("
          " 0 1 (fontified t) 1 11 (fontified t)) . 4980) (#(" " 0 1 (fontified t)) . 4992) (#("
          " 0 11 (fontified t)) . 5011) (#(" " 0 1 (fontified t)) . 5023) (#(",
        " 0 10 (fontified t)) . 5040) 4972) nil (25825 1170 459149 374000) 0 nil])
([nil nil ((#("    // let maze_width = (room_size + wall_width) * grid.width as f32 + wall_width;
    // let maze_height = (room_size + wall_width) * grid.height as f32 + wall_width;
" 0 3 (fontified t) 3 4 (fontified t rear-nonsticky t) 4 7 (face font-lock-comment-delimiter-face fontified t) 7 10 (face font-lock-comment-face fontified t) 10 11 (face font-lock-comment-face fontified t) 11 21 (face font-lock-comment-face fontified t) 21 62 (face font-lock-comment-face fontified t) 62 64 (face font-lock-comment-face fontified t) 64 65 (face font-lock-comment-face fontified t) 65 68 (face font-lock-comment-face fontified t) 68 83 (face font-lock-comment-face fontified t) 83 87 (fontified t) 87 90 (face font-lock-comment-delimiter-face fontified t) 90 93 (face font-lock-comment-face fontified t) 93 94 (face font-lock-comment-face fontified t) 94 105 (face font-lock-comment-face fontified t) 105 147 (face font-lock-comment-face fontified t) 147 149 (face font-lock-comment-face fontified t) 149 150 (face font-lock-comment-face fontified t) 150 153 (face font-lock-comment-face fontified t) 153 167 (face font-lock-comment-face fontified t) 167 168 (face font-lock-comment-face fontified t)) . 4235) (undo-tree-id572 . -117) (undo-tree-id573 . -34) (undo-tree-id574 . -117) (undo-tree-id575 . -167) (undo-tree-id576 . -168) (undo-tree-id577 . -168) (undo-tree-id578 . -168) (undo-tree-id579 . -117) (undo-tree-id580 . -117) (undo-tree-id581 . -34) (undo-tree-id582 . -34) (undo-tree-id583 . -34) (undo-tree-id584 . -34) (undo-tree-id585 . -83) (undo-tree-id586 . -117) (undo-tree-id587 . -168) (undo-tree-id588 . -117) (undo-tree-id589 . -117) (undo-tree-id590 . -117) (undo-tree-id591 . -168) 4352 (t 25825 1170 465743 788000)) nil (25825 1235 730383 452000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil face font-lock-comment-face)) . -5014) (4846 . 5015)) nil (25825 1235 730373 954000) 0 nil])
([nil nil ((#("(room_size + wall_width) * grid.height as f32 / 2.0 - wall_width / 2.0" 0 39 (fontified t) 39 41 (face font-lock-keyword-face fontified t) 41 42 (fontified t) 42 45 (face font-lock-type-face fontified t) 45 70 (fontified t)) . 5429) (undo-tree-id570 . -69) (undo-tree-id571 . -70)) nil (25825 1235 730371 579000) 0 nil])
([nil nil ((5450 . 5453) (5449 . 5450) (#("i" 0 1 (fontified t)) . -5449) (undo-tree-id566 . -1) (undo-tree-id567 . -1) (5436 . 5450) (#("i" 0 1 (fontified t)) . -5436) (undo-tree-id568 . -1) (undo-tree-id569 . -1) (5429 . 5437)) nil (25825 1235 730368 227000) 0 nil])
([nil nil ((5440 . 5446)) nil (25825 1235 730364 385000) 0 nil])
([nil nil ((5643 . 5647) (#("i" 0 1 (fontified t)) . -5643) (undo-tree-id559 . -1) (undo-tree-id560 . -1) (5636 . 5644) (#("((room_size + wall_width) * grid.height as f32 + wall_width)" 0 11 (fontified t) 11 40 (fontified t) 40 42 (face font-lock-keyword-face fontified t) 42 43 (fontified t) 43 46 (face font-lock-type-face fontified t) 46 60 (fontified t)) . 5636) (undo-tree-id561 . -59) (undo-tree-id562 . -20) (undo-tree-id563 . -20) (undo-tree-id564 . -60) (undo-tree-id565 . -60)) nil (25825 1235 730361 452000) 0 nil])
([nil nil ((#("
            " 0 13 (fontified t)) . 5562) (#("
          " 0 11 (fontified t)) . 5592) (#(" " 0 1 (fontified t)) . 5604) (#("
          " 0 1 (fontified t) 1 10 (fontified t) 10 11 (fontified t)) . 5623) (undo-tree-id548 . -1) (#(" " 0 1 (fontified t)) . 5635) (undo-tree-id549 . -1) (undo-tree-id550 . -1) (undo-tree-id551 . -1) (undo-tree-id552 . -1) (undo-tree-id553 . -1) (undo-tree-id554 . -1) (undo-tree-id555 . -1) (undo-tree-id556 . -1) (undo-tree-id557 . -1) (undo-tree-id558 . -1) (#(",
        " 0 2 (fontified t) 2 10 (fontified t)) . 5653) 5646) nil (25825 1235 730353 839000) 0 nil])
([nil nil ((#("    // let maze_width = (room_size + wall_width) * grid.width as f32 + wall_width;
    // let maze_height = (room_size + wall_width) * grid.height as f32 + wall_width;
" 0 3 (fontified t) 3 4 (fontified t rear-nonsticky t) 4 7 (face font-lock-comment-delimiter-face fontified t) 7 10 (face font-lock-comment-face fontified t) 10 11 (face font-lock-comment-face fontified t) 11 21 (face font-lock-comment-face fontified t) 21 62 (face font-lock-comment-face fontified t) 62 64 (face font-lock-comment-face fontified t) 64 65 (face font-lock-comment-face fontified t) 65 68 (face font-lock-comment-face fontified t) 68 83 (face font-lock-comment-face fontified t) 83 87 (fontified t) 87 90 (face font-lock-comment-delimiter-face fontified t) 90 93 (face font-lock-comment-face fontified t) 93 94 (face font-lock-comment-face fontified t) 94 105 (face font-lock-comment-face fontified t) 105 147 (face font-lock-comment-face fontified t) 147 149 (face font-lock-comment-face fontified t) 149 150 (face font-lock-comment-face fontified t) 150 153 (face font-lock-comment-face fontified t) 153 167 (face font-lock-comment-face fontified t) 167 168 (face font-lock-comment-face fontified t)) . 4847) (undo-tree-id663 . -155) (undo-tree-id664 . -72) (undo-tree-id665 . -155) (undo-tree-id666 . -167) (undo-tree-id667 . -155) (undo-tree-id668 . -155) (undo-tree-id669 . -72) (undo-tree-id670 . -72) (undo-tree-id671 . -72) (undo-tree-id672 . -72) (undo-tree-id673 . -72) (undo-tree-id674 . -72) (undo-tree-id675 . -83) (undo-tree-id676 . -155) (undo-tree-id677 . -155) (undo-tree-id678 . -155) (undo-tree-id679 . -155) (undo-tree-id680 . -168) 5002 (t 25825 1235 735385 625000)) nil (25825 1607 688318 956000) 0 nil])
([nil nil ((3861 . 3867) (#("Camera" 0 6 (face font-lock-comment-face fontified t)) . 3861) (undo-tree-id650 . -5) (undo-tree-id651 . -3) (undo-tree-id652 . -3) (undo-tree-id653 . -3) (undo-tree-id654 . -3) (undo-tree-id655 . -3) (undo-tree-id656 . -3) (undo-tree-id657 . -3) (undo-tree-id658 . -3) (undo-tree-id659 . -3) (undo-tree-id660 . -3) (undo-tree-id661 . -6) (undo-tree-id662 . -6)) nil (25825 1607 688309 527000) 0 nil])
([nil nil ((3887 . 3888)) nil (25825 1607 688298 912000) 0 nil])
([nil nil ((4234 . 4235)) nil (25825 1607 688296 537000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -4234) (undo-tree-id642 . -1) (undo-tree-id643 . -1) (undo-tree-id644 . -1) (undo-tree-id645 . -1) (#(" " 0 1 (fontified t)) . -4235) (undo-tree-id646 . -1) (undo-tree-id647 . -1) (undo-tree-id648 . -1) (undo-tree-id649 . -1) 4236 (4234 . 4236)) nil (25825 1607 688294 162000) 0 nil])
([nil nil ((4330 . 4334) (4309 . 4330) (#("t" 0 1 (face font-lock-type-face fontified t)) . -4309) (undo-tree-id592 . -1) (undo-tree-id593 . -1) 4310 (4302 . 4310) (#("i" 0 1 (face font-lock-type-face fontified t)) . -4302) (undo-tree-id594 . -1) (undo-tree-id595 . -1) (4301 . 4303) (4296 . 4301) (#("i" 0 1 (face font-lock-type-face fontified t)) . -4296) (undo-tree-id596 . -1) (4287 . 4297) (4279 . 4287) (#(" " 0 1 (fontified t)) . -4279) (undo-tree-id597 . -1) (undo-tree-id598 . -1) 4280 (4274 . 4280) (#("i" 0 1 (face font-lock-type-face fontified t)) . -4274) (undo-tree-id599 . -1) (undo-tree-id600 . -1) (4270 . 4275) (#("c" 0 1 (fontified t)) . -4270) (undo-tree-id601 . -1) (undo-tree-id602 . -1) (undo-tree-id603 . -1) (undo-tree-id604 . -1) (undo-tree-id605 . -1) (undo-tree-id606 . -1) (undo-tree-id607 . -1) (undo-tree-id608 . -1) (#("o" 0 1 (fontified t)) . -4271) (undo-tree-id609 . -1) (undo-tree-id610 . -1) (undo-tree-id611 . -1) (undo-tree-id612 . -1) 4272 (4268 . 4272) (4265 . 4268) (4260 . 4265) (#("i" 0 1 (face font-lock-type-face fontified t)) . -4260) (undo-tree-id613 . -1) (4258 . 4261) (#("i" 0 1 (face font-lock-type-face fontified t)) . -4258) (undo-tree-id614 . -1) (4253 . 4259) (#("i" 0 1 (face font-lock-type-face fontified t)) . -4253) (undo-tree-id615 . -1) (4247 . 4254) (#("i" 0 1 (face font-lock-type-face fontified t)) . -4247) (undo-tree-id616 . -1) (undo-tree-id617 . -1) (4244 . 4248) (4235 . 4244) (#("Rigid" 0 5 (face font-lock-type-face fontified t)) . -4235) (undo-tree-id618 . -1) (undo-tree-id619 . -1) (undo-tree-id620 . -2) (undo-tree-id621 . -2) (undo-tree-id622 . -2) (undo-tree-id623 . -2) (undo-tree-id624 . -3) (undo-tree-id625 . -5) (undo-tree-id626 . -5) (undo-tree-id627 . -5) (undo-tree-id628 . -5) (undo-tree-id629 . -5) (undo-tree-id630 . -5) 4240 (4238 . 4240) (#("i" 0 1 (face font-lock-type-face fontified t)) . -4238) (undo-tree-id631 . -1) (undo-tree-id632 . -1) (4237 . 4239) (#("d" 0 1 (face font-lock-type-face fontified t)) . -4237) (undo-tree-id633 . -1) (undo-tree-id634 . -1) (undo-tree-id635 . -1) (undo-tree-id636 . -1) (undo-tree-id637 . -1) (undo-tree-id638 . -1) (#("i" 0 1 (face font-lock-type-face fontified nil)) . -4238) (undo-tree-id639 . -1) 4239 (4238 . 4239) (#("i" 0 1 (face font-lock-type-face fontified t)) . -4238) (undo-tree-id640 . -1) (4236 . 4239) (#("i" 0 1 (face font-lock-type-face fontified t)) . -4236) (undo-tree-id641 . -1) (4235 . 4237) (4233 . 4235)) nil (25825 1607 688281 800000) 0 nil])
([nil nil ((3888 . 3897) (3900 . 3902) (3908 . 3910) (3926 . 3930) (3971 . 3975) (3985 . 3986) (4001 . 4004) (4013 . 4016) (4025 . 4026) (4027 . 4031) (4063 . 4067) (4074 . 4076) (4082 . 4084) (4085 . 4088) (4093 . 4094) (4152 . 4154) (4160 . 4162) (4208 . 4209) (4216 . 4219) (4228 . 4230) (4232 . 4234) (4234 . 4238) (4235 . 4239) (4269 . 4270) (4270 . 4277) (4294 . 4298) (4295 . 4299) (4334 . 4340) 4333) nil (25825 1607 688247 508000) 0 nil])
([nil nil ((4361 . 4362) (t 25825 1607 690011 210000)) nil (25825 1670 850140 524000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -4361) (undo-tree-id705 . -1) (undo-tree-id706 . -1) (undo-tree-id707 . -1) (undo-tree-id708 . -1) (undo-tree-id709 . -1) 4362) nil (25825 1670 850138 568000) 0 nil])
([nil nil ((4361 . 4367)) nil (25825 1670 850134 727000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -4364) (undo-tree-id693 . -1) (undo-tree-id694 . -1) (undo-tree-id695 . -1) (undo-tree-id696 . -1) (#(":" 0 1 (fontified t)) . -4365) (undo-tree-id697 . -1) (undo-tree-id698 . -1) (undo-tree-id699 . -1) (undo-tree-id700 . -1) (#("Z" 0 1 (face font-lock-type-face fontified t)) . -4366) (undo-tree-id701 . -1) (undo-tree-id702 . -1) (undo-tree-id703 . -1) (undo-tree-id704 . -1) 4367) nil (25825 1670 850131 864000) 0 nil])
([nil nil ((4364 . 4373)) nil (25825 1670 850003 565000) 0 nil])
([nil nil ((4373 . 4377)) nil (25825 1670 850002 168000) 0 nil])
([nil nil ((#("E" 0 1 (face font-lock-type-face fontified t)) . -4374) (undo-tree-id687 . -1) (undo-tree-id688 . -1) (#("C" 0 1 (face font-lock-type-face fontified t)) . -4375) (undo-tree-id689 . -1) (undo-tree-id690 . -1) (#("3" 0 1 (face font-lock-type-face fontified t)) . -4376) (undo-tree-id691 . -1) (undo-tree-id692 . -1) 4377) nil (25825 1670 850000 283000) 0 nil])
([nil nil ((4374 . 4387)) nil (25825 1670 849995 463000) 0 nil])
([nil nil ((#("I" 0 1 (face font-lock-type-face fontified t)) . -4386) (undo-tree-id685 . -1) (undo-tree-id686 . -1) 4387) nil (25825 1670 849993 578000) 0 nil])
([nil nil ((4386 . 4389)) nil (25825 1670 849990 295000) 0 nil])
([nil nil ((#("<" 0 1 (fontified t)) . -4387) (undo-tree-id681 . -1) (undo-tree-id682 . -1) (#(" " 0 1 (fontified t)) . -4388) (undo-tree-id683 . -1) (undo-tree-id684 . -1) 4389) nil (25825 1670 849986 943000) 0 nil])
([nil nil ((4387 . 4389)) nil (25825 1670 849974 441000) 0 nil])
([nil nil ((#("I" 0 1 (face font-lock-type-face fontified t)) . -4379) (undo-tree-id710 . -1) (undo-tree-id711 . -1) (undo-tree-id712 . -1) (undo-tree-id713 . -1) (undo-tree-id714 . -1) (undo-tree-id715 . -1) (undo-tree-id716 . -1) (undo-tree-id717 . -1) (undo-tree-id718 . -1) (undo-tree-id719 . -1) (undo-tree-id720 . -1) (undo-tree-id721 . -1) (#("D" 0 1 (face font-lock-type-face fontified t)) . -4380) (undo-tree-id722 . -1) (undo-tree-id723 . -1) (undo-tree-id724 . -1) (undo-tree-id725 . -1) (undo-tree-id726 . -1) (undo-tree-id727 . -1) (undo-tree-id728 . -1) (undo-tree-id729 . -1) (undo-tree-id730 . -1) (undo-tree-id731 . -1) (undo-tree-id732 . -1) (undo-tree-id733 . -1) (#("E" 0 1 (face font-lock-type-face fontified t)) . -4381) (undo-tree-id734 . -1) (undo-tree-id735 . -1) (undo-tree-id736 . -1) (undo-tree-id737 . -1) (undo-tree-id738 . -1) (undo-tree-id739 . -1) (undo-tree-id740 . -1) (undo-tree-id741 . -1) (undo-tree-id742 . -1) (undo-tree-id743 . -1) (undo-tree-id744 . -1) (undo-tree-id745 . -1) (#("N" 0 1 (face font-lock-type-face fontified t)) . -4382) (undo-tree-id746 . -1) (undo-tree-id747 . -1) (undo-tree-id748 . -1) (undo-tree-id749 . -1) (undo-tree-id750 . -1) (undo-tree-id751 . -1) (undo-tree-id752 . -1) (undo-tree-id753 . -1) (undo-tree-id754 . -1) (undo-tree-id755 . -1) (undo-tree-id756 . -1) (undo-tree-id757 . -1) (#("T" 0 1 (face font-lock-type-face fontified t)) . -4383) (undo-tree-id758 . -1) (undo-tree-id759 . -1) (undo-tree-id760 . -1) (undo-tree-id761 . -1) (undo-tree-id762 . -1) (undo-tree-id763 . -1) (undo-tree-id764 . -1) (undo-tree-id765 . -1) (undo-tree-id766 . -1) (undo-tree-id767 . -1) (undo-tree-id768 . -1) (undo-tree-id769 . -1) (#("I" 0 1 (face font-lock-type-face fontified t)) . -4384) (undo-tree-id770 . -1) (undo-tree-id771 . -1) (undo-tree-id772 . -1) (undo-tree-id773 . -1) (undo-tree-id774 . -1) (undo-tree-id775 . -1) (undo-tree-id776 . -1) (undo-tree-id777 . -1) (undo-tree-id778 . -1) (undo-tree-id779 . -1) (undo-tree-id780 . -1) (undo-tree-id781 . -1) (#("T" 0 1 (face font-lock-type-face fontified t)) . -4385) (undo-tree-id782 . -1) (undo-tree-id783 . -1) (undo-tree-id784 . -1) (undo-tree-id785 . -1) (undo-tree-id786 . -1) (undo-tree-id787 . -1) (undo-tree-id788 . -1) (undo-tree-id789 . -1) (undo-tree-id790 . -1) (undo-tree-id791 . -1) (undo-tree-id792 . -1) (undo-tree-id793 . -1) (#("Y" 0 1 (face font-lock-type-face fontified t)) . -4386) (undo-tree-id794 . -1) (undo-tree-id795 . -1) (undo-tree-id796 . -1) (undo-tree-id797 . -1) (undo-tree-id798 . -1) (undo-tree-id799 . -1) (undo-tree-id800 . -1) (undo-tree-id801 . -1) (undo-tree-id802 . -1) (undo-tree-id803 . -1) (undo-tree-id804 . -1) (undo-tree-id805 . -1) (#("," 0 1 (fontified t)) . -4387) (undo-tree-id806 . -1) (undo-tree-id807 . -1) (undo-tree-id808 . -1) (undo-tree-id809 . -1) (undo-tree-id810 . -1) (undo-tree-id811 . -1) (undo-tree-id812 . -1) (undo-tree-id813 . -1) (undo-tree-id814 . -1) (undo-tree-id815 . -1) (undo-tree-id816 . -1) (undo-tree-id817 . -1) (#(" " 0 1 (fontified t)) . -4388) (undo-tree-id818 . -1) (undo-tree-id819 . -1) (undo-tree-id820 . -1) (undo-tree-id821 . -1) (undo-tree-id822 . -1) (undo-tree-id823 . -1) (undo-tree-id824 . -1) (undo-tree-id825 . -1) (undo-tree-id826 . -1) (undo-tree-id827 . -1) (undo-tree-id828 . -1) 4389 (t 25825 1670 849664 625000)) nil (25825 1679 152966 154000) 0 nil])
([nil nil ((4379 . 4384)) nil (25825 1679 152907 696000) 0 nil])
([nil nil ((4388 . 4397) (#("1" 0 1 (fontified t)) . -4388) (undo-tree-id829 . -1) (undo-tree-id830 . -1) 4389 (4388 . 4389) (#("1" 0 1 (fontified t)) . -4388) (undo-tree-id831 . -1) (undo-tree-id832 . -1) (#("e" 0 1 (fontified t)) . -4389) (undo-tree-id833 . -1) (undo-tree-id834 . -1) 4390 (4383 . 4390) (#("\"" 0 1 (face font-lock-string-face fontified t)) . -4383) (undo-tree-id835 . -1) (undo-tree-id836 . -1) (undo-tree-id837 . -1) (undo-tree-id838 . -1) 4384 (4377 . 4384) (#("(" 0 1 (fontified t)) . -4377) (undo-tree-id839 . -1) (undo-tree-id840 . -1) (undo-tree-id841 . -1) (undo-tree-id842 . -1) 4378 (4377 . 4378) (#(":" 0 1 (fontified t)) . -4377) (undo-tree-id843 . -1) (undo-tree-id844 . -1) (undo-tree-id845 . -1) (undo-tree-id846 . -1) (undo-tree-id847 . -1) (undo-tree-id848 . -1) (undo-tree-id849 . -1) (undo-tree-id850 . -1) (undo-tree-id851 . -1) (undo-tree-id852 . -1) (undo-tree-id853 . -1) (undo-tree-id854 . -1) (undo-tree-id855 . -1) (undo-tree-id856 . -1) (undo-tree-id857 . -1) (undo-tree-id858 . -1) (undo-tree-id859 . -1) (undo-tree-id860 . -1) (#(":" 0 1 (fontified t)) . -4378) (undo-tree-id861 . -1) (undo-tree-id862 . -1) (undo-tree-id863 . -1) (undo-tree-id864 . -1) (undo-tree-id865 . -1) (undo-tree-id866 . -1) (undo-tree-id867 . -1) (undo-tree-id868 . -1) (undo-tree-id869 . -1) (undo-tree-id870 . -1) (undo-tree-id871 . -1) (undo-tree-id872 . -1) (undo-tree-id873 . -1) (undo-tree-id874 . -1) (undo-tree-id875 . -1) (undo-tree-id876 . -1) (undo-tree-id877 . -1) (undo-tree-id878 . -1) (#("(" 0 1 (fontified t)) . -4379) (undo-tree-id879 . -1) (undo-tree-id880 . -1) (undo-tree-id881 . -1) (undo-tree-id882 . -1) 4380 (4379 . 4380) (#("O" 0 1 (face font-lock-type-face fontified t)) . -4379) (undo-tree-id883 . -1) (undo-tree-id884 . -1) (undo-tree-id885 . -1) (undo-tree-id886 . -1) (undo-tree-id887 . -1) (#("N" 0 1 (face font-lock-type-face fontified t)) . -4380) (undo-tree-id888 . -1) (undo-tree-id889 . -1) (undo-tree-id890 . -1) (undo-tree-id891 . -1) (undo-tree-id892 . -1) (#("E" 0 1 (face font-lock-type-face fontified t)) . -4381) (undo-tree-id893 . -1) (undo-tree-id894 . -1) (undo-tree-id895 . -1) (undo-tree-id896 . -1) 4382 (t 25825 1679 156285 710000)) nil (25825 1773 350956 381000) 0 nil])
([nil nil ((4012 . 4023) (4005 . 4012) (t 25825 1773 355768 795000) 3997) nil (25825 1906 720665 503000) 0 nil])
([nil nil ((4006 . 4022) (#("		" 0 2 (fontified t)) . 4006) 4022) nil (25825 1964 436817 524000) 0 nil])
([nil nil ((#("2" 0 1 (fontified t)) . 4279) (undo-tree-id897 . -1) (undo-tree-id898 . -1)) nil (25825 1974 372453 771000) 0 nil] [nil nil ((4035 . 4036) (t 25825 1906 725036 938000)) ((#("2" 0 1 (fontified t)) . 4035) (t 25825 1954 144776 725000)) (25825 1954 141537 207000) 0 nil])
([nil nil ((4410 . 4414) (#("." 0 1 (fontified t)) . -4410) (undo-tree-id899 . -1) (undo-tree-id900 . -1) (undo-tree-id901 . -1) (undo-tree-id902 . -1) 4411 (4409 . 4411) (#(";" 0 1 (fontified t)) . -4409) (undo-tree-id903 . -1) (undo-tree-id904 . -1) (#(" " 0 1 (fontified t)) . -4410) (undo-tree-id905 . -1) (undo-tree-id906 . -1) 4411 (4408 . 4411) (#("3" 0 1 (fontified t)) . -4408) (undo-tree-id907 . -1) (undo-tree-id908 . -1) 4409 (4407 . 4409) (#("7" 0 1 (fontified t)) . -4407) (undo-tree-id909 . -1) (undo-tree-id910 . -1) (#("5" 0 1 (fontified t)) . -4408) (undo-tree-id911 . -1) (undo-tree-id912 . -1) 4409 (4398 . 4409) (#("ZERO" 0 4 (face font-lock-type-face fontified t)) . 4398) (undo-tree-id913 . -3) (undo-tree-id914 . -1) (undo-tree-id915 . -1) (undo-tree-id916 . -1) (undo-tree-id917 . -1) (undo-tree-id918 . -1) (undo-tree-id919 . -1) (undo-tree-id920 . -4) (undo-tree-id921 . -4) (t 25825 1974 371332 400000)) nil (25825 2013 302274 578000) 0 nil])
nil
([nil nil ((4413 . 4414) (t 25825 2013 304452 90000)) nil (25825 2017 978774 922000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t)) . 4413) (undo-tree-id922 . -1) (undo-tree-id923 . -1) (t 25825 2017 981093 93000)) nil (25825 2036 658880 683000) 0 nil])
([nil nil ((4398 . 4401)) nil (25825 2036 658869 369000) 0 nil])
([nil nil ((4410 . 4411) (t 25825 2036 657657 273000)) nil (25825 2054 377263 490000) 0 nil])
([nil nil ((4437 . 4438)) nil (25825 2054 377258 741000) 0 nil])
([nil nil ((#("    // Player
    commands.spawn((
        PbrBundle {
            mesh: meshes.add(
                shape::Capsule {
                    radius: 0.25,
                    depth: 0.5,
                    ..default()
                }
                .try_into()
                .unwrap(),
            ),
            material: materials.add(Color::rgb(0.2, 0.5, 0.5).into()),
            transform: Transform::from_xyz(0.5, 0.5, 0.5),
            ..default()
        },
        RigidBody::KinematicPositionBased,
        Collider::capsule(Vec3::new(0.0, -0.25, 0.0), Vec3::new(0.0, 0.25, 0.0), 0.25),
        KinematicCharacterController::default(),
    ));
" 0 4 (fontified t) 4 7 (face font-lock-comment-delimiter-face fontified t) 7 13 (face font-lock-comment-face fontified t) 13 14 (face font-lock-comment-face fontified t) 14 34 (fontified t) 34 35 (fontified t) 35 43 (fontified t) 43 52 (face font-lock-type-face fontified t) 52 55 (fontified t) 55 57 (fontified t) 57 65 (fontified t) 65 67 (fontified t) 67 71 (face font-lock-variable-name-face fontified t) 71 85 (fontified t) 85 89 (fontified t) 89 101 (fontified t) 101 106 (face font-lock-constant-face fontified t) 106 108 (fontified t) 108 115 (face font-lock-type-face fontified t) 115 118 (fontified t) 118 134 (fontified t) 134 138 (fontified t) 138 144 (face font-lock-variable-name-face fontified t) 144 151 (fontified t) 151 152 (fontified t) 152 168 (fontified t) 168 172 (fontified t) 172 177 (face font-lock-variable-name-face fontified t) 177 183 (fontified t) 183 184 (fontified t) 184 185 (fontified t) 185 201 (fontified t) 201 204 (fontified t) 204 216 (fontified t) 216 219 (fontified t) 219 231 (fontified t) 231 232 (fontified t) 232 234 (fontified t) 234 238 (fontified t) 238 262 (fontified t) 262 274 (fontified t) 274 278 (fontified t) 278 289 (fontified t) 289 291 (fontified t) 291 299 (fontified t) 299 301 (fontified t) 301 304 (fontified t) 304 307 (fontified t) 307 315 (fontified t) 315 316 (fontified t) 316 324 (face font-lock-variable-name-face fontified t) 324 340 (fontified t) 340 345 (face font-lock-type-face fontified t) 345 375 (fontified t) 375 377 (fontified t) 377 385 (fontified t) 385 387 (fontified t) 387 396 (face font-lock-variable-name-face fontified t) 396 398 (fontified t) 398 407 (face font-lock-type-face fontified t) 407 434 (fontified t) 434 435 (fontified t) 435 443 (fontified t) 443 446 (fontified t) 446 458 (fontified t) 458 460 (fontified t) 460 464 (fontified t) 464 466 (fontified t) 466 468 (fontified t) 468 472 (fontified t) 472 473 (fontified t) 473 477 (fontified t) 477 486 (face font-lock-type-face fontified t) 486 488 (fontified t) 488 510 (face font-lock-type-face fontified t) 510 511 (fontified t) 511 512 (fontified t) 512 513 (fontified t) 513 520 (fontified t) 520 528 (face font-lock-type-face fontified t) 528 538 (fontified t) 538 542 (face font-lock-type-face fontified t) 542 564 (fontified t) 564 566 (fontified t) 566 570 (face font-lock-type-face fontified t) 570 591 (fontified t) 591 593 (fontified t) 593 594 (fontified t) 594 599 (fontified t) 599 600 (fontified t) 600 603 (fontified t) 603 604 (fontified t) 604 608 (fontified t) 608 636 (face font-lock-type-face fontified t) 636 647 (fontified t) 647 653 (fontified t) 653 656 (fontified t) 656 657 (fontified t)) . 3854) (undo-tree-id924 . -656) (undo-tree-id925 . -12) (undo-tree-id926 . -656) (undo-tree-id927 . -656) (undo-tree-id928 . 73) (undo-tree-id929 . -657) (undo-tree-id930 . -656) 4510 (t 25825 2054 380893 351000)) nil (25825 2164 199047 199000) 0 nil])
([nil nil ((1574 . 1577) (#("5" 0 1 (fontified t)) . -1574) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) 1575 (t 25825 2164 200290 723000)) nil (25825 20402 83488 699000) 0 nil])
([nil nil ((1579 . 1582) (#("5" 0 1 (fontified t)) . -1579) (undo-tree-id0 . -1) (undo-tree-id1 . -1) 1580) nil (25825 20402 83484 141000) 0 nil])
([nil nil ((#("1" 0 1 (fontified t)) . 1579) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (t 25825 20402 97922 598000)) nil (25825 20668 10587 83000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . 1579) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1)) nil (25825 20668 10585 460000) 0 nil])
([nil nil ((1579 . 1580)) nil (25825 20668 10579 168000) 0 nil])
([nil nil ((1579 . 1580) (#("3" 0 1 (fontified t)) . 1579) (undo-tree-id10 . -1)) nil (25825 20668 10578 557000) 0 nil])
([nil nil ((#("1" 0 1 (fontified t)) . 1574) (undo-tree-id8 . -1) (undo-tree-id9 . -1)) nil (25825 20668 10577 505000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . 1574) (undo-tree-id6 . -1) (undo-tree-id7 . -1)) nil (25825 20668 10575 90000) 0 nil])
([nil nil ((1574 . 1575)) nil (25825 20668 10564 741000) 0 nil])
([nil nil ((1574 . 1575) (#("5" 0 1 (fontified t)) . 1574) (undo-tree-id31 . -1) (t 25825 20668 14594 82000)) nil (25825 20849 411505 451000) 0 nil])
([nil nil ((1578 . 1579) (#("5" 0 1 (fontified t)) . 1578) (undo-tree-id30 . -1)) nil (25825 20849 411501 955000) 0 nil])
([nil nil ((1574 . 1575) (#("2" 0 1 (fontified t)) . 1574) (undo-tree-id36 . -1) (t 25825 20849 414597 364000)) nil (25825 22166 371785 936000) 0 nil])
([nil nil ((1575 . 1576)) nil (25825 22166 371784 143000) 0 nil])
([nil nil ((1579 . 1581) (#("2" 0 1 (fontified t)) . -1579) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) 1580) nil (25825 22178 266687 917000) 0 nil])
([nil nil ((1574 . 1575) (#("10" 0 2 (fontified t)) . 1574) (undo-tree-id77 . -1) (undo-tree-id78 . -2) (undo-tree-id79 . -2) (t 25825 22166 374621 380000)) nil (25825 22183 177050 201000) 0 nil] [nil nil ((1574 . 1575) (#("100, 100);
    let current_cell = (0, 0);" 0 2 (fontified t) 2 7 (fontified t) 7 11 (fontified t) 11 15 (fontified t) 15 18 (face font-lock-keyword-face fontified t) 18 19 (fontified t) 19 31 (face font-lock-variable-name-face fontified t) 31 41 (fontified t)) . 1574) (undo-tree-id37 . 34) (undo-tree-id38 . -40) (undo-tree-id39 . -5) (undo-tree-id40 . -5) (undo-tree-id41 . -5) (undo-tree-id42 . -5) (undo-tree-id43 . -6) (undo-tree-id44 . -6) (undo-tree-id45 . -6) (undo-tree-id46 . -6) (undo-tree-id47 . -6) (undo-tree-id48 . -6) (undo-tree-id49 . -6) (undo-tree-id50 . -6) (undo-tree-id51 . -6) (undo-tree-id52 . -6) (undo-tree-id53 . -6) (undo-tree-id54 . -6) (undo-tree-id55 . -6) (undo-tree-id56 . -6) (undo-tree-id57 . -6) (undo-tree-id58 . -41) (undo-tree-id59 . -41) (t 25825 22166 374621 380000)) ((1574 . 1615) (#("u" 0 1 (fontified t)) . 1574)) (25825 22178 266416 988000) 0 nil])
([nil nil ((1578 . 1579) (#("10" 0 2 (fontified t)) . 1578) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -2) (undo-tree-id76 . -2)) nil (25825 22183 177045 692000) 0 nil])
nil
([nil nil ((1578 . 1579) (#("5" 0 1 (fontified t)) . 1578) (undo-tree-id83 . -1) (t 25825 22183 181288 363000)) nil (25825 22266 119765 279000) 0 nil])
([nil nil ((1574 . 1575) (#("5" 0 1 (fontified t)) . 1574) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1)) nil (25825 22266 119762 263000) 0 nil])
([nil nil ((1769 . 1770) (t 25825 22266 121289 869000)) nil (25825 63164 372376 96000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 1769) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (t 25825 63164 375363 446000)) nil (25826 5265 574191 679000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . -5084) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (#("r" 0 1 (fontified t)) . -5085) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (#("i" 0 1 (fontified t)) . -5086) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (#("n" 0 1 (fontified t)) . -5087) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (#("t" 0 1 (fontified t)) . -5088) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (#("l" 0 1 (fontified t)) . -5089) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (#("n" 0 1 (fontified t)) . -5090) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (#("!" 0 1 (fontified t)) . -5091) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (#("(" 0 1 (fontified t)) . -5092) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (undo-tree-id489 . -1) 5093 (5092 . 5093) (#("\"" 0 1 (face font-lock-string-face fontified t)) . -5092) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (undo-tree-id492 . -1) (undo-tree-id493 . -1) 5093 (5086 . 5093) (#("i" 0 1 (fontified t)) . -5086) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (5084 . 5087) (5079 . 5084) 5072) nil (25826 5371 553314 946000) 0 nil] [nil nil ((apply 42 5210 5845 undo--wrap-and-run-primitive-undo 5210 5845 ((#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -5841) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -5813) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -5794) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -5715) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -5676) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -5597) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -5549) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -5529) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -5476) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -5451) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -5398) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -5340) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -5261) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -5222) 5210))) ((apply -42 5210 5887 undo--wrap-and-run-primitive-undo 5210 5887 ((5222 . 5225) (5261 . 5264) (5340 . 5343) (5398 . 5401) (5451 . 5454) (5476 . 5479) (5529 . 5532) (5549 . 5552) (5597 . 5600) (5676 . 5679) (5715 . 5718) (5794 . 5797) (5813 . 5816) (5841 . 5844) 5210))) (25826 5248 706607 651000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 5085) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (undo-tree-id411 . -1)) nil (25826 5371 553284 870000) 0 nil])
nil
([nil nil ((nil rear-nonsticky nil 5091 . 5092) (#("
" 0 1 (fontified nil face font-lock-comment-face)) . -5756) (5079 . 5757) 5072) nil (25826 5371 553283 46000) 0 nil])
([nil nil ((apply 42 5080 5715 undo--wrap-and-run-primitive-undo 5080 5715 ((#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -5711) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -5683) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -5664) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -5585) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -5546) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -5467) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -5419) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -5399) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -5346) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -5321) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -5268) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -5210) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -5131) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -5092) 5757))) nil (25826 5371 553282 325000) 0 nil])
([nil nil ((#("            " 0 12 (fontified nil)) . -5522) (undo-tree-id339 . -12) (undo-tree-id340 . -12) (undo-tree-id341 . -12) (undo-tree-id342 . -12) (undo-tree-id343 . -12) (undo-tree-id344 . -12) (undo-tree-id345 . -12) (undo-tree-id346 . -12) (undo-tree-id347 . -12) (undo-tree-id348 . -12) (5521 . 5522) (#("                " 0 12 (fontified nil) 12 16 (fontified nil)) . -5509) (undo-tree-id349 . -12) (undo-tree-id350 . -12) (undo-tree-id351 . -12) (undo-tree-id352 . -12) (undo-tree-id353 . -12) (undo-tree-id354 . -12) (5504 . 5509) (#("                " 0 12 (fontified nil) 12 16 (fontified nil)) . -5501) (undo-tree-id355 . -12) (undo-tree-id356 . -12) (undo-tree-id357 . -12) (undo-tree-id358 . -12) (5496 . 5501) (#("                    " 0 12 (fontified nil) 12 20 (fontified nil)) . -5437) (undo-tree-id359 . -12) (undo-tree-id360 . -12) (undo-tree-id361 . -12) (undo-tree-id362 . -12) (5435 . 5437) (#("                    " 0 12 (fontified nil) 12 20 (fontified nil)) . -5416) (undo-tree-id363 . -12) (undo-tree-id364 . -12) (undo-tree-id365 . -12) (undo-tree-id366 . -12) (5414 . 5416) (#("                    " 0 12 (fontified nil) 12 20 (fontified nil)) . -5355) (undo-tree-id367 . -12) (undo-tree-id368 . -12) (undo-tree-id369 . -12) (undo-tree-id370 . -12) (5353 . 5355) (#("                " 0 12 (fontified nil) 12 16 (fontified nil)) . -5321) (undo-tree-id371 . -12) (undo-tree-id372 . -12) (undo-tree-id373 . -12) (undo-tree-id374 . -12) (5316 . 5321) (#("                " 0 12 (fontified nil) 12 16 (fontified nil)) . -5312) (undo-tree-id375 . -12) (undo-tree-id376 . -12) (undo-tree-id377 . -12) (undo-tree-id378 . -12) (5307 . 5312) (#("                    " 0 12 (fontified nil) 12 20 (fontified nil)) . -5274) (undo-tree-id379 . -12) (undo-tree-id380 . -12) (undo-tree-id381 . -12) (undo-tree-id382 . -12) (5272 . 5274) (#("                " 0 12 (fontified nil) 12 16 (fontified nil)) . -5263) (undo-tree-id383 . -12) (undo-tree-id384 . -12) (undo-tree-id385 . -12) (undo-tree-id386 . -12) (5258 . 5263) (#("                    " 0 12 (fontified nil) 12 20 (fontified nil)) . -5225) (undo-tree-id387 . -12) (undo-tree-id388 . -12) (undo-tree-id389 . -12) (undo-tree-id390 . -12) (5223 . 5225) (#("                " 0 12 (fontified nil) 12 16 (fontified nil)) . -5181) (undo-tree-id391 . -12) (undo-tree-id392 . -12) (undo-tree-id393 . -12) (undo-tree-id394 . -12) (5176 . 5181) (#("                " 0 12 (fontified nil) 12 16 (fontified nil)) . -5113) (undo-tree-id395 . -12) (undo-tree-id396 . -12) (undo-tree-id397 . -12) (undo-tree-id398 . -12) (5108 . 5113) (#("            " 0 11 (fontified nil) 11 12 (rear-nonsticky t fontified nil)) . -5081) (undo-tree-id399 . -12) (undo-tree-id400 . -12) (undo-tree-id401 . -12) (undo-tree-id402 . -12) (undo-tree-id403 . -12) (undo-tree-id404 . -12) (undo-tree-id405 . -12) (undo-tree-id406 . -12) (undo-tree-id407 . -12) (undo-tree-id408 . -12) (5080 . 5081) 5092) nil (25826 5371 553279 239000) 0 nil])
([nil nil ((#("	" 0 1 (fontified nil)) . -5515) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (5511 . 5515) (#("	    " 0 5 (fontified nil)) . -5499) (undo-tree-id283 . -5) (undo-tree-id284 . -5) (undo-tree-id285 . -5) (undo-tree-id286 . -5) (undo-tree-id287 . -5) (undo-tree-id288 . -5) (5498 . 5499) (#("	    " 0 5 (fontified nil)) . -5495) (undo-tree-id289 . -5) (undo-tree-id290 . -5) (undo-tree-id291 . -5) (undo-tree-id292 . -5) (5494 . 5495) (#("		" 0 2 (fontified nil)) . -5435) (undo-tree-id293 . -2) (undo-tree-id294 . -2) (undo-tree-id295 . -2) (undo-tree-id296 . -2) (5430 . 5435) (#("		" 0 2 (fontified nil)) . -5411) (undo-tree-id297 . -2) (undo-tree-id298 . -2) (undo-tree-id299 . -2) (undo-tree-id300 . -2) (5406 . 5411) (#("		" 0 2 (fontified nil)) . -5347) (undo-tree-id301 . -2) (undo-tree-id302 . -2) (undo-tree-id303 . -2) (undo-tree-id304 . -2) (5342 . 5347) (#("	    " 0 5 (fontified nil)) . -5310) (undo-tree-id305 . -5) (undo-tree-id306 . -5) (undo-tree-id307 . -5) (undo-tree-id308 . -5) (5309 . 5310) (#("	    " 0 5 (fontified nil)) . -5305) (undo-tree-id309 . -5) (undo-tree-id310 . -5) (undo-tree-id311 . -5) (undo-tree-id312 . -5) (5304 . 5305) (#("		" 0 2 (fontified nil)) . -5271) (undo-tree-id313 . -2) (undo-tree-id314 . -2) (undo-tree-id315 . -2) (undo-tree-id316 . -2) (5266 . 5271) (#("	    " 0 5 (fontified nil)) . -5257) (undo-tree-id317 . -5) (undo-tree-id318 . -5) (undo-tree-id319 . -5) (undo-tree-id320 . -5) (5256 . 5257) (#("		" 0 2 (fontified nil)) . -5223) (undo-tree-id321 . -2) (undo-tree-id322 . -2) (undo-tree-id323 . -2) (undo-tree-id324 . -2) (5218 . 5223) (#("	    " 0 5 (fontified nil)) . -5176) (undo-tree-id325 . -5) (undo-tree-id326 . -5) (undo-tree-id327 . -5) (undo-tree-id328 . -5) (5175 . 5176) (#("	    " 0 5 (fontified nil)) . -5112) (undo-tree-id329 . -5) (undo-tree-id330 . -5) (undo-tree-id331 . -5) (undo-tree-id332 . -5) (5111 . 5112) (#("	" 0 1 (fontified nil)) . -5084) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (5080 . 5084) 5521) nil (25826 5371 553248 882000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -5080) (undo-tree-id271 . -4) (undo-tree-id272 . -4) (undo-tree-id273 . -4) (undo-tree-id274 . -4) 5084 (5079 . 5084) 5072) nil (25826 5371 553222 944000) 0 nil])
([nil nil ((5111 . 5115) (#("i" 0 1 (face font-lock-comment-face fontified t)) . -5111) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (5103 . 5112) (5100 . 5103) (#("c" 0 1 (face font-lock-comment-face fontified t)) . -5100) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (#("o" 0 1 (face font-lock-comment-face fontified t)) . -5101) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (#("l" 0 1 (face font-lock-comment-face fontified t)) . -5102) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (#("l" 0 1 (face font-lock-comment-face fontified t)) . -5103) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (#("i" 0 1 (face font-lock-comment-face fontified t)) . -5104) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (#("d" 0 1 (face font-lock-comment-face fontified t)) . -5105) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (#("e" 0 1 (face font-lock-comment-face fontified t)) . -5106) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (#("r" 0 1 (face font-lock-comment-face fontified t)) . -5107) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) 5108 (5106 . 5108) (5104 . 5106) (#("i" 0 1 (face font-lock-comment-face fontified t)) . -5104) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (5091 . 5105) (#("i" 0 1 (face font-lock-comment-face fontified t)) . -5091) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (5089 . 5092) (#("i" 0 1 (face font-lock-comment-face fontified t)) . -5089) (undo-tree-id270 . -1) (5085 . 5090) (5080 . 5085) 5080) nil (25826 5371 553217 383000) 0 nil])
([nil nil ((5135 . 5136)) nil (25826 5371 553048 997000) 0 nil])
([nil nil ((5554 . 5555)) nil (25826 5371 553048 626000) 0 nil])
([nil nil ((5615 . 5621) (5606 . 5615) (#("room" 0 4 (fontified t)) . -5606) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -2) (undo-tree-id133 . -2) (undo-tree-id134 . -3) (undo-tree-id135 . -3) (undo-tree-id136 . -4) (undo-tree-id137 . -4) (undo-tree-id138 . -4) (undo-tree-id139 . -4) (undo-tree-id140 . -4) (undo-tree-id141 . -4) 5610 (5598 . 5610) (5589 . 5598) (#("roo" 0 3 (fontified t)) . -5589) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -2) (undo-tree-id145 . -2) (undo-tree-id146 . -3) (undo-tree-id147 . -3) (undo-tree-id148 . -3) (undo-tree-id149 . -3) 5592 (5581 . 5592) (5572 . 5581) (#("room" 0 4 (fontified t)) . -5572) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -2) (undo-tree-id153 . -2) (undo-tree-id154 . -3) (undo-tree-id155 . -3) (undo-tree-id156 . -4) (undo-tree-id157 . -4) (undo-tree-id158 . -4) (undo-tree-id159 . -4) (undo-tree-id160 . -4) (undo-tree-id161 . -4) 5576 (5569 . 5576) (#("i" 0 1 (fontified t)) . -5569) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (5563 . 5570) (5559 . 5563) (#("i" 0 1 (face font-lock-type-face fontified t)) . -5559) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (5553 . 5560)) nil (25826 5371 553046 242000) 0 nil])
([nil nil ((5622 . 5623)) nil (25826 5371 553030 172000) 0 nil])
([nil nil ((5626 . 5630) (5622 . 5626)) nil (25826 5371 553029 200000) 0 nil])
([nil nil ((5136 . 5145) (5148 . 5160) (#("	" 0 1 (fontified t)) . 5148) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (5212 . 5224) (#("	" 0 1 (fontified t)) . 5212) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (5255 . 5256) (#("	" 0 1 (fontified t)) . 5255) (5260 . 5271) (5293 . 5305) (#("	" 0 1 (fontified t)) . 5293) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (5303 . 5314) (#("	" 0 1 (fontified t)) . 5303) (5308 . 5309) (5341 . 5353) (#("	" 0 1 (fontified t)) . 5341) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (5346 . 5358) (#("	" 0 1 (fontified t)) . 5346) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (5379 . 5387) (#("	" 0 1 (fontified t)) . 5379) (5384 . 5388) (5443 . 5450) (#("	" 0 1 (fontified t)) . 5443) (5448 . 5453) (5467 . 5473) (#("	" 0 1 (fontified t)) . 5467) (5472 . 5478) (5531 . 5543) (#("	" 0 1 (fontified t)) . 5531) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (5535 . 5547) (#("	" 0 1 (fontified t)) . 5535) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (5548 . 5552) (5554 . 5560) (5555 . 5557) (5623 . 5627) (5624 . 5628) (5630 . 5631) (#("));" 0 3 (fontified t)) . 5630) (undo-tree-id124 . 3) (undo-tree-id125 . -3) (undo-tree-id126 . -2) (undo-tree-id127 . -2) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (5638 . 5642) 5629) nil (25826 5371 553024 401000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t)) . 5481) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (t 25826 5371 558833 649000)) nil (25826 5391 952749 139000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . 5481) (undo-tree-id535 . -1) (undo-tree-id536 . -1)) nil (25826 5391 952747 926000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . 5481) (undo-tree-id533 . -1) (undo-tree-id534 . -1)) nil (25826 5391 952746 784000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t)) . 5481) (undo-tree-id531 . -1) (undo-tree-id532 . -1)) nil (25826 5391 952745 382000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . 5481) (undo-tree-id529 . -1) (undo-tree-id530 . -1)) nil (25826 5391 952744 49000) 0 nil])
([nil nil ((5487 . 5491) (#("i" 0 1 (fontified t)) . -5487) (undo-tree-id527 . -1) (5483 . 5488) (#("i" 0 1 (fontified t)) . -5483) (undo-tree-id528 . -1) (5481 . 5484)) nil (25826 5391 952741 965000) 0 nil])
([nil nil ((5605 . 5607) (5603 . 5605) (#("i" 0 1 (fontified t)) . -5603) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (5598 . 5604) (#("i" 0 1 (fontified t)) . -5598) (undo-tree-id498 . -1) (5597 . 5599) (#("c" 0 1 (fontified t)) . -5597) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (#("i" 0 1 (fontified nil)) . -5598) (undo-tree-id505 . -1) 5599 (5598 . 5599) (#("i" 0 1 (fontified t)) . -5598) (undo-tree-id506 . -1) (5596 . 5599) (#("r" 0 1 (fontified t)) . -5596) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (#("o" 0 1 (fontified t)) . -5597) (undo-tree-id511 . -1) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (#("w" 0 1 (fontified t)) . -5598) (undo-tree-id515 . -1) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (#("_" 0 1 (fontified t)) . -5599) (undo-tree-id519 . -1) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (#("i" 0 1 (fontified t)) . -5600) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (undo-tree-id526 . -1) 5601) nil (25826 5391 952736 74000) 0 nil])
([nil nil ((#("if cell.visited {" 0 2 (face font-lock-keyword-face fontified t) 2 17 (fontified t)) . 5268) (undo-tree-id607 . -16) (undo-tree-id608 . -17) (undo-tree-id609 . -17) (t 25826 5391 955500 649000)) nil (25826 5410 45415 882000) 0 nil])
([nil nil ((#("            } else {
                Color::rgb(0.0, 0.0, 0.0).into()
" 0 12 (fontified t) 12 14 (fontified t) 14 18 (face font-lock-keyword-face fontified t) 18 21 (fontified t) 21 32 (fontified t) 32 36 (fontified t) 36 37 (fontified t) 37 42 (face font-lock-type-face fontified t) 42 70 (fontified t)) . 5318) (undo-tree-id581 . -40) (undo-tree-id582 . -69) (undo-tree-id583 . -19) (undo-tree-id584 . -40) (undo-tree-id585 . -36) (undo-tree-id586 . -36) (undo-tree-id587 . -70) (undo-tree-id588 . -70) (undo-tree-id589 . -70) (undo-tree-id590 . -70) (undo-tree-id591 . -36) (undo-tree-id592 . -36) (undo-tree-id593 . -47) (undo-tree-id594 . -47) (undo-tree-id595 . -19) (undo-tree-id596 . -19) (undo-tree-id597 . -19) (undo-tree-id598 . -19) (undo-tree-id599 . -19) (undo-tree-id600 . -19) (undo-tree-id601 . -21) (undo-tree-id602 . -40) (undo-tree-id603 . -40) (undo-tree-id604 . -40) (undo-tree-id605 . -40) (undo-tree-id606 . -70) 5358) nil (25826 5410 45413 387000) 0 nil])
([nil nil ((#("            " 0 12 (fontified nil)) . 5317) (undo-tree-id551 . 12) (#("
" 0 1 (fontified t)) . -5317) (undo-tree-id552 . -1) (undo-tree-id553 . -1) (undo-tree-id554 . -1) (undo-tree-id555 . -1) (undo-tree-id556 . -1) (undo-tree-id557 . -1) (undo-tree-id558 . -1) (undo-tree-id559 . -1) (undo-tree-id560 . -1) (undo-tree-id561 . -1) (undo-tree-id562 . -1) (undo-tree-id563 . -1) (undo-tree-id564 . -1) (undo-tree-id565 . -1) (undo-tree-id566 . -1) (undo-tree-id567 . -1) (undo-tree-id568 . -1) (undo-tree-id569 . -1) (undo-tree-id570 . -1) (undo-tree-id571 . -1) (undo-tree-id572 . -1) (undo-tree-id573 . -1) (undo-tree-id574 . -1) (undo-tree-id575 . -1) (undo-tree-id576 . -1) (undo-tree-id577 . -1) (undo-tree-id578 . -1) (undo-tree-id579 . -1) (undo-tree-id580 . -1) 5283) nil (25826 5410 45401 575000) 0 nil])
([nil nil ((#("}" 0 1 (fontified t)) . 5317) (undo-tree-id548 . 1) (undo-tree-id549 . -1) (undo-tree-id550 . -1)) nil (25826 5410 45388 220000) 0 nil])
([nil nil ((#("                " 0 1 (fontified nil) 1 5 (fontified nil) 5 16 (fontified nil)) . 5268) (undo-tree-id539 . -5) (undo-tree-id540 . -5) (undo-tree-id541 . -5) (undo-tree-id542 . -5) (undo-tree-id543 . -14) (undo-tree-id544 . -14) (undo-tree-id545 . -14) (undo-tree-id546 . -14) (#("
" 0 1 (fontified t)) . -5268) (undo-tree-id547 . -1) 5267) nil (25826 5410 45383 692000) 0 nil])
([nil nil ((5363 . 5364) (t 25826 5410 48834 271000)) nil (25826 5473 787331 374000) 0 nil])
([nil nil ((5374 . 5379)) nil (25826 5473 787330 673000) 0 nil])
([nil nil ((5495 . 5500)) nil (25826 5473 787329 881000) 0 nil])
([nil nil ((5484 . 5485)) nil (25826 5473 787329 420000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . 1575) (undo-tree-id616 . -1) (undo-tree-id617 . -1)) nil (25826 5473 787328 749000) 0 nil])
([nil nil ((1574 . 1575) (#("3" 0 1 (fontified t)) . 1574) (undo-tree-id612 . -1) (undo-tree-id613 . -1) (undo-tree-id614 . -1) (undo-tree-id615 . -1)) nil (25826 5473 787326 174000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . 1578) (undo-tree-id610 . -1) (undo-tree-id611 . -1)) nil (25826 5473 787321 14000) 0 nil])
([nil nil ((5652 . 5656) (#("i" 0 1 (fontified t)) . -5652) (undo-tree-id618 . -1) (undo-tree-id619 . -1) (5645 . 5653) (#("room_size" 0 9 (fontified t)) . 5645) (undo-tree-id620 . -8) (undo-tree-id621 . -9) (undo-tree-id622 . -9) (t 25826 5473 792168 708000)) nil (25826 5545 379116 743000) 0 nil])
([nil nil ((5645 . 5646) (5637 . 5645) (#("from_x" 0 6 (fontified t)) . -5637) (undo-tree-id728 . -1) (undo-tree-id729 . -1) (undo-tree-id730 . -2) (undo-tree-id731 . -2) (undo-tree-id732 . -3) (undo-tree-id733 . -3) (undo-tree-id734 . -4) (undo-tree-id735 . -4) (undo-tree-id736 . -4) (undo-tree-id737 . -4) (undo-tree-id738 . -4) (undo-tree-id739 . -4) (undo-tree-id740 . -4) (undo-tree-id741 . -4) (undo-tree-id742 . -5) (undo-tree-id743 . -5) (undo-tree-id744 . -6) (undo-tree-id745 . -6) (undo-tree-id746 . -6) (undo-tree-id747 . -6) (undo-tree-id748 . -6) (undo-tree-id749 . -6) 5643 (5641 . 5643) (5635 . 5641) (5626 . 5635) (#("Tran" 0 4 (face font-lock-type-face fontified t)) . -5626) (undo-tree-id750 . -1) (undo-tree-id751 . -1) (undo-tree-id752 . -2) (undo-tree-id753 . -2) (undo-tree-id754 . -3) (undo-tree-id755 . -3) (undo-tree-id756 . -4) (undo-tree-id757 . -4) (undo-tree-id758 . -4) (undo-tree-id759 . -4) (undo-tree-id760 . -4) (undo-tree-id761 . -4) 5630 (5613 . 5630) (5604 . 5613) (#("Tran" 0 4 (face font-lock-type-face fontified t)) . -5604) (undo-tree-id762 . -1) (undo-tree-id763 . -1) (undo-tree-id764 . -2) (undo-tree-id765 . -2) (undo-tree-id766 . -3) (undo-tree-id767 . -3) (undo-tree-id768 . -4) (undo-tree-id769 . -4) (undo-tree-id770 . -4) (undo-tree-id771 . -4) 5608 (5604 . 5608) (5602 . 5604) (t 25826 5545 382169 934000) 5601) nil (25826 5598 166158 565000) 0 nil])
([nil nil ((#("                (grid.width - 1) as f32 * (room_size + wall_width) + room_size / 2.0,
                wall_height / 2.0,
                (grid.height - 1) as f32 * (room_size + wall_width) + room_size / 2.0,
            ),
" 0 8 (fontified t) 8 12 (fontified t) 12 32 (fontified t) 32 33 (fontified t) 33 35 (face font-lock-keyword-face fontified t) 35 36 (fontified t) 36 39 (face font-lock-type-face fontified t) 39 86 (fontified t) 86 93 (fontified t) 93 97 (fontified t) 97 102 (fontified t) 102 121 (fontified t) 121 127 (fontified t) 127 131 (fontified t) 131 154 (fontified t) 154 155 (fontified t) 155 157 (face font-lock-keyword-face fontified t) 157 158 (fontified t) 158 161 (face font-lock-type-face fontified t) 161 208 (fontified t) 208 220 (fontified t) 220 223 (fontified t)) . 5345) (undo-tree-id700 . -222) (undo-tree-id701 . -222) (undo-tree-id702 . -49) (undo-tree-id703 . -222) (undo-tree-id704 . -221) (undo-tree-id705 . -221) (undo-tree-id706 . -170) (undo-tree-id707 . -170) (undo-tree-id708 . -119) (undo-tree-id709 . -119) (undo-tree-id710 . -49) (undo-tree-id711 . -49) (undo-tree-id712 . -49) (undo-tree-id713 . -49) (undo-tree-id714 . -120) (undo-tree-id715 . -120) (undo-tree-id716 . -170) (undo-tree-id717 . -170) (undo-tree-id718 . -222) (undo-tree-id719 . -222) (undo-tree-id720 . -170) (undo-tree-id721 . -170) (undo-tree-id722 . -208) (undo-tree-id723 . -222) (undo-tree-id724 . -222) (undo-tree-id725 . -222) (undo-tree-id726 . -222) (undo-tree-id727 . -223) 5567) nil (25826 5598 166140 471000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5439 . 5440) (#("
" 0 1 (fontified nil)) . -5646) (5423 . 5647) 5387) nil (25826 5598 166129 580000) 0 nil])
([nil nil ((5645 . 5647) (#("," 0 1 (fontified t)) . -5645) (undo-tree-id694 . -1) (undo-tree-id695 . -1) (undo-tree-id696 . -1) (undo-tree-id697 . -1) (undo-tree-id698 . -1) (undo-tree-id699 . -1) 5646) nil (25826 5598 166128 538000) 0 nil])
([nil nil ((#("        PbrBundle {
            mesh: meshes.add(Mesh::from(shape::Cube { size: room_size })),
            material: materials.add(Color::rgb(1.0, 1.0, 1.0).into()),
            transform: Transform::from_xyz(
            ..default()
        },
" 0 8 (fontified t) 8 17 (face font-lock-type-face fontified t) 17 20 (fontified t) 20 32 (fontified t) 32 36 (face font-lock-variable-name-face fontified t) 36 49 (fontified t) 49 53 (face font-lock-type-face fontified t) 53 60 (fontified t) 60 65 (face font-lock-constant-face fontified t) 65 67 (fontified t) 67 71 (face font-lock-type-face fontified t) 71 74 (fontified t) 74 78 (face font-lock-variable-name-face fontified t) 78 95 (fontified t) 95 107 (fontified t) 107 115 (face font-lock-variable-name-face fontified t) 115 131 (fontified t) 131 136 (face font-lock-type-face fontified t) 136 163 (fontified t) 163 166 (fontified t) 166 178 (fontified t) 178 187 (face font-lock-variable-name-face fontified t) 187 189 (fontified t) 189 198 (face font-lock-type-face fontified t) 198 210 (fontified t) 210 222 (fontified t) 222 234 (fontified t) 234 238 (fontified t) 238 242 (fontified t) 242 244 (fontified t) 244 245 (fontified t)) . 5135) (undo-tree-id640 . -243) (undo-tree-id641 . -244) (undo-tree-id642 . -243) (undo-tree-id643 . -9) (undo-tree-id644 . -163) (undo-tree-id645 . -243) (undo-tree-id646 . -243) (undo-tree-id647 . -243) (undo-tree-id648 . -243) (undo-tree-id649 . -232) (undo-tree-id650 . -232) (undo-tree-id651 . -210) (undo-tree-id652 . -210) (undo-tree-id653 . -210) (undo-tree-id654 . -210) (undo-tree-id655 . -210) (undo-tree-id656 . -210) (undo-tree-id657 . -210) (undo-tree-id658 . -210) (undo-tree-id659 . -210) (undo-tree-id660 . -210) (undo-tree-id661 . -210) (undo-tree-id662 . -210) (undo-tree-id663 . -210) (undo-tree-id664 . -210) (undo-tree-id665 . -210) (undo-tree-id666 . -210) (undo-tree-id667 . -210) (undo-tree-id668 . -210) (undo-tree-id669 . -210) (undo-tree-id670 . -210) (undo-tree-id671 . -224) (undo-tree-id672 . -224) (undo-tree-id673 . -224) (undo-tree-id674 . -224) (undo-tree-id675 . -243) (undo-tree-id676 . -243) (undo-tree-id677 . -243) (undo-tree-id678 . -243) (undo-tree-id679 . -243) (undo-tree-id680 . -243) (undo-tree-id681 . -219) (undo-tree-id682 . -219) (undo-tree-id683 . -175) (undo-tree-id684 . -175) (undo-tree-id685 . -104) (undo-tree-id686 . -104) (undo-tree-id687 . -29) (undo-tree-id688 . -29) (undo-tree-id689 . -9) (undo-tree-id690 . -9) (undo-tree-id691 . -9) (undo-tree-id692 . -9) (undo-tree-id693 . -245) 5144) nil (25826 5598 166123 729000) 0 nil])
([nil nil ((5135 . 5143) (#("	" 0 1 (fontified t)) . 5135) (undo-tree-id623 . 1) (undo-tree-id624 . -1) (undo-tree-id625 . -1) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (undo-tree-id628 . -1) (undo-tree-id629 . -1) (undo-tree-id630 . -1) (undo-tree-id631 . -1) (undo-tree-id632 . -1) (undo-tree-id633 . -1) (#("    " 0 4 (fontified t)) . 5179) (#("    " 0 4 (fontified t)) . 5277) (undo-tree-id634 . -4) (undo-tree-id635 . -4) (undo-tree-id636 . -1) (undo-tree-id637 . -1) (#("  " 0 2 (fontified t)) . 5300) (#("  " 0 2 (fontified t)) . 5314) (undo-tree-id638 . -2) (undo-tree-id639 . -2) (#("    " 0 4 (fontified t)) . 5387) 5137) nil (25826 5598 165999 166000) 0 nil])
([nil nil ((#("        Sensor,
" 0 3 (fontified t) 3 4 (fontified t) 4 8 (fontified t) 8 14 (face font-lock-type-face fontified t) 14 15 (fontified t) 15 16 (fontified t)) . 5473) (undo-tree-id772 . -15) (undo-tree-id773 . -9) (undo-tree-id774 . -9) (undo-tree-id775 . -9) (undo-tree-id776 . -9) (undo-tree-id777 . -9) (undo-tree-id778 . -9) (undo-tree-id779 . -16) 5482 (t 25826 5598 168837 487000)) nil (25826 5679 244501 507000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5142 . 5143) (#("
" 0 1 (fontified nil)) . -5150) (5134 . 5151) 5120) nil (25826 5987 741466 249000) 0 nil])
([nil nil ((apply -27 5114 5525 undo--wrap-and-run-primitive-undo 5114 5525 ((5517 . 5520) (5435 . 5438) (5420 . 5423) (5334 . 5337) (5300 . 5303) (5215 . 5218) (5161 . 5164) (5142 . 5145) (5118 . 5121) 5497))) nil (25826 6479 434772 688000) 0 nil] [nil nil ((#("        Sensor,
" 0 3 (fontified t) 3 4 (fontified t) 4 7 (fontified t) 7 8 (rear-nonsticky t fontified t) 8 14 (face font-lock-type-face fontified t) 14 15 (fontified t) 15 16 (fontified t)) . 5135) (undo-tree-id785 . -15) (undo-tree-id786 . -15) (undo-tree-id787 . -16) (undo-tree-id788 . -16) (undo-tree-id789 . -16) (undo-tree-id791 . -8) (undo-tree-id793 . -8) (undo-tree-id795 . -8) (undo-tree-id797 . -8) (undo-tree-id799 . -8) (undo-tree-id801 . -8) (undo-tree-id803 . -8) (undo-tree-id805 . -8) (undo-tree-id807 . -8) (undo-tree-id808 . -8) (undo-tree-id810 . -16) 5143 (t 25826 5679 245505 564000)) ((5135 . 5151)) (25826 5987 271042 405000) 0 nil])
([nil nil ((5565 . 5568) (#("i" 0 1 (fontified t)) . -5565) (undo-tree-id1106 . -1) (undo-tree-id1107 . -1) (5561 . 5566) (5554 . 5561) (#("i" 0 1 (face font-lock-type-face fontified t)) . -5554) (undo-tree-id1108 . -1) (5548 . 5555) (#("i" 0 1 (face font-lock-type-face fontified t)) . -5548) (undo-tree-id1109 . -1) (undo-tree-id1110 . -1) (5544 . 5549) (#("(" 0 1 (fontified t)) . -5544) (undo-tree-id1111 . -1) (undo-tree-id1112 . -1) (undo-tree-id1113 . -1) (undo-tree-id1114 . -1) 5545 (5529 . 5545) (5525 . 5529) (#("    " 0 4 (fontified nil)) . 5524) (undo-tree-id1115 . -4) (undo-tree-id1116 . -4) (undo-tree-id1117 . -4) (undo-tree-id1118 . -4) (5528 . 5529) (5523 . 5528) 5522) nil (25826 6479 434771 115000) 0 nil])
([nil nil ((5482 . 5493) (#("o" 0 1 (fontified t)) . -5482) (undo-tree-id780 . -1) (undo-tree-id781 . -1) (undo-tree-id782 . -1) 5483 (5479 . 5483) (#("i" 0 1 (fontified t)) . -5479) (undo-tree-id784 . -1) (5478 . 5480)) ((#(".i" 0 1 (fontified nil) 1 2 (fontified nil)) . 5478) (undo-tree-id1036 . -1) (undo-tree-id1037 . -1) (undo-tree-id1038 . -1) (undo-tree-id1039 . -1) (undo-tree-id1040 . -1) (undo-tree-id1041 . -1) (undo-tree-id1042 . -1) (undo-tree-id1043 . -1) (undo-tree-id1044 . -1) (undo-tree-id1045 . -1) (undo-tree-id1046 . -1) (undo-tree-id1047 . -2) (undo-tree-id1048 . -1) (undo-tree-id1049 . -1) (5479 . 5480) (#("inso" 0 3 (fontified nil) 3 4 (fontified nil)) . 5479) (undo-tree-id1050 . -4) (undo-tree-id1051 . -4) (undo-tree-id1052 . -3) (undo-tree-id1053 . -3) (undo-tree-id1054 . -3) (undo-tree-id1055 . -3) (undo-tree-id1056 . -3) (undo-tree-id1057 . -3) (undo-tree-id1058 . -3) (undo-tree-id1059 . -3) (undo-tree-id1060 . -3) (undo-tree-id1061 . -4) (undo-tree-id1062 . -3) (undo-tree-id1063 . -3) (5482 . 5483) (#("ert(Sensor)" 0 4 (fontified t) 4 10 (face font-lock-type-face fontified t) 10 11 (fontified t)) . 5482) (undo-tree-id1064 . -10) (undo-tree-id1065 . -10) (undo-tree-id1066 . -10) (undo-tree-id1067 . -10) (undo-tree-id1068 . -10) (undo-tree-id1069 . -10) (undo-tree-id1070 . -10) (undo-tree-id1071 . -10) (undo-tree-id1072 . -10) (undo-tree-id1073 . -10) (undo-tree-id1074 . -10) (undo-tree-id1075 . -10)) (25826 5986 454249 744000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5618 . 5619) (nil fontified nil 5568 . 5619) (5568 . 5619) 5567) nil (25826 6479 434764 362000) 0 nil])
([nil nil ((5133 . 5142) (5135 . 5137) (5143 . 5145) (5186 . 5187) (5198 . 5201) (5268 . 5272) (5311 . 5315) (5382 . 5385) (5390 . 5391) (5394 . 5397) (5402 . 5403) (5473 . 5475) (5477 . 5479) (5478 . 5491) (5493 . 5499) 5492) ((#(",
    " 0 2 (fontified nil) 2 6 (fontified t)) . 5493) (#("
            " 0 1 (fontified nil) 1 13 (fontified t)) . 5478) (undo-tree-id993 . -9) (undo-tree-id994 . -9) (undo-tree-id995 . -13) (undo-tree-id996 . -13) (undo-tree-id997 . -13) (undo-tree-id998 . -13) (undo-tree-id999 . -13) (undo-tree-id1000 . -13) (undo-tree-id1001 . -1) (undo-tree-id1002 . -13) (undo-tree-id1003 . -13) (undo-tree-id1004 . -13) (undo-tree-id1005 . -13) (#("  " 0 2 (fontified nil)) . 5477) (undo-tree-id1006 . -2) (undo-tree-id1007 . -2) (undo-tree-id1008 . -2) (undo-tree-id1009 . -2) (undo-tree-id1010 . -2) (undo-tree-id1011 . -2) (undo-tree-id1012 . -2) (undo-tree-id1013 . -2) (undo-tree-id1014 . -2) (undo-tree-id1015 . -2) (undo-tree-id1016 . -2) (undo-tree-id1017 . -2) (undo-tree-id1018 . -2) (undo-tree-id1019 . -2) (undo-tree-id1020 . -2) (undo-tree-id1021 . -2) (undo-tree-id1022 . -2) (undo-tree-id1023 . -2) (undo-tree-id1024 . -2) (undo-tree-id1025 . -2) (undo-tree-id1026 . -2) (undo-tree-id1027 . -2) (undo-tree-id1028 . -2) (undo-tree-id1029 . -2) (undo-tree-id1030 . -2) (undo-tree-id1031 . -2) (undo-tree-id1032 . -2) (undo-tree-id1033 . -2) (#("  " 0 2 (fontified t)) . 5473) (#(" " 0 1 (fontified nil)) . 5402) (undo-tree-id1034 . -1) (undo-tree-id1035 . -1) (#("   " 0 3 (fontified t)) . 5394) (#(" " 0 1 (fontified nil)) . 5390) (#("   " 0 3 (fontified t)) . 5382) (#("    " 0 4 (fontified t)) . 5311) (#("    " 0 4 (fontified t)) . 5268) (#("   " 0 3 (fontified nil)) . 5198) (#(" " 0 1 (fontified t)) . 5186) (#("  " 0 2 (fontified nil)) . 5143) (#("  " 0 2 (fontified t)) . 5135) (#("
        " 0 9 (fontified t)) . 5133)) (25826 5985 661014 844000) 0 nil])
([nil nil ((5657 . 5658) (5646 . 5657) (#("trans" 0 5 (fontified t)) . -5646) (undo-tree-id1090 . -1) (undo-tree-id1091 . -1) (undo-tree-id1092 . -2) (undo-tree-id1093 . -2) (undo-tree-id1094 . -3) (undo-tree-id1095 . -3) (undo-tree-id1096 . -4) (undo-tree-id1097 . -4) (undo-tree-id1098 . -5) (undo-tree-id1099 . -5) (undo-tree-id1100 . -5) (undo-tree-id1101 . -5) (undo-tree-id1102 . -5) (undo-tree-id1103 . -5) (undo-tree-id1104 . -5) (undo-tree-id1105 . -5) 5651 (5645 . 5651) (5639 . 5645) (5626 . 5639) (5620 . 5626) (5619 . 5620)) nil (25826 6479 434763 40000) 0 nil])
([nil nil ((#(".insert(Sensor)" 0 1 (fontified t) 1 8 (fontified t) 8 14 (face font-lock-type-face fontified t) 14 15 (fontified t)) . 5528) (undo-tree-id862 . -14) (undo-tree-id863 . -4) (undo-tree-id864 . -4) (undo-tree-id865 . -14) (undo-tree-id866 . -14) (undo-tree-id867 . -14) (undo-tree-id868 . -14) (undo-tree-id869 . -14) (undo-tree-id870 . -14) (undo-tree-id871 . -14) (undo-tree-id872 . -14) (t 25826 5896 495509 281000)) ((5528 . 5543)) (25826 5982 603219 310000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5662 . 5663) (#("
" 0 1 (fontified nil face font-lock-comment-face)) . -5863) (5658 . 5864) 5657) nil (25826 6479 434754 594000) 0 nil])
([nil nil ((5516 . 5517) (5505 . 5516) (#("n" 0 1 (fontified t)) . -5505) (undo-tree-id923 . -1) (undo-tree-id924 . -1) (undo-tree-id925 . -1) (undo-tree-id926 . -1) 5506 (5504 . 5506)) ((#(".n" 0 1 (fontified nil) 1 2 (fontified nil)) . 5504) (undo-tree-id927 . -2) (undo-tree-id928 . -2) (undo-tree-id929 . -1) (undo-tree-id930 . -1) (undo-tree-id931 . -1) (undo-tree-id932 . -1) (undo-tree-id933 . -1) (undo-tree-id934 . -1) (undo-tree-id935 . -1) (undo-tree-id936 . -1) (undo-tree-id937 . -1) (undo-tree-id938 . -1) (undo-tree-id939 . -1) (undo-tree-id940 . -1) (undo-tree-id941 . -1) (undo-tree-id942 . -1) (undo-tree-id943 . -1) (undo-tree-id944 . -1) (undo-tree-id945 . -1) (undo-tree-id946 . -1) (undo-tree-id947 . -1) (undo-tree-id948 . -1) (undo-tree-id949 . -1) (undo-tree-id950 . -1) (undo-tree-id951 . -1) (undo-tree-id952 . -1) (undo-tree-id953 . -1) (undo-tree-id954 . -1) (undo-tree-id955 . -1) (undo-tree-id956 . -1) (undo-tree-id957 . -1) (undo-tree-id958 . -2) (undo-tree-id959 . -1) (undo-tree-id960 . -1) (5505 . 5506) (#("sensor(true" 0 7 (fontified nil) 7 11 (face font-lock-keyword-face fontified nil)) . 5505) (undo-tree-id961 . -11) (undo-tree-id962 . -11) (undo-tree-id963 . -11) (undo-tree-id964 . -11) (undo-tree-id965 . -11) (undo-tree-id966 . -11) (undo-tree-id967 . -11) (undo-tree-id968 . -11) (undo-tree-id969 . -11) (undo-tree-id970 . -11) (undo-tree-id971 . -11) (undo-tree-id972 . -11) (undo-tree-id973 . -11) (undo-tree-id974 . -11) (undo-tree-id975 . -11) (undo-tree-id976 . -11) (undo-tree-id977 . -11) (undo-tree-id978 . -11) (undo-tree-id979 . -11) (undo-tree-id980 . -11) (undo-tree-id981 . -11) (undo-tree-id982 . -11) (undo-tree-id983 . -11) (undo-tree-id984 . -11) (undo-tree-id985 . -11) (undo-tree-id986 . -11) (undo-tree-id987 . -11) (undo-tree-id988 . -11) (undo-tree-id989 . -11) (undo-tree-id990 . -11) (undo-tree-id991 . -11) (undo-tree-id992 . -11) (#(")" 0 1 (fontified t)) . 5516)) (25826 5982 18623 989000) 0 nil] [nil nil ((nil rear-nonsticky nil 5518 . 5519) (nil fontified nil 5504 . 5519) (5504 . 5519) 5503) ((#(".insert(Sensor)" 0 8 (fontified nil) 8 14 (face font-lock-type-face fontified nil) 14 15 (fontified nil rear-nonsticky nil)) . 5504) (undo-tree-id874 . -14) (nil rear-nonsticky t 5518 . 5519)) (25826 5943 520993 627000) 0 nil])
([nil nil ((apply 9 5659 5855 undo--wrap-and-run-primitive-undo 5659 5855 ((#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -5776) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -5745) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -5663) 5864))) nil (25826 6479 434753 883000) 0 nil])
([nil nil ((#("
        " 0 9 (fontified t)) . 5133) (#("  " 0 2 (fontified t)) . 5144) (#("  " 0 2 (fontified t)) . 5154) (#(" " 0 1 (fontified t)) . 5199) (#("   " 0 3 (fontified t)) . 5212) (#("    " 0 4 (fontified t)) . 5285) (#("    " 0 4 (fontified t)) . 5332) (#("   " 0 3 (fontified t)) . 5407) (#(" " 0 1 (fontified t)) . 5418) (#("   " 0 3 (fontified t)) . 5423) (#(" " 0 1 (fontified t)) . 5434) (undo-tree-id875 . -1) (undo-tree-id876 . -1) (#("  " 0 2 (fontified t)) . 5519) (#("  " 0 2 (fontified t)) . 5525) (undo-tree-id877 . -2) (undo-tree-id878 . -2) (undo-tree-id879 . -2) (undo-tree-id880 . -2) (undo-tree-id881 . -2) (undo-tree-id882 . -2) (undo-tree-id883 . -2) (undo-tree-id884 . -2) (undo-tree-id885 . -2) (undo-tree-id886 . -2) (undo-tree-id887 . -2) (undo-tree-id888 . -2) (undo-tree-id889 . -2) (undo-tree-id890 . -2) (undo-tree-id891 . -2) (undo-tree-id892 . -2) (undo-tree-id893 . -2) (undo-tree-id894 . -2) (undo-tree-id895 . -2) (undo-tree-id896 . -2) (undo-tree-id897 . -2) (undo-tree-id898 . -2) (undo-tree-id899 . -2) (undo-tree-id900 . -2) (undo-tree-id901 . -2) (undo-tree-id902 . -2) (undo-tree-id903 . -2) (undo-tree-id904 . -2) (#("
            ,
    " 0 1 (fontified t) 1 13 (fontified t) 13 15 (fontified t) 15 19 (fontified t)) . 5528) (undo-tree-id905 . -13) (undo-tree-id906 . -13) (undo-tree-id907 . -13) (undo-tree-id908 . -13) (undo-tree-id909 . -13) (undo-tree-id910 . -13) (undo-tree-id911 . -13) (undo-tree-id912 . -13) (undo-tree-id913 . -13) (undo-tree-id914 . -13) (undo-tree-id915 . -9) (undo-tree-id916 . -9) (undo-tree-id917 . -13) (undo-tree-id918 . -13) (undo-tree-id919 . -13) (undo-tree-id920 . -13) (undo-tree-id921 . -13) (undo-tree-id922 . -13) 5516) ((5528 . 5547) (5525 . 5527) (5519 . 5521) (5434 . 5435) (5423 . 5426) (5418 . 5419) (5407 . 5410) (5332 . 5336) (5285 . 5289) (5212 . 5215) (5199 . 5200) (5154 . 5156) (5144 . 5146) (5133 . 5142) (t 25826 5954 832176 896000)) (25826 5954 828291 575000) 0 nil])
([nil nil ((#("
        " 0 9 (fontified t)) . 5133) (#("  " 0 2 (fontified t)) . 5144) (#("  " 0 2 (fontified t)) . 5154) (#(" " 0 1 (fontified t)) . 5199) (#("   " 0 3 (fontified t)) . 5212) (#("    " 0 4 (fontified t)) . 5285) (#("    " 0 4 (fontified t)) . 5332) (#("   " 0 3 (fontified t)) . 5407) (#(" " 0 1 (fontified t)) . 5418) (#("   " 0 3 (fontified t)) . 5423) (#(" " 0 1 (fontified t)) . 5434) (undo-tree-id811 . -1) (undo-tree-id812 . -1) (#("  " 0 2 (fontified t)) . 5521) (#("  " 0 2 (fontified t)) . -5527) (undo-tree-id813 . -2) (undo-tree-id814 . -2) (undo-tree-id815 . -2) (undo-tree-id816 . -2) (undo-tree-id817 . -2) (undo-tree-id818 . -2) (undo-tree-id819 . -2) (undo-tree-id820 . -2) (undo-tree-id821 . -2) (undo-tree-id822 . -2) (undo-tree-id823 . -2) (undo-tree-id824 . -2) (undo-tree-id825 . -2) (undo-tree-id826 . -2) (undo-tree-id827 . -2) (undo-tree-id828 . -2) (undo-tree-id829 . -2) (undo-tree-id830 . -2) (undo-tree-id831 . -2) (undo-tree-id832 . -2) (undo-tree-id833 . -2) (undo-tree-id834 . -2) (undo-tree-id835 . -2) (undo-tree-id836 . -2) (undo-tree-id837 . -2) (undo-tree-id838 . -2) (undo-tree-id839 . -2) (undo-tree-id840 . -2) (undo-tree-id841 . -2) (undo-tree-id842 . -2) (undo-tree-id843 . -2) (#("
            ,
    " 0 1 (fontified t) 1 13 (fontified t) 13 15 (fontified t) 15 19 (fontified t)) . 5530) (undo-tree-id844 . -13) (undo-tree-id845 . -13) (undo-tree-id846 . -13) (undo-tree-id847 . -13) (undo-tree-id848 . -13) (undo-tree-id849 . -13) (undo-tree-id850 . -13) (undo-tree-id851 . -13) (undo-tree-id852 . -13) (undo-tree-id853 . -13) (undo-tree-id854 . -9) (undo-tree-id855 . -9) (undo-tree-id856 . -13) (undo-tree-id857 . -13) (undo-tree-id858 . -13) (undo-tree-id859 . -13) (undo-tree-id860 . -13) (undo-tree-id861 . -13) 5529) ((5530 . 5549) (5527 . 5529) (5521 . 5523) (5434 . 5435) (5423 . 5426) (5418 . 5419) (5407 . 5410) (5332 . 5336) (5285 . 5289) (5212 . 5215) (5199 . 5200) (5154 . 5156) (5144 . 5146) (5133 . 5142) (t 25826 5917 545509 622000)) (25826 5917 542505 527000) 0 nil])
([nil nil ((5854 . 5855)) nil (25826 6479 434753 231000) 0 nil])
nil
nil
([nil nil ((#("," 0 1 (fontified t)) . 5853) (undo-tree-id1082 . -1) (undo-tree-id1083 . -1) (undo-tree-id1084 . -1) (undo-tree-id1085 . -1) (undo-tree-id1086 . -1) (undo-tree-id1087 . -1) (undo-tree-id1088 . -1) (undo-tree-id1089 . -1)) nil (25826 6479 434752 460000) 0 nil])
([nil nil ((5863 . 5869) (#("i" 0 1 (fontified t)) . -5863) (undo-tree-id1080 . -1) (undo-tree-id1081 . -1) (5861 . 5864) (5860 . 5861) (5854 . 5860) 5853) nil (25826 6479 434747 721000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . 5868) (undo-tree-id1076 . -1) (undo-tree-id1077 . -1) (undo-tree-id1078 . -1) (undo-tree-id1079 . -1)) nil (25826 6479 434745 557000) 0 nil])
([nil nil ((5869 . 5870) (5868 . 5869)) nil (25826 6479 434736 330000) 0 nil])
([nil nil ((5544 . 5553) (5621 . 5629) (#("		" 0 2 (fontified t)) . 5621) (5626 . 5627) (5640 . 5646) (#("		" 0 2 (fontified t)) . 5640) (5645 . 5648) (5659 . 5661) (5671 . 5673) (5741 . 5743) (5753 . 5755) (5772 . 5775) (5784 . 5785) (5853 . 5867) (5855 . 5861) (#("		" 0 2 (fontified t)) . 5855) (5860 . 5863) (5868 . 5874) 5869) nil (25826 6479 434731 951000) 0 nil])
([nil nil ((42 . 43) (t 25826 6479 438852 752000)) nil (25826 6528 438381 68000) 0 nil])
([nil nil ((65 . 71) (#("i" 0 1 (face font-lock-type-face fontified t)) . -65) (undo-tree-id1119 . -1) (undo-tree-id1120 . -1) (59 . 66) (#("i" 0 1 (face font-lock-type-face fontified t)) . -59) (undo-tree-id1121 . -1) (53 . 60)) nil (25826 6528 438378 123000) 0 nil])
([nil nil ((60 . 65) (#("i" 0 1 (fontified t)) . -60) (undo-tree-id1124 . -1) (55 . 61) (t 25826 6528 442186 932000)) nil (25826 6538 813684 884000) 0 nil])
([nil nil ((#("prelude::*, " 0 7 (face font-lock-constant-face fontified t) 7 12 (fontified t)) . 43) (undo-tree-id1122 . -12) (undo-tree-id1123 . -12) (80 . 92) 64) nil (25826 6538 813680 656000) 0 nil])
([nil nil ((43 . 51) (#("dynamics" 0 8 (face font-lock-constant-face fontified t)) . 43) (undo-tree-id1125 . -7) (undo-tree-id1126 . -8) (undo-tree-id1127 . -8) (t 25826 6538 815520 454000)) nil (25826 6559 409377 458000) 0 nil])
([nil nil ((#("{geometry::ColliderBuilder, " 0 1 (fontified t) 1 9 (face font-lock-constant-face fontified t) 9 11 (fontified t) 11 26 (face font-lock-type-face fontified t) 26 28 (fontified t)) . 42) (undo-tree-id1131 . 19) (undo-tree-id1132 . -27) (undo-tree-id1133 . -8) (undo-tree-id1134 . -8) (undo-tree-id1135 . -8) (undo-tree-id1136 . -8) (undo-tree-id1137 . -8) (undo-tree-id1138 . -8) (undo-tree-id1139 . -8) (undo-tree-id1140 . -8) (undo-tree-id1141 . -8) (undo-tree-id1142 . -28) (t 25826 6559 408854 140000)) nil (25826 6744 588350 381000) 0 nil])
([nil nil ((#("}" 0 1 (fontified t)) . 52) (undo-tree-id1129 . -1) (undo-tree-id1130 . -1)) nil (25826 6744 588343 798000) 0 nil])
([nil nil ((apply -30 5525 5964 undo--wrap-and-run-primitive-undo 5525 5964 ((5957 . 5960) (5932 . 5935) (5915 . 5918) (5825 . 5828) (5787 . 5790) (5698 . 5701) (5669 . 5672) (5640 . 5643) (5552 . 5555) (5529 . 5532) 5933))) nil (25826 6744 588341 755000) 0 nil])
([nil nil ((apply 27 5114 5497 undo--wrap-and-run-primitive-undo 5114 5497 ((#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -5493) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -5414) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -5402) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -5319) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -5288) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -5206) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -5155) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -5139) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -5118) 5114))) nil (25826 6744 588340 823000) 0 nil])
([nil nil ((5166 . 5168) (5164 . 5166) (5151 . 5164) (#("i" 0 1 (fontified t)) . -5151) (undo-tree-id1128 . -1) (5143 . 5152)) nil (25826 6845 99964 25000) 0 nil])
([nil nil ((apply -27 5114 5550 undo--wrap-and-run-primitive-undo 5114 5550 ((5542 . 5545) (5460 . 5463) (5445 . 5448) (5359 . 5362) (5325 . 5328) (5240 . 5243) (5186 . 5189) (5142 . 5145) (5118 . 5121) 5522))) nil (25826 7097 98785 765000) 0 nil] [nil nil ((5521 . 5529) (#("i" 0 1 (fontified t)) . -5521) (undo-tree-id1191 . -1) (5520 . 5522) (t 25826 6744 592190 623000)) ((#(".i" 0 1 (fontified nil) 1 2 (fontified nil)) . 5520) (undo-tree-id1192 . -1) (undo-tree-id1193 . -1) (5521 . 5522) (#("insert()" 0 7 (fontified t) 7 8 (fontified t)) . 5521) (undo-tree-id1194 . -7) (undo-tree-id1195 . -7)) (25826 6844 235919 685000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5552 . 5553) (#("
" 0 1 (fontified nil face font-lock-comment-face)) . -5983) (5548 . 5984) 5538) nil (25826 7097 98785 94000) 0 nil])
([nil nil ((#("bevy_rapier3d::geometry::Sensor" 0 13 (face font-lock-constant-face fontified t) 13 15 (fontified t) 15 23 (face font-lock-constant-face fontified t) 23 25 (fontified t) 25 31 (face font-lock-type-face fontified t)) . 5143) (undo-tree-id1172 . -30) (undo-tree-id1173 . -24) (undo-tree-id1174 . -24) (undo-tree-id1175 . -24) (undo-tree-id1176 . -24) (undo-tree-id1177 . -24) (undo-tree-id1178 . -24) (undo-tree-id1179 . -24) (undo-tree-id1180 . -24) (undo-tree-id1181 . -24) (undo-tree-id1182 . -24) (undo-tree-id1183 . -24) (undo-tree-id1184 . -24) (undo-tree-id1185 . -24) (undo-tree-id1186 . -24) (undo-tree-id1187 . -6) (undo-tree-id1188 . -6) (undo-tree-id1189 . -24) (undo-tree-id1190 . -31)) ((5143 . 5174)) (25826 6843 811927 77000) 0 nil])
([nil nil ((apply 27 5549 5957 undo--wrap-and-run-primitive-undo 5549 5957 ((#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -5953) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -5874) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -5862) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -5779) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -5748) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -5666) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -5615) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -5574) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -5553) 5984))) nil (25826 7097 98784 302000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5527 . 5528) (nil fontified nil 5497 . 5528) (5497 . 5528) 5496) ((#("bevy_rapier3d::geometry::Sensor" 0 13 (face font-lock-constant-face fontified nil) 13 15 (fontified nil) 15 23 (face font-lock-constant-face fontified nil) 23 25 (fontified nil) 25 30 (face font-lock-type-face fontified nil) 30 31 (face font-lock-type-face fontified nil rear-nonsticky nil)) . 5497) (nil rear-nonsticky t 5527 . 5528)) (25826 6843 318925 957000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t)) . 5954) (undo-tree-id1681 . -1) (undo-tree-id1682 . -1)) nil (25826 7097 98783 681000) 0 nil])
([nil nil ((#("        ,
" 0 3 (fontified t) 3 4 (fontified t) 4 7 (fontified t) 7 8 (fontified t rear-nonsticky t) 8 9 (fontified t) 9 10 (fontified t)) . 5135) (undo-tree-id1143 . -9) (undo-tree-id1144 . -8) (undo-tree-id1145 . -8) (undo-tree-id1146 . -8) (undo-tree-id1147 . -8) (undo-tree-id1148 . -8) (undo-tree-id1149 . -8) (undo-tree-id1150 . -8) (undo-tree-id1151 . -8) (undo-tree-id1152 . -8) (undo-tree-id1153 . -8) (undo-tree-id1154 . -8) (undo-tree-id1155 . -8) (undo-tree-id1156 . -8) (undo-tree-id1157 . -8) (undo-tree-id1158 . -8) (undo-tree-id1159 . -8) (undo-tree-id1160 . -8) (undo-tree-id1161 . -8) (undo-tree-id1162 . -8) (undo-tree-id1163 . -8) (undo-tree-id1164 . -8) (undo-tree-id1165 . -8) (undo-tree-id1166 . -8) (undo-tree-id1167 . -8) (undo-tree-id1168 . -8) (undo-tree-id1169 . -8) (undo-tree-id1170 . -8) (undo-tree-id1171 . -10) 5143) ((5135 . 5145)) (25826 6843 126267 357000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t)) . 5568) (undo-tree-id1679 . -1) (undo-tree-id1680 . -1)) nil (25826 7097 98782 138000) 0 nil])
([nil nil ((5126 . 5135) (5135 . 5138) (5143 . 5144) (5186 . 5188) (5198 . 5200) (5268 . 5269) (5280 . 5283) (5299 . 5301) (5311 . 5313) (5382 . 5386) (5402 . 5406) (5473 . 5475) (5477 . 5479) (5479 . 5488) 5143) ((#("
        " 0 1 (fontified nil) 1 9 (fontified t)) . 5479) (#("  " 0 2 (fontified nil)) . 5477) (#("  " 0 2 (fontified t)) . 5473) (#("    " 0 4 (fontified t)) . 5402) (#("    " 0 4 (fontified t)) . 5382) (#("  " 0 2 (fontified nil)) . 5311) (#("  " 0 2 (fontified t)) . 5299) (#("   " 0 3 (fontified nil)) . 5280) (#(" " 0 1 (fontified t)) . 5268) (#("  " 0 2 (fontified nil)) . 5198) (#("  " 0 2 (fontified t)) . 5186) (#(" " 0 1 (fontified nil)) . 5143) (#("   " 0 3 (fontified t)) . 5135) (#("
        " 0 9 (fontified t)) . 5126) (t 25826 6832 835525 469000)) (25826 6832 832169 18000) 0 nil])
([nil nil ((5954 . 5962) (#("i" 0 1 (fontified t)) . -5954) (undo-tree-id1678 . -1) (5953 . 5955)) nil (25826 7097 98780 495000) 0 nil])
nil
([nil nil ((#("bevy_rapier3d::geometry::Sensor" 0 13 (face font-lock-constant-face fontified t) 13 15 (fontified t) 15 23 (face font-lock-constant-face fontified t) 23 25 (fontified t) 25 31 (face font-lock-type-face fontified t)) . 5577) (undo-tree-id1672 . -30) (undo-tree-id1673 . -10) (undo-tree-id1674 . -10) (undo-tree-id1675 . -5) (undo-tree-id1676 . -5) (undo-tree-id1677 . -31)) nil (25826 7097 98778 882000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5960 . 5961) (nil fontified nil 5930 . 5961) (5930 . 5961) 5929) nil (25826 7097 98776 518000) 0 nil])
([nil nil ((5965 . 5973) (#("i" 0 1 (fontified t)) . -5965) (undo-tree-id1671 . -1) (5964 . 5966) (5962 . 5964)) nil (25826 7097 98775 806000) 0 nil])
([nil nil ((#("        TransformBundle::from(Transform::from_xyz(
            (grid.width - 1) as f32 * (room_size + wall_width) + room_size / 2.0,
            wall_height / 2.0,
            (grid.height - 1) as f32 * (room_size + wall_width) + room_size / 2.0,
        )),
" 0 4 (fontified t) 4 8 (fontified t) 8 23 (face font-lock-type-face fontified t) 23 30 (fontified t) 30 39 (face font-lock-type-face fontified t) 39 41 (fontified t) 41 50 (fontified t) 50 51 (fontified t) 51 55 (fontified t) 55 59 (fontified t) 59 62 (fontified t) 62 63 (fontified t rear-nonsticky t) 63 79 (fontified t) 79 80 (fontified t) 80 82 (face font-lock-keyword-face fontified t) 82 83 (fontified t) 83 86 (face font-lock-type-face fontified t) 86 133 (fontified t) 133 137 (fontified t) 137 140 (fontified t) 140 144 (fontified t) 144 145 (fontified t) 145 164 (fontified t) 164 168 (fontified t) 168 172 (fontified t) 172 176 (fontified t) 176 193 (fontified t) 193 194 (fontified t) 194 196 (face font-lock-keyword-face fontified t) 196 197 (fontified t) 197 200 (face font-lock-type-face fontified t) 200 247 (fontified t) 247 251 (fontified t) 251 255 (fontified t) 255 258 (fontified t) 258 259 (fontified t)) . 5579) (undo-tree-id1549 . -258) (undo-tree-id1550 . -258) (undo-tree-id1551 . -16) (undo-tree-id1552 . -258) (undo-tree-id1553 . -4) (undo-tree-id1554 . -4) (undo-tree-id1555 . -55) (undo-tree-id1556 . -55) (undo-tree-id1557 . -137) (undo-tree-id1558 . -137) (undo-tree-id1559 . -168) (undo-tree-id1560 . -168) (undo-tree-id1561 . -251) (undo-tree-id1562 . -251) (undo-tree-id1563 . -251) (undo-tree-id1564 . -251) (undo-tree-id1565 . -168) (undo-tree-id1566 . -168) (undo-tree-id1567 . -137) (undo-tree-id1568 . -137) (undo-tree-id1569 . -55) (undo-tree-id1570 . -55) (undo-tree-id1571 . -4) (undo-tree-id1572 . -4) (undo-tree-id1573 . -4) (undo-tree-id1574 . -4) (undo-tree-id1575 . -55) (undo-tree-id1576 . -55) (undo-tree-id1577 . -137) (undo-tree-id1578 . -137) (undo-tree-id1579 . -168) (undo-tree-id1580 . -168) (undo-tree-id1581 . -251) (undo-tree-id1582 . -251) (undo-tree-id1583 . -252) (undo-tree-id1584 . -252) (undo-tree-id1585 . -169) (undo-tree-id1586 . -169) (undo-tree-id1587 . -138) (undo-tree-id1588 . -138) (undo-tree-id1589 . -138) (undo-tree-id1590 . -138) (undo-tree-id1591 . -56) (undo-tree-id1592 . -56) (undo-tree-id1593 . -5) (undo-tree-id1594 . -5) (undo-tree-id1595 . -18) (undo-tree-id1596 . -18) (undo-tree-id1597 . -69) (undo-tree-id1598 . -69) (undo-tree-id1599 . -151) (undo-tree-id1600 . -151) (undo-tree-id1601 . -182) (undo-tree-id1602 . -182) (undo-tree-id1603 . -257) (undo-tree-id1604 . -257) (undo-tree-id1605 . -257) (undo-tree-id1606 . -257) (undo-tree-id1607 . -177) (undo-tree-id1608 . -177) (undo-tree-id1609 . -146) (undo-tree-id1610 . -146) (undo-tree-id1611 . -64) (undo-tree-id1612 . -64) (undo-tree-id1613 . -13) (undo-tree-id1614 . -13) (undo-tree-id1615 . -8) (undo-tree-id1616 . -8) (undo-tree-id1617 . -59) (undo-tree-id1618 . -59) (undo-tree-id1619 . -141) (undo-tree-id1620 . -141) (undo-tree-id1621 . -172) (undo-tree-id1622 . -172) (undo-tree-id1623 . -172) (undo-tree-id1624 . -172) (undo-tree-id1625 . -255) (undo-tree-id1626 . -255) (undo-tree-id1627 . -257) (undo-tree-id1628 . -257) (undo-tree-id1629 . -180) (undo-tree-id1630 . -180) (undo-tree-id1631 . -149) (undo-tree-id1632 . -149) (undo-tree-id1633 . -67) (undo-tree-id1634 . -67) (undo-tree-id1635 . -16) (undo-tree-id1636 . -16) (undo-tree-id1637 . -16) (undo-tree-id1638 . -16) (undo-tree-id1639 . -67) (undo-tree-id1640 . -67) (undo-tree-id1641 . -149) (undo-tree-id1642 . -149) (undo-tree-id1643 . -180) (undo-tree-id1644 . -180) (undo-tree-id1645 . -258) (undo-tree-id1646 . -258) (undo-tree-id1647 . -16) (undo-tree-id1648 . -16) (undo-tree-id1649 . -67) (undo-tree-id1650 . -67) (undo-tree-id1651 . -149) (undo-tree-id1652 . -149) (undo-tree-id1653 . -67) (undo-tree-id1654 . -67) (undo-tree-id1655 . -16) (undo-tree-id1656 . -16) (undo-tree-id1657 . -16) (undo-tree-id1658 . -16) (undo-tree-id1659 . -67) (undo-tree-id1660 . -67) (undo-tree-id1661 . -149) (undo-tree-id1662 . -149) (undo-tree-id1663 . -180) (undo-tree-id1664 . -180) (undo-tree-id1665 . -247) (undo-tree-id1666 . -258) (undo-tree-id1667 . -258) (undo-tree-id1668 . -258) (undo-tree-id1669 . -258) (undo-tree-id1670 . -259) 5837) nil (25826 7097 98772 270000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5723 . 5724) (#("
" 0 1 (fontified nil)) . -5974) (5715 . 5975) 5708) nil (25826 7097 98731 363000) 0 nil])
([nil nil ((#(");" 0 1 (fontified t) 1 2 (fontified t)) . 5713) (undo-tree-id1543 . 1) (undo-tree-id1544 . -1) (undo-tree-id1545 . -1) (undo-tree-id1546 . -1) (undo-tree-id1547 . -2) (undo-tree-id1548 . -2)) nil (25826 7097 98730 461000) 0 nil])
([nil nil ((5971 . 5973) (#("," 0 1 (fontified t)) . -5971) (undo-tree-id1538 . -1) (undo-tree-id1539 . -1) (undo-tree-id1540 . -1) (undo-tree-id1541 . -1) (undo-tree-id1542 . -1) 5972) nil (25826 7097 98727 265000) 0 nil])
([nil nil ((#("        ,
" 0 3 (fontified t) 3 4 (fontified t) 4 7 (fontified t) 7 8 (fontified t rear-nonsticky t) 8 9 (fontified t) 9 10 (fontified t)) . 5569) (undo-tree-id1399 . -9) (undo-tree-id1400 . -10) (undo-tree-id1401 . -10) (undo-tree-id1402 . -10) (undo-tree-id1403 . -4) (undo-tree-id1404 . -4) (undo-tree-id1405 . -10) (undo-tree-id1406 . -10) (undo-tree-id1407 . -10) (undo-tree-id1408 . -10) (undo-tree-id1409 . -10) (undo-tree-id1410 . -10) (undo-tree-id1411 . -10) (undo-tree-id1412 . -10) (undo-tree-id1413 . -10) (undo-tree-id1414 . -10) (undo-tree-id1415 . -10) (undo-tree-id1416 . -10) (undo-tree-id1417 . -10) (undo-tree-id1418 . -10) (undo-tree-id1419 . -10) (undo-tree-id1420 . -10) (undo-tree-id1421 . -10) (undo-tree-id1422 . -10) (undo-tree-id1423 . -10) (undo-tree-id1424 . -10) (undo-tree-id1425 . -4) (undo-tree-id1426 . -4) (undo-tree-id1427 . -10) (undo-tree-id1428 . -10) (undo-tree-id1429 . -10) (undo-tree-id1430 . -10) (undo-tree-id1431 . -10) (undo-tree-id1432 . -10) (undo-tree-id1433 . -10) (undo-tree-id1434 . -10) (undo-tree-id1435 . -10) (undo-tree-id1436 . -10) (undo-tree-id1437 . -10) (undo-tree-id1438 . -10) (undo-tree-id1439 . -10) (undo-tree-id1440 . -10) (undo-tree-id1441 . -10) (undo-tree-id1442 . -10) (undo-tree-id1443 . -10) (undo-tree-id1444 . -10) (undo-tree-id1445 . -10) (undo-tree-id1446 . -10) (undo-tree-id1447 . -10) (undo-tree-id1448 . -10) (undo-tree-id1449 . -5) (undo-tree-id1450 . -5) (undo-tree-id1451 . -8) (undo-tree-id1452 . -8) (undo-tree-id1453 . -10) (undo-tree-id1454 . -10) (undo-tree-id1455 . -10) (undo-tree-id1456 . -10) (undo-tree-id1457 . -10) (undo-tree-id1458 . -10) (undo-tree-id1459 . -10) (undo-tree-id1460 . -10) (undo-tree-id1461 . -10) (undo-tree-id1462 . -10) (undo-tree-id1463 . -10) (undo-tree-id1464 . -10) (undo-tree-id1465 . -10) (undo-tree-id1466 . -10) (undo-tree-id1467 . -10) (undo-tree-id1468 . -10) (undo-tree-id1469 . -10) (undo-tree-id1470 . -10) (undo-tree-id1471 . -10) (undo-tree-id1472 . -10) (undo-tree-id1473 . -8) (undo-tree-id1474 . -8) (undo-tree-id1475 . -8) (undo-tree-id1476 . -8) (undo-tree-id1477 . -8) (undo-tree-id1478 . -8) (undo-tree-id1479 . -10) (undo-tree-id1480 . -10) (undo-tree-id1481 . -10) (undo-tree-id1482 . -10) (undo-tree-id1483 . -10) (undo-tree-id1484 . -10) (undo-tree-id1485 . -10) (undo-tree-id1486 . -10) (undo-tree-id1487 . -10) (undo-tree-id1488 . -10) (undo-tree-id1489 . -10) (undo-tree-id1490 . -10) (undo-tree-id1491 . -10) (undo-tree-id1492 . -10) (undo-tree-id1493 . -10) (undo-tree-id1494 . -10) (undo-tree-id1495 . -10) (undo-tree-id1496 . -10) (undo-tree-id1497 . -10) (undo-tree-id1498 . -10) (undo-tree-id1499 . -10) (undo-tree-id1500 . -10) (undo-tree-id1501 . -10) (undo-tree-id1502 . -10) (undo-tree-id1503 . -10) (undo-tree-id1504 . -10) (undo-tree-id1505 . -10) (undo-tree-id1506 . -10) (undo-tree-id1507 . -10) (undo-tree-id1508 . -10) (undo-tree-id1509 . -10) (undo-tree-id1510 . -10) (undo-tree-id1511 . -10) (undo-tree-id1512 . -10) (undo-tree-id1513 . -10) (undo-tree-id1514 . -10) (undo-tree-id1515 . -10) (undo-tree-id1516 . -10) (undo-tree-id1517 . -10) (undo-tree-id1518 . -10) (undo-tree-id1519 . -10) (undo-tree-id1520 . -10) (undo-tree-id1521 . -10) (undo-tree-id1522 . -10) (undo-tree-id1523 . -10) (undo-tree-id1524 . -10) (undo-tree-id1525 . -10) (undo-tree-id1526 . -10) (undo-tree-id1527 . -10) (undo-tree-id1528 . -10) (undo-tree-id1529 . -10) (undo-tree-id1530 . -10) (undo-tree-id1531 . -8) (undo-tree-id1532 . -8) (undo-tree-id1533 . -8) (undo-tree-id1534 . -8) (undo-tree-id1535 . -8) (undo-tree-id1536 . -8) (undo-tree-id1537 . -10) 5577) nil (25826 7097 98617 920000) 0 nil])
([nil nil ((#("    " 0 4 (fontified nil)) . 5638) (undo-tree-id1239 . -4) (undo-tree-id1240 . -4) (undo-tree-id1241 . -4) (undo-tree-id1242 . -4) (undo-tree-id1243 . -4) (undo-tree-id1244 . -4) (#("
" 0 1 (fontified t)) . -5638) (undo-tree-id1245 . -1) (#("        " 0 4 (fontified nil) 4 5 (fontified nil) 5 6 (fontified nil) 6 8 (fontified nil)) . 5568) (undo-tree-id1246 . 8) (undo-tree-id1247 . -4) (undo-tree-id1248 . -4) (undo-tree-id1249 . -4) (undo-tree-id1250 . -4) (undo-tree-id1251 . -4) (undo-tree-id1252 . -4) (undo-tree-id1253 . -5) (undo-tree-id1254 . -5) (undo-tree-id1255 . -8) (undo-tree-id1256 . -8) (undo-tree-id1257 . -8) (undo-tree-id1258 . -8) (undo-tree-id1259 . -8) (undo-tree-id1260 . -8) (#("
" 0 1 (fontified t)) . -5568) (undo-tree-id1261 . -1) (undo-tree-id1262 . -1) (undo-tree-id1263 . -1) (undo-tree-id1264 . -1) (undo-tree-id1265 . -1) (undo-tree-id1266 . -1) (undo-tree-id1267 . -1) (undo-tree-id1268 . -1) (undo-tree-id1269 . -1) (undo-tree-id1270 . -1) (undo-tree-id1271 . -1) (undo-tree-id1272 . -1) (undo-tree-id1273 . -1) (undo-tree-id1274 . -1) (undo-tree-id1275 . -1) (undo-tree-id1276 . -1) (undo-tree-id1277 . -1) (undo-tree-id1278 . -1) (undo-tree-id1279 . -1) (undo-tree-id1280 . -1) (undo-tree-id1281 . -1) (undo-tree-id1282 . -1) (undo-tree-id1283 . -1) (undo-tree-id1284 . -1) (undo-tree-id1285 . -1) (undo-tree-id1286 . -1) (undo-tree-id1287 . -1) (undo-tree-id1288 . -1) (undo-tree-id1289 . -1) (undo-tree-id1290 . -1) (undo-tree-id1291 . -1) (undo-tree-id1292 . -1) (undo-tree-id1293 . -1) (undo-tree-id1294 . -1) (undo-tree-id1295 . -1) (undo-tree-id1296 . -1) (undo-tree-id1297 . -1) (undo-tree-id1298 . -1) (undo-tree-id1299 . -1) (undo-tree-id1300 . -1) (undo-tree-id1301 . -1) (undo-tree-id1302 . -1) (undo-tree-id1303 . -1) (undo-tree-id1304 . -1) (undo-tree-id1305 . -1) (undo-tree-id1306 . -1) (undo-tree-id1307 . -1) (undo-tree-id1308 . -1) (undo-tree-id1309 . -1) (undo-tree-id1310 . -1) (undo-tree-id1311 . -1) (undo-tree-id1312 . -1) (undo-tree-id1313 . -1) (undo-tree-id1314 . -1) (undo-tree-id1315 . -1) (undo-tree-id1316 . -1) (undo-tree-id1317 . -1) (undo-tree-id1318 . -1) (undo-tree-id1319 . -1) (undo-tree-id1320 . -1) (undo-tree-id1321 . -1) (undo-tree-id1322 . -1) (undo-tree-id1323 . -1) (undo-tree-id1324 . -1) (undo-tree-id1325 . -1) (undo-tree-id1326 . -1) (undo-tree-id1327 . -1) (undo-tree-id1328 . -1) (undo-tree-id1329 . -1) (undo-tree-id1330 . -1) (undo-tree-id1331 . -1) (undo-tree-id1332 . -1) (undo-tree-id1333 . -1) (undo-tree-id1334 . -1) (undo-tree-id1335 . -1) (undo-tree-id1336 . -1) (undo-tree-id1337 . -1) (undo-tree-id1338 . -1) (undo-tree-id1339 . -1) (undo-tree-id1340 . -1) (undo-tree-id1341 . -1) (undo-tree-id1342 . -1) (undo-tree-id1343 . -1) (undo-tree-id1344 . -1) (undo-tree-id1345 . -1) (undo-tree-id1346 . -1) (undo-tree-id1347 . -1) (undo-tree-id1348 . -1) (undo-tree-id1349 . -1) (undo-tree-id1350 . -1) (undo-tree-id1351 . -1) (undo-tree-id1352 . -1) (undo-tree-id1353 . -1) (undo-tree-id1354 . -1) (undo-tree-id1355 . -1) (undo-tree-id1356 . -1) (undo-tree-id1357 . -1) (undo-tree-id1358 . -1) (undo-tree-id1359 . -1) (undo-tree-id1360 . -1) (undo-tree-id1361 . -1) (undo-tree-id1362 . -1) (undo-tree-id1363 . -1) (undo-tree-id1364 . -1) (undo-tree-id1365 . -1) (undo-tree-id1366 . -1) (undo-tree-id1367 . -1) (undo-tree-id1368 . -1) (undo-tree-id1369 . -1) (undo-tree-id1370 . -1) (undo-tree-id1371 . -1) (undo-tree-id1372 . -1) (undo-tree-id1373 . -1) (undo-tree-id1374 . -1) (undo-tree-id1375 . -1) (undo-tree-id1376 . -1) (undo-tree-id1377 . -1) (undo-tree-id1378 . -1) (undo-tree-id1379 . -1) (undo-tree-id1380 . -1) (undo-tree-id1381 . -1) (undo-tree-id1382 . -1) (undo-tree-id1383 . -1) (undo-tree-id1384 . -1) (undo-tree-id1385 . -1) (undo-tree-id1386 . -1) (undo-tree-id1387 . -1) (undo-tree-id1388 . -1) (undo-tree-id1389 . -1) (undo-tree-id1390 . -1) (undo-tree-id1391 . -1) (undo-tree-id1392 . -1) (undo-tree-id1393 . -1) (undo-tree-id1394 . -1) (undo-tree-id1395 . -1) (undo-tree-id1396 . -1) (undo-tree-id1397 . -1) (undo-tree-id1398 . -1) 5557) nil (25826 7097 98555 222000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . 5637) (undo-tree-id1227 . -1) (undo-tree-id1228 . -1) (undo-tree-id1229 . -1) (undo-tree-id1230 . -1) (undo-tree-id1231 . -1) (undo-tree-id1232 . -1) (undo-tree-id1233 . -1) (undo-tree-id1234 . -1) (undo-tree-id1235 . -1) (undo-tree-id1236 . -1) (undo-tree-id1237 . -1) (undo-tree-id1238 . -1)) nil (25826 7097 98283 62000) 0 nil])
([nil nil ((5561 . 5570) (5585 . 5598) (5601 . 5611) (5602 . 5604) (5620 . 5628) (5621 . 5625) (5636 . 5646) (5638 . 5647) (#("
	.insert(" 0 1 (fontified t) 1 3 (fontified t) 3 10 (fontified t)) . 5678) (undo-tree-id1196 . 10) (undo-tree-id1197 . -2) (undo-tree-id1198 . -2) (undo-tree-id1199 . -5) (undo-tree-id1200 . -5) (undo-tree-id1201 . -5) (undo-tree-id1202 . -5) (undo-tree-id1203 . -6) (undo-tree-id1204 . -6) (undo-tree-id1205 . -7) (undo-tree-id1206 . -7) (undo-tree-id1207 . -8) (undo-tree-id1208 . -8) (undo-tree-id1209 . -9) (undo-tree-id1210 . -9) (undo-tree-id1211 . -10) (undo-tree-id1212 . -10) (undo-tree-id1213 . -10) (undo-tree-id1214 . -10) (undo-tree-id1215 . -10) (undo-tree-id1216 . -10) (undo-tree-id1217 . -10) (undo-tree-id1218 . -10) (undo-tree-id1219 . -5) (undo-tree-id1220 . -5) (undo-tree-id1221 . -2) (undo-tree-id1222 . -2) (undo-tree-id1223 . -9) (undo-tree-id1224 . -9) (undo-tree-id1225 . -5) (undo-tree-id1226 . -5) (5697 . 5705) 5637) nil (25826 7127 490296 110000) 0 nil])
([nil nil ((#("bevy_rapier3d::geometry::" 0 13 (face font-lock-constant-face fontified t) 13 15 (fontified t) 15 23 (face font-lock-constant-face fontified t) 23 25 (fontified t)) . 5711) (undo-tree-id1685 . -24)) nil (25826 7488 88851 537000) 0 nil] [nil nil ((apply -36 5549 6049 undo--wrap-and-run-primitive-undo 5549 6049 ((6036 . 6039) (5950 . 5953) (5916 . 5919) (5831 . 5834) (5769 . 5772) (5717 . 5720) (5703 . 5706) (5671 . 5674) (5637 . 5640) (5605 . 5608) (5569 . 5572) (5553 . 5556) 6012))) ((apply 36 5549 6013 undo--wrap-and-run-primitive-undo 5549 6013 ((#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 5553) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 5569) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 5605) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 5637) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 5671) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 5703) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 5717) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 5769) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 5831) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 5916) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 5950) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . 6036) 6044))) (25826 7114 253102 831000) 0 nil])
([nil nil ((apply 27 5114 5522 undo--wrap-and-run-primitive-undo 5114 5522 ((#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -5518) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -5439) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -5427) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -5344) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -5313) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -5231) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -5180) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -5139) (#("// " 0 3 (face font-lock-comment-delimiter-face fontified t)) . -5118) 5549))) nil (25826 7488 88850 224000) 0 nil])
nil
([nil nil ((#("bevy_rapier3d::geometry::" 0 13 (face font-lock-constant-face fontified t) 13 15 (fontified t) 15 23 (face font-lock-constant-face fontified t) 23 25 (fontified t)) . 5143) (undo-tree-id1683 . -24) (undo-tree-id1684 . -25)) nil (25826 7488 88848 601000) 0 nil])
([nil nil ((apply -36 5497 5972 undo--wrap-and-run-primitive-undo 5497 5972 ((5959 . 5962) (5873 . 5876) (5839 . 5842) (5754 . 5757) (5692 . 5695) (5665 . 5668) (5651 . 5654) (5619 . 5622) (5585 . 5588) (5553 . 5556) (5517 . 5520) (5501 . 5504) 5935))) nil (25826 7488 88835 607000) 0 nil])
([nil nil ((#("    // commands.spawn(
    //     ColliderBuilder::cuboid(room_size / 2.0, wall_height / 2.0, room_size / 2.0)
    //         .sensor(true)
    //         .translation(
    //             (grid.width - 1) as f32 * (room_size + wall_width) + room_size / 2.0,
    //             wall_height / 2.0,
    //             (grid.height - 1) as f32 * (room_size + wall_width) + room_size / 2.0,
    //         )
    //         .build(),
    // );
" 0 4 (fontified t) 4 7 (face font-lock-comment-delimiter-face fontified t) 7 22 (face font-lock-comment-face fontified t) 22 23 (face font-lock-comment-face fontified t) 23 27 (fontified t) 27 30 (face font-lock-comment-delimiter-face fontified t) 30 34 (face font-lock-comment-delimiter-face fontified t) 34 49 (face font-lock-comment-face fontified t) 49 58 (face font-lock-comment-face fontified t) 58 108 (face font-lock-comment-face fontified t) 108 109 (face font-lock-comment-face fontified t rear-nonsticky t) 109 111 (face font-lock-comment-face fontified t) 111 115 (fontified t) 115 118 (face font-lock-comment-delimiter-face fontified t) 118 122 (face font-lock-comment-delimiter-face fontified t) 122 125 (face font-lock-comment-delimiter-face fontified t) 125 126 (face font-lock-comment-delimiter-face fontified t) 126 134 (face font-lock-comment-face fontified t) 134 138 (face font-lock-comment-face fontified t) 138 140 (face font-lock-comment-face fontified t) 140 144 (fontified t) 144 147 (face font-lock-comment-delimiter-face fontified t) 147 149 (face font-lock-comment-delimiter-face fontified t) 149 152 (face font-lock-comment-delimiter-face fontified t) 152 155 (face font-lock-comment-delimiter-face fontified t) 155 156 (face font-lock-comment-face fontified t) 156 168 (face font-lock-comment-face fontified t) 168 169 (face font-lock-comment-face fontified t) 169 171 (fontified t) 171 173 (fontified t) 173 176 (face font-lock-comment-delimiter-face fontified t) 176 177 (face font-lock-comment-delimiter-face fontified t) 177 178 (face font-lock-comment-delimiter-face fontified t rear-nonsticky t) 178 182 (face font-lock-comment-delimiter-face fontified t) 182 185 (face font-lock-comment-delimiter-face fontified t) 185 186 (face font-lock-comment-delimiter-face fontified t rear-nonsticky t) 186 188 (face font-lock-comment-delimiter-face fontified t) 188 204 (face font-lock-comment-face fontified t) 204 205 (face font-lock-comment-face fontified t) 205 207 (face font-lock-comment-face fontified t) 207 208 (face font-lock-comment-face fontified t) 208 211 (face font-lock-comment-face fontified t) 211 258 (face font-lock-comment-face fontified t) 258 260 (fontified t) 260 262 (fontified t) 262 265 (face font-lock-comment-delimiter-face fontified t) 265 267 (face font-lock-comment-delimiter-face fontified t) 267 270 (face font-lock-comment-delimiter-face fontified t) 270 274 (face font-lock-comment-delimiter-face fontified t) 274 275 (face font-lock-comment-delimiter-face fontified t) 275 277 (face font-lock-comment-delimiter-face fontified t) 277 296 (face font-lock-comment-face fontified t) 296 299 (fontified t) 299 300 (fontified t) 300 303 (face font-lock-comment-delimiter-face fontified t) 303 306 (face font-lock-comment-delimiter-face fontified t) 306 310 (face font-lock-comment-delimiter-face fontified t) 310 314 (face font-lock-comment-delimiter-face fontified t) 314 315 (face font-lock-comment-delimiter-face fontified t) 315 332 (face font-lock-comment-face fontified t) 332 333 (face font-lock-comment-face fontified t) 333 335 (face font-lock-comment-face fontified t) 335 336 (face font-lock-comment-face fontified t) 336 339 (face font-lock-comment-face fontified t) 339 384 (face font-lock-comment-face fontified t) 384 386 (face font-lock-comment-face fontified t) 386 390 (fontified t) 390 393 (face font-lock-comment-delimiter-face fontified t) 393 401 (face font-lock-comment-delimiter-face fontified t) 401 402 (face font-lock-comment-face fontified t) 402 403 (face font-lock-comment-face fontified t) 403 407 (fontified t) 407 410 (face font-lock-comment-delimiter-face fontified t) 410 412 (face font-lock-comment-delimiter-face fontified t) 412 415 (face font-lock-comment-delimiter-face fontified t) 415 418 (face font-lock-comment-delimiter-face fontified t) 418 426 (face font-lock-comment-face fontified t) 426 428 (face font-lock-comment-face fontified t) 428 432 (fontified t) 432 435 (face font-lock-comment-delimiter-face fontified t) 435 437 (face font-lock-comment-face fontified t) 437 438 (face font-lock-comment-face fontified t)) . 5972) (undo-tree-id1949 . -428) (undo-tree-id1950 . -437) (undo-tree-id1951 . -428) (undo-tree-id1952 . -438) (undo-tree-id1953 . -178) (undo-tree-id1954 . -436) (undo-tree-id1955 . -34) (undo-tree-id1956 . -386) (undo-tree-id1957 . -386) (undo-tree-id1958 . -403) (undo-tree-id1959 . -403) (undo-tree-id1960 . -428) (undo-tree-id1961 . -428) (undo-tree-id1962 . -438) (undo-tree-id1963 . -438) (undo-tree-id1964 . -438) (undo-tree-id1965 . -438) (undo-tree-id1966 . -428) (undo-tree-id1967 . -428) (undo-tree-id1968 . -403) (undo-tree-id1969 . -403) (undo-tree-id1970 . -386) (undo-tree-id1971 . -386) (undo-tree-id1972 . -296) (undo-tree-id1973 . -296) (undo-tree-id1974 . -258) (undo-tree-id1975 . -258) (undo-tree-id1976 . -169) (undo-tree-id1977 . -169) (undo-tree-id1978 . -140) (undo-tree-id1979 . -140) (undo-tree-id1980 . -111) (undo-tree-id1981 . -111) (undo-tree-id1982 . -23) (undo-tree-id1983 . -23) (undo-tree-id1984 . -23) (undo-tree-id1985 . -23) (undo-tree-id1986 . -23) (undo-tree-id1987 . -23) (undo-tree-id1988 . -111) (undo-tree-id1989 . -111) (undo-tree-id1990 . -140) (undo-tree-id1991 . -140) (undo-tree-id1992 . -169) (undo-tree-id1993 . -169) (undo-tree-id1994 . -258) (undo-tree-id1995 . -258) (undo-tree-id1996 . -296) (undo-tree-id1997 . -296) (undo-tree-id1998 . -386) (undo-tree-id1999 . -386) (undo-tree-id2000 . -403) (undo-tree-id2001 . -403) (undo-tree-id2002 . -428) (undo-tree-id2003 . -428) (undo-tree-id2004 . -386) (undo-tree-id2005 . -428) (undo-tree-id2006 . -428) (undo-tree-id2007 . -428) (undo-tree-id2008 . -438) 6400 (t 25826 7488 92203 282000)) nil (25826 11136 798970 716000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 5971) (undo-tree-id1881 . -1) (undo-tree-id1882 . -1) (undo-tree-id1883 . -1) (undo-tree-id1884 . -1) (undo-tree-id1885 . -1) (undo-tree-id1886 . -1) (undo-tree-id1887 . -1) (undo-tree-id1888 . -1) (undo-tree-id1889 . -1) (undo-tree-id1890 . -1) (undo-tree-id1891 . -1) (undo-tree-id1892 . -1) (undo-tree-id1893 . -1) (undo-tree-id1894 . -1) (undo-tree-id1895 . -1) (undo-tree-id1896 . -1) (undo-tree-id1897 . -1) (undo-tree-id1898 . -1) (undo-tree-id1899 . -1) (undo-tree-id1900 . -1) (undo-tree-id1901 . -1) (undo-tree-id1902 . -1) (undo-tree-id1903 . -1) (undo-tree-id1904 . -1) (undo-tree-id1905 . -1) (undo-tree-id1906 . -1) (undo-tree-id1907 . -1) (undo-tree-id1908 . -1) (undo-tree-id1909 . -1) (undo-tree-id1910 . -1) (undo-tree-id1911 . -1) (undo-tree-id1912 . -1) (undo-tree-id1913 . -1) (undo-tree-id1914 . -1) (undo-tree-id1915 . -1) (undo-tree-id1916 . -1) (undo-tree-id1917 . -1) (undo-tree-id1918 . -1) (undo-tree-id1919 . -1) (undo-tree-id1920 . -1) (undo-tree-id1921 . -1) (undo-tree-id1922 . -1) (undo-tree-id1923 . -1) (undo-tree-id1924 . -1) (undo-tree-id1925 . -1) (undo-tree-id1926 . -1) (undo-tree-id1927 . -1) (undo-tree-id1928 . -1) (undo-tree-id1929 . -1) (undo-tree-id1930 . -1) (undo-tree-id1931 . -1) (undo-tree-id1932 . -1) (undo-tree-id1933 . -1) (undo-tree-id1934 . -1) (undo-tree-id1935 . -1) (undo-tree-id1936 . -1) (undo-tree-id1937 . -1) (undo-tree-id1938 . -1) (undo-tree-id1939 . -1) (undo-tree-id1940 . -1) (undo-tree-id1941 . -1) (undo-tree-id1942 . -1) (undo-tree-id1943 . -1) (undo-tree-id1944 . -1) (undo-tree-id1945 . -1) (undo-tree-id1946 . -1) (undo-tree-id1947 . -1) (undo-tree-id1948 . -1)) nil (25826 11136 798948 404000) 0 nil])
([nil nil ((#("    // commands
    //     .spawn(Collider::cuboid(
    //         room_size / 2.0,
    //         wall_height / 2.0,
    //         room_size / 2.0,
    //     ))
    //     .insert(Sensor)
    //     .insert(TransformBundle::from(Transform::from_xyz(
    //         (grid.width - 1) as f32 * (room_size + wall_width) + room_size / 2.0,
    //         wall_height / 2.0,
    //         (grid.height - 1) as f32 * (room_size + wall_width) + room_size / 2.0,
    //     )));
" 0 3 (fontified t) 3 4 (fontified t rear-nonsticky t) 4 7 (face font-lock-comment-delimiter-face fontified t) 7 15 (face font-lock-comment-face fontified t) 15 16 (face font-lock-comment-face fontified t) 16 20 (fontified t) 20 23 (face font-lock-comment-delimiter-face fontified t) 23 27 (face font-lock-comment-delimiter-face fontified t) 27 34 (face font-lock-comment-face fontified t) 34 42 (face font-lock-comment-face fontified t) 42 51 (face font-lock-comment-face fontified t) 51 52 (face font-lock-comment-face fontified t) 52 56 (fontified t) 56 59 (face font-lock-comment-delimiter-face fontified t) 59 67 (face font-lock-comment-delimiter-face fontified t) 67 83 (face font-lock-comment-face fontified t) 83 84 (face font-lock-comment-face fontified t) 84 88 (fontified t) 88 91 (face font-lock-comment-delimiter-face fontified t) 91 96 (face font-lock-comment-delimiter-face fontified t) 96 97 (face font-lock-comment-delimiter-face fontified t) 97 99 (face font-lock-comment-delimiter-face fontified t) 99 110 (face font-lock-comment-face fontified t) 110 117 (face font-lock-comment-face fontified t) 117 118 (face font-lock-comment-face fontified t) 118 122 (fontified t) 122 125 (face font-lock-comment-delimiter-face fontified t) 125 128 (face font-lock-comment-delimiter-face fontified t) 128 129 (face font-lock-comment-delimiter-face fontified t) 129 133 (face font-lock-comment-delimiter-face fontified t) 133 148 (face font-lock-comment-face fontified t) 148 150 (face font-lock-comment-face fontified t) 150 154 (fontified t) 154 157 (face font-lock-comment-delimiter-face fontified t) 157 161 (face font-lock-comment-delimiter-face fontified t) 161 162 (face font-lock-comment-face fontified t) 162 163 (face font-lock-comment-face fontified t) 163 164 (face font-lock-comment-face fontified t) 164 168 (fontified t) 168 171 (face font-lock-comment-delimiter-face fontified t) 171 175 (face font-lock-comment-delimiter-face fontified t) 175 176 (face font-lock-comment-face fontified t) 176 183 (face font-lock-comment-face fontified t) 183 188 (face font-lock-comment-face fontified t) 188 189 (face font-lock-comment-face fontified t rear-nonsticky t) 189 190 (face font-lock-comment-face fontified t) 190 191 (face font-lock-comment-face fontified t) 191 195 (fontified t) 195 198 (face font-lock-comment-delimiter-face fontified t) 198 201 (face font-lock-comment-delimiter-face fontified t) 201 202 (face font-lock-comment-delimiter-face fontified t rear-nonsticky t) 202 210 (face font-lock-comment-face fontified t) 210 225 (face font-lock-comment-face fontified t) 225 232 (face font-lock-comment-face fontified t) 232 241 (face font-lock-comment-face fontified t) 241 243 (face font-lock-comment-face fontified t) 243 252 (face font-lock-comment-face fontified t) 252 253 (face font-lock-comment-face fontified t) 253 257 (fontified t) 257 260 (face font-lock-comment-delimiter-face fontified t) 260 264 (face font-lock-comment-delimiter-face fontified t) 264 267 (face font-lock-comment-delimiter-face fontified t) 267 268 (face font-lock-comment-delimiter-face fontified t rear-nonsticky t) 268 284 (face font-lock-comment-face fontified t) 284 285 (face font-lock-comment-face fontified t) 285 287 (face font-lock-comment-face fontified t) 287 288 (face font-lock-comment-face fontified t) 288 291 (face font-lock-comment-face fontified t) 291 338 (face font-lock-comment-face fontified t) 338 342 (fontified t) 342 345 (face font-lock-comment-delimiter-face fontified t) 345 348 (face font-lock-comment-delimiter-face fontified t) 348 352 (face font-lock-comment-delimiter-face fontified t) 352 353 (face font-lock-comment-delimiter-face fontified t) 353 372 (face font-lock-comment-face fontified t) 372 376 (fontified t) 376 379 (face font-lock-comment-delimiter-face fontified t) 379 383 (face font-lock-comment-delimiter-face fontified t) 383 387 (face font-lock-comment-delimiter-face fontified t) 387 404 (face font-lock-comment-face fontified t) 404 405 (face font-lock-comment-face fontified t) 405 407 (face font-lock-comment-face fontified t) 407 408 (face font-lock-comment-face fontified t) 408 411 (face font-lock-comment-face fontified t) 411 458 (face font-lock-comment-face fontified t) 458 462 (fontified t) 462 465 (face font-lock-comment-delimiter-face fontified t) 465 469 (face font-lock-comment-delimiter-face fontified t) 469 473 (face font-lock-comment-face fontified t) 473 474 (face font-lock-comment-face fontified t)) . 5497) (undo-tree-id1702 . -458) (undo-tree-id1703 . 1) (undo-tree-id1704 . -473) (undo-tree-id1705 . -458) (undo-tree-id1706 . -474) (undo-tree-id1707 . -474) (undo-tree-id1708 . -474) (undo-tree-id1709 . -474) (undo-tree-id1710 . -4) (undo-tree-id1711 . -183) (undo-tree-id1712 . -474) (undo-tree-id1713 . -474) (undo-tree-id1714 . -474) (undo-tree-id1715 . -474) (undo-tree-id1716 . -474) (undo-tree-id1717 . -474) (undo-tree-id1718 . -474) (undo-tree-id1719 . -474) (undo-tree-id1720 . -474) (undo-tree-id1721 . -474) (undo-tree-id1722 . -474) (undo-tree-id1723 . -474) (undo-tree-id1724 . -474) (undo-tree-id1725 . -474) (undo-tree-id1726 . -474) (undo-tree-id1727 . -474) (undo-tree-id1728 . -474) (undo-tree-id1729 . -474) (undo-tree-id1730 . -474) (undo-tree-id1731 . -474) (undo-tree-id1732 . -474) (undo-tree-id1733 . -474) (undo-tree-id1734 . -474) (undo-tree-id1735 . -474) (undo-tree-id1736 . -474) (undo-tree-id1737 . -474) (undo-tree-id1738 . -474) (undo-tree-id1739 . -474) (undo-tree-id1740 . -474) (undo-tree-id1741 . -474) (undo-tree-id1742 . -474) (undo-tree-id1743 . -474) (undo-tree-id1744 . -458) (undo-tree-id1745 . -458) (undo-tree-id1746 . -372) (undo-tree-id1747 . -372) (undo-tree-id1748 . -338) (undo-tree-id1749 . -338) (undo-tree-id1750 . -253) (undo-tree-id1751 . -253) (undo-tree-id1752 . -191) (undo-tree-id1753 . -191) (undo-tree-id1754 . -164) (undo-tree-id1755 . -164) (undo-tree-id1756 . -150) (undo-tree-id1757 . -150) (undo-tree-id1758 . -118) (undo-tree-id1759 . -118) (undo-tree-id1760 . -84) (undo-tree-id1761 . -84) (undo-tree-id1762 . -52) (undo-tree-id1763 . -52) (undo-tree-id1764 . -16) (undo-tree-id1765 . -16) (undo-tree-id1766 . -16) (undo-tree-id1767 . -16) (undo-tree-id1768 . -52) (undo-tree-id1769 . -52) (undo-tree-id1770 . -84) (undo-tree-id1771 . -84) (undo-tree-id1772 . -118) (undo-tree-id1773 . -118) (undo-tree-id1774 . -150) (undo-tree-id1775 . -150) (undo-tree-id1776 . -164) (undo-tree-id1777 . -164) (undo-tree-id1778 . -191) (undo-tree-id1779 . -191) (undo-tree-id1780 . -253) (undo-tree-id1781 . -253) (undo-tree-id1782 . -338) (undo-tree-id1783 . -338) (undo-tree-id1784 . -372) (undo-tree-id1785 . -372) (undo-tree-id1786 . -458) (undo-tree-id1787 . -458) (undo-tree-id1788 . -474) (undo-tree-id1789 . -474) (undo-tree-id1790 . -474) (undo-tree-id1791 . -474) (undo-tree-id1792 . -474) (undo-tree-id1793 . -474) (undo-tree-id1794 . -474) (undo-tree-id1795 . -474) (undo-tree-id1796 . -474) (undo-tree-id1797 . -474) (undo-tree-id1798 . -474) (undo-tree-id1799 . -474) (undo-tree-id1800 . -474) (undo-tree-id1801 . -474) (undo-tree-id1802 . -474) (undo-tree-id1803 . -474) (undo-tree-id1804 . -474) (undo-tree-id1805 . -474) (undo-tree-id1806 . -474) (undo-tree-id1807 . -474) (undo-tree-id1808 . -474) (undo-tree-id1809 . -474) (undo-tree-id1810 . -474) (undo-tree-id1811 . -474) (undo-tree-id1812 . -474) (undo-tree-id1813 . -474) (undo-tree-id1814 . -474) (undo-tree-id1815 . -474) (undo-tree-id1816 . -474) (undo-tree-id1817 . -474) (undo-tree-id1818 . -474) (undo-tree-id1819 . -474) (undo-tree-id1820 . -474) (undo-tree-id1821 . -474) (undo-tree-id1822 . -474) (undo-tree-id1823 . -474) (undo-tree-id1824 . -474) (undo-tree-id1825 . -474) (undo-tree-id1826 . -458) (undo-tree-id1827 . -458) (undo-tree-id1828 . -372) (undo-tree-id1829 . -372) (undo-tree-id1830 . -338) (undo-tree-id1831 . -338) (undo-tree-id1832 . -338) (undo-tree-id1833 . -338) (undo-tree-id1834 . -253) (undo-tree-id1835 . -253) (undo-tree-id1836 . -191) (undo-tree-id1837 . -191) (undo-tree-id1838 . -164) (undo-tree-id1839 . -164) (undo-tree-id1840 . -150) (undo-tree-id1841 . -150) (undo-tree-id1842 . -118) (undo-tree-id1843 . -118) (undo-tree-id1844 . -84) (undo-tree-id1845 . -84) (undo-tree-id1846 . -52) (undo-tree-id1847 . -52) (undo-tree-id1848 . -16) (undo-tree-id1849 . -16) (undo-tree-id1850 . -16) (undo-tree-id1851 . -16) (undo-tree-id1852 . -52) (undo-tree-id1853 . -52) (undo-tree-id1854 . -84) (undo-tree-id1855 . -84) (undo-tree-id1856 . -118) (undo-tree-id1857 . -118) (undo-tree-id1858 . -150) (undo-tree-id1859 . -150) (undo-tree-id1860 . -164) (undo-tree-id1861 . -164) (undo-tree-id1862 . -191) (undo-tree-id1863 . -191) (undo-tree-id1864 . -253) (undo-tree-id1865 . -253) (undo-tree-id1866 . -338) (undo-tree-id1867 . -338) (undo-tree-id1868 . -372) (undo-tree-id1869 . -372) (undo-tree-id1870 . -458) (undo-tree-id1871 . -458) (undo-tree-id1872 . -474) (undo-tree-id1873 . -474) (undo-tree-id1874 . -458) (undo-tree-id1875 . -458) (undo-tree-id1876 . -474) (undo-tree-id1877 . -458) (undo-tree-id1878 . -458) (undo-tree-id1879 . -458) (undo-tree-id1880 . -474) 5955) nil (25826 11136 798909 732000) 0 nil])
([nil nil ((1574 . 1576) (#("3" 0 1 (fontified t)) . -1574) (undo-tree-id1692 . -1) (undo-tree-id1693 . -1) (#("1" 0 1 (fontified t)) . -1575) (undo-tree-id1694 . -1) (undo-tree-id1695 . -1) (#("0" 0 1 (fontified t)) . -1576) (undo-tree-id1696 . -1) (undo-tree-id1697 . -1) 1577 (1574 . 1577) (#("2" 0 1 (fontified t)) . -1574) (undo-tree-id1698 . -1) (undo-tree-id1699 . -1) (undo-tree-id1700 . -1) (undo-tree-id1701 . -1) 1575) nil (25826 11136 798708 314000) 0 nil])
([nil nil ((1578 . 1580) (#("3" 0 1 (fontified nil)) . -1578) (undo-tree-id1687 . -1) (#("1" 0 1 (fontified nil)) . -1579) (undo-tree-id1688 . -1) (#("0" 0 1 (fontified nil)) . -1580) (undo-tree-id1689 . -1) 1581 (1578 . 1581) (#("3" 0 1 (fontified t)) . -1578) (undo-tree-id1690 . -1) (undo-tree-id1691 . -1) 1579) nil (25826 11136 798700 229000) 0 nil])
([nil nil ((2960 . 2961) (#("1" 0 1 (fontified t)) . 2960) (undo-tree-id1686 . -1)) nil (25826 11136 798690 300000) 0 nil])
([nil nil ((21 . 26) (#(";
use" 0 2 (fontified t) 2 5 (face font-lock-keyword-face fontified t)) . 21) (t 25826 11136 802271 777000)) nil (25826 13700 895706 725000) 0 nil])
([nil current ((23 . 24) (#("U" 0 1 (face font-lock-type-face fontified t)) . 23) (undo-tree-id2009 . -1) (t 25826 13700 898986 349000)) nil (25826 13713 761988 367000) 0 nil])
nil
